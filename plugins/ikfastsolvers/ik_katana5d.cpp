#define IKFAST_NAMESPACE ik_katana5d
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 63 generated on 2013-07-09 02:14:58.047991
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==63);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct Atan2Value
{
    T value;
    bool valid;
};

template <typename T>
inline Atan2Value<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    Atan2Value<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((IkReal(0.139000000000000))*(x3));
x11=((IkReal(0.273000000000000))*(x0));
x12=((IkReal(0.273000000000000))*(x6));
x13=((IkReal(1.00000000000000))*(x5));
x14=((IkReal(1.00000000000000))*(x7));
x15=((IkReal(0.190000000000000))*(x1));
x16=((x0)*(x2));
x17=((x1)*(x3));
x18=((x2)*(x4));
x19=((x1)*(x4));
x20=((x2)*(x3));
eetrans[0]=((((IkReal(0.139000000000000))*(x0)*(x19)))+(((x0)*(x15)))+(((x7)*(((((x11)*(x20)))+(((x11)*(x19)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x11)*(x18)))+(((x11)*(x17)))))))+(((x10)*(x16))));
IkReal x21=((IkReal(1.00000000000000))*(x6));
IkReal x22=((IkReal(1.00000000000000))*(x12));
eetrans[1]=((((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x22)))+(((x12)*(x18)))))))+(((IkReal(-0.139000000000000))*(x19)*(x6)))+(((IkReal(-1.00000000000000))*(x10)*(x2)*(x21)))+(((x7)*(((((IkReal(-1.00000000000000))*(x19)*(x22)))+(((IkReal(-1.00000000000000))*(x20)*(x22)))))))+(((IkReal(-1.00000000000000))*(x15)*(x21))));
eetrans[2]=((IkReal(0.201500000000000))+(((x7)*(((((IkReal(-0.273000000000000))*(x17)))+(((IkReal(0.273000000000000))*(x18)))))))+(((IkReal(-1.00000000000000))*(x1)*(x10)))+(((IkReal(0.190000000000000))*(x2)))+(((IkReal(0.139000000000000))*(x18)))+(((x5)*(((((IkReal(0.273000000000000))*(x20)))+(((IkReal(0.273000000000000))*(x19))))))));
eerot[0]=((((x9)*(((((x7)*(((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((x16)*(x4)))))))+(((x5)*(((((x0)*(x19)))+(((x16)*(x3)))))))))))+(((x6)*(x8))));
eerot[1]=((((x0)*(x8)))+(((IkReal(-1.00000000000000))*(x9)*(((((x14)*(((((x18)*(x6)))+(((IkReal(-1.00000000000000))*(x17)*(x6)))))))+(((x13)*(((((x19)*(x6)))+(((x20)*(x6))))))))))));
eerot[2]=((IkReal(-1.00000000000000))*(x9)*(((((x13)*(((((IkReal(-1.00000000000000))*(x18)))+(x17)))))+(((x14)*(((x19)+(x20))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((IkReal(-1.00000000000000))*(r01));
new_py=((IkReal(-1.00000000000000))*(py));
new_r02=((IkReal(-1.00000000000000))*(r02));
new_pz=((IkReal(0.201500000000000))+(((IkReal(-1.00000000000000))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
Atan2Value<IkReal> x24 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(py)),px,IKFAST_ATAN2_MAGTHRESH);
if( !x24.valid ) {
    continue;
}
IkReal x23=x24.value;
j0array[0]=((IkReal(-1.00000000000000))*(x23));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x23))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x25=(r00)*(r00);
IkReal x26=(py)*(py);
IkReal x27=(pz)*(pz);
IkReal x28=(r01)*(r01);
IkReal x29=(pz)*(pz)*(pz);
IkReal x30=(px)*(px);
IkReal x31=(r02)*(r02);
IkReal x32=((py)*(sj0));
IkReal x33=((IkReal(9.63538693604066))*(pp));
IkReal x34=((px)*(r00));
IkReal x35=((IkReal(3.66144703569545))*(r02));
IkReal x36=((r01)*(sj0));
IkReal x37=((IkReal(19.2707738720813))*(r02));
IkReal x38=((cj0)*(px));
IkReal x39=((IkReal(3.66144703569545))*(pz));
IkReal x40=((cj0)*(r00));
IkReal x41=((IkReal(0.272883986123346))*(r02));
IkReal x42=((pp)*(pz));
IkReal x43=((py)*(r01));
IkReal x44=((IkReal(0.556443595556348))*(x31));
IkReal x45=((IkReal(19.2707738720813))*(x28));
IkReal x46=((IkReal(1.43623150591235))*(pz)*(r02));
IkReal x47=((IkReal(19.2707738720813))*(x25));
IkReal x48=((IkReal(19.2707738720813))*(x27));
IkReal x49=((x36)*(x41));
IkReal x50=((x40)*(x41));
IkReal x51=((x40)*(x43));
IkReal x52=((IkReal(0.879787910356000))*(x28)*(x32));
IkReal x53=((x40)*(x46));
IkReal x54=((x36)*(x46));
IkReal x55=((IkReal(0.879787910356000))*(x25)*(x38));
IkReal x56=((IkReal(0.879787910356000))*(x34)*(x36));
IkReal x57=((IkReal(0.879787910356000))*(x51));
IkReal x58=((x38)*(x44));
IkReal x59=((pp)*(x35)*(x36));
IkReal x60=((pp)*(x35)*(x40));
IkReal x61=((x32)*(x44));
IkReal x62=((x27)*(x35)*(x40));
IkReal x63=((x25)*(x38)*(x39));
IkReal x64=((x38)*(x47)*((px)*(px)));
IkReal x65=((x35)*(x38)*(x43));
IkReal x66=((x31)*(x38)*(x39));
IkReal x67=((x30)*(x35)*(x40));
IkReal x68=((x34)*(x36)*(x39));
IkReal x69=((x32)*(x34)*(x35));
IkReal x70=((x27)*(x35)*(x36));
IkReal x71=((x39)*(x51));
IkReal x72=((x31)*(x32)*(x33));
IkReal x73=((x29)*(x36)*(x37));
IkReal x74=((x29)*(x37)*(x40));
IkReal x75=((x31)*(x32)*(x39));
IkReal x76=((x32)*(x45)*((py)*(py)));
IkReal x77=((x26)*(x35)*(x36));
IkReal x78=((x31)*(x33)*(x38));
IkReal x79=((x28)*(x32)*(x39));
IkReal x80=((x36)*(x37)*(x42));
IkReal x81=((x28)*(x32)*(x33));
IkReal x82=((x37)*(x40)*(x42));
IkReal x83=((x33)*(x51));
IkReal x84=((x25)*(x33)*(x38));
IkReal x85=((x33)*(x34)*(x36));
IkReal x86=((x27)*(x38)*(x47));
IkReal x87=((pz)*(x26)*(x36)*(x37));
IkReal x88=((IkReal(38.5415477441626))*(x26)*(x34)*(x36));
IkReal x89=((pz)*(x32)*(x34)*(x37));
IkReal x90=((x30)*(x32)*(x47));
IkReal x91=((x34)*(x36)*(x48));
IkReal x92=((x27)*(x32)*(x45));
IkReal x93=((IkReal(38.5415477441626))*(x30)*(x51));
IkReal x94=((x48)*(x51));
IkReal x95=((pz)*(x37)*(x38)*(x43));
IkReal x96=((pz)*(x30)*(x37)*(x40));
IkReal x97=((x26)*(x38)*(x45));
IkReal x98=((x59)+(x60));
IkReal x99=((x58)+(x61)+(x82)+(x83)+(x80)+(x81)+(x84)+(x85));
IkReal x100=((x77)+(x75)+(x71)+(x70)+(x79)+(x49)+(x50)+(x62)+(x63)+(x65)+(x66)+(x67)+(x68)+(x69));
IkReal x101=((x76)+(x74)+(x73)+(x72)+(x78)+(x55)+(x54)+(x57)+(x56)+(x53)+(x52)+(x64)+(x88)+(x89)+(x86)+(x87)+(x91)+(x90)+(x93)+(x92)+(x95)+(x94)+(x97)+(x96));
op[0]=((((IkReal(9.63538693604066))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.484507825194381))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(9.63538693604066))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.366398266383651))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(9.63538693604066))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-50.7125628212666))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(25.3562814106333))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.83072351784773))*(px)*(py)*(r00)*(r01)))+(((IkReal(-6.33907035265833))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-0.850906091578033))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-6.33907035265833))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(-9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(9.63538693604066))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-9.63538693604066))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(-9.63538693604066))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(0.366398266383651))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-9.63538693604066))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-101.425125642533))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(-25.3562814106333))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(0.366398266383651))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.484507825194381))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-4.81769346802033))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.439893955178000))*(pz)*((r02)*(r02))))+(((IkReal(-6.33907035265833))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(4.81769346802033))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-0.425453045789016))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-101.425125642533))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-4.81769346802033))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-0.278221797778174))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.278221797778174))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.556443595556348))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(25.3562814106333))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.850906091578033))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.425453045789016))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(-0.278221797778174))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-0.0528497858676222))*((r02)*(r02))))+(((IkReal(-12.6781407053167))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-50.7125628212666))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(9.63538693604066))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(9.63538693604066))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(0.439893955178000))*(px)*(r00)*(r02)))+(((IkReal(-3.23059310196597))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.81769346802033))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-4.81769346802033))*(pp)*(px)*(r00)*(r02)))+(((IkReal(-0.915361758923863))*((py)*(py))*((r01)*(r01))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.15761567152105))*(pp)*((r02)*(r02))))+(((IkReal(9.63538693604066))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(19.2707738720813))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(19.2707738720813))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(19.2707738720813))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(4.81769346802033))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0153712106632144))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-50.7125628212666))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(0.0153712106632144))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.242253912597191))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0307424213264288))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(25.3562814106333))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-4.81769346802033))*(pp)*(py)*(r01)*(r02)))+(((IkReal(0.366398266383651))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-9.63538693604066))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-4.14595486088983))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-25.3562814106333))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(0.278221797778174))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.425453045789016))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-4.14595486088983))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-50.7125628212666))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(9.63538693604066))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(19.2707738720813))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-4.81769346802033))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-101.425125642533))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-50.7125628212666))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(0.278221797778174))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-4.81769346802033))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(0.278221797778174))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(9.63538693604066))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(19.2707738720813))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-0.915361758923863))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(19.2707738720813))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.242253912597191))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-0.425453045789016))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(9.63538693604066))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.439893955178000))*(py)*(r01)*(r02)))+(((IkReal(-0.484507825194381))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00)))));
op[1]=((((IkReal(-1.00000000000000))*(x100)))+(x101)+(x98)+(((IkReal(-1.00000000000000))*(x99))));
op[2]=((((IkReal(-8.29190972177966))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-6.59009753862360))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-1.83072351784773))*((py)*(py))*((r01)*(r01))))+(((IkReal(-101.425125642533))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(8.29190972177966))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-101.425125642533))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.242141564796917))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-12.6781407053167))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(4.14595486088983))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(4.14595486088983))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.850906091578033))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-202.850251285066))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(-101.425125642533))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.969015650388763))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-202.850251285066))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-101.425125642533))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(50.7125628212666))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-101.425125642533))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-101.425125642533))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-202.850251285066))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(-3.66144703569545))*(px)*(py)*(r00)*(r01)))+(((IkReal(-0.484283129593835))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.242141564796917))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(50.7125628212666))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-1.70181218315607))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(50.7125628212666))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.850906091578033))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(50.7125628212666))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-25.3562814106333))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-50.7125628212666))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-8.29190972177966))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(50.7125628212666))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-8.29190972177966))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(0.167184414388102))*((r02)*(r02))))+(((IkReal(-50.7125628212666))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-101.425125642533))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-50.7125628212666))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-8.29190972177966))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-8.29190972177966))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-1.34621569265334))*(pp)*((r02)*(r02))))+(((IkReal(-1.83072351784773))*((px)*(px))*((r00)*(r00))))+(((IkReal(-8.29190972177966))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(50.7125628212666))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-6.59009753862360))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-6.59009753862360))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.29190972177966))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(50.7125628212666))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.969015650388763))*(px)*(pz)*(r00)*(r02)))+(((IkReal(50.7125628212666))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-101.425125642533))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-101.425125642533))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-8.29190972177966))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-6.59009753862360))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-101.425125642533))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-0.850906091578033))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-101.425125642533))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-0.850906091578033))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-12.6781407053167))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(0.861707867458962))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(50.7125628212666))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.70181218315607))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-12.6781407053167))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(-101.425125642533))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01)))));
op[3]=((x100)+(x101)+(((IkReal(-1.00000000000000))*(x98)))+(((IkReal(-1.00000000000000))*(x99))));
op[4]=((((IkReal(-9.63538693604066))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(-50.7125628212666))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.484507825194381))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.366398266383651))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-19.2707738720813))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(-50.7125628212666))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(25.3562814106333))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.83072351784773))*(px)*(py)*(r00)*(r01)))+(((IkReal(-9.63538693604066))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-6.33907035265833))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-0.850906091578033))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-6.33907035265833))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(-25.3562814106333))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(0.278221797778174))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-9.63538693604066))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(0.366398266383651))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-4.81769346802033))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-101.425125642533))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(-25.3562814106333))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(0.366398266383651))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(9.63538693604066))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(-0.484507825194381))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.278221797778174))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.439893955178000))*(pz)*((r02)*(r02))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-6.33907035265833))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.425453045789016))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-19.2707738720813))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-9.63538693604066))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-101.425125642533))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-19.2707738720813))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(25.3562814106333))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.850906091578033))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.425453045789016))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-0.278221797778174))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(4.81769346802033))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-19.2707738720813))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(4.81769346802033))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-50.7125628212666))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(4.81769346802033))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-0.0528497858676222))*((r02)*(r02))))+(((IkReal(9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-12.6781407053167))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-50.7125628212666))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(9.63538693604066))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(4.81769346802033))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-0.439893955178000))*(py)*(r01)*(r02)))+(((IkReal(-19.2707738720813))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-3.23059310196597))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(9.63538693604066))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-0.915361758923863))*((py)*(py))*((r01)*(r01))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.439893955178000))*(px)*(r00)*(r02)))+(((IkReal(1.15761567152105))*(pp)*((r02)*(r02))))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-9.63538693604066))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(0.278221797778174))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-19.2707738720813))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.0153712106632144))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(9.63538693604066))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-50.7125628212666))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(0.0153712106632144))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.242253912597191))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0307424213264288))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(25.3562814106333))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(4.81769346802033))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(0.366398266383651))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-4.14595486088983))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-25.3562814106333))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.425453045789016))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-4.14595486088983))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-50.7125628212666))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-4.81769346802033))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-101.425125642533))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(9.63538693604066))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(0.556443595556348))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.278221797778174))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-9.63538693604066))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.278221797778174))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-9.63538693604066))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(9.63538693604066))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(-0.915361758923863))*((px)*(px))*((r00)*(r00))))+(((IkReal(4.81769346802033))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.242253912597191))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.425453045789016))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(4.81769346802033))*(pp)*(px)*(r00)*(r02)))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-0.484507825194381))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00)))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x102=(pz)*(pz);
IkReal x103=(py)*(py);
IkReal x104=(px)*(px);
IkReal x105=((r01)*(sj0));
IkReal x106=((IkReal(0.190000000000000))*(cj1));
IkReal x107=((pp)*(sj1));
IkReal x108=((IkReal(1.00000000000000))*(r02));
IkReal x109=((IkReal(0.380000000000000))*(pz));
IkReal x110=((IkReal(1.00000000000000))*(pz));
IkReal x111=((py)*(r01));
IkReal x112=((px)*(sj0));
IkReal x113=((cj0)*(r00));
IkReal x114=((IkReal(1.00000000000000))*(cj1));
IkReal x115=((IkReal(0.0361000000000000))*(sj1));
IkReal x116=((IkReal(2.00000000000000))*(sj1));
IkReal x117=((IkReal(0.0361000000000000))*(cj1));
IkReal x118=((IkReal(2.00000000000000))*(cj1));
IkReal x119=((py)*(r00));
IkReal x120=((IkReal(0.190000000000000))*(sj1));
IkReal x121=((cj0)*(px));
IkReal x122=((px)*(r00));
IkReal x123=((py)*(r02)*(sj0));
IkReal x124=((pz)*(x118));
IkReal x125=((r02)*(x121));
IkReal x126=((pz)*(x116));
IkReal x127=((r02)*(x102));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x112)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((sj1)*(x113)))+(((sj1)*(x105)))+(((IkReal(-1.00000000000000))*(cj1)*(x108))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x113)*(x114)))+(((IkReal(-1.00000000000000))*(x105)*(x114)))+(((IkReal(-1.00000000000000))*(sj1)*(x108))));
evalcond[5]=((((IkReal(-1.00000000000000))*(pz)*(x108)))+(((x113)*(x120)))+(((x105)*(x120)))+(((IkReal(-1.00000000000000))*(r02)*(x106)))+(((IkReal(-1.00000000000000))*(x122)))+(((IkReal(-1.00000000000000))*(x111))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x110)*(x113)))+(x125)+(x123)+(((IkReal(-1.00000000000000))*(r02)*(x120)))+(((IkReal(-1.00000000000000))*(x106)*(x113)))+(((IkReal(-1.00000000000000))*(x105)*(x110)))+(((IkReal(-1.00000000000000))*(x105)*(x106))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x104)*(x113)*(x116)))+(((r02)*(x109)))+(((IkReal(-1.00000000000000))*(x123)*(x126)))+(((x111)*(x124)))+(((r02)*(x117)))+(((IkReal(-1.00000000000000))*(x111)*(x116)*(x121)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x108)))+(((IkReal(-1.00000000000000))*(x113)*(x115)))+(((IkReal(-1.00000000000000))*(x103)*(x105)*(x116)))+(((x122)*(x124)))+(((IkReal(-1.00000000000000))*(x112)*(x116)*(x119)))+(((IkReal(-1.00000000000000))*(x125)*(x126)))+(((x105)*(x107)))+(((IkReal(-1.00000000000000))*(x105)*(x115)))+(((x118)*(x127)))+(((IkReal(0.380000000000000))*(x111)))+(((IkReal(0.380000000000000))*(x122)))+(((x107)*(x113))));
evalcond[8]=((((x104)*(x113)*(x118)))+(((x111)*(x126)))+(((x112)*(x118)*(x119)))+(((x103)*(x105)*(x118)))+(((IkReal(-1.00000000000000))*(x113)*(x117)))+(((IkReal(-1.00000000000000))*(x107)*(x108)))+(((IkReal(-1.00000000000000))*(pp)*(x113)*(x114)))+(((x122)*(x126)))+(((IkReal(-1.00000000000000))*(pp)*(x105)*(x114)))+(((IkReal(-1.00000000000000))*(x109)*(x113)))+(((x123)*(x124)))+(((x124)*(x125)))+(((x116)*(x127)))+(((IkReal(-1.00000000000000))*(r02)*(x115)))+(((IkReal(-1.00000000000000))*(x105)*(x117)))+(((IkReal(-1.00000000000000))*(x105)*(x109)))+(((IkReal(0.380000000000000))*(x125)))+(((IkReal(0.380000000000000))*(x123)))+(((x111)*(x118)*(x121))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x128=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x128)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x128))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x129=((px)*(sj0));
IkReal x130=((IkReal(2.00000000000000))*(py));
IkReal x131=((IkReal(0.380000000000000))*(cj1));
IkReal x132=((cj0)*(r01));
IkReal x133=((pz)*(r02));
IkReal x134=((r00)*(sj0));
IkReal x135=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(0.0938500000000000))+(((py)*(r00)*(x135)))+(((IkReal(0.0361000000000000))*(x132)))+(((IkReal(-1.00000000000000))*(pz)*(x131)*(x134)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x135)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x131)))+(((IkReal(-1.00000000000000))*(cj0)*(x130)*(x133)))+(((pz)*(x131)*(x132)))+(((IkReal(-0.0361000000000000))*(x134)))+(((IkReal(-1.00000000000000))*(py)*(x130)*(x132)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x129)))+(((pp)*(x132)))+(((IkReal(2.00000000000000))*(x129)*(x133)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x130)))+(((IkReal(-1.00000000000000))*(pp)*(x134)))+(((IkReal(0.0758940000000000))*(IKcos(j3))))+(((r02)*(x129)*(x131)))+(((r01)*(x129)*(x130))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x136=((cj1)*(py));
IkReal x137=((pz)*(sj1));
IkReal x138=((IkReal(139000.000000000))*(sj0));
IkReal x139=((IkReal(273000.000000000))*(cj3));
IkReal x140=((py)*(sj1));
IkReal x141=((IkReal(273000.000000000))*(sj3));
IkReal x142=((cj1)*(pz));
IkReal x143=((IkReal(139000.000000000))*(r01));
IkReal x144=((cj0)*(r02));
IkReal x145=((cj1)*(px));
IkReal x146=((r00)*(x141));
IkReal x147=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x148=((px)*(r02)*(sj1));
IkReal x149=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
Atan2Value<IkReal> x150 = IKatan2WithCheck(((gconst8)*(((((IkReal(-1.00000000000000))*(cj0)*(r01)*(x137)*(x139)))+(((IkReal(-1.00000000000000))*(x138)*(x148)))+(((IkReal(-1.00000000000000))*(cj0)*(x137)*(x143)))+(((IkReal(-1.00000000000000))*(x143)*(x145)))+(((IkReal(-1.00000000000000))*(sj0)*(x139)*(x148)))+(((r00)*(x137)*(x138)))+(((r00)*(x136)*(x139)))+(((sj0)*(x140)*(x141)))+(((r00)*(sj0)*(x137)*(x139)))+(((x139)*(x140)*(x144)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(139000.000000000))*(x140)*(x144)))+(((cj0)*(px)*(sj1)*(x141)))+(((IkReal(-1.00000000000000))*(x141)*(x142)))+(((IkReal(139000.000000000))*(r00)*(x136)))+(((IkReal(-1.00000000000000))*(r01)*(x139)*(x145)))))),((gconst8)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x140)*(x141)*(x144)))+(((sj0)*(x141)*(x148)))+(((x138)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x142)))+(((IkReal(139000.000000000))*(cj0)*(px)*(sj1)))+(((cj0)*(r01)*(x137)*(x141)))+(((cj0)*(px)*(sj1)*(x139)))+(((IkReal(-139000.000000000))*(x142)))+(((IkReal(-1.00000000000000))*(sj0)*(x137)*(x146)))+(((r01)*(x141)*(x145)))+(((sj0)*(x139)*(x140)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x136)*(x146)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x150.valid ) {
    continue;
}
j2array[0]=x150.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x151=IKcos(j2);
IkReal x152=IKsin(j2);
IkReal x153=((px)*(sj1));
IkReal x154=((IkReal(0.273000000000000))*(cj3));
IkReal x155=((py)*(sj1));
IkReal x156=((IkReal(1.00000000000000))*(r00));
IkReal x157=((cj1)*(sj0));
IkReal x158=((IkReal(1.00000000000000))*(px));
IkReal x159=((IkReal(1.00000000000000))*(pz));
IkReal x160=((cj0)*(r01));
IkReal x161=((pz)*(sj1));
IkReal x162=((IkReal(0.273000000000000))*(sj3));
IkReal x163=((cj0)*(cj1));
IkReal x164=((IkReal(0.139000000000000))*(x152));
IkReal x165=((IkReal(0.139000000000000))*(x151));
IkReal x166=((x152)*(x154));
IkReal x167=((x151)*(x162));
IkReal x168=((x152)*(x162));
IkReal x169=((x151)*(x154));
IkReal x170=((x166)+(x164));
IkReal x171=((x168)+(x169)+(x165));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x153)))+(((IkReal(-1.00000000000000))*(x171)))+(((sj0)*(x155)))+(((IkReal(-1.00000000000000))*(cj1)*(x159))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x158)*(x163)))+(((IkReal(-1.00000000000000))*(x167)))+(x170)+(((IkReal(-1.00000000000000))*(py)*(x157)))+(((IkReal(-1.00000000000000))*(sj1)*(x159))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x156)))+(((IkReal(-1.00000000000000))*(x167)))+(x170)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x155)))+(((r02)*(sj0)*(x153)))+(((IkReal(-1.00000000000000))*(sj0)*(x156)*(x161)))+(((cj1)*(px)*(r01)))+(((x160)*(x161))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x159)*(x160)))+(((r01)*(x153)))+(((IkReal(-0.190000000000000))*(x160)))+(((pz)*(r00)*(x157)))+(x171)+(((py)*(r02)*(x163)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x155)*(x156)))+(((IkReal(-1.00000000000000))*(r02)*(x157)*(x158))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x172=((IkReal(139000.000000000))*(cj1));
IkReal x173=((py)*(sj0));
IkReal x174=((cj0)*(px));
IkReal x175=((IkReal(273000.000000000))*(cj3));
IkReal x176=((IkReal(139000.000000000))*(sj1));
IkReal x177=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x178=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x179 = IKatan2WithCheck(((gconst7)*(((((IkReal(-1.00000000000000))*(pz)*(sj1)*(x175)))+(((pz)*(x177)))+(((IkReal(-1.00000000000000))*(x174)*(x178)))+(((IkReal(-1.00000000000000))*(pz)*(x176)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x173)*(x175)))+(((IkReal(-1.00000000000000))*(cj1)*(x174)*(x175)))+(((IkReal(-1.00000000000000))*(x172)*(x173)))+(((IkReal(-1.00000000000000))*(x172)*(x174)))+(((IkReal(-1.00000000000000))*(x173)*(x178)))))),((gconst7)*(((IkReal(26410.0000000000))+(((pz)*(x172)))+(((pz)*(x178)))+(((IkReal(-1.00000000000000))*(sj1)*(x174)*(x175)))+(((IkReal(-1.00000000000000))*(x174)*(x176)))+(((x173)*(x177)))+(((cj1)*(pz)*(x175)))+(((x174)*(x177)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x173)*(x175)))+(((IkReal(-1.00000000000000))*(x173)*(x176)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x179.valid ) {
    continue;
}
j2array[0]=x179.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x180=IKcos(j2);
IkReal x181=IKsin(j2);
IkReal x182=((px)*(sj1));
IkReal x183=((IkReal(0.273000000000000))*(cj3));
IkReal x184=((py)*(sj1));
IkReal x185=((IkReal(1.00000000000000))*(r00));
IkReal x186=((cj1)*(sj0));
IkReal x187=((IkReal(1.00000000000000))*(px));
IkReal x188=((IkReal(1.00000000000000))*(pz));
IkReal x189=((cj0)*(r01));
IkReal x190=((pz)*(sj1));
IkReal x191=((IkReal(0.273000000000000))*(sj3));
IkReal x192=((cj0)*(cj1));
IkReal x193=((IkReal(0.139000000000000))*(x181));
IkReal x194=((IkReal(0.139000000000000))*(x180));
IkReal x195=((x181)*(x183));
IkReal x196=((x180)*(x191));
IkReal x197=((x181)*(x191));
IkReal x198=((x180)*(x183));
IkReal x199=((x193)+(x195));
IkReal x200=((x198)+(x197)+(x194));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x182)))+(((sj0)*(x184)))+(((IkReal(-1.00000000000000))*(x200)))+(((IkReal(-1.00000000000000))*(cj1)*(x188))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x196)))+(x199)+(((IkReal(-1.00000000000000))*(x187)*(x192)))+(((IkReal(-1.00000000000000))*(py)*(x186)))+(((IkReal(-1.00000000000000))*(sj1)*(x188))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x185)))+(((IkReal(-1.00000000000000))*(x196)))+(((x189)*(x190)))+(x199)+(((r02)*(sj0)*(x182)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x184)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(sj0)*(x185)*(x190))));
evalcond[3]=((((r01)*(x182)))+(((IkReal(-0.190000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(x184)*(x185)))+(x200)+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((py)*(r02)*(x192)))+(((IkReal(-1.00000000000000))*(r02)*(x186)*(x187)))+(((pz)*(r00)*(x186)))+(((IkReal(-1.00000000000000))*(cj1)*(x188)*(x189))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x201=(pz)*(pz);
IkReal x202=(py)*(py);
IkReal x203=(px)*(px);
IkReal x204=((r01)*(sj0));
IkReal x205=((IkReal(0.190000000000000))*(cj1));
IkReal x206=((pp)*(sj1));
IkReal x207=((IkReal(1.00000000000000))*(r02));
IkReal x208=((IkReal(0.380000000000000))*(pz));
IkReal x209=((IkReal(1.00000000000000))*(pz));
IkReal x210=((py)*(r01));
IkReal x211=((px)*(sj0));
IkReal x212=((cj0)*(r00));
IkReal x213=((IkReal(1.00000000000000))*(cj1));
IkReal x214=((IkReal(0.0361000000000000))*(sj1));
IkReal x215=((IkReal(2.00000000000000))*(sj1));
IkReal x216=((IkReal(0.0361000000000000))*(cj1));
IkReal x217=((IkReal(2.00000000000000))*(cj1));
IkReal x218=((py)*(r00));
IkReal x219=((IkReal(0.190000000000000))*(sj1));
IkReal x220=((cj0)*(px));
IkReal x221=((px)*(r00));
IkReal x222=((py)*(r02)*(sj0));
IkReal x223=((pz)*(x217));
IkReal x224=((r02)*(x220));
IkReal x225=((pz)*(x215));
IkReal x226=((r02)*(x201));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x211)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x207)))+(((sj1)*(x204)))+(((sj1)*(x212))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x204)*(x213)))+(((IkReal(-1.00000000000000))*(sj1)*(x207)))+(((IkReal(-1.00000000000000))*(x212)*(x213))));
evalcond[5]=((((x204)*(x219)))+(((IkReal(-1.00000000000000))*(pz)*(x207)))+(((IkReal(-1.00000000000000))*(r02)*(x205)))+(((x212)*(x219)))+(((IkReal(-1.00000000000000))*(x210)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x204)*(x205)))+(((IkReal(-1.00000000000000))*(x204)*(x209)))+(((IkReal(-1.00000000000000))*(x205)*(x212)))+(x222)+(x224)+(((IkReal(-1.00000000000000))*(r02)*(x219)))+(((IkReal(-1.00000000000000))*(x209)*(x212))));
evalcond[7]=((((x210)*(x223)))+(((IkReal(-1.00000000000000))*(x211)*(x215)*(x218)))+(((IkReal(-1.00000000000000))*(x224)*(x225)))+(((x206)*(x212)))+(((IkReal(-1.00000000000000))*(x204)*(x214)))+(((IkReal(0.380000000000000))*(x221)))+(((IkReal(-1.00000000000000))*(x222)*(x225)))+(((x204)*(x206)))+(((r02)*(x216)))+(((IkReal(-1.00000000000000))*(x210)*(x215)*(x220)))+(((x217)*(x226)))+(((x221)*(x223)))+(((IkReal(-1.00000000000000))*(x212)*(x214)))+(((IkReal(-1.00000000000000))*(x203)*(x212)*(x215)))+(((IkReal(-1.00000000000000))*(x202)*(x204)*(x215)))+(((IkReal(0.380000000000000))*(x210)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x207)))+(((r02)*(x208))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x204)*(x208)))+(((x210)*(x225)))+(((x202)*(x204)*(x217)))+(((x203)*(x212)*(x217)))+(((x222)*(x223)))+(((x215)*(x226)))+(((x211)*(x217)*(x218)))+(((IkReal(-1.00000000000000))*(x204)*(x216)))+(((IkReal(0.380000000000000))*(x224)))+(((IkReal(0.380000000000000))*(x222)))+(((IkReal(-1.00000000000000))*(x206)*(x207)))+(((x223)*(x224)))+(((x210)*(x217)*(x220)))+(((IkReal(-1.00000000000000))*(pp)*(x204)*(x213)))+(((x221)*(x225)))+(((IkReal(-1.00000000000000))*(r02)*(x214)))+(((IkReal(-1.00000000000000))*(x212)*(x216)))+(((IkReal(-1.00000000000000))*(x208)*(x212)))+(((IkReal(-1.00000000000000))*(pp)*(x212)*(x213))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x227=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x227)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x227))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x228=((px)*(sj0));
IkReal x229=((IkReal(2.00000000000000))*(py));
IkReal x230=((IkReal(0.380000000000000))*(cj1));
IkReal x231=((cj0)*(r01));
IkReal x232=((pz)*(r02));
IkReal x233=((r00)*(sj0));
IkReal x234=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(-0.0938500000000000))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x229)))+(((IkReal(2.00000000000000))*(x228)*(x232)))+(((py)*(r00)*(x234)))+(((r01)*(x228)*(x229)))+(((pp)*(x231)))+(((IkReal(-1.00000000000000))*(py)*(x229)*(x231)))+(((IkReal(-1.00000000000000))*(cj0)*(x229)*(x232)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x228)))+(((IkReal(-0.0361000000000000))*(x233)))+(((IkReal(0.0361000000000000))*(x231)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x234)))+(((pz)*(x230)*(x231)))+(((r02)*(x228)*(x230)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x230)))+(((IkReal(-1.00000000000000))*(pp)*(x233)))+(((IkReal(-1.00000000000000))*(pz)*(x230)*(x233)))+(((IkReal(-0.0758940000000000))*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x235=((IkReal(273000.000000000))*(sj3));
IkReal x236=((IkReal(273000.000000000))*(cj3));
IkReal x237=((pz)*(r00));
IkReal x238=((px)*(r02));
IkReal x239=((sj0)*(sj1));
IkReal x240=((cj1)*(pz));
IkReal x241=((cj1)*(py)*(r00));
IkReal x242=((IkReal(139000.000000000))*(x239));
IkReal x243=((cj0)*(px)*(sj1));
IkReal x244=((cj1)*(px)*(r01));
IkReal x245=((cj0)*(pz)*(r01)*(sj1));
IkReal x246=((cj0)*(py)*(r02)*(sj1));
Atan2Value<IkReal> x247 = IKatan2WithCheck(((gconst10)*(((((x238)*(x242)))+(((x236)*(x245)))+(((x236)*(x244)))+(((IkReal(-139000.000000000))*(x246)))+(((IkReal(-139000.000000000))*(x241)))+(((py)*(x235)*(x239)))+(((IkReal(-1.00000000000000))*(x237)*(x242)))+(((IkReal(139000.000000000))*(x244)))+(((IkReal(139000.000000000))*(x245)))+(((IkReal(-1.00000000000000))*(x236)*(x246)))+(((IkReal(-1.00000000000000))*(x236)*(x241)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x236)*(x237)*(x239)))+(((x236)*(x238)*(x239)))+(((IkReal(-1.00000000000000))*(x235)*(x240)))+(((x235)*(x243)))))),((gconst10)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x235)*(x238)*(x239)))+(((x236)*(x243)))+(((IkReal(-139000.000000000))*(x240)))+(((IkReal(139000.000000000))*(x243)))+(((x235)*(x237)*(x239)))+(((IkReal(-1.00000000000000))*(x236)*(x240)))+(((py)*(x236)*(x239)))+(((IkReal(-1.00000000000000))*(x235)*(x244)))+(((IkReal(-1.00000000000000))*(x235)*(x245)))+(((py)*(x242)))+(((x235)*(x241)))+(((x235)*(x246)))+(((IkReal(-51870.0000000000))*(cj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x247.valid ) {
    continue;
}
j2array[0]=x247.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x248=IKcos(j2);
IkReal x249=IKsin(j2);
IkReal x250=((px)*(sj1));
IkReal x251=((IkReal(0.273000000000000))*(cj3));
IkReal x252=((py)*(sj1));
IkReal x253=((IkReal(1.00000000000000))*(r00));
IkReal x254=((cj1)*(sj0));
IkReal x255=((IkReal(1.00000000000000))*(px));
IkReal x256=((IkReal(1.00000000000000))*(pz));
IkReal x257=((cj0)*(r01));
IkReal x258=((pz)*(sj1));
IkReal x259=((IkReal(0.273000000000000))*(sj3));
IkReal x260=((cj0)*(cj1));
IkReal x261=((IkReal(0.139000000000000))*(x249));
IkReal x262=((IkReal(0.139000000000000))*(x248));
IkReal x263=((x248)*(x259));
IkReal x264=((x249)*(x251));
IkReal x265=((x249)*(x259));
IkReal x266=((x248)*(x251));
IkReal x267=((x264)+(x261));
IkReal x268=((x265)+(x266)+(x262));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x252)))+(((cj0)*(x250)))+(((IkReal(-1.00000000000000))*(cj1)*(x256)))+(((IkReal(-1.00000000000000))*(x268))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x255)*(x260)))+(x267)+(((IkReal(-1.00000000000000))*(sj1)*(x256)))+(((IkReal(-1.00000000000000))*(py)*(x254)))+(((IkReal(-1.00000000000000))*(x263))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x253)*(x258)))+(((x257)*(x258)))+(x263)+(((r02)*(sj0)*(x250)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x253)))+(((IkReal(-1.00000000000000))*(x267)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x252))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x252)*(x253)))+(((IkReal(-0.190000000000000))*(x257)))+(((r01)*(x250)))+(((py)*(r02)*(x260)))+(((IkReal(-1.00000000000000))*(r02)*(x254)*(x255)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x268)))+(((pz)*(r00)*(x254)))+(((IkReal(-1.00000000000000))*(cj1)*(x256)*(x257))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x269=((IkReal(139000.000000000))*(cj1));
IkReal x270=((py)*(sj0));
IkReal x271=((cj0)*(px));
IkReal x272=((IkReal(273000.000000000))*(cj3));
IkReal x273=((IkReal(139000.000000000))*(sj1));
IkReal x274=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x275=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x276 = IKatan2WithCheck(((gconst9)*(((((IkReal(-1.00000000000000))*(pz)*(x273)))+(((IkReal(-1.00000000000000))*(x271)*(x275)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x269)*(x271)))+(((IkReal(-1.00000000000000))*(x269)*(x270)))+(((IkReal(-1.00000000000000))*(x270)*(x275)))+(((IkReal(-1.00000000000000))*(cj1)*(x271)*(x272)))+(((pz)*(x274)))+(((IkReal(-1.00000000000000))*(cj1)*(x270)*(x272)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x272)))))),((gconst9)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x270)*(x272)))+(((cj1)*(pz)*(x272)))+(((x271)*(x274)))+(((IkReal(-1.00000000000000))*(sj1)*(x271)*(x272)))+(((IkReal(-1.00000000000000))*(x271)*(x273)))+(((x270)*(x274)))+(((IkReal(51870.0000000000))*(cj3)))+(((pz)*(x269)))+(((IkReal(-1.00000000000000))*(x270)*(x273)))+(((pz)*(x275)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x276.valid ) {
    continue;
}
j2array[0]=x276.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x277=IKcos(j2);
IkReal x278=IKsin(j2);
IkReal x279=((px)*(sj1));
IkReal x280=((IkReal(0.273000000000000))*(cj3));
IkReal x281=((py)*(sj1));
IkReal x282=((IkReal(1.00000000000000))*(r00));
IkReal x283=((cj1)*(sj0));
IkReal x284=((IkReal(1.00000000000000))*(px));
IkReal x285=((IkReal(1.00000000000000))*(pz));
IkReal x286=((cj0)*(r01));
IkReal x287=((pz)*(sj1));
IkReal x288=((IkReal(0.273000000000000))*(sj3));
IkReal x289=((cj0)*(cj1));
IkReal x290=((IkReal(0.139000000000000))*(x278));
IkReal x291=((IkReal(0.139000000000000))*(x277));
IkReal x292=((x277)*(x288));
IkReal x293=((x278)*(x280));
IkReal x294=((x278)*(x288));
IkReal x295=((x277)*(x280));
IkReal x296=((x290)+(x293));
IkReal x297=((x291)+(x294)+(x295));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x297)))+(((IkReal(-1.00000000000000))*(cj1)*(x285)))+(((sj0)*(x281)))+(((cj0)*(x279))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x285)))+(((IkReal(-1.00000000000000))*(x292)))+(((IkReal(-1.00000000000000))*(py)*(x283)))+(x296)+(((IkReal(-1.00000000000000))*(x284)*(x289))));
evalcond[2]=((((r02)*(sj0)*(x279)))+(((x286)*(x287)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x282)))+(((IkReal(-1.00000000000000))*(sj0)*(x282)*(x287)))+(((IkReal(-1.00000000000000))*(x296)))+(x292)+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x281))));
evalcond[3]=((((py)*(r02)*(x289)))+(((IkReal(-1.00000000000000))*(cj1)*(x285)*(x286)))+(((IkReal(-1.00000000000000))*(x297)))+(((IkReal(-1.00000000000000))*(x281)*(x282)))+(((IkReal(-1.00000000000000))*(r02)*(x283)*(x284)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r01)*(x279)))+(((pz)*(r00)*(x283)))+(((IkReal(-0.190000000000000))*(x286))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x298=((sj0)*(sj1));
IkReal x299=((cj0)*(sj1));
if( IKabs(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r00)*(x299)))+(((IkReal(-190.000000000000))*(r01)*(x298)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(1000.00000000000))*(px)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(py)*(x298)))+(((IkReal(-5.00698342424961))*(px)*(x299)))+(((IkReal(5.00698342424961))*(cj1)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r00)*(x299)))+(((IkReal(-190.000000000000))*(r01)*(x298)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(1000.00000000000))*(px)*(r00)))))))+IKsqr(((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(py)*(x298)))+(((IkReal(-5.00698342424961))*(px)*(x299)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r00)*(x299)))+(((IkReal(-190.000000000000))*(r01)*(x298)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(1000.00000000000))*(px)*(r00)))))), ((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(py)*(x298)))+(((IkReal(-5.00698342424961))*(px)*(x299)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x300=IKcos(j3);
IkReal x301=((r01)*(sj0));
IkReal x302=((IkReal(0.190000000000000))*(cj1));
IkReal x303=((py)*(r02));
IkReal x304=((IkReal(0.380000000000000))*(cj1));
IkReal x305=((r00)*(sj0));
IkReal x306=((cj0)*(r01));
IkReal x307=((IkReal(1.00000000000000))*(pz));
IkReal x308=((IkReal(1.00000000000000))*(pp));
IkReal x309=((cj0)*(r00));
IkReal x310=((IkReal(0.190000000000000))*(sj1));
IkReal x311=((IkReal(0.139000000000000))*(cj4));
IkReal x312=((IkReal(2.00000000000000))*(pz));
IkReal x313=((px)*(r02));
IkReal x314=((IkReal(2.00000000000000))*(px)*(py));
IkReal x315=((IkReal(0.380000000000000))*(py)*(sj1));
IkReal x316=((IkReal(0.0758940000000000))*(x300));
IkReal x317=((IkReal(0.380000000000000))*(px)*(sj1));
evalcond[0]=((IkReal(0.0577500000000000))+(((sj0)*(x315)))+(x316)+(((IkReal(-1.00000000000000))*(pz)*(x304)))+(((cj0)*(x317)))+(((IkReal(-1.00000000000000))*(x308))));
evalcond[1]=((((x311)*(IKsin(j3))))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((x301)*(x310)))+(((IkReal(-1.00000000000000))*(r02)*(x307)))+(((IkReal(-1.00000000000000))*(r02)*(x302)))+(((x309)*(x310)))+(((IkReal(-1.00000000000000))*(py)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x310)))+(((IkReal(-1.00000000000000))*(x301)*(x302)))+(((IkReal(-1.00000000000000))*(x301)*(x307)))+(((IkReal(-1.00000000000000))*(x302)*(x309)))+(((IkReal(-1.00000000000000))*(x300)*(x311)))+(((IkReal(-1.00000000000000))*(x307)*(x309)))+(((cj0)*(x313)))+(((sj0)*(x303)))+(((IkReal(-0.273000000000000))*(cj4))));
evalcond[3]=((((sj0)*(x304)*(x313)))+(((IkReal(-1.00000000000000))*(pz)*(x304)*(x305)))+(((sj0)*(x312)*(x313)))+(((pp)*(x306)))+(((IkReal(-2.00000000000000))*(x306)*((py)*(py))))+(((IkReal(-1.00000000000000))*(r01)*(x317)))+(((x301)*(x314)))+(((IkReal(0.0938500000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(cj0)*(x303)*(x304)))+(((sj4)*(x316)))+(((IkReal(-1.00000000000000))*(cj0)*(x303)*(x312)))+(((IkReal(0.0361000000000000))*(x306)))+(((pz)*(x304)*(x306)))+(((r00)*(x315)))+(((IkReal(-1.00000000000000))*(x305)*(x308)))+(((IkReal(2.00000000000000))*(x305)*((px)*(px))))+(((IkReal(-0.0361000000000000))*(x305)))+(((IkReal(-1.00000000000000))*(x309)*(x314))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x318=((IkReal(273.000000000000))*(cj4));
gconst2=IKsign(((((IkReal(-1.00000000000000))*(x318)*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(x318)*((cj3)*(cj3))))+(((IkReal(-139.000000000000))*(cj3)*(cj4)))));
IkReal x319=((IkReal(1.96402877697842))*(cj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x319)*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x319)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x320=((IkReal(0.0758940000000000))*(cj3));
IkReal x321=(py)*(py);
IkReal x322=(px)*(px);
IkReal x323=(pz)*(pz);
IkReal x324=((r01)*(sj0));
IkReal x325=((IkReal(2.00000000000000))*(px));
IkReal x326=((IkReal(0.190000000000000))*(cj1));
IkReal x327=((r00)*(sj1));
IkReal x328=((IkReal(0.0361000000000000))*(cj0));
IkReal x329=((py)*(r02));
IkReal x330=((cj0)*(cj1));
IkReal x331=((IkReal(0.380000000000000))*(pz));
IkReal x332=((pz)*(r02));
IkReal x333=((IkReal(2.00000000000000))*(sj0));
IkReal x334=((cj0)*(r01));
IkReal x335=((IkReal(0.380000000000000))*(py));
IkReal x336=((pz)*(sj1));
IkReal x337=((IkReal(1.00000000000000))*(sj0));
IkReal x338=((pp)*(r00));
IkReal x339=((IkReal(0.190000000000000))*(sj1));
IkReal x340=((IkReal(0.0361000000000000))*(sj1));
IkReal x341=((IkReal(2.00000000000000))*(cj0));
IkReal x342=((r00)*(sj0));
IkReal x343=((IkReal(1.00000000000000))*(r00));
IkReal x344=((cj1)*(r00));
IkReal x345=((cj1)*(r02));
IkReal x346=((cj0)*(r00));
IkReal x347=((cj0)*(sj1));
IkReal x348=((IkReal(0.380000000000000))*(px));
IkReal x349=((cj1)*(pz));
IkReal x350=((IkReal(1.00000000000000))*(pp));
IkReal x351=((cj0)*(r02));
IkReal x352=((py)*(r01));
IkReal x353=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x354=((r00)*(x322));
IkReal x355=((IkReal(2.00000000000000))*(x352));
IkReal x356=((IkReal(2.00000000000000))*(x321));
IkReal x357=((IkReal(2.00000000000000))*(x323));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x337)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x337)))+(x334));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(x350)))+(((sj0)*(sj1)*(x335)))+(x320)+(((x347)*(x348)))+(((IkReal(-1.00000000000000))*(cj1)*(x331))));
evalcond[4]=((((cj0)*(x327)))+(((sj1)*(x324)))+(((IkReal(-1.00000000000000))*(x345))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x330)*(x343)))+(((IkReal(-1.00000000000000))*(cj1)*(x324)))+(((IkReal(-1.00000000000000))*(x353))));
evalcond[6]=((((IkReal(-1.00000000000000))*(px)*(x343)))+(((x324)*(x339)))+(((IkReal(-1.00000000000000))*(x352)))+(((IkReal(-1.00000000000000))*(x332)))+(((IkReal(0.190000000000000))*(cj0)*(x327)))+(((IkReal(-1.00000000000000))*(r02)*(x326))));
evalcond[7]=((((px)*(x351)))+(((IkReal(-1.00000000000000))*(pz)*(x324)))+(((IkReal(-1.00000000000000))*(x326)*(x346)))+(((IkReal(-1.00000000000000))*(r02)*(x339)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x343)))+(((sj0)*(x329)))+(((IkReal(-1.00000000000000))*(x324)*(x326))));
evalcond[8]=((IkReal(0.0938500000000000))+(((IkReal(-1.00000000000000))*(x337)*(x338)))+(((sj0)*(x345)*(x348)))+(((r01)*(x330)*(x331)))+(((IkReal(-0.380000000000000))*(x329)*(x330)))+(((pp)*(x334)))+(((IkReal(-0.0361000000000000))*(x342)))+(((r01)*(x328)))+(((IkReal(-1.00000000000000))*(cj1)*(x331)*(x342)))+(x320)+(((sj0)*(x325)*(x332)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x348)))+(((x327)*(x335)))+(((IkReal(-1.00000000000000))*(py)*(x325)*(x346)))+(((IkReal(-1.00000000000000))*(pz)*(x329)*(x341)))+(((x333)*(x354)))+(((py)*(x324)*(x325)))+(((IkReal(-1.00000000000000))*(x334)*(x356))));
evalcond[9]=((((r01)*(x335)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x325)*(x334)))+(((x345)*(x357)))+(((r00)*(x348)))+(((pp)*(sj1)*(x324)))+(((IkReal(-1.00000000000000))*(x345)*(x350)))+(((IkReal(-1.00000000000000))*(x324)*(x340)))+(((r02)*(x331)))+(((IkReal(-1.00000000000000))*(x327)*(x328)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x325)*(x327)))+(((IkReal(-1.00000000000000))*(x329)*(x333)*(x336)))+(((IkReal(-1.00000000000000))*(x322)*(x327)*(x341)))+(((IkReal(-1.00000000000000))*(sj1)*(x324)*(x356)))+(((pz)*(x325)*(x344)))+(((x349)*(x355)))+(((IkReal(-1.00000000000000))*(x325)*(x332)*(x347)))+(((IkReal(0.0361000000000000))*(x345)))+(((cj0)*(pp)*(x327))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj1)*(x324)*(x350)))+(((cj1)*(py)*(x325)*(x342)))+(((IkReal(-1.00000000000000))*(r02)*(x340)))+(((IkReal(-1.00000000000000))*(x330)*(x338)))+(((pz)*(x325)*(x327)))+(((IkReal(2.00000000000000))*(x330)*(x354)))+(((IkReal(-1.00000000000000))*(x331)*(x346)))+(((IkReal(-0.0361000000000000))*(cj1)*(x324)))+(((r02)*(sj1)*(x357)))+(((IkReal(0.380000000000000))*(sj0)*(x329)))+(((IkReal(-1.00000000000000))*(x324)*(x331)))+(((x336)*(x355)))+(((cj1)*(x324)*(x356)))+(((x329)*(x333)*(x349)))+(((x325)*(x330)*(x352)))+(((x348)*(x351)))+(((x325)*(x330)*(x332)))+(((IkReal(-1.00000000000000))*(x328)*(x344)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x350))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x358=((cj1)*(py));
IkReal x359=((pz)*(sj1));
IkReal x360=((IkReal(139000.000000000))*(sj0));
IkReal x361=((IkReal(273000.000000000))*(cj3));
IkReal x362=((py)*(sj1));
IkReal x363=((IkReal(273000.000000000))*(sj3));
IkReal x364=((cj1)*(pz));
IkReal x365=((IkReal(139000.000000000))*(cj0));
IkReal x366=((cj0)*(r02));
IkReal x367=((r00)*(x363));
IkReal x368=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x369=((px)*(r02)*(sj1));
IkReal x370=((cj1)*(px)*(r01));
IkReal x371=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
Atan2Value<IkReal> x372 = IKatan2WithCheck(((gconst4)*(((((IkReal(-1.00000000000000))*(x363)*(x364)))+(((IkReal(-1.00000000000000))*(x360)*(x369)))+(((IkReal(-1.00000000000000))*(x361)*(x370)))+(((r02)*(x362)*(x365)))+(((IkReal(-139000.000000000))*(x370)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x359)*(x361)))+(((r00)*(x358)*(x361)))+(((sj0)*(x362)*(x363)))+(((IkReal(-1.00000000000000))*(r01)*(x359)*(x365)))+(((r00)*(sj0)*(x359)*(x361)))+(((IkReal(-51870.0000000000))*(sj3)))+(((r00)*(x359)*(x360)))+(((cj0)*(px)*(sj1)*(x363)))+(((IkReal(139000.000000000))*(r00)*(x358)))+(((IkReal(-1.00000000000000))*(sj0)*(x361)*(x369)))+(((x361)*(x362)*(x366)))))),((gconst4)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(sj0)*(x359)*(x367)))+(((sj0)*(x361)*(x362)))+(((IkReal(-1.00000000000000))*(x361)*(x364)))+(((IkReal(-1.00000000000000))*(x358)*(x367)))+(((IkReal(-139000.000000000))*(x364)))+(((cj0)*(r01)*(x359)*(x363)))+(((IkReal(-1.00000000000000))*(x362)*(x363)*(x366)))+(((cj0)*(px)*(sj1)*(x361)))+(((sj0)*(x363)*(x369)))+(((px)*(sj1)*(x365)))+(((x360)*(x362)))+(((IkReal(-51870.0000000000))*(cj3)))+(((x363)*(x370)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x372.valid ) {
    continue;
}
j2array[0]=x372.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x373=IKcos(j2);
IkReal x374=IKsin(j2);
IkReal x375=((px)*(sj1));
IkReal x376=((IkReal(0.273000000000000))*(cj3));
IkReal x377=((py)*(sj1));
IkReal x378=((IkReal(1.00000000000000))*(r00));
IkReal x379=((cj1)*(sj0));
IkReal x380=((IkReal(1.00000000000000))*(px));
IkReal x381=((IkReal(1.00000000000000))*(pz));
IkReal x382=((cj0)*(r01));
IkReal x383=((pz)*(sj1));
IkReal x384=((IkReal(0.273000000000000))*(sj3));
IkReal x385=((cj0)*(cj1));
IkReal x386=((IkReal(0.139000000000000))*(x374));
IkReal x387=((IkReal(0.139000000000000))*(x373));
IkReal x388=((x374)*(x376));
IkReal x389=((x373)*(x384));
IkReal x390=((x374)*(x384));
IkReal x391=((x373)*(x376));
IkReal x392=((x386)+(x388));
IkReal x393=((x387)+(x391)+(x390));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x381)))+(((IkReal(-1.00000000000000))*(x393)))+(((sj0)*(x377)))+(((cj0)*(x375))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x379)))+(((IkReal(-1.00000000000000))*(x380)*(x385)))+(x392)+(((IkReal(-1.00000000000000))*(x389)))+(((IkReal(-1.00000000000000))*(sj1)*(x381))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x378)*(x383)))+(x392)+(((x382)*(x383)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x377)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x378)))+(((IkReal(-1.00000000000000))*(x389)))+(((r02)*(sj0)*(x375)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((pz)*(r00)*(x379)))+(((py)*(r02)*(x385)))+(((r01)*(x375)))+(((IkReal(-1.00000000000000))*(cj1)*(x381)*(x382)))+(((IkReal(-1.00000000000000))*(x377)*(x378)))+(x393)+(((IkReal(-1.00000000000000))*(r02)*(x379)*(x380)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x382))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x394=((IkReal(139000.000000000))*(cj1));
IkReal x395=((py)*(sj0));
IkReal x396=((cj0)*(px));
IkReal x397=((IkReal(273000.000000000))*(cj3));
IkReal x398=((IkReal(139000.000000000))*(sj1));
IkReal x399=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x400=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x401 = IKatan2WithCheck(((gconst3)*(((((IkReal(-1.00000000000000))*(cj1)*(x396)*(x397)))+(((IkReal(-1.00000000000000))*(x394)*(x395)))+(((IkReal(-1.00000000000000))*(x394)*(x396)))+(((IkReal(-1.00000000000000))*(cj1)*(x395)*(x397)))+(((pz)*(x399)))+(((IkReal(-1.00000000000000))*(x395)*(x400)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x397)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x398)))+(((IkReal(-1.00000000000000))*(x396)*(x400)))))),((gconst3)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x395)*(x397)))+(((pz)*(x400)))+(((x395)*(x399)))+(((IkReal(-1.00000000000000))*(x395)*(x398)))+(((pz)*(x394)))+(((x396)*(x399)))+(((IkReal(51870.0000000000))*(cj3)))+(((cj1)*(pz)*(x397)))+(((IkReal(-1.00000000000000))*(x396)*(x398)))+(((IkReal(-1.00000000000000))*(sj1)*(x396)*(x397)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x401.valid ) {
    continue;
}
j2array[0]=x401.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x402=IKcos(j2);
IkReal x403=IKsin(j2);
IkReal x404=((px)*(sj1));
IkReal x405=((IkReal(0.273000000000000))*(cj3));
IkReal x406=((py)*(sj1));
IkReal x407=((IkReal(1.00000000000000))*(r00));
IkReal x408=((cj1)*(sj0));
IkReal x409=((IkReal(1.00000000000000))*(px));
IkReal x410=((IkReal(1.00000000000000))*(pz));
IkReal x411=((cj0)*(r01));
IkReal x412=((pz)*(sj1));
IkReal x413=((IkReal(0.273000000000000))*(sj3));
IkReal x414=((cj0)*(cj1));
IkReal x415=((IkReal(0.139000000000000))*(x403));
IkReal x416=((IkReal(0.139000000000000))*(x402));
IkReal x417=((x403)*(x405));
IkReal x418=((x402)*(x413));
IkReal x419=((x403)*(x413));
IkReal x420=((x402)*(x405));
IkReal x421=((x417)+(x415));
IkReal x422=((x416)+(x419)+(x420));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x410)))+(((IkReal(-1.00000000000000))*(x422)))+(((sj0)*(x406)))+(((cj0)*(x404))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x408)))+(x421)+(((IkReal(-1.00000000000000))*(x418)))+(((IkReal(-1.00000000000000))*(sj1)*(x410)))+(((IkReal(-1.00000000000000))*(x409)*(x414))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x406)))+(((x411)*(x412)))+(((IkReal(-1.00000000000000))*(sj0)*(x407)*(x412)))+(((r02)*(sj0)*(x404)))+(x421)+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x418)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x407))));
evalcond[3]=((((py)*(r02)*(x414)))+(((IkReal(-1.00000000000000))*(x406)*(x407)))+(((IkReal(-1.00000000000000))*(r02)*(x408)*(x409)))+(((IkReal(-1.00000000000000))*(cj1)*(x410)*(x411)))+(((pz)*(r00)*(x408)))+(((r01)*(x404)))+(x422)+(((IkReal(-0.190000000000000))*(x411)))+(((IkReal(0.190000000000000))*(r00)*(sj0))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x423=((IkReal(0.0758940000000000))*(cj3));
IkReal x424=(py)*(py);
IkReal x425=(px)*(px);
IkReal x426=(pz)*(pz);
IkReal x427=((r01)*(sj0));
IkReal x428=((IkReal(2.00000000000000))*(px));
IkReal x429=((IkReal(0.190000000000000))*(cj1));
IkReal x430=((r00)*(sj1));
IkReal x431=((IkReal(0.0361000000000000))*(cj0));
IkReal x432=((py)*(r02));
IkReal x433=((cj0)*(cj1));
IkReal x434=((IkReal(0.380000000000000))*(pz));
IkReal x435=((pz)*(r02));
IkReal x436=((IkReal(2.00000000000000))*(sj0));
IkReal x437=((cj0)*(r01));
IkReal x438=((IkReal(0.380000000000000))*(py));
IkReal x439=((pz)*(sj1));
IkReal x440=((IkReal(1.00000000000000))*(sj0));
IkReal x441=((pp)*(r00));
IkReal x442=((IkReal(0.190000000000000))*(sj1));
IkReal x443=((IkReal(0.0361000000000000))*(sj1));
IkReal x444=((IkReal(2.00000000000000))*(cj0));
IkReal x445=((r00)*(sj0));
IkReal x446=((IkReal(1.00000000000000))*(r00));
IkReal x447=((cj1)*(r00));
IkReal x448=((cj1)*(r02));
IkReal x449=((cj0)*(r00));
IkReal x450=((cj0)*(sj1));
IkReal x451=((IkReal(0.380000000000000))*(px));
IkReal x452=((cj1)*(pz));
IkReal x453=((IkReal(1.00000000000000))*(pp));
IkReal x454=((cj0)*(r02));
IkReal x455=((py)*(r01));
IkReal x456=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x457=((r00)*(x425));
IkReal x458=((IkReal(2.00000000000000))*(x455));
IkReal x459=((IkReal(2.00000000000000))*(x424));
IkReal x460=((IkReal(2.00000000000000))*(x426));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((cj0)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x440))));
evalcond[2]=((IkReal(-1.00000000000000))+(x437)+(((IkReal(-1.00000000000000))*(r00)*(x440))));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x434)))+(((IkReal(-1.00000000000000))*(x453)))+(((sj0)*(sj1)*(x438)))+(x423)+(((x450)*(x451))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x448)))+(((cj0)*(x430)))+(((sj1)*(x427))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x433)*(x446)))+(((IkReal(-1.00000000000000))*(x456)))+(((IkReal(-1.00000000000000))*(cj1)*(x427))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x435)))+(((IkReal(0.190000000000000))*(cj0)*(x430)))+(((IkReal(-1.00000000000000))*(x455)))+(((IkReal(-1.00000000000000))*(r02)*(x429)))+(((x427)*(x442)))+(((IkReal(-1.00000000000000))*(px)*(x446))));
evalcond[7]=((((sj0)*(x432)))+(((IkReal(-1.00000000000000))*(pz)*(x427)))+(((IkReal(-1.00000000000000))*(x427)*(x429)))+(((IkReal(-1.00000000000000))*(x429)*(x449)))+(((IkReal(-1.00000000000000))*(r02)*(x442)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x446)))+(((px)*(x454))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((sj0)*(x448)*(x451)))+(((IkReal(-0.0361000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(x437)*(x459)))+(((r01)*(x433)*(x434)))+(((IkReal(-1.00000000000000))*(x423)))+(((pp)*(x437)))+(((IkReal(-1.00000000000000))*(py)*(x428)*(x449)))+(((IkReal(-1.00000000000000))*(cj1)*(x434)*(x445)))+(((x430)*(x438)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x451)))+(((IkReal(-0.380000000000000))*(x432)*(x433)))+(((r01)*(x431)))+(((IkReal(-1.00000000000000))*(x440)*(x441)))+(((py)*(x427)*(x428)))+(((x436)*(x457)))+(((sj0)*(x428)*(x435)))+(((IkReal(-1.00000000000000))*(pz)*(x432)*(x444))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x430)*(x431)))+(((cj0)*(pp)*(x430)))+(((IkReal(-1.00000000000000))*(sj1)*(x427)*(x459)))+(((IkReal(-1.00000000000000))*(x427)*(x443)))+(((x452)*(x458)))+(((r02)*(x434)))+(((IkReal(0.0361000000000000))*(x448)))+(((IkReal(-1.00000000000000))*(x425)*(x430)*(x444)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x428)*(x437)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x428)*(x430)))+(((x448)*(x460)))+(((IkReal(-1.00000000000000))*(x428)*(x435)*(x450)))+(((r01)*(x438)))+(((r00)*(x451)))+(((IkReal(-1.00000000000000))*(x432)*(x436)*(x439)))+(((pp)*(sj1)*(x427)))+(((pz)*(x428)*(x447)))+(((IkReal(-1.00000000000000))*(x448)*(x453))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x427)*(x434)))+(((x432)*(x436)*(x452)))+(((IkReal(2.00000000000000))*(x433)*(x457)))+(((IkReal(-1.00000000000000))*(x433)*(x441)))+(((r02)*(sj1)*(x460)))+(((x428)*(x433)*(x455)))+(((IkReal(-1.00000000000000))*(x434)*(x449)))+(((IkReal(-1.00000000000000))*(x431)*(x447)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x453)))+(((cj1)*(py)*(x428)*(x445)))+(((IkReal(-1.00000000000000))*(r02)*(x443)))+(((cj1)*(x427)*(x459)))+(((IkReal(0.380000000000000))*(sj0)*(x432)))+(((IkReal(-1.00000000000000))*(cj1)*(x427)*(x453)))+(((x428)*(x433)*(x435)))+(((x451)*(x454)))+(((x439)*(x458)))+(((IkReal(-0.0361000000000000))*(cj1)*(x427)))+(((pz)*(x428)*(x430))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x461=((IkReal(273000.000000000))*(sj3));
IkReal x462=((pz)*(sj1));
IkReal x463=((IkReal(139000.000000000))*(sj0));
IkReal x464=((px)*(sj1));
IkReal x465=((r02)*(sj0));
IkReal x466=((IkReal(273000.000000000))*(cj3));
IkReal x467=((py)*(sj1));
IkReal x468=((cj1)*(pz));
IkReal x469=((IkReal(139000.000000000))*(cj0));
IkReal x470=((r00)*(sj0));
IkReal x471=((cj1)*(py)*(r00));
IkReal x472=((cj0)*(x466));
IkReal x473=((cj1)*(px)*(r01));
Atan2Value<IkReal> x474 = IKatan2WithCheck(((gconst6)*(((((IkReal(-1.00000000000000))*(r00)*(x462)*(x463)))+(((IkReal(139000.000000000))*(x473)))+(((r02)*(x463)*(x464)))+(((r01)*(x462)*(x472)))+(((r01)*(x462)*(x469)))+(((x466)*(x473)))+(((x464)*(x465)*(x466)))+(((IkReal(-51870.0000000000))*(sj3)))+(((sj0)*(x461)*(x467)))+(((IkReal(-1.00000000000000))*(r02)*(x467)*(x469)))+(((cj0)*(x461)*(x464)))+(((IkReal(-1.00000000000000))*(r02)*(x467)*(x472)))+(((IkReal(-1.00000000000000))*(x461)*(x468)))+(((IkReal(-1.00000000000000))*(x466)*(x471)))+(((IkReal(-139000.000000000))*(x471)))+(((IkReal(-1.00000000000000))*(x462)*(x466)*(x470)))))),((gconst6)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x466)*(x468)))+(((sj0)*(x466)*(x467)))+(((x463)*(x467)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x461)*(x462)))+(((x464)*(x472)))+(((IkReal(-1.00000000000000))*(x461)*(x473)))+(((IkReal(-139000.000000000))*(x468)))+(((x464)*(x469)))+(((x461)*(x462)*(x470)))+(((cj0)*(r02)*(x461)*(x467)))+(((x461)*(x471)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x461)*(x464)*(x465)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x474.valid ) {
    continue;
}
j2array[0]=x474.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x475=IKcos(j2);
IkReal x476=IKsin(j2);
IkReal x477=((px)*(sj1));
IkReal x478=((IkReal(0.273000000000000))*(cj3));
IkReal x479=((py)*(sj1));
IkReal x480=((IkReal(1.00000000000000))*(r00));
IkReal x481=((cj1)*(sj0));
IkReal x482=((IkReal(1.00000000000000))*(px));
IkReal x483=((IkReal(1.00000000000000))*(pz));
IkReal x484=((cj0)*(r01));
IkReal x485=((pz)*(sj1));
IkReal x486=((IkReal(0.273000000000000))*(sj3));
IkReal x487=((cj0)*(cj1));
IkReal x488=((IkReal(0.139000000000000))*(x476));
IkReal x489=((IkReal(0.139000000000000))*(x475));
IkReal x490=((x475)*(x486));
IkReal x491=((x476)*(x478));
IkReal x492=((x476)*(x486));
IkReal x493=((x475)*(x478));
IkReal x494=((x488)+(x491));
IkReal x495=((x489)+(x492)+(x493));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x483)))+(((IkReal(-1.00000000000000))*(x495)))+(((cj0)*(x477)))+(((sj0)*(x479))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x490)))+(((IkReal(-1.00000000000000))*(sj1)*(x483)))+(((IkReal(-1.00000000000000))*(py)*(x481)))+(x494)+(((IkReal(-1.00000000000000))*(x482)*(x487))));
evalcond[2]=((((x484)*(x485)))+(((IkReal(-1.00000000000000))*(x494)))+(((r02)*(sj0)*(x477)))+(x490)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x479)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x480)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(sj0)*(x480)*(x485))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x495)))+(((pz)*(r00)*(x481)))+(((IkReal(-1.00000000000000))*(cj1)*(x483)*(x484)))+(((IkReal(-1.00000000000000))*(x479)*(x480)))+(((IkReal(-0.190000000000000))*(x484)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r02)*(x481)*(x482)))+(((py)*(r02)*(x487)))+(((r01)*(x477))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x496=((IkReal(139000.000000000))*(cj1));
IkReal x497=((py)*(sj0));
IkReal x498=((cj0)*(px));
IkReal x499=((IkReal(273000.000000000))*(cj3));
IkReal x500=((IkReal(139000.000000000))*(sj1));
IkReal x501=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x502=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x503 = IKatan2WithCheck(((gconst5)*(((((IkReal(-1.00000000000000))*(pz)*(x500)))+(((IkReal(-1.00000000000000))*(x497)*(x502)))+(((IkReal(-1.00000000000000))*(x496)*(x497)))+(((IkReal(-1.00000000000000))*(x496)*(x498)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x498)*(x499)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x499)))+(((IkReal(-1.00000000000000))*(cj1)*(x497)*(x499)))+(((IkReal(-1.00000000000000))*(x498)*(x502)))+(((pz)*(x501)))))),((gconst5)*(((IkReal(26410.0000000000))+(((pz)*(x496)))+(((x497)*(x501)))+(((IkReal(-1.00000000000000))*(x497)*(x500)))+(((IkReal(-1.00000000000000))*(sj1)*(x497)*(x499)))+(((IkReal(-1.00000000000000))*(sj1)*(x498)*(x499)))+(((IkReal(51870.0000000000))*(cj3)))+(((x498)*(x501)))+(((cj1)*(pz)*(x499)))+(((IkReal(-1.00000000000000))*(x498)*(x500)))+(((pz)*(x502)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x503.valid ) {
    continue;
}
j2array[0]=x503.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x504=IKcos(j2);
IkReal x505=IKsin(j2);
IkReal x506=((px)*(sj1));
IkReal x507=((IkReal(0.273000000000000))*(cj3));
IkReal x508=((py)*(sj1));
IkReal x509=((IkReal(1.00000000000000))*(r00));
IkReal x510=((cj1)*(sj0));
IkReal x511=((IkReal(1.00000000000000))*(px));
IkReal x512=((IkReal(1.00000000000000))*(pz));
IkReal x513=((cj0)*(r01));
IkReal x514=((pz)*(sj1));
IkReal x515=((IkReal(0.273000000000000))*(sj3));
IkReal x516=((cj0)*(cj1));
IkReal x517=((IkReal(0.139000000000000))*(x505));
IkReal x518=((IkReal(0.139000000000000))*(x504));
IkReal x519=((x504)*(x515));
IkReal x520=((x505)*(x507));
IkReal x521=((x505)*(x515));
IkReal x522=((x504)*(x507));
IkReal x523=((x520)+(x517));
IkReal x524=((x522)+(x521)+(x518));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x512)))+(((sj0)*(x508)))+(((IkReal(-1.00000000000000))*(x524)))+(((cj0)*(x506))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x511)*(x516)))+(((IkReal(-1.00000000000000))*(py)*(x510)))+(((IkReal(-1.00000000000000))*(sj1)*(x512)))+(x523)+(((IkReal(-1.00000000000000))*(x519))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x523)))+(((x513)*(x514)))+(x519)+(((r02)*(sj0)*(x506)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x508)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(sj0)*(x509)*(x514)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x509))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x513)))+(((IkReal(-1.00000000000000))*(x508)*(x509)))+(((IkReal(-1.00000000000000))*(cj1)*(x512)*(x513)))+(((IkReal(-1.00000000000000))*(x524)))+(((py)*(r02)*(x516)))+(((r01)*(x506)))+(((IkReal(-1.00000000000000))*(r02)*(x510)*(x511)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((pz)*(r00)*(x510))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x525=((IkReal(139.000000000000))*(sj1));
IkReal x526=((cj0)*(r00));
IkReal x527=((IkReal(1000.00000000000))*(cj4));
IkReal x528=((cj1)*(cj3));
IkReal x529=((IkReal(273.000000000000))*(r02));
IkReal x530=((cj1)*(sj3));
IkReal x531=((IkReal(190.000000000000))*(cj4));
IkReal x532=((IkReal(273.000000000000))*(r01));
IkReal x533=((cj3)*(sj1));
IkReal x534=((cj0)*(px));
IkReal x535=((sj1)*(sj3));
IkReal x536=((sj0)*(x535));
Atan2Value<IkReal> x537 = IKatan2WithCheck(((gconst2)*(((((pz)*(x527)*(x530)))+(((IkReal(-1.00000000000000))*(x527)*(x534)*(x535)))+(((sj3)*(x531)))+(((IkReal(-1.00000000000000))*(x528)*(x529)))+(((IkReal(273.000000000000))*(x526)*(x533)))+(((x525)*(x526)))+(((r01)*(sj0)*(x525)))+(((sj0)*(x532)*(x533)))+(((IkReal(-1.00000000000000))*(py)*(x527)*(x536)))+(((IkReal(-139.000000000000))*(cj1)*(r02)))))),((gconst2)*(((((IkReal(-1.00000000000000))*(x527)*(x533)*(x534)))+(((IkReal(-1.00000000000000))*(x532)*(x536)))+(((pz)*(x527)*(x528)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x527)*(x533)))+(((cj3)*(x531)))+(((IkReal(-273.000000000000))*(x526)*(x535)))+(((x529)*(x530)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x537.valid ) {
    continue;
}
j2array[0]=x537.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x538=IKcos(j2);
IkReal x539=IKsin(j2);
IkReal x540=(pz)*(pz);
IkReal x541=(py)*(py);
IkReal x542=(px)*(px);
IkReal x543=((px)*(sj1));
IkReal x544=((sj0)*(sj1));
IkReal x545=((IkReal(0.0552080000000000))*(sj3));
IkReal x546=((pp)*(r01));
IkReal x547=((cj1)*(sj0));
IkReal x548=((pz)*(r01));
IkReal x549=((IkReal(0.380000000000000))*(sj0));
IkReal x550=((IkReal(1.00000000000000))*(sj1));
IkReal x551=((py)*(r00));
IkReal x552=((pz)*(r02));
IkReal x553=((IkReal(2.00000000000000))*(cj0));
IkReal x554=((IkReal(2.00000000000000))*(py));
IkReal x555=((pz)*(r00));
IkReal x556=((pp)*(r02));
IkReal x557=((IkReal(1.00000000000000))*(cj1));
IkReal x558=((cj0)*(r00));
IkReal x559=((IkReal(0.0361000000000000))*(cj1));
IkReal x560=((py)*(r02));
IkReal x561=((IkReal(0.0361000000000000))*(r01));
IkReal x562=((IkReal(0.0361000000000000))*(sj1));
IkReal x563=((py)*(r01));
IkReal x564=((IkReal(2.00000000000000))*(px));
IkReal x565=((cj1)*(px));
IkReal x566=((IkReal(0.0938500000000000))*(cj3));
IkReal x567=((IkReal(0.380000000000000))*(cj0));
IkReal x568=((px)*(r02));
IkReal x569=((cj4)*(x539));
IkReal x570=((cj4)*(x538));
IkReal x571=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x572=((IkReal(0.139000000000000))*(x539));
IkReal x573=((IkReal(0.139000000000000))*(x538));
IkReal x574=((r00)*(x542));
IkReal x575=((IkReal(0.273000000000000))*(x538));
IkReal x576=((IkReal(0.273000000000000))*(cj3)*(x539));
IkReal x577=((x552)*(x554));
IkReal x578=((IkReal(2.00000000000000))*(r01)*(x541));
IkReal x579=((IkReal(2.00000000000000))*(r02)*(x540));
evalcond[0]=((((sj1)*(x558)))+(((IkReal(-1.00000000000000))*(sj3)*(x570)))+(((IkReal(-1.00000000000000))*(r02)*(x557)))+(((cj3)*(x569)))+(((r01)*(x544))));
evalcond[1]=((((sj3)*(x569)))+(((IkReal(-1.00000000000000))*(r02)*(x550)))+(((cj3)*(x570)))+(((IkReal(-1.00000000000000))*(r01)*(x547)))+(((IkReal(-1.00000000000000))*(x557)*(x558))));
evalcond[2]=((IkReal(-0.190000000000000))+(((py)*(x544)))+(((IkReal(-1.00000000000000))*(cj3)*(x575)))+(((IkReal(-0.273000000000000))*(sj3)*(x539)))+(((cj0)*(x543)))+(((IkReal(-1.00000000000000))*(x573)))+(((IkReal(-1.00000000000000))*(pz)*(x557))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj3)*(x575)))+(((IkReal(-1.00000000000000))*(py)*(x547)))+(x576)+(x572)+(((IkReal(-1.00000000000000))*(pz)*(x550)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x557))));
evalcond[4]=((((sj4)*(x572)))+(((sj4)*(x576)))+(((IkReal(-1.00000000000000))*(x544)*(x555)))+(((IkReal(-1.00000000000000))*(x538)*(x571)))+(((r02)*(sj0)*(x543)))+(((r01)*(x565)))+(((IkReal(-1.00000000000000))*(cj0)*(x550)*(x560)))+(((IkReal(-1.00000000000000))*(x551)*(x557)))+(((cj0)*(sj1)*(x548))));
evalcond[5]=((((sj4)*(x573)))+(((cj0)*(cj1)*(x560)))+(((x539)*(x571)))+(((IkReal(-1.00000000000000))*(x550)*(x551)))+(((cj3)*(sj4)*(x575)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((x547)*(x555)))+(((IkReal(-1.00000000000000))*(x547)*(x568)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(x548)*(x557)))+(((r01)*(x543))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x556)*(x557)))+(((x566)*(x569)))+(((IkReal(0.0758940000000000))*(x569)))+(((IkReal(-1.00000000000000))*(x543)*(x553)*(x563)))+(((x544)*(x546)))+(((r02)*(x559)))+(((cj1)*(x548)*(x554)))+(((pp)*(sj1)*(x558)))+(((IkReal(-1.00000000000000))*(x558)*(x562)))+(((IkReal(-1.00000000000000))*(x545)*(x570)))+(((IkReal(-1.00000000000000))*(x543)*(x552)*(x553)))+(((IkReal(0.380000000000000))*(x563)))+(((IkReal(-1.00000000000000))*(x544)*(x578)))+(((IkReal(-1.00000000000000))*(x544)*(x577)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(sj1)*(x553)*(x574)))+(((IkReal(-2.00000000000000))*(sj0)*(x543)*(x551)))+(((cj1)*(x579)))+(((IkReal(-1.00000000000000))*(x544)*(x561)))+(((cj1)*(x555)*(x564)))+(((IkReal(0.380000000000000))*(x552))));
evalcond[7]=((((x552)*(x553)*(x565)))+(((x547)*(x551)*(x564)))+(((sj1)*(x579)))+(((cj1)*(x553)*(x574)))+(((x549)*(x560)))+(((IkReal(-1.00000000000000))*(x550)*(x556)))+(((IkReal(-1.00000000000000))*(x546)*(x547)))+(((IkReal(-1.00000000000000))*(x555)*(x567)))+(((x545)*(x569)))+(((x567)*(x568)))+(((IkReal(2.00000000000000))*(x543)*(x555)))+(((x547)*(x577)))+(((x547)*(x578)))+(((sj1)*(x548)*(x554)))+(((IkReal(-1.00000000000000))*(x548)*(x549)))+(((x566)*(x570)))+(((IkReal(0.0758940000000000))*(x570)))+(((x553)*(x563)*(x565)))+(((IkReal(-1.00000000000000))*(x558)*(x559)))+(((IkReal(-1.00000000000000))*(pp)*(x557)*(x558)))+(((IkReal(-1.00000000000000))*(x547)*(x561)))+(((IkReal(-1.00000000000000))*(r02)*(x562))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x580=((IkReal(1.00000000000000))*(sj1));
IkReal x581=((cj1)*(sj3));
IkReal x582=((cj0)*(r00));
IkReal x583=((cj3)*(r02));
IkReal x584=((r01)*(sj0));
IkReal x585=((sj1)*(sj3));
IkReal x586=((cj3)*(x584));
Atan2Value<IkReal> x587 = IKatan2WithCheck(((gconst1)*(((((IkReal(-1.00000000000000))*(x580)*(x586)))+(((x581)*(x584)))+(((x581)*(x582)))+(((r02)*(x585)))+(((IkReal(-1.00000000000000))*(cj3)*(x580)*(x582)))+(((cj1)*(x583)))))),((gconst1)*(((((x584)*(x585)))+(((x582)*(x585)))+(((sj1)*(x583)))+(((IkReal(-1.00000000000000))*(r02)*(x581)))+(((cj1)*(cj3)*(x582)))+(((cj1)*(x586)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x587.valid ) {
    continue;
}
j2array[0]=x587.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x588=IKcos(j2);
IkReal x589=IKsin(j2);
IkReal x590=(pz)*(pz);
IkReal x591=(py)*(py);
IkReal x592=(px)*(px);
IkReal x593=((px)*(sj1));
IkReal x594=((sj0)*(sj1));
IkReal x595=((IkReal(0.0552080000000000))*(sj3));
IkReal x596=((pp)*(r01));
IkReal x597=((cj1)*(sj0));
IkReal x598=((pz)*(r01));
IkReal x599=((IkReal(0.380000000000000))*(sj0));
IkReal x600=((IkReal(1.00000000000000))*(sj1));
IkReal x601=((py)*(r00));
IkReal x602=((pz)*(r02));
IkReal x603=((IkReal(2.00000000000000))*(cj0));
IkReal x604=((IkReal(2.00000000000000))*(py));
IkReal x605=((pz)*(r00));
IkReal x606=((pp)*(r02));
IkReal x607=((IkReal(1.00000000000000))*(cj1));
IkReal x608=((cj0)*(r00));
IkReal x609=((IkReal(0.0361000000000000))*(cj1));
IkReal x610=((py)*(r02));
IkReal x611=((IkReal(0.0361000000000000))*(r01));
IkReal x612=((IkReal(0.0361000000000000))*(sj1));
IkReal x613=((py)*(r01));
IkReal x614=((IkReal(2.00000000000000))*(px));
IkReal x615=((cj1)*(px));
IkReal x616=((IkReal(0.0938500000000000))*(cj3));
IkReal x617=((IkReal(0.380000000000000))*(cj0));
IkReal x618=((px)*(r02));
IkReal x619=((cj4)*(x589));
IkReal x620=((cj4)*(x588));
IkReal x621=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x622=((IkReal(0.139000000000000))*(x589));
IkReal x623=((IkReal(0.139000000000000))*(x588));
IkReal x624=((r00)*(x592));
IkReal x625=((IkReal(0.273000000000000))*(x588));
IkReal x626=((IkReal(0.273000000000000))*(cj3)*(x589));
IkReal x627=((x602)*(x604));
IkReal x628=((IkReal(2.00000000000000))*(r01)*(x591));
IkReal x629=((IkReal(2.00000000000000))*(r02)*(x590));
evalcond[0]=((((sj1)*(x608)))+(((cj3)*(x619)))+(((r01)*(x594)))+(((IkReal(-1.00000000000000))*(sj3)*(x620)))+(((IkReal(-1.00000000000000))*(r02)*(x607))));
evalcond[1]=((((cj3)*(x620)))+(((IkReal(-1.00000000000000))*(r01)*(x597)))+(((sj3)*(x619)))+(((IkReal(-1.00000000000000))*(r02)*(x600)))+(((IkReal(-1.00000000000000))*(x607)*(x608))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-0.273000000000000))*(sj3)*(x589)))+(((py)*(x594)))+(((IkReal(-1.00000000000000))*(x623)))+(((IkReal(-1.00000000000000))*(pz)*(x607)))+(((IkReal(-1.00000000000000))*(cj3)*(x625)))+(((cj0)*(x593))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x607)))+(x626)+(x622)+(((IkReal(-1.00000000000000))*(pz)*(x600)))+(((IkReal(-1.00000000000000))*(sj3)*(x625)))+(((IkReal(-1.00000000000000))*(py)*(x597))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj0)*(x600)*(x610)))+(((sj4)*(x626)))+(((sj4)*(x622)))+(((cj0)*(sj1)*(x598)))+(((r01)*(x615)))+(((IkReal(-1.00000000000000))*(x594)*(x605)))+(((IkReal(-1.00000000000000))*(x588)*(x621)))+(((r02)*(sj0)*(x593)))+(((IkReal(-1.00000000000000))*(x601)*(x607))));
evalcond[5]=((((x589)*(x621)))+(((sj4)*(x623)))+(((r01)*(x593)))+(((x597)*(x605)))+(((cj3)*(sj4)*(x625)))+(((IkReal(-1.00000000000000))*(cj0)*(x598)*(x607)))+(((cj0)*(cj1)*(x610)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((IkReal(-1.00000000000000))*(x600)*(x601)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x597)*(x618))));
evalcond[6]=((((x594)*(x596)))+(((IkReal(-1.00000000000000))*(x594)*(x611)))+(((IkReal(-1.00000000000000))*(x593)*(x603)*(x613)))+(((cj1)*(x598)*(x604)))+(((pp)*(sj1)*(x608)))+(((IkReal(-1.00000000000000))*(x594)*(x627)))+(((IkReal(-1.00000000000000))*(x594)*(x628)))+(((x616)*(x619)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(x595)*(x620)))+(((cj1)*(x605)*(x614)))+(((IkReal(-1.00000000000000))*(x593)*(x602)*(x603)))+(((IkReal(0.0758940000000000))*(x619)))+(((IkReal(0.380000000000000))*(x613)))+(((r02)*(x609)))+(((IkReal(0.380000000000000))*(x602)))+(((IkReal(-1.00000000000000))*(x606)*(x607)))+(((IkReal(-2.00000000000000))*(sj0)*(x593)*(x601)))+(((IkReal(-1.00000000000000))*(sj1)*(x603)*(x624)))+(((cj1)*(x629)))+(((IkReal(-1.00000000000000))*(x608)*(x612))));
evalcond[7]=((((sj1)*(x598)*(x604)))+(((IkReal(-1.00000000000000))*(x598)*(x599)))+(((x603)*(x613)*(x615)))+(((IkReal(-1.00000000000000))*(x608)*(x609)))+(((x616)*(x620)))+(((IkReal(-1.00000000000000))*(x597)*(x611)))+(((cj1)*(x603)*(x624)))+(((x595)*(x619)))+(((x597)*(x601)*(x614)))+(((IkReal(0.0758940000000000))*(x620)))+(((IkReal(-1.00000000000000))*(x605)*(x617)))+(((IkReal(-1.00000000000000))*(x596)*(x597)))+(((x617)*(x618)))+(((sj1)*(x629)))+(((IkReal(-1.00000000000000))*(x600)*(x606)))+(((x599)*(x610)))+(((x602)*(x603)*(x615)))+(((IkReal(2.00000000000000))*(x593)*(x605)))+(((x597)*(x627)))+(((x597)*(x628)))+(((IkReal(-1.00000000000000))*(pp)*(x607)*(x608)))+(((IkReal(-1.00000000000000))*(r02)*(x612))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x630=((IkReal(1000.00000000000))*(r02));
IkReal x631=((IkReal(1000.00000000000))*(r00));
IkReal x632=((IkReal(1000.00000000000))*(r01));
IkReal x633=((IkReal(190.000000000000))*(r02));
IkReal x634=((IkReal(190.000000000000))*(r01)*(sj0));
IkReal x635=((IkReal(190.000000000000))*(cj0)*(r00));
Atan2Value<IkReal> x636 = IKatan2WithCheck(((gconst0)*(((((py)*(x632)))+(((pz)*(x630)))+(((IkReal(-1.00000000000000))*(sj1)*(x634)))+(((IkReal(-1.00000000000000))*(sj1)*(x635)))+(((cj1)*(x633)))+(((px)*(x631)))))),((gconst0)*(((((IkReal(-1.00000000000000))*(cj0)*(pz)*(x631)))+(((IkReal(-1.00000000000000))*(cj1)*(x635)))+(((IkReal(-1.00000000000000))*(cj1)*(x634)))+(((cj0)*(px)*(x630)))+(((py)*(sj0)*(x630)))+(((IkReal(-1.00000000000000))*(sj1)*(x633)))+(((IkReal(-273.000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x632)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x636.valid ) {
    continue;
}
j3array[0]=x636.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x637=IKcos(j3);
IkReal x638=((r01)*(sj0));
IkReal x639=((IkReal(0.190000000000000))*(cj1));
IkReal x640=((py)*(r02));
IkReal x641=((IkReal(0.380000000000000))*(cj1));
IkReal x642=((r00)*(sj0));
IkReal x643=((cj0)*(r01));
IkReal x644=((IkReal(1.00000000000000))*(pz));
IkReal x645=((IkReal(1.00000000000000))*(pp));
IkReal x646=((cj0)*(r00));
IkReal x647=((IkReal(0.190000000000000))*(sj1));
IkReal x648=((IkReal(0.139000000000000))*(cj4));
IkReal x649=((IkReal(2.00000000000000))*(pz));
IkReal x650=((px)*(r02));
IkReal x651=((IkReal(2.00000000000000))*(px)*(py));
IkReal x652=((IkReal(0.380000000000000))*(py)*(sj1));
IkReal x653=((IkReal(0.0758940000000000))*(x637));
IkReal x654=((IkReal(0.380000000000000))*(px)*(sj1));
evalcond[0]=((IkReal(0.0577500000000000))+(((sj0)*(x652)))+(((IkReal(-1.00000000000000))*(x645)))+(x653)+(((cj0)*(x654)))+(((IkReal(-1.00000000000000))*(pz)*(x641))));
evalcond[1]=((((x638)*(x647)))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(x639)))+(((IkReal(-1.00000000000000))*(r02)*(x644)))+(((x648)*(IKsin(j3))))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((x646)*(x647))));
evalcond[2]=((((sj0)*(x640)))+(((IkReal(-1.00000000000000))*(x639)*(x646)))+(((IkReal(-1.00000000000000))*(r02)*(x647)))+(((IkReal(-1.00000000000000))*(x638)*(x639)))+(((IkReal(-1.00000000000000))*(x644)*(x646)))+(((IkReal(-1.00000000000000))*(x637)*(x648)))+(((IkReal(-0.273000000000000))*(cj4)))+(((cj0)*(x650)))+(((IkReal(-1.00000000000000))*(x638)*(x644))));
evalcond[3]=((((sj4)*(x653)))+(((IkReal(-1.00000000000000))*(x642)*(x645)))+(((pp)*(x643)))+(((sj0)*(x649)*(x650)))+(((IkReal(-1.00000000000000))*(x646)*(x651)))+(((IkReal(0.0938500000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(cj0)*(x640)*(x649)))+(((IkReal(-1.00000000000000))*(cj0)*(x640)*(x641)))+(((IkReal(2.00000000000000))*(x642)*((px)*(px))))+(((IkReal(-1.00000000000000))*(r01)*(x654)))+(((IkReal(-2.00000000000000))*(x643)*((py)*(py))))+(((sj0)*(x641)*(x650)))+(((IkReal(-0.0361000000000000))*(x642)))+(((IkReal(-1.00000000000000))*(pz)*(x641)*(x642)))+(((IkReal(0.0361000000000000))*(x643)))+(((r00)*(x652)))+(((pz)*(x641)*(x643)))+(((x638)*(x651))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x655=((IkReal(273.000000000000))*(cj4));
gconst2=IKsign(((((IkReal(-1.00000000000000))*(x655)*((sj3)*(sj3))))+(((IkReal(-139.000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x655)*((cj3)*(cj3))))));
IkReal x656=((IkReal(1.96402877697842))*(cj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x656)*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x656)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x657=((IkReal(0.0758940000000000))*(cj3));
IkReal x658=(py)*(py);
IkReal x659=(px)*(px);
IkReal x660=(pz)*(pz);
IkReal x661=((r01)*(sj0));
IkReal x662=((IkReal(2.00000000000000))*(px));
IkReal x663=((IkReal(0.190000000000000))*(cj1));
IkReal x664=((r00)*(sj1));
IkReal x665=((IkReal(0.0361000000000000))*(cj0));
IkReal x666=((py)*(r02));
IkReal x667=((cj0)*(cj1));
IkReal x668=((IkReal(0.380000000000000))*(pz));
IkReal x669=((pz)*(r02));
IkReal x670=((IkReal(2.00000000000000))*(sj0));
IkReal x671=((cj0)*(r01));
IkReal x672=((IkReal(0.380000000000000))*(py));
IkReal x673=((pz)*(sj1));
IkReal x674=((IkReal(1.00000000000000))*(sj0));
IkReal x675=((pp)*(r00));
IkReal x676=((IkReal(0.190000000000000))*(sj1));
IkReal x677=((IkReal(0.0361000000000000))*(sj1));
IkReal x678=((IkReal(2.00000000000000))*(cj0));
IkReal x679=((r00)*(sj0));
IkReal x680=((IkReal(1.00000000000000))*(r00));
IkReal x681=((cj1)*(r00));
IkReal x682=((cj1)*(r02));
IkReal x683=((cj0)*(r00));
IkReal x684=((cj0)*(sj1));
IkReal x685=((IkReal(0.380000000000000))*(px));
IkReal x686=((cj1)*(pz));
IkReal x687=((IkReal(1.00000000000000))*(pp));
IkReal x688=((cj0)*(r02));
IkReal x689=((py)*(r01));
IkReal x690=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x691=((r00)*(x659));
IkReal x692=((IkReal(2.00000000000000))*(x689));
IkReal x693=((IkReal(2.00000000000000))*(x658));
IkReal x694=((IkReal(2.00000000000000))*(x660));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x674)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(x671)+(((IkReal(-1.00000000000000))*(r00)*(x674))));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(x687)))+(((IkReal(-1.00000000000000))*(cj1)*(x668)))+(x657)+(((x684)*(x685)))+(((sj0)*(sj1)*(x672))));
evalcond[4]=((((cj0)*(x664)))+(((sj1)*(x661)))+(((IkReal(-1.00000000000000))*(x682))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x667)*(x680)))+(((IkReal(-1.00000000000000))*(cj1)*(x661)))+(((IkReal(-1.00000000000000))*(x690))));
evalcond[6]=((((x661)*(x676)))+(((IkReal(-1.00000000000000))*(x669)))+(((IkReal(-1.00000000000000))*(px)*(x680)))+(((IkReal(0.190000000000000))*(cj0)*(x664)))+(((IkReal(-1.00000000000000))*(x689)))+(((IkReal(-1.00000000000000))*(r02)*(x663))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r02)*(x676)))+(((px)*(x688)))+(((sj0)*(x666)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x680)))+(((IkReal(-1.00000000000000))*(x663)*(x683)))+(((IkReal(-1.00000000000000))*(x661)*(x663)))+(((IkReal(-1.00000000000000))*(pz)*(x661))));
evalcond[8]=((IkReal(0.0938500000000000))+(((r01)*(x665)))+(((IkReal(-0.0361000000000000))*(x679)))+(((sj0)*(x682)*(x685)))+(((x664)*(x672)))+(((IkReal(-1.00000000000000))*(pz)*(x666)*(x678)))+(((IkReal(-1.00000000000000))*(x671)*(x693)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x685)))+(((IkReal(-1.00000000000000))*(py)*(x662)*(x683)))+(x657)+(((r01)*(x667)*(x668)))+(((py)*(x661)*(x662)))+(((pp)*(x671)))+(((IkReal(-1.00000000000000))*(x674)*(x675)))+(((IkReal(-1.00000000000000))*(cj1)*(x668)*(x679)))+(((x670)*(x691)))+(((IkReal(-0.380000000000000))*(x666)*(x667)))+(((sj0)*(x662)*(x669))));
evalcond[9]=((((IkReal(-1.00000000000000))*(sj1)*(x661)*(x693)))+(((x682)*(x694)))+(((r01)*(x672)))+(((pp)*(sj1)*(x661)))+(((x686)*(x692)))+(((IkReal(-1.00000000000000))*(x662)*(x669)*(x684)))+(((IkReal(-1.00000000000000))*(x666)*(x670)*(x673)))+(((IkReal(0.0361000000000000))*(x682)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x662)*(x671)))+(((r02)*(x668)))+(((IkReal(-1.00000000000000))*(x682)*(x687)))+(((IkReal(-1.00000000000000))*(x659)*(x664)*(x678)))+(((r00)*(x685)))+(((cj0)*(pp)*(x664)))+(((IkReal(-1.00000000000000))*(x664)*(x665)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x662)*(x664)))+(((pz)*(x662)*(x681)))+(((IkReal(-1.00000000000000))*(x661)*(x677))));
evalcond[10]=((((IkReal(-1.00000000000000))*(r02)*(x677)))+(((r02)*(sj1)*(x694)))+(((IkReal(2.00000000000000))*(x667)*(x691)))+(((IkReal(-1.00000000000000))*(x665)*(x681)))+(((IkReal(-1.00000000000000))*(x668)*(x683)))+(((IkReal(-1.00000000000000))*(x667)*(x675)))+(((x685)*(x688)))+(((cj1)*(py)*(x662)*(x679)))+(((IkReal(0.380000000000000))*(sj0)*(x666)))+(((IkReal(-1.00000000000000))*(x661)*(x668)))+(((IkReal(-0.0361000000000000))*(cj1)*(x661)))+(((x662)*(x667)*(x669)))+(((x666)*(x670)*(x686)))+(((x673)*(x692)))+(((cj1)*(x661)*(x693)))+(((x662)*(x667)*(x689)))+(((pz)*(x662)*(x664)))+(((IkReal(-1.00000000000000))*(cj1)*(x661)*(x687)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x687))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x695=((cj1)*(py));
IkReal x696=((pz)*(sj1));
IkReal x697=((IkReal(139000.000000000))*(sj0));
IkReal x698=((IkReal(273000.000000000))*(cj3));
IkReal x699=((py)*(sj1));
IkReal x700=((IkReal(273000.000000000))*(sj3));
IkReal x701=((cj1)*(pz));
IkReal x702=((IkReal(139000.000000000))*(cj0));
IkReal x703=((cj0)*(r02));
IkReal x704=((r00)*(x700));
IkReal x705=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x706=((px)*(r02)*(sj1));
IkReal x707=((cj1)*(px)*(r01));
IkReal x708=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
Atan2Value<IkReal> x709 = IKatan2WithCheck(((gconst4)*(((((r00)*(sj0)*(x696)*(x698)))+(((r00)*(x695)*(x698)))+(((x698)*(x699)*(x703)))+(((r00)*(x696)*(x697)))+(((cj0)*(px)*(sj1)*(x700)))+(((IkReal(-1.00000000000000))*(r01)*(x696)*(x702)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-139000.000000000))*(x707)))+(((IkReal(-1.00000000000000))*(x698)*(x707)))+(((IkReal(-1.00000000000000))*(x697)*(x706)))+(((r02)*(x699)*(x702)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x696)*(x698)))+(((IkReal(139000.000000000))*(r00)*(x695)))+(((IkReal(-1.00000000000000))*(sj0)*(x698)*(x706)))+(((sj0)*(x699)*(x700)))+(((IkReal(-1.00000000000000))*(x700)*(x701)))))),((gconst4)*(((IkReal(-26410.0000000000))+(((px)*(sj1)*(x702)))+(((cj0)*(px)*(sj1)*(x698)))+(((x700)*(x707)))+(((cj0)*(r01)*(x696)*(x700)))+(((sj0)*(x700)*(x706)))+(((x697)*(x699)))+(((IkReal(-1.00000000000000))*(x695)*(x704)))+(((IkReal(-139000.000000000))*(x701)))+(((sj0)*(x698)*(x699)))+(((IkReal(-1.00000000000000))*(x698)*(x701)))+(((IkReal(-1.00000000000000))*(x699)*(x700)*(x703)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj0)*(x696)*(x704)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x709.valid ) {
    continue;
}
j2array[0]=x709.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x710=IKcos(j2);
IkReal x711=IKsin(j2);
IkReal x712=((px)*(sj1));
IkReal x713=((IkReal(0.273000000000000))*(cj3));
IkReal x714=((py)*(sj1));
IkReal x715=((IkReal(1.00000000000000))*(r00));
IkReal x716=((cj1)*(sj0));
IkReal x717=((IkReal(1.00000000000000))*(px));
IkReal x718=((IkReal(1.00000000000000))*(pz));
IkReal x719=((cj0)*(r01));
IkReal x720=((pz)*(sj1));
IkReal x721=((IkReal(0.273000000000000))*(sj3));
IkReal x722=((cj0)*(cj1));
IkReal x723=((IkReal(0.139000000000000))*(x711));
IkReal x724=((IkReal(0.139000000000000))*(x710));
IkReal x725=((x711)*(x713));
IkReal x726=((x710)*(x721));
IkReal x727=((x711)*(x721));
IkReal x728=((x710)*(x713));
IkReal x729=((x723)+(x725));
IkReal x730=((x724)+(x727)+(x728));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x712)))+(((IkReal(-1.00000000000000))*(cj1)*(x718)))+(((IkReal(-1.00000000000000))*(x730)))+(((sj0)*(x714))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x717)*(x722)))+(((IkReal(-1.00000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(py)*(x716)))+(x729)+(((IkReal(-1.00000000000000))*(sj1)*(x718))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x715)*(x720)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x715)))+(((r02)*(sj0)*(x712)))+(((IkReal(-1.00000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x714)))+(((x719)*(x720)))+(x729)+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x714)*(x715)))+(((IkReal(-0.190000000000000))*(x719)))+(((r01)*(x712)))+(((py)*(r02)*(x722)))+(((pz)*(r00)*(x716)))+(((IkReal(-1.00000000000000))*(r02)*(x716)*(x717)))+(((IkReal(-1.00000000000000))*(cj1)*(x718)*(x719)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(x730));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x731=((IkReal(139000.000000000))*(cj1));
IkReal x732=((py)*(sj0));
IkReal x733=((cj0)*(px));
IkReal x734=((IkReal(273000.000000000))*(cj3));
IkReal x735=((IkReal(139000.000000000))*(sj1));
IkReal x736=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x737=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x738 = IKatan2WithCheck(((gconst3)*(((((IkReal(-1.00000000000000))*(x732)*(x737)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x734)))+(((IkReal(-1.00000000000000))*(x731)*(x732)))+(((IkReal(-1.00000000000000))*(x731)*(x733)))+(((IkReal(-1.00000000000000))*(cj1)*(x733)*(x734)))+(((IkReal(-1.00000000000000))*(x733)*(x737)))+(((IkReal(51870.0000000000))*(sj3)))+(((pz)*(x736)))+(((IkReal(-1.00000000000000))*(cj1)*(x732)*(x734)))+(((IkReal(-1.00000000000000))*(pz)*(x735)))))),((gconst3)*(((IkReal(26410.0000000000))+(((cj1)*(pz)*(x734)))+(((IkReal(-1.00000000000000))*(x732)*(x735)))+(((IkReal(-1.00000000000000))*(sj1)*(x732)*(x734)))+(((IkReal(-1.00000000000000))*(x733)*(x735)))+(((IkReal(-1.00000000000000))*(sj1)*(x733)*(x734)))+(((IkReal(51870.0000000000))*(cj3)))+(((x733)*(x736)))+(((pz)*(x737)))+(((pz)*(x731)))+(((x732)*(x736)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x738.valid ) {
    continue;
}
j2array[0]=x738.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x739=IKcos(j2);
IkReal x740=IKsin(j2);
IkReal x741=((px)*(sj1));
IkReal x742=((IkReal(0.273000000000000))*(cj3));
IkReal x743=((py)*(sj1));
IkReal x744=((IkReal(1.00000000000000))*(r00));
IkReal x745=((cj1)*(sj0));
IkReal x746=((IkReal(1.00000000000000))*(px));
IkReal x747=((IkReal(1.00000000000000))*(pz));
IkReal x748=((cj0)*(r01));
IkReal x749=((pz)*(sj1));
IkReal x750=((IkReal(0.273000000000000))*(sj3));
IkReal x751=((cj0)*(cj1));
IkReal x752=((IkReal(0.139000000000000))*(x740));
IkReal x753=((IkReal(0.139000000000000))*(x739));
IkReal x754=((x740)*(x742));
IkReal x755=((x739)*(x750));
IkReal x756=((x740)*(x750));
IkReal x757=((x739)*(x742));
IkReal x758=((x754)+(x752));
IkReal x759=((x757)+(x756)+(x753));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x743)))+(((IkReal(-1.00000000000000))*(cj1)*(x747)))+(((cj0)*(x741)))+(((IkReal(-1.00000000000000))*(x759))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x747)))+(((IkReal(-1.00000000000000))*(py)*(x745)))+(((IkReal(-1.00000000000000))*(x746)*(x751)))+(x758)+(((IkReal(-1.00000000000000))*(x755))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x743)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x744)))+(((IkReal(-1.00000000000000))*(sj0)*(x744)*(x749)))+(x758)+(((r02)*(sj0)*(x741)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x755)))+(((x748)*(x749))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x745)*(x746)))+(((py)*(r02)*(x751)))+(((IkReal(-0.190000000000000))*(x748)))+(((pz)*(r00)*(x745)))+(((IkReal(-1.00000000000000))*(cj1)*(x747)*(x748)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r01)*(x741)))+(x759)+(((IkReal(-1.00000000000000))*(x743)*(x744))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x760=((IkReal(0.0758940000000000))*(cj3));
IkReal x761=(py)*(py);
IkReal x762=(px)*(px);
IkReal x763=(pz)*(pz);
IkReal x764=((r01)*(sj0));
IkReal x765=((IkReal(2.00000000000000))*(px));
IkReal x766=((IkReal(0.190000000000000))*(cj1));
IkReal x767=((r00)*(sj1));
IkReal x768=((IkReal(0.0361000000000000))*(cj0));
IkReal x769=((py)*(r02));
IkReal x770=((cj0)*(cj1));
IkReal x771=((IkReal(0.380000000000000))*(pz));
IkReal x772=((pz)*(r02));
IkReal x773=((IkReal(2.00000000000000))*(sj0));
IkReal x774=((cj0)*(r01));
IkReal x775=((IkReal(0.380000000000000))*(py));
IkReal x776=((pz)*(sj1));
IkReal x777=((IkReal(1.00000000000000))*(sj0));
IkReal x778=((pp)*(r00));
IkReal x779=((IkReal(0.190000000000000))*(sj1));
IkReal x780=((IkReal(0.0361000000000000))*(sj1));
IkReal x781=((IkReal(2.00000000000000))*(cj0));
IkReal x782=((r00)*(sj0));
IkReal x783=((IkReal(1.00000000000000))*(r00));
IkReal x784=((cj1)*(r00));
IkReal x785=((cj1)*(r02));
IkReal x786=((cj0)*(r00));
IkReal x787=((cj0)*(sj1));
IkReal x788=((IkReal(0.380000000000000))*(px));
IkReal x789=((cj1)*(pz));
IkReal x790=((IkReal(1.00000000000000))*(pp));
IkReal x791=((cj0)*(r02));
IkReal x792=((py)*(r01));
IkReal x793=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x794=((r00)*(x762));
IkReal x795=((IkReal(2.00000000000000))*(x792));
IkReal x796=((IkReal(2.00000000000000))*(x761));
IkReal x797=((IkReal(2.00000000000000))*(x763));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x777)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x777)))+(x774));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(x790)))+(((x787)*(x788)))+(((sj0)*(sj1)*(x775)))+(x760)+(((IkReal(-1.00000000000000))*(cj1)*(x771))));
evalcond[4]=((((sj1)*(x764)))+(((cj0)*(x767)))+(((IkReal(-1.00000000000000))*(x785))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x770)*(x783)))+(((IkReal(-1.00000000000000))*(x793)))+(((IkReal(-1.00000000000000))*(cj1)*(x764))));
evalcond[6]=((((IkReal(-1.00000000000000))*(px)*(x783)))+(((x764)*(x779)))+(((IkReal(0.190000000000000))*(cj0)*(x767)))+(((IkReal(-1.00000000000000))*(r02)*(x766)))+(((IkReal(-1.00000000000000))*(x792)))+(((IkReal(-1.00000000000000))*(x772))));
evalcond[7]=((((sj0)*(x769)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x783)))+(((px)*(x791)))+(((IkReal(-1.00000000000000))*(x764)*(x766)))+(((IkReal(-1.00000000000000))*(x766)*(x786)))+(((IkReal(-1.00000000000000))*(r02)*(x779)))+(((IkReal(-1.00000000000000))*(pz)*(x764))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((x773)*(x794)))+(((IkReal(-1.00000000000000))*(pz)*(x769)*(x781)))+(((sj0)*(x785)*(x788)))+(((IkReal(-1.00000000000000))*(py)*(x765)*(x786)))+(((sj0)*(x765)*(x772)))+(((IkReal(-1.00000000000000))*(x760)))+(((py)*(x764)*(x765)))+(((x767)*(x775)))+(((pp)*(x774)))+(((IkReal(-1.00000000000000))*(cj1)*(x771)*(x782)))+(((r01)*(x770)*(x771)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x788)))+(((IkReal(-1.00000000000000))*(x774)*(x796)))+(((IkReal(-0.380000000000000))*(x769)*(x770)))+(((IkReal(-1.00000000000000))*(x777)*(x778)))+(((IkReal(-0.0361000000000000))*(x782)))+(((r01)*(x768))));
evalcond[9]=((((r00)*(x788)))+(((x785)*(x797)))+(((pz)*(x765)*(x784)))+(((IkReal(0.0361000000000000))*(x785)))+(((IkReal(-1.00000000000000))*(x769)*(x773)*(x776)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x765)*(x774)))+(((IkReal(-1.00000000000000))*(x767)*(x768)))+(((IkReal(-1.00000000000000))*(sj1)*(x764)*(x796)))+(((IkReal(-1.00000000000000))*(x764)*(x780)))+(((r01)*(x775)))+(((cj0)*(pp)*(x767)))+(((IkReal(-1.00000000000000))*(x762)*(x767)*(x781)))+(((IkReal(-1.00000000000000))*(x785)*(x790)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x765)*(x767)))+(((IkReal(-1.00000000000000))*(x765)*(x772)*(x787)))+(((pp)*(sj1)*(x764)))+(((x789)*(x795)))+(((r02)*(x771))));
evalcond[10]=((((pz)*(x765)*(x767)))+(((IkReal(2.00000000000000))*(x770)*(x794)))+(((cj1)*(py)*(x765)*(x782)))+(((x765)*(x770)*(x772)))+(((IkReal(-0.0361000000000000))*(cj1)*(x764)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x790)))+(((IkReal(-1.00000000000000))*(x771)*(x786)))+(((IkReal(-1.00000000000000))*(x764)*(x771)))+(((x788)*(x791)))+(((IkReal(-1.00000000000000))*(x770)*(x778)))+(((IkReal(0.380000000000000))*(sj0)*(x769)))+(((cj1)*(x764)*(x796)))+(((x765)*(x770)*(x792)))+(((IkReal(-1.00000000000000))*(x768)*(x784)))+(((x769)*(x773)*(x789)))+(((IkReal(-1.00000000000000))*(r02)*(x780)))+(((x776)*(x795)))+(((r02)*(sj1)*(x797)))+(((IkReal(-1.00000000000000))*(cj1)*(x764)*(x790))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x798=((IkReal(273000.000000000))*(sj3));
IkReal x799=((pz)*(sj1));
IkReal x800=((IkReal(139000.000000000))*(sj0));
IkReal x801=((px)*(sj1));
IkReal x802=((r02)*(sj0));
IkReal x803=((IkReal(273000.000000000))*(cj3));
IkReal x804=((py)*(sj1));
IkReal x805=((cj1)*(pz));
IkReal x806=((IkReal(139000.000000000))*(cj0));
IkReal x807=((r00)*(sj0));
IkReal x808=((cj1)*(py)*(r00));
IkReal x809=((cj0)*(x803));
IkReal x810=((cj1)*(px)*(r01));
Atan2Value<IkReal> x811 = IKatan2WithCheck(((gconst6)*(((((IkReal(-1.00000000000000))*(x798)*(x805)))+(((r02)*(x800)*(x801)))+(((cj0)*(x798)*(x801)))+(((x801)*(x802)*(x803)))+(((IkReal(-1.00000000000000))*(r00)*(x799)*(x800)))+(((sj0)*(x798)*(x804)))+(((IkReal(-51870.0000000000))*(sj3)))+(((r01)*(x799)*(x809)))+(((r01)*(x799)*(x806)))+(((IkReal(-1.00000000000000))*(x799)*(x803)*(x807)))+(((IkReal(-1.00000000000000))*(x803)*(x808)))+(((IkReal(139000.000000000))*(x810)))+(((IkReal(-1.00000000000000))*(r02)*(x804)*(x809)))+(((IkReal(-1.00000000000000))*(r02)*(x804)*(x806)))+(((IkReal(-139000.000000000))*(x808)))+(((x803)*(x810)))))),((gconst6)*(((IkReal(-26410.0000000000))+(((sj0)*(x803)*(x804)))+(((x800)*(x804)))+(((cj0)*(r02)*(x798)*(x804)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x798)*(x799)))+(((x798)*(x808)))+(((IkReal(-1.00000000000000))*(x798)*(x810)))+(((IkReal(-1.00000000000000))*(x803)*(x805)))+(((x801)*(x806)))+(((x801)*(x809)))+(((IkReal(-139000.000000000))*(x805)))+(((x798)*(x799)*(x807)))+(((IkReal(-1.00000000000000))*(x798)*(x801)*(x802)))+(((IkReal(-51870.0000000000))*(cj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x811.valid ) {
    continue;
}
j2array[0]=x811.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x812=IKcos(j2);
IkReal x813=IKsin(j2);
IkReal x814=((px)*(sj1));
IkReal x815=((IkReal(0.273000000000000))*(cj3));
IkReal x816=((py)*(sj1));
IkReal x817=((IkReal(1.00000000000000))*(r00));
IkReal x818=((cj1)*(sj0));
IkReal x819=((IkReal(1.00000000000000))*(px));
IkReal x820=((IkReal(1.00000000000000))*(pz));
IkReal x821=((cj0)*(r01));
IkReal x822=((pz)*(sj1));
IkReal x823=((IkReal(0.273000000000000))*(sj3));
IkReal x824=((cj0)*(cj1));
IkReal x825=((IkReal(0.139000000000000))*(x813));
IkReal x826=((IkReal(0.139000000000000))*(x812));
IkReal x827=((x812)*(x823));
IkReal x828=((x813)*(x815));
IkReal x829=((x813)*(x823));
IkReal x830=((x812)*(x815));
IkReal x831=((x828)+(x825));
IkReal x832=((x829)+(x826)+(x830));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x816)))+(((cj0)*(x814)))+(((IkReal(-1.00000000000000))*(x832)))+(((IkReal(-1.00000000000000))*(cj1)*(x820))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x819)*(x824)))+(((IkReal(-1.00000000000000))*(x827)))+(((IkReal(-1.00000000000000))*(py)*(x818)))+(((IkReal(-1.00000000000000))*(sj1)*(x820)))+(x831));
evalcond[2]=((((x821)*(x822)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x816)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x817)))+(((IkReal(-1.00000000000000))*(x831)))+(x827)+(((cj1)*(px)*(r01)))+(((r02)*(sj0)*(x814)))+(((IkReal(-1.00000000000000))*(sj0)*(x817)*(x822))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x820)*(x821)))+(((py)*(r02)*(x824)))+(((IkReal(-1.00000000000000))*(x816)*(x817)))+(((r01)*(x814)))+(((IkReal(-1.00000000000000))*(r02)*(x818)*(x819)))+(((IkReal(-0.190000000000000))*(x821)))+(((IkReal(-1.00000000000000))*(x832)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((pz)*(r00)*(x818))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x833=((IkReal(139000.000000000))*(cj1));
IkReal x834=((py)*(sj0));
IkReal x835=((cj0)*(px));
IkReal x836=((IkReal(273000.000000000))*(cj3));
IkReal x837=((IkReal(139000.000000000))*(sj1));
IkReal x838=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x839=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x840 = IKatan2WithCheck(((gconst5)*(((((IkReal(-1.00000000000000))*(pz)*(x837)))+(((IkReal(-1.00000000000000))*(cj1)*(x834)*(x836)))+(((IkReal(-1.00000000000000))*(x835)*(x839)))+(((IkReal(-1.00000000000000))*(x833)*(x834)))+(((IkReal(-1.00000000000000))*(x833)*(x835)))+(((pz)*(x838)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x834)*(x839)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x836)))+(((IkReal(-1.00000000000000))*(cj1)*(x835)*(x836)))))),((gconst5)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(x835)*(x837)))+(((IkReal(-1.00000000000000))*(sj1)*(x835)*(x836)))+(((x835)*(x838)))+(((pz)*(x839)))+(((pz)*(x833)))+(((IkReal(-1.00000000000000))*(x834)*(x837)))+(((IkReal(51870.0000000000))*(cj3)))+(((x834)*(x838)))+(((cj1)*(pz)*(x836)))+(((IkReal(-1.00000000000000))*(sj1)*(x834)*(x836)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x840.valid ) {
    continue;
}
j2array[0]=x840.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x841=IKcos(j2);
IkReal x842=IKsin(j2);
IkReal x843=((px)*(sj1));
IkReal x844=((IkReal(0.273000000000000))*(cj3));
IkReal x845=((py)*(sj1));
IkReal x846=((IkReal(1.00000000000000))*(r00));
IkReal x847=((cj1)*(sj0));
IkReal x848=((IkReal(1.00000000000000))*(px));
IkReal x849=((IkReal(1.00000000000000))*(pz));
IkReal x850=((cj0)*(r01));
IkReal x851=((pz)*(sj1));
IkReal x852=((IkReal(0.273000000000000))*(sj3));
IkReal x853=((cj0)*(cj1));
IkReal x854=((IkReal(0.139000000000000))*(x842));
IkReal x855=((IkReal(0.139000000000000))*(x841));
IkReal x856=((x841)*(x852));
IkReal x857=((x842)*(x844));
IkReal x858=((x842)*(x852));
IkReal x859=((x841)*(x844));
IkReal x860=((x857)+(x854));
IkReal x861=((x855)+(x858)+(x859));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x861)))+(((cj0)*(x843)))+(((sj0)*(x845)))+(((IkReal(-1.00000000000000))*(cj1)*(x849))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x856)))+(((IkReal(-1.00000000000000))*(x848)*(x853)))+(((IkReal(-1.00000000000000))*(py)*(x847)))+(x860)+(((IkReal(-1.00000000000000))*(sj1)*(x849))));
evalcond[2]=((((x850)*(x851)))+(((IkReal(-1.00000000000000))*(x860)))+(((IkReal(-1.00000000000000))*(sj0)*(x846)*(x851)))+(((r02)*(sj0)*(x843)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x845)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x846)))+(x856)+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x861)))+(((IkReal(-0.190000000000000))*(x850)))+(((r01)*(x843)))+(((IkReal(-1.00000000000000))*(cj1)*(x849)*(x850)))+(((py)*(r02)*(x853)))+(((IkReal(-1.00000000000000))*(r02)*(x847)*(x848)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x845)*(x846)))+(((pz)*(r00)*(x847))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x862=((IkReal(139.000000000000))*(sj1));
IkReal x863=((cj0)*(r00));
IkReal x864=((IkReal(1000.00000000000))*(cj4));
IkReal x865=((cj1)*(cj3));
IkReal x866=((IkReal(273.000000000000))*(r02));
IkReal x867=((cj1)*(sj3));
IkReal x868=((IkReal(190.000000000000))*(cj4));
IkReal x869=((IkReal(273.000000000000))*(r01));
IkReal x870=((cj3)*(sj1));
IkReal x871=((cj0)*(px));
IkReal x872=((sj1)*(sj3));
IkReal x873=((sj0)*(x872));
Atan2Value<IkReal> x874 = IKatan2WithCheck(((gconst2)*(((((IkReal(-1.00000000000000))*(x865)*(x866)))+(((sj3)*(x868)))+(((pz)*(x864)*(x867)))+(((IkReal(-1.00000000000000))*(x864)*(x871)*(x872)))+(((x862)*(x863)))+(((sj0)*(x869)*(x870)))+(((IkReal(-1.00000000000000))*(py)*(x864)*(x873)))+(((IkReal(-139.000000000000))*(cj1)*(r02)))+(((r01)*(sj0)*(x862)))+(((IkReal(273.000000000000))*(x863)*(x870)))))),((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x864)*(x870)))+(((IkReal(-1.00000000000000))*(x864)*(x870)*(x871)))+(((cj3)*(x868)))+(((IkReal(-1.00000000000000))*(x869)*(x873)))+(((IkReal(-273.000000000000))*(x863)*(x872)))+(((pz)*(x864)*(x865)))+(((x866)*(x867)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x874.valid ) {
    continue;
}
j2array[0]=x874.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x875=IKcos(j2);
IkReal x876=IKsin(j2);
IkReal x877=(pz)*(pz);
IkReal x878=(py)*(py);
IkReal x879=(px)*(px);
IkReal x880=((px)*(sj1));
IkReal x881=((sj0)*(sj1));
IkReal x882=((IkReal(0.0552080000000000))*(sj3));
IkReal x883=((pp)*(r01));
IkReal x884=((cj1)*(sj0));
IkReal x885=((pz)*(r01));
IkReal x886=((IkReal(0.380000000000000))*(sj0));
IkReal x887=((IkReal(1.00000000000000))*(sj1));
IkReal x888=((py)*(r00));
IkReal x889=((pz)*(r02));
IkReal x890=((IkReal(2.00000000000000))*(cj0));
IkReal x891=((IkReal(2.00000000000000))*(py));
IkReal x892=((pz)*(r00));
IkReal x893=((pp)*(r02));
IkReal x894=((IkReal(1.00000000000000))*(cj1));
IkReal x895=((cj0)*(r00));
IkReal x896=((IkReal(0.0361000000000000))*(cj1));
IkReal x897=((py)*(r02));
IkReal x898=((IkReal(0.0361000000000000))*(r01));
IkReal x899=((IkReal(0.0361000000000000))*(sj1));
IkReal x900=((py)*(r01));
IkReal x901=((IkReal(2.00000000000000))*(px));
IkReal x902=((cj1)*(px));
IkReal x903=((IkReal(0.0938500000000000))*(cj3));
IkReal x904=((IkReal(0.380000000000000))*(cj0));
IkReal x905=((px)*(r02));
IkReal x906=((cj4)*(x876));
IkReal x907=((cj4)*(x875));
IkReal x908=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x909=((IkReal(0.139000000000000))*(x876));
IkReal x910=((IkReal(0.139000000000000))*(x875));
IkReal x911=((r00)*(x879));
IkReal x912=((IkReal(0.273000000000000))*(x875));
IkReal x913=((IkReal(0.273000000000000))*(cj3)*(x876));
IkReal x914=((x889)*(x891));
IkReal x915=((IkReal(2.00000000000000))*(r01)*(x878));
IkReal x916=((IkReal(2.00000000000000))*(r02)*(x877));
evalcond[0]=((((sj1)*(x895)))+(((cj3)*(x906)))+(((r01)*(x881)))+(((IkReal(-1.00000000000000))*(sj3)*(x907)))+(((IkReal(-1.00000000000000))*(r02)*(x894))));
evalcond[1]=((((sj3)*(x906)))+(((cj3)*(x907)))+(((IkReal(-1.00000000000000))*(r01)*(x884)))+(((IkReal(-1.00000000000000))*(x894)*(x895)))+(((IkReal(-1.00000000000000))*(r02)*(x887))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(x912)))+(((cj0)*(x880)))+(((py)*(x881)))+(((IkReal(-1.00000000000000))*(pz)*(x894)))+(((IkReal(-1.00000000000000))*(x910)))+(((IkReal(-0.273000000000000))*(sj3)*(x876))));
evalcond[3]=((((IkReal(-1.00000000000000))*(pz)*(x887)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x894)))+(((IkReal(-1.00000000000000))*(sj3)*(x912)))+(((IkReal(-1.00000000000000))*(py)*(x884)))+(x913)+(x909));
evalcond[4]=((((r02)*(sj0)*(x880)))+(((r01)*(x902)))+(((IkReal(-1.00000000000000))*(cj0)*(x887)*(x897)))+(((IkReal(-1.00000000000000))*(x881)*(x892)))+(((IkReal(-1.00000000000000))*(x888)*(x894)))+(((IkReal(-1.00000000000000))*(x875)*(x908)))+(((cj0)*(sj1)*(x885)))+(((sj4)*(x909)))+(((sj4)*(x913))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x887)*(x888)))+(((x884)*(x892)))+(((cj3)*(sj4)*(x912)))+(((r01)*(x880)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((cj0)*(cj1)*(x897)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((x876)*(x908)))+(((IkReal(-1.00000000000000))*(cj0)*(x885)*(x894)))+(((sj4)*(x910)))+(((IkReal(-1.00000000000000))*(x884)*(x905))));
evalcond[6]=((((r02)*(x896)))+(((IkReal(-1.00000000000000))*(x880)*(x890)*(x900)))+(((x881)*(x883)))+(((x903)*(x906)))+(((IkReal(-1.00000000000000))*(x895)*(x899)))+(((IkReal(-1.00000000000000))*(x881)*(x898)))+(((pp)*(sj1)*(x895)))+(((IkReal(0.0758940000000000))*(x906)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-2.00000000000000))*(sj0)*(x880)*(x888)))+(((IkReal(-1.00000000000000))*(x882)*(x907)))+(((IkReal(-1.00000000000000))*(sj1)*(x890)*(x911)))+(((IkReal(-1.00000000000000))*(x893)*(x894)))+(((cj1)*(x885)*(x891)))+(((cj1)*(x892)*(x901)))+(((IkReal(0.380000000000000))*(x889)))+(((IkReal(-1.00000000000000))*(x880)*(x889)*(x890)))+(((IkReal(0.380000000000000))*(x900)))+(((IkReal(-1.00000000000000))*(x881)*(x915)))+(((IkReal(-1.00000000000000))*(x881)*(x914)))+(((cj1)*(x916))));
evalcond[7]=((((x886)*(x897)))+(((IkReal(-1.00000000000000))*(x884)*(x898)))+(((IkReal(-1.00000000000000))*(x883)*(x884)))+(((x903)*(x907)))+(((x884)*(x888)*(x901)))+(((IkReal(-1.00000000000000))*(pp)*(x894)*(x895)))+(((IkReal(-1.00000000000000))*(x895)*(x896)))+(((x884)*(x914)))+(((x884)*(x915)))+(((IkReal(0.0758940000000000))*(x907)))+(((x889)*(x890)*(x902)))+(((x882)*(x906)))+(((IkReal(-1.00000000000000))*(x892)*(x904)))+(((sj1)*(x885)*(x891)))+(((IkReal(2.00000000000000))*(x880)*(x892)))+(((IkReal(-1.00000000000000))*(r02)*(x899)))+(((x890)*(x900)*(x902)))+(((IkReal(-1.00000000000000))*(x885)*(x886)))+(((sj1)*(x916)))+(((x904)*(x905)))+(((cj1)*(x890)*(x911)))+(((IkReal(-1.00000000000000))*(x887)*(x893))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x917=((IkReal(1.00000000000000))*(sj1));
IkReal x918=((cj1)*(sj3));
IkReal x919=((cj0)*(r00));
IkReal x920=((cj3)*(r02));
IkReal x921=((r01)*(sj0));
IkReal x922=((sj1)*(sj3));
IkReal x923=((cj3)*(x921));
Atan2Value<IkReal> x924 = IKatan2WithCheck(((gconst1)*(((((x918)*(x921)))+(((x918)*(x919)))+(((IkReal(-1.00000000000000))*(cj3)*(x917)*(x919)))+(((cj1)*(x920)))+(((IkReal(-1.00000000000000))*(x917)*(x923)))+(((r02)*(x922)))))),((gconst1)*(((((x919)*(x922)))+(((IkReal(-1.00000000000000))*(r02)*(x918)))+(((sj1)*(x920)))+(((x921)*(x922)))+(((cj1)*(x923)))+(((cj1)*(cj3)*(x919)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x924.valid ) {
    continue;
}
j2array[0]=x924.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x925=IKcos(j2);
IkReal x926=IKsin(j2);
IkReal x927=(pz)*(pz);
IkReal x928=(py)*(py);
IkReal x929=(px)*(px);
IkReal x930=((px)*(sj1));
IkReal x931=((sj0)*(sj1));
IkReal x932=((IkReal(0.0552080000000000))*(sj3));
IkReal x933=((pp)*(r01));
IkReal x934=((cj1)*(sj0));
IkReal x935=((pz)*(r01));
IkReal x936=((IkReal(0.380000000000000))*(sj0));
IkReal x937=((IkReal(1.00000000000000))*(sj1));
IkReal x938=((py)*(r00));
IkReal x939=((pz)*(r02));
IkReal x940=((IkReal(2.00000000000000))*(cj0));
IkReal x941=((IkReal(2.00000000000000))*(py));
IkReal x942=((pz)*(r00));
IkReal x943=((pp)*(r02));
IkReal x944=((IkReal(1.00000000000000))*(cj1));
IkReal x945=((cj0)*(r00));
IkReal x946=((IkReal(0.0361000000000000))*(cj1));
IkReal x947=((py)*(r02));
IkReal x948=((IkReal(0.0361000000000000))*(r01));
IkReal x949=((IkReal(0.0361000000000000))*(sj1));
IkReal x950=((py)*(r01));
IkReal x951=((IkReal(2.00000000000000))*(px));
IkReal x952=((cj1)*(px));
IkReal x953=((IkReal(0.0938500000000000))*(cj3));
IkReal x954=((IkReal(0.380000000000000))*(cj0));
IkReal x955=((px)*(r02));
IkReal x956=((cj4)*(x926));
IkReal x957=((cj4)*(x925));
IkReal x958=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x959=((IkReal(0.139000000000000))*(x926));
IkReal x960=((IkReal(0.139000000000000))*(x925));
IkReal x961=((r00)*(x929));
IkReal x962=((IkReal(0.273000000000000))*(x925));
IkReal x963=((IkReal(0.273000000000000))*(cj3)*(x926));
IkReal x964=((x939)*(x941));
IkReal x965=((IkReal(2.00000000000000))*(r01)*(x928));
IkReal x966=((IkReal(2.00000000000000))*(r02)*(x927));
evalcond[0]=((((IkReal(-1.00000000000000))*(r02)*(x944)))+(((sj1)*(x945)))+(((cj3)*(x956)))+(((r01)*(x931)))+(((IkReal(-1.00000000000000))*(sj3)*(x957))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r02)*(x937)))+(((IkReal(-1.00000000000000))*(x944)*(x945)))+(((cj3)*(x957)))+(((IkReal(-1.00000000000000))*(r01)*(x934)))+(((sj3)*(x956))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-0.273000000000000))*(sj3)*(x926)))+(((IkReal(-1.00000000000000))*(pz)*(x944)))+(((IkReal(-1.00000000000000))*(cj3)*(x962)))+(((cj0)*(x930)))+(((py)*(x931)))+(((IkReal(-1.00000000000000))*(x960))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x944)))+(((IkReal(-1.00000000000000))*(sj3)*(x962)))+(((IkReal(-1.00000000000000))*(pz)*(x937)))+(((IkReal(-1.00000000000000))*(py)*(x934)))+(x963)+(x959));
evalcond[4]=((((sj4)*(x963)))+(((IkReal(-1.00000000000000))*(cj0)*(x937)*(x947)))+(((sj4)*(x959)))+(((IkReal(-1.00000000000000))*(x938)*(x944)))+(((r01)*(x952)))+(((IkReal(-1.00000000000000))*(x925)*(x958)))+(((IkReal(-1.00000000000000))*(x931)*(x942)))+(((r02)*(sj0)*(x930)))+(((cj0)*(sj1)*(x935))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(x935)*(x944)))+(((sj4)*(x960)))+(((IkReal(-1.00000000000000))*(x934)*(x955)))+(((cj0)*(cj1)*(x947)))+(((x926)*(x958)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((cj3)*(sj4)*(x962)))+(((x934)*(x942)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r01)*(x930)))+(((IkReal(-1.00000000000000))*(x937)*(x938))));
evalcond[6]=((((IkReal(0.0758940000000000))*(x956)))+(((IkReal(-2.00000000000000))*(sj0)*(x930)*(x938)))+(((r02)*(x946)))+(((IkReal(0.380000000000000))*(x939)))+(((IkReal(-1.00000000000000))*(x945)*(x949)))+(((cj1)*(x966)))+(((IkReal(-1.00000000000000))*(x930)*(x939)*(x940)))+(((pp)*(sj1)*(x945)))+(((cj1)*(x942)*(x951)))+(((IkReal(0.380000000000000))*(x950)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(x930)*(x940)*(x950)))+(((x931)*(x933)))+(((IkReal(-1.00000000000000))*(x943)*(x944)))+(((IkReal(-1.00000000000000))*(x932)*(x957)))+(((IkReal(-1.00000000000000))*(x931)*(x965)))+(((IkReal(-1.00000000000000))*(x931)*(x964)))+(((cj1)*(x935)*(x941)))+(((IkReal(-1.00000000000000))*(x931)*(x948)))+(((x953)*(x956)))+(((IkReal(-1.00000000000000))*(sj1)*(x940)*(x961))));
evalcond[7]=((((IkReal(0.0758940000000000))*(x957)))+(((IkReal(-1.00000000000000))*(r02)*(x949)))+(((IkReal(-1.00000000000000))*(x935)*(x936)))+(((sj1)*(x935)*(x941)))+(((cj1)*(x940)*(x961)))+(((x932)*(x956)))+(((IkReal(2.00000000000000))*(x930)*(x942)))+(((IkReal(-1.00000000000000))*(x945)*(x946)))+(((x936)*(x947)))+(((IkReal(-1.00000000000000))*(x942)*(x954)))+(((sj1)*(x966)))+(((IkReal(-1.00000000000000))*(pp)*(x944)*(x945)))+(((x934)*(x964)))+(((x934)*(x965)))+(((x934)*(x938)*(x951)))+(((IkReal(-1.00000000000000))*(x933)*(x934)))+(((x940)*(x950)*(x952)))+(((IkReal(-1.00000000000000))*(x937)*(x943)))+(((x953)*(x957)))+(((x939)*(x940)*(x952)))+(((IkReal(-1.00000000000000))*(x934)*(x948)))+(((x954)*(x955))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
