/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-10-08 00:20:21.057756
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKfmod(float x, float y)
{
    return fmodf(x,y);
}

inline float IKfmod(double x, double y)
{
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
    x0=IKsin(j[3]);
    x1=IKsin(j[5]);
    x2=IKcos(j[3]);
    x3=IKcos(j[4]);
    x4=IKcos(j[5]);
    x5=IKcos(j[2]);
    x6=((x2)*(x3)*(x4));
    x7=((x0)*(x1));
    x8=IKsin(j[2]);
    x9=IKsin(j[4]);
    x10=IKsin(j[0]);
    x11=IKcos(j[0]);
    x12=IKsin(j[1]);
    x13=IKcos(j[1]);
    x14=((x1)*(x2)*(x3));
    x15=((x0)*(x4));
    x16=((x15)+(x14));
    x17=((x1)*(x2));
    x18=((x15)*(x3));
    x19=((x17)+(x18));
    x20=((x7)+(((-1.00000000000000)*(x6))));
    x21=((x20)*(x8));
    x22=((x4)*(x5)*(x9));
    x23=((((-1.00000000000000)*(x22)))+(x21));
    x24=((x12)*(x23));
    x25=((x6)+(((-1.00000000000000)*(x7))));
    x26=((x25)*(x5));
    x27=((x4)*(x8)*(x9));
    x28=((((-1.00000000000000)*(x27)))+(x26));
    x29=((x13)*(x28));
    x30=((x24)+(x29));
    x31=((x2)*(x4));
    x32=((x3)*(x7));
    x33=((x1)*(x5)*(x9));
    x34=((x16)*(x8));
    x35=((x33)+(x34));
    x36=((x12)*(x35));
    x37=((-1.00000000000000)*(x16));
    x38=((x37)*(x5));
    x39=((x1)*(x8)*(x9));
    x40=((x39)+(x38));
    x41=((x13)*(x40));
    x42=((x36)+(x41));
    x43=((x2)*(x5)*(x9));
    x44=((x3)*(x8));
    x45=((x44)+(x43));
    x46=((x13)*(x45));
    x47=((x3)*(x5));
    x48=((x2)*(x8)*(x9));
    x49=((((-1.00000000000000)*(x48)))+(x47));
    x50=((x12)*(x49));
    x51=((x46)+(x50));
    x52=((0.433099999998376)*(x8));
    x53=((0.431799999998475)+(x52));
    x54=((0.0202999999999065)*(x5));
    x55=((x53)+(((-1.00000000000000)*(x54))));
    x56=((x13)*(x55));
    x57=((0.0202999999999065)*(x8));
    x58=((0.433099999998376)*(x5));
    x59=((x58)+(x57));
    x60=((x12)*(x59));
    x61=((x56)+(x60));
    eerot[0]=((((x11)*(x30)))+(((-1.00000000000000)*(x10)*(x19))));
    eerot[1]=((((x10)*(((((-1.00000000000000)*(x31)))+(x32)))))+(((x11)*(x42))));
    eerot[2]=((((-1.00000000000000)*(x0)*(x10)*(x9)))+(((x11)*(x51))));
    eetrans[0]=((((-0.150100000000748)*(x10)))+(((x11)*(x61))));
    eerot[3]=((((x10)*(x30)))+(((x11)*(x19))));
    eerot[4]=((((x10)*(x42)))+(((x11)*(((((-1.00000000000000)*(x32)))+(x31))))));
    eerot[5]=((((x10)*(x51)))+(((x0)*(x11)*(x9))));
    eetrans[1]=((((x10)*(x61)))+(((0.150100000000748)*(x11))));
    eerot[6]=((((x13)*(x23)))+(((x12)*(((x27)+(((x20)*(x5))))))));
    eerot[7]=((((x12)*(((((-1.00000000000000)*(x39)))+(((x16)*(x5)))))))+(((x13)*(x35))));
    eerot[8]=((((x13)*(x49)))+(((-1.00000000000000)*(x12)*(x45))));
    eetrans[2]=((1.37100000000000)+(((x13)*(x59)))+(((-1.00000000000000)*(x12)*(x55))));
    }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j0, cj0, sj0,
    j1, cj1, sj1,
    j2, cj2, sj2,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    new_r00, r00 = eerot[0*3+0],
    new_r01, r01 = eerot[0*3+1],
    new_r02, r02 = eerot[0*3+2],
    new_r10, r10 = eerot[1*3+0],
    new_r11, r11 = eerot[1*3+1],
    new_r12, r12 = eerot[1*3+2],
    new_r20, r20 = eerot[2*3+0],
    new_r21, r21 = eerot[2*3+1],
    new_r22, r22 = eerot[2*3+2],
    new_px, new_py, new_pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    new_r00=r00;
    new_r01=r01;
    new_r02=r02;
    new_px=px;
    new_r10=r10;
    new_r11=r11;
    new_r12=r12;
    new_py=py;
    new_r20=r20;
    new_r21=r21;
    new_r22=r22;
    new_pz=((-1.37100000000000)+(pz));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        {
        IKReal j2array[2], cj2array[2], sj2array[2];
        bool j2valid[2]={false};
        IKReal x0=(pz)*(pz);
        IKReal x1=((2.67068488904624)*(x0));
        IKReal x2=(py)*(py);
        IKReal x3=((2.67068488904624)*(x2));
        IKReal x4=(px)*(px);
        IKReal x5=((2.67068488904624)*(x4));
        IKReal x6=((-1.06017897617130)+(x3)+(x1)+(x5));
        if( (x6) < -1.0001 || (x6) > 1.0001 )
            continue;
        IKReal x7=IKasin(x6);
        j2array[0]=((0.0468371131133505)+(x7));
        sj2array[0]=IKsin(j2array[0]);
        cj2array[0]=IKcos(j2array[0]);
        j2array[1]=((3.18842976670314)+(((-1.00000000000000)*(x7))));
        sj2array[1]=IKsin(j2array[1]);
        cj2array[1]=IKcos(j2array[1]);
        if( j2array[0] > IKPI )
            j2array[0]-=IK2PI;
        else if( j2array[0] < -IKPI )
            j2array[0]+=IK2PI;
        j2valid[0] = true;
        if( j2array[1] > IKPI )
            j2array[1]-=IK2PI;
        else if( j2array[1] < -IKPI )
            j2array[1]+=IK2PI;
        j2valid[1] = true;
        if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
            j2valid[1]=false;
        for(int ij2 = 0; ij2 < 2; ++ij2)
        {
        if( !j2valid[ij2] ) { continue; }
        j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
        
        {
        IKReal evalcond[4]; int numsolutionsj0 = 0;
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
            {
            if( ((((px)*(px))+((py)*(py)))) < (IKReal)-0.00001 )
                continue;
            evalcond[0]=IKabs(IKsqrt((((px)*(px))+((py)*(py)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x8=x4;
                IKReal x9=x2;
                IKReal x10=((x9)+(x8));
                if( (x10) < (IKReal)-0.00001 )
                    continue;
                IKReal x11=IKsqrt(x10);
                IKReal x12=IKabs(x11);
                IKReal x13=((IKabs(x12) != 0)?((IKReal)1/(x12)):(IKReal)1.0e30);
                IKReal x14=((0.150100000000748)*(x13));
                if( (x14) < -1.0001 || (x14) > 1.0001 )
                    continue;
                IKReal x15=IKasin(x14);
                IKReal x16=((-1.00000000000000)*(py));
                IKReal x17=IKatan2(x16, px);
                j0array[0]=((((-1.00000000000000)*(x17)))+(((-1.00000000000000)*(x15))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x17)))+(x15));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                numsolutionsj0 = 2;
                
            } else
            {
            IKReal x18=((0.150100000000748)+(((-1.00000000000000)*(py))));
            IKReal x19=((0.374025159995654)*(sj2));
            IKReal x20=x4;
            IKReal x21=x2;
            IKReal x22=x0;
            IKReal x23=((0.0175310799997987)*(cj2));
            IKReal x24=((x20)+(x21)+(x22)+(x23));
            evalcond[0]=x18;
            evalcond[1]=((0.396968949993607)+(((-1.00000000000000)*(x24)))+(x19));
            evalcond[2]=x18;
            evalcond[3]=((0.396968949997245)+(((-1.00000000000000)*(x24)))+(x19));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  )
            {
                j0array[0]=0;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((0.150100000000748)+(px));
            evalcond[1]=((0.396968949993607)+(((-0.0175310799997987)*(cj2)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.374025159995654)*(sj2))));
            evalcond[2]=((-0.150100000000748)+(((-1.00000000000000)*(px))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=((0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x25=((0.374025159995654)*(sj2));
            IKReal x26=x4;
            IKReal x27=x2;
            IKReal x28=x0;
            IKReal x29=((0.0175310799997987)*(cj2));
            IKReal x30=((x26)+(x27)+(x28)+(x29));
            evalcond[0]=((0.150100000000748)+(py));
            evalcond[1]=((0.396968949993607)+(((-1.00000000000000)*(x30)))+(x25));
            evalcond[2]=((-0.150100000000748)+(((-1.00000000000000)*(py))));
            evalcond[3]=((0.396968949997245)+(((-1.00000000000000)*(x30)))+(x25));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  )
            {
                j0array[0]=3.14159265358979;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x31=((0.150100000000748)+(((-1.00000000000000)*(px))));
            evalcond[0]=x31;
            evalcond[1]=((0.396968949993607)+(((-0.0175310799997987)*(cj2)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.374025159995654)*(sj2))));
            evalcond[2]=x31;
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=((-0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            if( numsolutionsj0 == 0 ) { continue; }
            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < numsolutionsj0; ++ij0)
        {
        if( !j0valid[ij0] ) { continue; }
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal evalcond[12]; int numsolutionsj1 = 0;
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
            {
            evalcond[0]=((((-1.00000000000000)*((pz)*(pz))))+(((-1.00000000000000)*((((((cj0)*(px)))+(((py)*(sj0)))))*(((((cj0)*(px)))+(((py)*(sj0)))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x32=((cj0)*(px));
                IKReal x33=((py)*(sj0));
                IKReal x34=((x33)+(x32));
                IKReal x35=((-1.00000000000000)*(x34));
                IKReal x36=((0.0202999999999065)*(sj2));
                IKReal x37=((0.433099999998376)*(cj2));
                IKReal x38=((x37)+(x36));
                IKReal x39=((0.433099999998376)*(sj2));
                IKReal x40=((0.431799999998475)+(x39));
                IKReal x41=((0.0202999999999065)*(cj2));
                IKReal x42=((((-1.00000000000000)*(x41)))+(x40));
                IKReal x43=(x35)*(x35);
                IKReal x44=x0;
                IKReal x45=((x44)+(x43));
                IKReal x46=((-1.00000000000000)*(x45));
                IKReal x47=((IKabs(x46) != 0)?((IKReal)1/(x46)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x47)*(((((x35)*(x38)))+(((pz)*(x42)))))), ((x47)*(((((x35)*(x42)))+(((-1.00000000000000)*(pz)*(x38)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))*(((0.431799999998475)+(((-0.0202999999999065)*(cj2)))+(((0.433099999998376)*(sj2)))))))+(((pz)*(((((0.0202999999999065)*(sj2)))+(((0.433099999998376)*(cj2))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x48=((0.433099999998376)*(sj2));
                IKReal x49=((0.431799999998475)+(x48));
                IKReal x50=((0.0202999999999065)*(cj2));
                IKReal x51=((x49)+(((-1.00000000000000)*(x50))));
                IKReal x52=((cj0)*(px));
                IKReal x53=((py)*(sj0));
                IKReal x54=((x53)+(x52));
                IKReal x55=((-1.00000000000000)*(x54));
                IKReal x56=((x51)*(x55));
                IKReal x57=((0.0202999999999065)*(sj2));
                IKReal x58=((0.433099999998376)*(cj2));
                IKReal x59=((x58)+(x57));
                IKReal x60=((pz)*(x59));
                IKReal x61=((x56)+(x60));
                IKReal x62=((IKabs(x61) != 0)?((IKReal)1/(x61)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x62)*(((((-1.00000000000000)*(pz)*(x55)))+(((x51)*(((((-0.0202999999999065)*(sj2)))+(((-0.433099999998376)*(cj2)))))))))), ((x62)*(((((-1.00000000000000)*((x51)*(x51))))+((pz)*(pz))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((-1.00000000000000)*(((((0.0202999999999065)*(sj2)))+(((0.433099999998376)*(cj2)))))*(((((cj0)*(px)))+(((py)*(sj0)))))))+(((-1.00000000000000)*(pz)*(((0.431799999998475)+(((-0.0202999999999065)*(cj2)))+(((0.433099999998376)*(sj2))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x63=((0.0202999999999065)*(sj2));
                IKReal x64=((0.433099999998376)*(cj2));
                IKReal x65=((x63)+(x64));
                IKReal x66=((0.433099999998376)*(sj2));
                IKReal x67=((0.431799999998475)+(x66));
                IKReal x68=((0.0202999999999065)*(cj2));
                IKReal x69=((x67)+(((-1.00000000000000)*(x68))));
                IKReal x70=((cj0)*(px));
                IKReal x71=((py)*(sj0));
                IKReal x72=((x71)+(x70));
                IKReal x73=((-1.00000000000000)*(x72));
                IKReal x74=((x65)*(x73));
                IKReal x75=((pz)*(x69));
                IKReal x76=((((-1.00000000000000)*(x75)))+(x74));
                IKReal x77=((IKabs(x76) != 0)?((IKReal)1/(x76)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x77)*(((((-1.00000000000000)*((x65)*(x65))))+((pz)*(pz))))), ((x77)*(((((pz)*(x73)))+(((x69)*(((((-0.0202999999999065)*(sj2)))+(((-0.433099999998376)*(cj2)))))))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((pz)*(((0.431799999998475)+(((-0.0202999999999065)*(cj2)))+(((0.433099999998376)*(sj2)))))))+(((((((0.0202999999999065)*(sj2)))+(((0.433099999998376)*(cj2)))))*(((((cj0)*(px)))+(((py)*(sj0))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x78=((0.433099999998376)*(sj2));
                IKReal x79=((0.431799999998475)+(x78));
                IKReal x80=((0.0202999999999065)*(cj2));
                IKReal x81=((x79)+(((-1.00000000000000)*(x80))));
                IKReal x82=((cj0)*(px));
                IKReal x83=((py)*(sj0));
                IKReal x84=((x82)+(x83));
                IKReal x85=((-1.00000000000000)*(x84));
                IKReal x86=((0.0202999999999065)*(sj2));
                IKReal x87=((0.433099999998376)*(cj2));
                IKReal x88=((x86)+(x87));
                IKReal x89=((pz)*(x81));
                IKReal x90=((x85)*(x88));
                IKReal x91=((x89)+(((-1.00000000000000)*(x90))));
                IKReal x92=((IKabs(x91) != 0)?((IKReal)1/(x91)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x92)*((((x85)*(x85))+(((-1.00000000000000)*((x81)*(x81))))))), ((x92)*(((((x81)*(x88)))+(((-1.00000000000000)*(pz)*(x85)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x93=((0.0202999999999065)*(sj2));
            IKReal x94=((0.433099999998376)*(cj2));
            IKReal x95=((x93)+(x94));
            IKReal x96=((x95)+(((-1.00000000000000)*(pz))));
            IKReal x97=x4;
            IKReal x98=x2;
            IKReal x99=x0;
            IKReal x100=((0.433099999998376)*(sj2));
            IKReal x101=((0.431799999998475)+(x100));
            IKReal x102=((0.0202999999999065)*(cj2));
            IKReal x103=((cj0)*(px));
            IKReal x104=((py)*(sj0));
            IKReal x105=((x104)+(x102)+(x103));
            IKReal x106=((((-1.00000000000000)*(x105)))+(x101));
            IKReal x107=((0.374025159995654)*(sj2));
            IKReal x108=(cj0)*(cj0);
            IKReal x109=(cj2)*(cj2);
            IKReal x110=((0.0175310799997987)*(cj2));
            IKReal x111=((x99)+(x98)+(x97));
            evalcond[0]=((0.150100000000748)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
            evalcond[1]=((0.396968949993607)+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x110)))+(x107));
            evalcond[2]=x106;
            evalcond[3]=x96;
            evalcond[4]=x96;
            evalcond[5]=((0.0240664699995250)+(((0.863599999996950)*(x104)))+(((0.863599999996950)*(x103)))+(((-1.00000000000000)*(x111))));
            evalcond[6]=x106;
            evalcond[7]=((((cj0)*(x100)))+(((-1.00000000000000)*(cj0)*(x102)))+(((0.431799999998475)*(cj0)))+(((-0.150100000000748)*(sj0)))+(((-1.00000000000000)*(px))));
            evalcond[8]=((((0.431799999998475)*(sj0)))+(((0.150100000000748)*(cj0)))+(((-1.00000000000000)*(sj0)*(x102)))+(((-1.00000000000000)*(py)))+(((sj0)*(x100))));
            evalcond[9]=((-0.0202999999999065)+(((-1.00000000000000)*(cj2)*(x104)))+(((-1.00000000000000)*(cj2)*(x103)))+(((0.431799999998475)*(cj2)))+(((pz)*(sj2))));
            evalcond[10]=((0.433099999998376)+(((-1.00000000000000)*(sj2)*(x103)))+(((-1.00000000000000)*(sj2)*(x104)))+(((0.431799999998475)*(sj2)))+(((-1.00000000000000)*(cj2)*(pz))));
            evalcond[11]=((((-1.00000000000000)*(x111)))+((((sj2)*(sj2))*(((((-0.000412089999997534)*((sj0)*(sj0))))+(((((IKabs(sj2) != 0)?(pow(sj2,-2.00000000000000)):(IKReal)1.0e30))*(((0.397381039998436)+(((-0.000412089999372256)*(x108)))+(((-1.00000000000000)*(x110)))+(x107)+(((-0.000412090001191245)*(x109)))+(((0.000412090001191245)*(x108)*(x109))))))))))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  )
            {
                j1array[0]=0;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x112=((0.0202999999999065)*(cj2));
            IKReal x113=((0.433099999998376)*(sj2));
            IKReal x114=x4;
            IKReal x115=x2;
            IKReal x116=x0;
            IKReal x117=((0.0202999999999065)*(sj2));
            IKReal x118=((0.433099999998376)*(cj2));
            IKReal x119=((x117)+(x118));
            IKReal x120=((cj0)*(px));
            IKReal x121=((py)*(sj0));
            IKReal x122=((x120)+(x121));
            IKReal x123=((((-1.00000000000000)*(x122)))+(x119));
            IKReal x124=((0.374025159995654)*(sj2));
            IKReal x125=((0.0175310799997987)*(cj2));
            IKReal x126=((x125)+(x116)+(x115)+(x114));
            evalcond[0]=((0.150100000000748)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
            evalcond[1]=((0.396968949993607)+(((-1.00000000000000)*(x126)))+(x124));
            evalcond[2]=((0.431799999998475)+(((-1.00000000000000)*(x112)))+(x113)+(pz));
            evalcond[3]=x123;
            evalcond[4]=((-0.431799999998475)+(((-1.00000000000000)*(x113)))+(x112)+(((-1.00000000000000)*(pz))));
            evalcond[5]=((0.0240664699995250)+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(((-0.863599999996950)*(pz))));
            evalcond[6]=x123;
            evalcond[7]=((((cj0)*(x118)))+(((cj0)*(x117)))+(((-0.150100000000748)*(sj0)))+(((-1.00000000000000)*(px))));
            evalcond[8]=((((sj0)*(x117)))+(((sj0)*(x118)))+(((0.150100000000748)*(cj0)))+(((-1.00000000000000)*(py))));
            evalcond[9]=((-0.0202999999999065)+(((sj2)*(x121)))+(((sj2)*(x120)))+(((cj2)*(pz)))+(((0.431799999998475)*(cj2))));
            evalcond[10]=((0.433099999998376)+(((-1.00000000000000)*(cj2)*(x120)))+(((-1.00000000000000)*(cj2)*(x121)))+(((0.431799999998475)*(sj2)))+(((pz)*(sj2))));
            evalcond[11]=((0.396968949997245)+(((-1.00000000000000)*(x126)))+(x124));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  )
            {
                j1array[0]=((0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x127=((0.0202999999999065)*(sj2));
            IKReal x128=((0.433099999998376)*(cj2));
            IKReal x129=((x127)+(x128)+(pz));
            IKReal x130=x4;
            IKReal x131=x2;
            IKReal x132=x0;
            IKReal x133=((0.0202999999999065)*(cj2));
            IKReal x134=((0.433099999998376)*(sj2));
            IKReal x135=((cj0)*(px));
            IKReal x136=((py)*(sj0));
            IKReal x137=((0.374025159995654)*(sj2));
            IKReal x138=(cj0)*(cj0);
            IKReal x139=(cj2)*(cj2);
            IKReal x140=((0.0175310799997987)*(cj2));
            evalcond[0]=((0.150100000000748)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
            evalcond[1]=((0.396968949993607)+(((-1.00000000000000)*(x140)))+(x137)+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131))));
            evalcond[2]=((0.431799999998475)+(x135)+(x134)+(x136)+(((-1.00000000000000)*(x133))));
            evalcond[3]=x129;
            evalcond[4]=((-1.00000000000000)*(x129));
            evalcond[5]=((0.0240664699995250)+(((-0.863599999996950)*(x135)))+(((-0.863599999996950)*(x136)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131))));
            evalcond[6]=((-0.431799999998475)+(x133)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x135))));
            evalcond[7]=((((-0.431799999998475)*(cj0)))+(((cj0)*(x133)))+(((-1.00000000000000)*(cj0)*(x134)))+(((-0.150100000000748)*(sj0)))+(((-1.00000000000000)*(px))));
            evalcond[8]=((((-0.431799999998475)*(sj0)))+(((0.150100000000748)*(cj0)))+(((-1.00000000000000)*(sj0)*(x134)))+(((-1.00000000000000)*(py)))+(((sj0)*(x133))));
            evalcond[9]=((-0.0202999999999065)+(((cj2)*(x136)))+(((cj2)*(x135)))+(((-1.00000000000000)*(pz)*(sj2)))+(((0.431799999998475)*(cj2))));
            evalcond[10]=((0.433099999998376)+(((sj2)*(x136)))+(((sj2)*(x135)))+(((0.431799999998475)*(sj2)))+(((cj2)*(pz))));
            evalcond[11]=(((((sj2)*(sj2))*(((((-0.000412089999997534)*((sj0)*(sj0))))+(((((IKabs(sj2) != 0)?(pow(sj2,-2.00000000000000)):(IKReal)1.0e30))*(((0.397381039998436)+(((-1.00000000000000)*(x140)))+(((-0.000412089999372256)*(x138)))+(((0.000412090001191245)*(x138)*(x139)))+(x137)+(((-0.000412090001191245)*(x139)))))))))))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  )
            {
                j1array[0]=3.14159265358979;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x141=((0.433099999998376)*(sj2));
            IKReal x142=((0.431799999998475)+(x141));
            IKReal x143=((0.0202999999999065)*(cj2));
            IKReal x144=((x143)+(pz));
            IKReal x145=((((-1.00000000000000)*(x144)))+(x142));
            IKReal x146=x4;
            IKReal x147=x2;
            IKReal x148=x0;
            IKReal x149=((0.0202999999999065)*(sj2));
            IKReal x150=((cj0)*(px));
            IKReal x151=((py)*(sj0));
            IKReal x152=((0.433099999998376)*(cj2));
            IKReal x153=((x152)+(x151)+(x150)+(x149));
            IKReal x154=((0.374025159995654)*(sj2));
            IKReal x155=((0.0175310799997987)*(cj2));
            IKReal x156=((x155)+(x146)+(x147)+(x148));
            evalcond[0]=((0.150100000000748)+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
            evalcond[1]=((0.396968949993607)+(((-1.00000000000000)*(x156)))+(x154));
            evalcond[2]=x145;
            evalcond[3]=x153;
            evalcond[4]=x145;
            evalcond[5]=((0.0240664699995250)+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x146)))+(((0.863599999996950)*(pz))));
            evalcond[6]=((-1.00000000000000)*(x153));
            evalcond[7]=((((-1.00000000000000)*(cj0)*(x149)))+(((-1.00000000000000)*(cj0)*(x152)))+(((-0.150100000000748)*(sj0)))+(((-1.00000000000000)*(px))));
            evalcond[8]=((((-1.00000000000000)*(sj0)*(x149)))+(((-1.00000000000000)*(sj0)*(x152)))+(((0.150100000000748)*(cj0)))+(((-1.00000000000000)*(py))));
            evalcond[9]=((-0.0202999999999065)+(((-1.00000000000000)*(cj2)*(pz)))+(((-1.00000000000000)*(sj2)*(x151)))+(((-1.00000000000000)*(sj2)*(x150)))+(((0.431799999998475)*(cj2))));
            evalcond[10]=((0.433099999998376)+(((cj2)*(x151)))+(((cj2)*(x150)))+(((-1.00000000000000)*(pz)*(sj2)))+(((0.431799999998475)*(sj2))));
            evalcond[11]=((0.396968949997245)+(((-1.00000000000000)*(x156)))+(x154));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  )
            {
                j1array[0]=((-0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            }
            }
            }
            if( numsolutionsj1 == 0 ) { continue; }
            for(int ij1 = 0; ij1 < numsolutionsj1; ++ij1)
        {
        if( !j1valid[ij1] ) { continue; }
        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
        
        IKReal x157=((cj0)*(cj1)*(cj2));
        IKReal x158=((cj0)*(sj1)*(sj2));
        IKReal x159=((((-1.00000000000000)*(x158)))+(x157));
        IKReal x160=((cj2)*(sj1));
        IKReal x161=((cj1)*(sj2));
        IKReal x162=((x160)+(x161));
        IKReal x163=((-1.00000000000000)*(x162));
        IKReal x164=((cj1)*(cj2)*(sj0));
        IKReal x165=((sj0)*(sj1)*(sj2));
        IKReal x166=((((-1.00000000000000)*(x165)))+(x164));
        IKReal x167=((cj1)*(cj2));
        IKReal x168=((sj1)*(sj2));
        IKReal x169=((((-1.00000000000000)*(x168)))+(x167));
        IKReal x170=((sj0)*(x161));
        IKReal x171=((sj0)*(x160));
        IKReal x172=((x171)+(x170));
        IKReal x173=((cj0)*(x160));
        IKReal x174=((cj0)*(x161));
        IKReal x175=((x173)+(x174));
        new_r00=((((r00)*(x159)))+(((r20)*(x163)))+(((r10)*(x166))));
        new_r01=((((r01)*(x159)))+(((r21)*(x163)))+(((r11)*(x166))));
        new_r02=((((r22)*(x163)))+(((r12)*(x166)))+(((r02)*(x159))));
        new_r10=((((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r10))));
        new_r11=((((-1.00000000000000)*(r01)*(sj0)))+(((cj0)*(r11))));
        new_r12=((((cj0)*(r12)))+(((-1.00000000000000)*(r02)*(sj0))));
        new_r20=((((r00)*(x175)))+(((r20)*(x169)))+(((r10)*(x172))));
        new_r21=((((r01)*(x175)))+(((r21)*(x169)))+(((r11)*(x172))));
        new_r22=((((r22)*(x169)))+(((r12)*(x172)))+(((r02)*(x175))));
        {
        IKReal j4eval;
        j4eval=new_r22;
        if( j4eval >= -1.000010 && j4eval <= -0.999990 )
        {
            {
            j4 = 3.141593; sj4 = 0.000000; cj4 = -1.000000;
            IKReal j3mul = 1;
            j3=0;
            IKReal j5mul=1.00000000000000;
            j5=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r10)), new_r11)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(6);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[3].fmul = j3mul;
            solution.basesol[3].freeind = 0;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 3;
            }
            
        } else
        if( j4eval >= 0.999990 && j4eval <= 1.000010 )
        {
            {
            j4 = 0.000000; sj4 = 0.000000; cj4 = 1.000000;
            IKReal j3mul = 1;
            j3=0;
            IKReal j5mul=-1.00000000000000;
            j5=((((-1.00000000000000)*(IKatan2(new_r10, ((-1.00000000000000)*(new_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(6);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[3].fmul = j3mul;
            solution.basesol[3].freeind = 0;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 3;
            }
            
        } else
        {
            {
            IKReal j3array[2], cj3array[2], sj3array[2];
            bool j3valid[2]={false};
            j3array[0]=IKatan2(new_r12, new_r02);
            sj3array[0]=IKsin(j3array[0]);
            cj3array[0]=IKcos(j3array[0]);
            j3array[1] = j3array[0] > 0 ? j3array[0]-IKPI : j3array[0]+IKPI;
            sj3array[1] = -sj3array[0];
            cj3array[1] = -cj3array[0];
            if( j3array[0] > IKPI )
                j3array[0]-=IK2PI;
            else if( j3array[0] < -IKPI )
                j3array[0]+=IK2PI;
            j3valid[0] = true;
            if( j3array[1] > IKPI )
                j3array[1]-=IK2PI;
            else if( j3array[1] < -IKPI )
                j3array[1]+=IK2PI;
            j3valid[1] = true;
            if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                j3valid[1]=false;
            for(int ij3 = 0; ij3 < 2; ++ij3)
            {
            if( !j3valid[ij3] ) { continue; }
            j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
            
            {
            IKReal evalcond;
                evalcond=IKsin(j3);
                if( IKabs(evalcond) < 0.00001 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                IKReal x176=IKcos(j3);
                IKReal x177=((IKabs(x176) != 0)?((IKReal)1/(x176)):(IKReal)1.0e30);
                j5array[0]=IKatan2(((new_r10)*(x177)), ((new_r11)*(x177)));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((new_r02)*(((IKabs(IKcos(j3)) != 0)?((IKReal)1/(IKcos(j3))):(IKReal)1.0e30))), new_r22);
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(6);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.vfree.resize(0);
                }
                }
                }
                }
                
            } else
            {
                if( 1 )
                {
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((new_r12)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30))), new_r22);
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                {
                IKReal evalcond;
                    evalcond=IKsin(j4);
                    if( IKabs(evalcond) < 0.00001 )
                    {
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    IKReal x178=IKsin(j3);
                    IKReal x179=IKcos(j4);
                    IKReal x180=((IKabs(x179) != 0)?((IKReal)1/(x179)):(IKReal)1.0e30);
                    IKReal x181=IKcos(j3);
                    j5array[0]=IKatan2(((((new_r10)*(x181)))+(((-1.00000000000000)*(new_r00)*(x178)))), ((((new_r10)*(x178)*(x180)))+(((new_r00)*(x180)*(x181)))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    for(int ij5 = 0; ij5 < 1; ++ij5)
                    {
                    if( !j5valid[ij5] ) { continue; }
                    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    IKReal x182=((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30);
                    j5array[0]=IKatan2(((new_r21)*(x182)), ((-1.00000000000000)*(new_r20)*(x182)));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    for(int ij5 = 0; ij5 < 1; ++ij5)
                    {
                    if( !j5valid[ij5] ) { continue; }
                    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                }
                }
                }
                }
                }
                
            } else
            {
            }
            }
            }
            }
            }
            
        }
        }
        }
        }
        }
        }
        }
        }
        
    } else
    {
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
