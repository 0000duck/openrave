/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-07-19 11:07:37.220940
/// To compile with gcc use: gcc -lstdc++ 
/// To compile without any main function use: gcc -lstdc++ -DIKFAST_NO_MAIN
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;
    x0=IKcos(j[0]);
    x1=IKcos(j[2]);
    x2=IKcos(j[5]);
    x3=IKsin(j[1]);
    x4=IKcos(j[1]);
    x5=IKsin(j[3]);
    x6=IKsin(j[5]);
    x7=IKcos(j[3]);
    x8=IKcos(j[4]);
    x9=IKsin(j[2]);
    x10=IKsin(j[4]);
    x11=IKsin(j[0]);
    eerot[0]=((((x0)*(x1)*(x2)*(x4)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x10)*(x2)*(x4)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x4)*(x5)*(x6)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x2)*(x3)))+(((-1.00000000000000)*(x11)*(x6)*(x7)))+(((-1.00000000000000)*(x0)*(x2)*(x3)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x11)*(x2)*(x5)*(x8)))+(((x0)*(x3)*(x5)*(x6)*(x9))));
    eerot[1]=((((x0)*(x3)*(x6)*(x7)*(x8)*(x9)))+(((x0)*(x10)*(x4)*(x6)*(x9)))+(((-1.00000000000000)*(x11)*(x2)*(x7)))+(((x11)*(x5)*(x6)*(x8)))+(((x0)*(x1)*(x10)*(x3)*(x6)))+(((-1.00000000000000)*(x0)*(x1)*(x4)*(x6)*(x7)*(x8)))+(((x0)*(x2)*(x3)*(x5)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x2)*(x4)*(x5))));
    eerot[2]=((((x0)*(x1)*(x3)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x5)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x7)*(x9)))+(((x0)*(x4)*(x8)*(x9)))+(((x0)*(x1)*(x10)*(x4)*(x7))));
    eetrans[0]=((((0.433099999998376)*(x0)*(x4)*(x9)))+(((0.431799999998475)*(x0)*(x4)))+(((-0.150100000000748)*(x11)))+(((0.433099999998376)*(x0)*(x1)*(x3)))+(((-0.0202999999999065)*(x0)*(x1)*(x4)))+(((0.0202999999999065)*(x0)*(x3)*(x9))));
    eerot[3]=((((-1.00000000000000)*(x1)*(x11)*(x4)*(x5)*(x6)))+(((x0)*(x2)*(x5)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x2)*(x3)))+(((x11)*(x3)*(x5)*(x6)*(x9)))+(((x1)*(x11)*(x2)*(x4)*(x7)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x2)*(x4)*(x9)))+(((x0)*(x6)*(x7)))+(((-1.00000000000000)*(x11)*(x2)*(x3)*(x7)*(x8)*(x9))));
    eerot[4]=((((-1.00000000000000)*(x1)*(x11)*(x4)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x5)*(x6)*(x8)))+(((x0)*(x2)*(x7)))+(((x1)*(x10)*(x11)*(x3)*(x6)))+(((x10)*(x11)*(x4)*(x6)*(x9)))+(((x11)*(x2)*(x3)*(x5)*(x9)))+(((x11)*(x3)*(x6)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x2)*(x4)*(x5))));
    eerot[5]=((((x11)*(x4)*(x8)*(x9)))+(((x1)*(x10)*(x11)*(x4)*(x7)))+(((x1)*(x11)*(x3)*(x8)))+(((x0)*(x10)*(x5)))+(((-1.00000000000000)*(x10)*(x11)*(x3)*(x7)*(x9))));
    eetrans[1]=((((0.431799999998475)*(x11)*(x4)))+(((0.0202999999999065)*(x11)*(x3)*(x9)))+(((0.433099999998376)*(x1)*(x11)*(x3)))+(((0.150100000000748)*(x0)))+(((0.433099999998376)*(x11)*(x4)*(x9)))+(((-0.0202999999999065)*(x1)*(x11)*(x4))));
    eerot[6]=((((x10)*(x2)*(x3)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x2)*(x4)))+(((x1)*(x3)*(x5)*(x6)))+(((x4)*(x5)*(x6)*(x9)))+(((-1.00000000000000)*(x2)*(x4)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x2)*(x3)*(x7)*(x8))));
    eerot[7]=((((x1)*(x10)*(x4)*(x6)))+(((-1.00000000000000)*(x10)*(x3)*(x6)*(x9)))+(((x1)*(x3)*(x6)*(x7)*(x8)))+(((x1)*(x2)*(x3)*(x5)))+(((x2)*(x4)*(x5)*(x9)))+(((x4)*(x6)*(x7)*(x8)*(x9))));
    eerot[8]=((((x1)*(x4)*(x8)))+(((-1.00000000000000)*(x10)*(x4)*(x7)*(x9)))+(((-1.00000000000000)*(x3)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x3)*(x7))));
    eetrans[2]=((1.37100000000000)+(((-0.433099999998376)*(x3)*(x9)))+(((0.0202999999999065)*(x4)*(x9)))+(((0.0202999999999065)*(x1)*(x3)))+(((-0.431799999998475)*(x3)))+(((0.433099999998376)*(x1)*(x4))));
    }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j0, cj0, sj0,
    j1, cj1, sj1,
    j2, cj2, sj2,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    new_r00, r00 = eerot[0*3+0],
    new_r01, r01 = eerot[0*3+1],
    new_r02, r02 = eerot[0*3+2],
    new_r10, r10 = eerot[1*3+0],
    new_r11, r11 = eerot[1*3+1],
    new_r12, r12 = eerot[1*3+2],
    new_r20, r20 = eerot[2*3+0],
    new_r21, r21 = eerot[2*3+1],
    new_r22, r22 = eerot[2*3+2],
    new_px, new_py, new_pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    new_r00=r00;
    new_r01=r01;
    new_r02=r02;
    new_px=px;
    new_r10=r10;
    new_r11=r11;
    new_r12=r12;
    new_py=py;
    new_r20=r20;
    new_r21=r21;
    new_r22=r22;
    new_pz=((-1.37100000000000)+(pz));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        {
        IKReal j2array[2], cj2array[2], sj2array[2];
        bool j2valid[2]={false};
        IKReal x0=(py)*(py);
        IKReal x1=((2.67068488904624)*(x0));
        IKReal x2=(px)*(px);
        IKReal x3=((2.67068488904624)*(x2));
        IKReal x4=(pz)*(pz);
        IKReal x5=((2.67068488904624)*(x4));
        IKReal x6=((x3)+(x1)+(x5));
        IKReal x7=((1.06017897617130)+(((-1.00000000000000)*(x6))));
        if( (x7) < -1.0001 || (x7) > 1.0001 )
            continue;
        IKReal x8=IKasin(x7);
        j2array[0]=((0.0468371131133505)+(((-1.00000000000000)*(x8))));
        sj2array[0]=IKsin(j2array[0]);
        cj2array[0]=IKcos(j2array[0]);
        j2array[1]=((3.18842976670314)+(x8));
        sj2array[1]=IKsin(j2array[1]);
        cj2array[1]=IKcos(j2array[1]);
        if( j2array[0] > IKPI )
            j2array[0]-=IK2PI;
        else if( j2array[0] < -IKPI )
            j2array[0]+=IK2PI;
        j2valid[0] = true;
        if( j2array[1] > IKPI )
            j2array[1]-=IK2PI;
        else if( j2array[1] < -IKPI )
            j2array[1]+=IK2PI;
        j2valid[1] = true;
        if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
            j2valid[1]=false;
        for(int ij2 = 0; ij2 < 2; ++ij2)
        {
        if( !j2valid[ij2] ) { continue; }
        j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
        
        {
        IKReal evalcond[3]; int numsolutionsj0 = 0;
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
            {
            evalcond[0]=(((px)*(px))+((py)*(py)));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x9=x2;
                IKReal x10=x0;
                IKReal x11=((x9)+(x10));
                IKReal x12=((IKabs(x11) != 0)?(pow(x11,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x13=((0.150100000000748)*(x12));
                if( (x13) < -1.0001 || (x13) > 1.0001 )
                    continue;
                IKReal x14=IKasin(x13);
                IKReal x15=((-1.00000000000000)*(py));
                IKReal x16=IKatan2(x15, px);
                j0array[0]=((((-1.00000000000000)*(x16)))+(((-1.00000000000000)*(x14))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x16)))+(x14));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                numsolutionsj0 = 2;
                
            } else
            {
            IKReal x17=((0.150100000000748)+(((-1.00000000000000)*(py))));
            evalcond[0]=x17;
            evalcond[1]=((0.396968949997245)+(((0.374025159995654)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-0.0175310799997987)*(cj2)))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=x17;
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=0;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((0.150100000000748)+(px));
            evalcond[1]=((0.396968949997245)+(((0.374025159995654)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-0.0175310799997987)*(cj2)))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=((-0.150100000000748)+(((-1.00000000000000)*(px))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=((0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((0.150100000000748)+(py));
            evalcond[1]=((0.396968949997245)+(((0.374025159995654)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-0.0175310799997987)*(cj2)))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=((-0.150100000000748)+(((-1.00000000000000)*(py))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=3.14159265358979;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x18=((0.150100000000748)+(((-1.00000000000000)*(px))));
            evalcond[0]=x18;
            evalcond[1]=((0.396968949997245)+(((0.374025159995654)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-0.0175310799997987)*(cj2)))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=x18;
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=((-0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            if( numsolutionsj0 == 0 ) { continue; }
            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < numsolutionsj0; ++ij0)
        {
        if( !j0valid[ij0] ) { continue; }
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal evalcond[11]; int numsolutionsj1 = 0;
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
            {
            evalcond[0]=((((-1.00000000000000)*((((((py)*(sj0)))+(((cj0)*(px)))))*(((((py)*(sj0)))+(((cj0)*(px))))))))+(((-1.00000000000000)*((pz)*(pz)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x19=((py)*(sj0));
                IKReal x20=((cj0)*(px));
                IKReal x21=((x20)+(x19));
                IKReal x22=((-1.00000000000000)*(x21));
                IKReal x23=((0.433099999998376)*(sj2));
                IKReal x24=((0.431799999998475)+(x23));
                IKReal x25=((0.0202999999999065)*(cj2));
                IKReal x26=((x24)+(((-1.00000000000000)*(x25))));
                IKReal x27=((0.0468713922882671)*(x23));
                IKReal x28=((21.3349753695074)*(x25));
                IKReal x29=((x27)+(x28));
                IKReal x30=(x22)*(x22);
                IKReal x31=x4;
                IKReal x32=((x31)+(x30));
                IKReal x33=((-1.00000000000000)*(x32));
                IKReal x34=((IKabs(x33) != 0)?((IKReal)1/(x33)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x34)*(((((x22)*(x29)))+(((pz)*(x26)))))), ((x34)*(((((-1.00000000000000)*(pz)*(x29)))+(((x22)*(x26)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))*(((0.431799999998475)+(((-0.0202999999999065)*(cj2)))+(((0.433099999998376)*(sj2)))))))+(((pz)*(((((0.0202999999999065)*(sj2)))+(((0.433099999998376)*(cj2))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x35=((py)*(sj0));
                IKReal x36=((cj0)*(px));
                IKReal x37=((x36)+(x35));
                IKReal x38=((-1.00000000000000)*(x37));
                IKReal x39=((0.433099999998376)*(sj2));
                IKReal x40=((0.431799999998475)+(x39));
                IKReal x41=((0.0202999999999065)*(cj2));
                IKReal x42=((((-1.00000000000000)*(x41)))+(x40));
                IKReal x43=((x38)*(x42));
                IKReal x44=((0.0468713922882671)*(x39));
                IKReal x45=((21.3349753695074)*(x41));
                IKReal x46=((x44)+(x45));
                IKReal x47=((pz)*(x46));
                IKReal x48=((x47)+(x43));
                IKReal x49=((IKabs(x48) != 0)?((IKReal)1/(x48)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x49)*(((((x42)*(((((-1.00000000000000)*(x45)))+(((-1.00000000000000)*(x44)))))))+(((-1.00000000000000)*(pz)*(x38)))))), ((x49)*(((((-1.00000000000000)*((x42)*(x42))))+((pz)*(pz))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((-1.00000000000000)*(((((0.0202999999999065)*(sj2)))+(((0.433099999998376)*(cj2)))))*(((((py)*(sj0)))+(((cj0)*(px)))))))+(((-1.00000000000000)*(pz)*(((0.431799999998475)+(((-0.0202999999999065)*(cj2)))+(((0.433099999998376)*(sj2))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x50=((0.0202999999999065)*(sj2));
                IKReal x51=((0.433099999998376)*(cj2));
                IKReal x52=((x51)+(x50));
                IKReal x53=((py)*(sj0));
                IKReal x54=((cj0)*(px));
                IKReal x55=((x54)+(x53));
                IKReal x56=((-1.00000000000000)*(x55));
                IKReal x57=((21.3349753695074)*(x50));
                IKReal x58=((0.431799999998475)+(x57));
                IKReal x59=((0.0468713922882671)*(x51));
                IKReal x60=((x58)+(((-1.00000000000000)*(x59))));
                IKReal x61=((x52)*(x56));
                IKReal x62=((pz)*(x60));
                IKReal x63=((((-1.00000000000000)*(x62)))+(x61));
                IKReal x64=((IKabs(x63) != 0)?((IKReal)1/(x63)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x64)*((((pz)*(pz))+(((-1.00000000000000)*((x52)*(x52))))))), ((x64)*(((((pz)*(x56)))+(((x60)*(((((-21.3349753695074)*(x59)))+(((-0.0468713922882671)*(x57)))))))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((pz)*(((0.431799999998475)+(((-0.0202999999999065)*(cj2)))+(((0.433099999998376)*(sj2)))))))+(((((((0.0202999999999065)*(sj2)))+(((0.433099999998376)*(cj2)))))*(((((py)*(sj0)))+(((cj0)*(px))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x65=((0.433099999998376)*(sj2));
                IKReal x66=((0.431799999998475)+(x65));
                IKReal x67=((0.0202999999999065)*(cj2));
                IKReal x68=((x66)+(((-1.00000000000000)*(x67))));
                IKReal x69=((py)*(sj0));
                IKReal x70=((cj0)*(px));
                IKReal x71=((x69)+(x70));
                IKReal x72=((-1.00000000000000)*(x71));
                IKReal x73=((0.0468713922882671)*(x65));
                IKReal x74=((21.3349753695074)*(x67));
                IKReal x75=((x74)+(x73));
                IKReal x76=((pz)*(x68));
                IKReal x77=((x72)*(x75));
                IKReal x78=((((-1.00000000000000)*(x77)))+(x76));
                IKReal x79=((IKabs(x78) != 0)?((IKReal)1/(x78)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x79)*(((((-1.00000000000000)*((x68)*(x68))))+((x72)*(x72))))), ((x79)*(((((-1.00000000000000)*(pz)*(x72)))+(((x68)*(x75)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x80=((0.0202999999999065)*(sj2));
            IKReal x81=((0.433099999998376)*(cj2));
            IKReal x82=((x80)+(x81));
            IKReal x83=((((-1.00000000000000)*(pz)))+(x82));
            IKReal x84=x2;
            IKReal x85=x4;
            IKReal x86=x0;
            IKReal x87=((21.3349753695074)*(x80));
            IKReal x88=((0.431799999998475)+(x87));
            IKReal x89=((py)*(sj0));
            IKReal x90=((0.0468713922882671)*(x81));
            IKReal x91=((cj0)*(px));
            IKReal x92=((x89)+(x91)+(x90));
            IKReal x93=((((-1.00000000000000)*(x92)))+(x88));
            evalcond[0]=((0.150100000000748)+(((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396968949997245)+(((-1.00000000000000)*(x86)))+(((-0.863600000004226)*(x90)))+(((-1.00000000000000)*(x84)))+(((0.863599999989674)*(x87)))+(((-1.00000000000000)*(x85))));
            evalcond[2]=x93;
            evalcond[3]=x83;
            evalcond[4]=x83;
            evalcond[5]=((0.0240664699995250)+(((-1.00000000000000)*(x86)))+(((0.863599999996950)*(x89)))+(((0.863599999996950)*(x91)))+(((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x85))));
            evalcond[6]=x93;
            evalcond[7]=((((-1.00000000000000)*(px)))+(((-0.150100000000748)*(sj0)))+(((-1.00000000000000)*(cj0)*(x90)))+(((0.431799999998475)*(cj0)))+(((cj0)*(x87))));
            evalcond[8]=((((-1.00000000000000)*(py)))+(((-1.00000000000000)*(sj0)*(x90)))+(((sj0)*(x87)))+(((0.431799999998475)*(sj0)))+(((0.150100000000748)*(cj0))));
            evalcond[9]=((-0.0202999999999065)+(((21.2709359608125)*(x90)))+(((2.30893558071693)*(pz)*(x87)))+(((-49.2610837444663)*(x90)*(x91)))+(((-49.2610837444663)*(x89)*(x90))));
            evalcond[10]=((0.433099999998376)+(((-2.30893558071693)*(x87)*(x89)))+(((0.996998383743630)*(x87)))+(((-2.30893558071693)*(x87)*(x91)))+(((-49.2610837444663)*(pz)*(x90))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=0;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x94=((0.0202999999999065)*(cj2));
            IKReal x95=((0.433099999998376)*(sj2));
            IKReal x96=x2;
            IKReal x97=x4;
            IKReal x98=x0;
            IKReal x99=((0.0468713922882671)*(x95));
            IKReal x100=((21.3349753695074)*(x94));
            IKReal x101=((x100)+(x99));
            IKReal x102=((py)*(sj0));
            IKReal x103=((cj0)*(px));
            IKReal x104=((x102)+(x103));
            IKReal x105=((((-1.00000000000000)*(x104)))+(x101));
            evalcond[0]=((0.150100000000748)+(((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396968949997245)+(((18.4248847290874)*(x99)))+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x96)))+(((-0.0404781343795548)*(x100)))+(((-1.00000000000000)*(x98))));
            evalcond[2]=((0.431799999998475)+(((-1.00000000000000)*(x94)))+(pz)+(x95));
            evalcond[3]=x105;
            evalcond[4]=((-0.431799999998475)+(((-1.00000000000000)*(pz)))+(((-1.00000000000000)*(x95)))+(x94));
            evalcond[5]=((0.0240664699995250)+(((-1.00000000000000)*(x97)))+(((-0.863599999996950)*(pz)))+(((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(x98))));
            evalcond[6]=x105;
            evalcond[7]=((((-1.00000000000000)*(px)))+(((cj0)*(x99)))+(((-0.150100000000748)*(sj0)))+(((cj0)*(x100))));
            evalcond[8]=((((-1.00000000000000)*(py)))+(((sj0)*(x100)))+(((sj0)*(x99)))+(((0.150100000000748)*(cj0))));
            evalcond[9]=((-0.0202999999999065)+(((49.2610837444663)*(x102)*(x99)))+(((2.30893558071693)*(pz)*(x100)))+(((0.996998383743630)*(x100)))+(((49.2610837444663)*(x103)*(x99))));
            evalcond[10]=((0.433099999998376)+(((-2.30893558071693)*(x100)*(x102)))+(((49.2610837444663)*(pz)*(x99)))+(((21.2709359608125)*(x99)))+(((-2.30893558071693)*(x100)*(x103))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=((0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x106=((0.0202999999999065)*(sj2));
            IKReal x107=((0.433099999998376)*(cj2));
            IKReal x108=((pz)+(x106)+(x107));
            IKReal x109=x2;
            IKReal x110=x4;
            IKReal x111=x0;
            IKReal x112=((0.0468713922882671)*(x107));
            IKReal x113=((21.3349753695074)*(x106));
            IKReal x114=((py)*(sj0));
            IKReal x115=((cj0)*(px));
            evalcond[0]=((0.150100000000748)+(((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396968949997245)+(((0.863599999989674)*(x113)))+(((-0.863600000004226)*(x112)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x110))));
            evalcond[2]=((0.431799999998475)+(((-1.00000000000000)*(x112)))+(x113)+(x115)+(x114));
            evalcond[3]=x108;
            evalcond[4]=((-1.00000000000000)*(x108));
            evalcond[5]=((0.0240664699995250)+(((-0.863599999996950)*(x115)))+(((-1.00000000000000)*(x111)))+(((-0.863599999996950)*(x114)))+(((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x110))));
            evalcond[6]=((-0.431799999998475)+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(x112)+(((-1.00000000000000)*(x113))));
            evalcond[7]=((((-1.00000000000000)*(cj0)*(x113)))+(((-1.00000000000000)*(px)))+(((cj0)*(x112)))+(((-0.150100000000748)*(sj0)))+(((-0.431799999998475)*(cj0))));
            evalcond[8]=((((-1.00000000000000)*(py)))+(((sj0)*(x112)))+(((-1.00000000000000)*(sj0)*(x113)))+(((0.150100000000748)*(cj0)))+(((-0.431799999998475)*(sj0))));
            evalcond[9]=((-0.0202999999999065)+(((21.2709359608125)*(x112)))+(((-2.30893558071693)*(pz)*(x113)))+(((49.2610837444663)*(x112)*(x114)))+(((49.2610837444663)*(x112)*(x115))));
            evalcond[10]=((0.433099999998376)+(((49.2610837444663)*(pz)*(x112)))+(((0.996998383743630)*(x113)))+(((2.30893558071693)*(x113)*(x115)))+(((2.30893558071693)*(x113)*(x114))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=3.14159265358979;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x116=((0.433099999998376)*(sj2));
            IKReal x117=((0.431799999998475)+(x116));
            IKReal x118=((0.0202999999999065)*(cj2));
            IKReal x119=((pz)+(x118));
            IKReal x120=((x117)+(((-1.00000000000000)*(x119))));
            IKReal x121=x2;
            IKReal x122=x4;
            IKReal x123=x0;
            IKReal x124=((py)*(sj0));
            IKReal x125=((0.0468713922882671)*(x116));
            IKReal x126=((21.3349753695074)*(x118));
            IKReal x127=((cj0)*(px));
            IKReal x128=((x126)+(x127)+(x124)+(x125));
            evalcond[0]=((0.150100000000748)+(((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396968949997245)+(((18.4248847290874)*(x125)))+(((-0.0404781343795548)*(x126)))+(((-1.00000000000000)*(x122)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x121))));
            evalcond[2]=x120;
            evalcond[3]=x128;
            evalcond[4]=x120;
            evalcond[5]=((0.0240664699995250)+(((-1.00000000000000)*(x122)))+(((0.863599999996950)*(pz)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x121))));
            evalcond[6]=((-1.00000000000000)*(x128));
            evalcond[7]=((((-1.00000000000000)*(px)))+(((-1.00000000000000)*(cj0)*(x126)))+(((-0.150100000000748)*(sj0)))+(((-1.00000000000000)*(cj0)*(x125))));
            evalcond[8]=((((-1.00000000000000)*(py)))+(((-1.00000000000000)*(sj0)*(x125)))+(((-1.00000000000000)*(sj0)*(x126)))+(((0.150100000000748)*(cj0))));
            evalcond[9]=((-0.0202999999999065)+(((-49.2610837444663)*(x125)*(x127)))+(((-2.30893558071693)*(pz)*(x126)))+(((-49.2610837444663)*(x124)*(x125)))+(((0.996998383743630)*(x126))));
            evalcond[10]=((0.433099999998376)+(((-49.2610837444663)*(pz)*(x125)))+(((2.30893558071693)*(x126)*(x127)))+(((2.30893558071693)*(x124)*(x126)))+(((21.2709359608125)*(x125))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=((-0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            }
            }
            }
            if( numsolutionsj1 == 0 ) { continue; }
            for(int ij1 = 0; ij1 < numsolutionsj1; ++ij1)
        {
        if( !j1valid[ij1] ) { continue; }
        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
        
        new_r00=((((-1.00000000000000)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj2)))+(((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r00)))+(((-1.00000000000000)*(cj1)*(r20)*(sj2)))+(((cj1)*(cj2)*(r10)*(sj0))));
        new_r01=((((-1.00000000000000)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r01)))+(((-1.00000000000000)*(cj1)*(r21)*(sj2)))+(((cj1)*(cj2)*(r11)*(sj0))));
        new_r02=((((cj0)*(cj1)*(cj2)*(r02)))+(((cj1)*(cj2)*(r12)*(sj0)))+(((-1.00000000000000)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r22)*(sj2)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj2))));
        new_r10=((((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r10))));
        new_r11=((((-1.00000000000000)*(r01)*(sj0)))+(((cj0)*(r11))));
        new_r12=((((-1.00000000000000)*(r02)*(sj0)))+(((cj0)*(r12))));
        new_r20=((((cj1)*(cj2)*(r20)))+(((cj0)*(cj2)*(r00)*(sj1)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((cj1)*(r10)*(sj0)*(sj2)))+(((cj0)*(cj1)*(r00)*(sj2)))+(((cj2)*(r10)*(sj0)*(sj1))));
        new_r21=((((cj0)*(cj1)*(r01)*(sj2)))+(((cj2)*(r11)*(sj0)*(sj1)))+(((cj1)*(r11)*(sj0)*(sj2)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r21)))+(((cj0)*(cj2)*(r01)*(sj1))));
        new_r22=((((cj0)*(cj1)*(r02)*(sj2)))+(((cj2)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)))+(((cj1)*(r12)*(sj0)*(sj2)))+(((cj1)*(cj2)*(r22)))+(((cj0)*(cj2)*(r02)*(sj1))));
        {
        IKReal j4eval;
        j4eval=new_r22;
        if( j4eval >= -1.000010 && j4eval <= -0.999990 )
        {
            {
            j4 = 3.141593; sj4 = 0.000000; cj4 = -1.000000;
            IKReal j3mul = 1;
            j3=0;
            IKReal j5mul=1.00000000000000;
            j5=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r10)), new_r11)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(6);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[3].fmul = j3mul;
            solution.basesol[3].freeind = 0;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 3;
            }
            
        } else
        if( j4eval >= 0.999990 && j4eval <= 1.000010 )
        {
            {
            j4 = 0.000000; sj4 = 0.000000; cj4 = 1.000000;
            IKReal j3mul = 1;
            j3=0;
            IKReal j5mul=-1.00000000000000;
            j5=((((-1.00000000000000)*(IKatan2(new_r10, ((-1.00000000000000)*(new_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(6);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[3].fmul = j3mul;
            solution.basesol[3].freeind = 0;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 3;
            }
            
        } else
        {
            {
            IKReal j3array[2], cj3array[2], sj3array[2];
            bool j3valid[2]={false};
            j3array[0]=IKatan2(new_r12, new_r02);
            sj3array[0]=IKsin(j3array[0]);
            cj3array[0]=IKcos(j3array[0]);
            j3array[1] = j3array[0] > 0 ? j3array[0]-IKPI : j3array[0]+IKPI;
            sj3array[1] = -sj3array[0];
            cj3array[1] = -cj3array[0];
            if( j3array[0] > IKPI )
                j3array[0]-=IK2PI;
            else if( j3array[0] < -IKPI )
                j3array[0]+=IK2PI;
            j3valid[0] = true;
            if( j3array[1] > IKPI )
                j3array[1]-=IK2PI;
            else if( j3array[1] < -IKPI )
                j3array[1]+=IK2PI;
            j3valid[1] = true;
            if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                j3valid[1]=false;
            for(int ij3 = 0; ij3 < 2; ++ij3)
            {
            if( !j3valid[ij3] ) { continue; }
            j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
            
            {
            IKReal evalcond;
                evalcond=IKsin(j3);
                if( IKabs(evalcond) < 0.00001 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                IKReal x129=IKcos(j3);
                IKReal x130=((IKabs(x129) != 0)?((IKReal)1/(x129)):(IKReal)1.0e30);
                j5array[0]=IKatan2(((new_r10)*(x130)), ((new_r11)*(x130)));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((new_r02)*(((IKabs(IKcos(j3)) != 0)?((IKReal)1/(IKcos(j3))):(IKReal)1.0e30))), new_r22);
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(6);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.vfree.resize(0);
                }
                }
                }
                }
                
            } else
            {
                if( 1 )
                {
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((new_r12)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30))), new_r22);
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                {
                IKReal evalcond;
                    evalcond=IKsin(j4);
                    if( IKabs(evalcond) < 0.00001 )
                    {
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    IKReal x131=IKsin(j3);
                    IKReal x132=IKcos(j4);
                    IKReal x133=((IKabs(x132) != 0)?((IKReal)1/(x132)):(IKReal)1.0e30);
                    IKReal x134=IKcos(j3);
                    j5array[0]=IKatan2(((((new_r10)*(x134)))+(((-1.00000000000000)*(new_r00)*(x131)))), ((((new_r10)*(x131)*(x133)))+(((new_r00)*(x133)*(x134)))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    for(int ij5 = 0; ij5 < 1; ++ij5)
                    {
                    if( !j5valid[ij5] ) { continue; }
                    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    IKReal x135=((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30);
                    j5array[0]=IKatan2(((new_r21)*(x135)), ((-1.00000000000000)*(new_r20)*(x135)));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    for(int ij5 = 0; ij5 < 1; ++ij5)
                    {
                    if( !j5valid[ij5] ) { continue; }
                    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                }
                }
                }
                }
                }
                
            } else
            {
            }
            }
            }
            }
            }
            
        }
        }
        }
        }
        }
        }
        }
        }
        
    } else
    {
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
