/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-10-27 10:14:34.097488
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
    x0=IKsin(j[3]);
    x1=IKsin(j[5]);
    x2=IKcos(j[3]);
    x3=IKcos(j[4]);
    x4=IKcos(j[5]);
    x5=IKcos(j[2]);
    x6=((x2)*(x3)*(x4));
    x7=((x0)*(x1));
    x8=IKsin(j[2]);
    x9=IKsin(j[4]);
    x10=IKsin(j[0]);
    x11=IKcos(j[0]);
    x12=IKsin(j[1]);
    x13=IKcos(j[1]);
    x14=((x1)*(x2)*(x3));
    x15=((x0)*(x4));
    x16=((x15)+(x14));
    x17=((x2)*(x5)*(x9));
    x18=((x3)*(x8));
    x19=((x17)+(x18));
    x20=((x13)*(x19));
    x21=((x3)*(x5));
    x22=((x2)*(x8)*(x9));
    x23=((((-1.00000000000000)*(x22)))+(x21));
    x24=((x12)*(x23));
    x25=((x24)+(x20));
    x26=((x1)*(x2));
    x27=((x15)*(x3));
    x28=((x26)+(x27));
    x29=((x7)+(((-1.00000000000000)*(x6))));
    x30=((x29)*(x8));
    x31=((x4)*(x5)*(x9));
    x32=((((-1.00000000000000)*(x31)))+(x30));
    x33=((x12)*(x32));
    x34=((x6)+(((-1.00000000000000)*(x7))));
    x35=((x34)*(x5));
    x36=((x4)*(x8)*(x9));
    x37=((((-1.00000000000000)*(x36)))+(x35));
    x38=((x13)*(x37));
    x39=((x38)+(x33));
    x40=((x2)*(x4));
    x41=((x3)*(x7));
    x42=((x1)*(x5)*(x9));
    x43=((x16)*(x8));
    x44=((x42)+(x43));
    x45=((x12)*(x44));
    x46=((-1.00000000000000)*(x16));
    x47=((x46)*(x5));
    x48=((x1)*(x8)*(x9));
    x49=((x48)+(x47));
    x50=((x13)*(x49));
    x51=((x45)+(x50));
    x52=((0.0203000000000000)*(x8));
    x53=((0.433100000000000)*(x5));
    x54=((x53)+(x52));
    x55=((x12)*(x54));
    x56=((0.433100000000000)*(x8));
    x57=((0.431800000000000)+(x56));
    x58=((0.0203000000000000)*(x5));
    x59=((x57)+(((-1.00000000000000)*(x58))));
    x60=((x13)*(x59));
    x61=((x55)+(x60));
    x62=((-1.00000000000000)*(x19));
    eerot[0]=((((x11)*(x39)))+(((-1.00000000000000)*(x10)*(x28))));
    eerot[1]=((((x11)*(x51)))+(((x10)*(((((-1.00000000000000)*(x40)))+(x41))))));
    eerot[2]=((((-1.00000000000000)*(x0)*(x10)*(x9)))+(((x11)*(x25))));
    eetrans[0]=((((x11)*(x61)))+(((0.175000000000000)*(x11)*(x25)))+(((-0.150100000000000)*(x10)))+(((-0.175000000000000)*(x0)*(x10)*(x9))));
    eerot[3]=((((x10)*(x39)))+(((x11)*(x28))));
    eerot[4]=((((x10)*(x51)))+(((x11)*(((((-1.00000000000000)*(x41)))+(x40))))));
    eerot[5]=((((x0)*(x11)*(x9)))+(((x10)*(x25))));
    eetrans[1]=((((0.175000000000000)*(x0)*(x11)*(x9)))+(((x10)*(x61)))+(((0.150100000000000)*(x11)))+(((0.175000000000000)*(x10)*(x25))));
    eerot[6]=((((x13)*(((((-1.00000000000000)*(x31)))+(x30)))))+(((x12)*(((((x29)*(x5)))+(x36))))));
    eerot[7]=((((x12)*(((((-1.00000000000000)*(x48)))+(((x16)*(x5)))))))+(((x13)*(x44))));
    eerot[8]=((((x12)*(x62)))+(((x13)*(x23))));
    eetrans[2]=((1.37100000000000)+(((x13)*(x54)))+(((-1.00000000000000)*(x12)*(x59)))+(((0.175000000000000)*(x12)*(x62)))+(((0.175000000000000)*(x13)*(x23))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j2, cj2, sj2,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    r00 = eerot[0*3+0];
    r01 = eerot[0*3+1];
    r02 = eerot[0*3+2];
    r10 = eerot[1*3+0];
    r11 = eerot[1*3+1];
    r12 = eerot[1*3+2];
    r20 = eerot[2*3+0];
    r21 = eerot[2*3+1];
    r22 = eerot[2*3+2];
    px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
    
    new_r00=r00;
    new_r01=r01;
    new_r02=r02;
    new_px=((((-0.175000000000000)*(r02)))+(px));
    new_r10=r10;
    new_r11=r11;
    new_r12=r12;
    new_py=((((-0.175000000000000)*(r12)))+(py));
    new_r20=r20;
    new_r21=r21;
    new_r22=r22;
    new_pz=((-1.37100000000000)+(((-0.175000000000000)*(r22)))+(pz));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        {
        IKReal j2array[2], cj2array[2], sj2array[2];
        bool j2valid[2]={false};
        IKReal x0=(py)*(py);
        IKReal x1=((2.67068488900329)*(x0));
        IKReal x2=(pz)*(pz);
        IKReal x3=((2.67068488900329)*(x2));
        IKReal x4=(px)*(px);
        IKReal x5=((2.67068488900329)*(x4));
        IKReal x6=((-1.06017897616850)+(x3)+(x1)+(x5));
        if( (x6) < -1.0001 || (x6) > 1.0001 )
            continue;
        IKReal x7=IKasin(x6);
        j2array[0]=((0.0468371131132389)+(x7));
        sj2array[0]=IKsin(j2array[0]);
        cj2array[0]=IKcos(j2array[0]);
        j2array[1]=((3.18842976670303)+(((-1.00000000000000)*(x7))));
        sj2array[1]=IKsin(j2array[1]);
        cj2array[1]=IKcos(j2array[1]);
        if( j2array[0] > IKPI )
            j2array[0]-=IK2PI;
        else if( j2array[0] < -IKPI )
            j2array[0]+=IK2PI;
        j2valid[0] = true;
        if( j2array[1] > IKPI )
            j2array[1]-=IK2PI;
        else if( j2array[1] < -IKPI )
            j2array[1]+=IK2PI;
        j2valid[1] = true;
        if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
            j2valid[1]=false;
        for(int ij2 = 0; ij2 < 2; ++ij2)
        {
        if( !j2valid[ij2] ) { continue; }
        j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
        
        {
            IKReal j0eval[1];
            if( ((((px)*(px))+((py)*(py)))) < (IKReal)-0.00001 )
                continue;
            j0eval[0]=IKabs(IKsqrt((((px)*(px))+((py)*(py)))));
            if( IKabs(j0eval[0]) < 0.000001  )
            {
                {
                    if( 1 )
                    {
                    {
                        IKReal j1eval[1];
                        if( ((((((((0.0203000000000000)*(sj2)))+(((0.433100000000000)*(cj2)))))*(((((0.0203000000000000)*(sj2)))+(((0.433100000000000)*(cj2))))))+((((0.431800000000000)+(((0.433100000000000)*(sj2)))+(((-0.0203000000000000)*(cj2)))))*(((0.431800000000000)+(((0.433100000000000)*(sj2)))+(((-0.0203000000000000)*(cj2)))))))) < (IKReal)-0.00001 )
                            continue;
                        j1eval[0]=IKabs(IKsqrt((((((((0.0203000000000000)*(sj2)))+(((0.433100000000000)*(cj2)))))*(((((0.0203000000000000)*(sj2)))+(((0.433100000000000)*(cj2))))))+((((0.431800000000000)+(((0.433100000000000)*(sj2)))+(((-0.0203000000000000)*(cj2)))))*(((0.431800000000000)+(((0.433100000000000)*(sj2)))+(((-0.0203000000000000)*(cj2)))))))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                continue;
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[2], cj1array[2], sj1array[2];
                            bool j1valid[2]={false};
                            IKReal x8=((0.0203000000000000)*(sj2));
                            IKReal x9=((0.433100000000000)*(cj2));
                            IKReal x10=((x9)+(x8));
                            IKReal x11=((0.0203000000000000)*(cj2));
                            IKReal x12=((0.433100000000000)*(sj2));
                            IKReal x13=((-0.431800000000000)+(x11));
                            IKReal x14=((((-1.00000000000000)*(x12)))+(x13));
                            IKReal x15=IKatan2(x10, x14);
                            IKReal x16=(x10)*(x10);
                            IKReal x17=((0.431800000000000)+(x12));
                            IKReal x18=((((-1.00000000000000)*(x11)))+(x17));
                            IKReal x19=(x18)*(x18);
                            IKReal x20=((x16)+(x19));
                            if( (x20) < (IKReal)-0.00001 )
                                continue;
                            IKReal x21=IKsqrt(x20);
                            IKReal x22=IKabs(x21);
                            IKReal x23=((IKabs(x22) != 0)?((IKReal)1/(x22)):(IKReal)1.0e30);
                            IKReal x24=((pz)*(x23));
                            if( (x24) < -1.0001 || (x24) > 1.0001 )
                                continue;
                            IKReal x25=IKasin(x24);
                            j1array[0]=((((-1.00000000000000)*(x15)))+(x25));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x15)))+(((-1.00000000000000)*(x25))));
                            sj1array[1]=IKsin(j1array[1]);
                            cj1array[1]=IKcos(j1array[1]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            if( j1array[1] > IKPI )
                                j1array[1]-=IK2PI;
                            else if( j1array[1] < -IKPI )
                                j1array[1]+=IK2PI;
                            j1valid[1] = true;
                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                j1valid[1]=false;
                            for(int ij1 = 0; ij1 < 2; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            {
                                IKReal j0eval[1];
                                j0eval[0]=((((-1.00000000000000)*(cj1)*((py)*(py))))+(((-1.00000000000000)*(cj1)*((px)*(px)))));
                                if( IKabs(j0eval[0]) < 0.000001  )
                                {
                                    {
                                    IKReal evalcond[5];
                                        IKReal x26=x11;
                                        IKReal x27=x12;
                                        IKReal x28=x4;
                                        IKReal x29=x0;
                                        IKReal x30=x2;
                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
                                        evalcond[1]=((0.396968950000000)+(((-0.0175310800000000)*(cj2)))+(((-1.00000000000000)*(x29)))+(((-1.00000000000000)*(x28)))+(((-1.00000000000000)*(x30)))+(((0.374025160000000)*(sj2))));
                                        evalcond[2]=((0.431800000000000)+(((-1.00000000000000)*(x26)))+(pz)+(x27));
                                        evalcond[3]=((-0.431800000000000)+(((-1.00000000000000)*(x27)))+(x26)+(((-1.00000000000000)*(pz))));
                                        evalcond[4]=((0.0240664700000000)+(((-1.00000000000000)*(x29)))+(((-1.00000000000000)*(x28)))+(((-1.00000000000000)*(x30)))+(((-0.863600000000000)*(pz))));
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                        {
                                        {
                                            IKReal j0eval[1];
                                            j0eval[0]=((((px)*(((((0.0203000000000000)*(sj2)))+(((0.433100000000000)*(cj2)))))))+(((-0.150100000000000)*(py))));
                                            if( IKabs(j0eval[0]) < 0.000001  )
                                            {
                                                {
                                                    if( 1 )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((py)*(((((0.0203000000000000)*(sj2)))+(((0.433100000000000)*(cj2)))))))+(((0.150100000000000)*(px))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                continue;
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x31=x8;
                                                            IKReal x32=x9;
                                                            IKReal x33=((x32)+(x31));
                                                            IKReal x34=((py)*(x33));
                                                            IKReal x35=((0.150100000000000)*(px));
                                                            IKReal x36=((x35)+(x34));
                                                            IKReal x37=((IKabs(x36) != 0)?((IKReal)1/(x36)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((-1.00000000000000)*(x37)*(((0.0225300100000000)+(((-1.00000000000000)*((py)*(py))))))), ((x37)*(((((0.00304703000000000)*(sj2)))+(((0.0650083100000000)*(cj2)))+(((px)*(py)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1]={false};
                                                IKReal x64=x8;
                                                IKReal x65=x9;
                                                IKReal x66=((x64)+(x65));
                                                IKReal x67=((px)*(x66));
                                                IKReal x68=((0.150100000000000)*(py));
                                                IKReal x69=((x67)+(((-1.00000000000000)*(x68))));
                                                IKReal x70=((IKabs(x69) != 0)?((IKReal)1/(x69)):(IKReal)1.0e30);
                                                j0array[0]=IKatan2(((x70)*(((((-0.00304703000000000)*(sj2)))+(((-0.0650083100000000)*(cj2)))+(((px)*(py)))))), ((-1.00000000000000)*(x70)*(((0.0225300100000000)+(((-1.00000000000000)*((px)*(px))))))));
                                                sj0array[0]=IKsin(j0array[0]);
                                                cj0array[0]=IKcos(j0array[0]);
                                                if( j0array[0] > IKPI )
                                                    j0array[0]-=IK2PI;
                                                else if( j0array[0] < -IKPI )
                                                    j0array[0]+=IK2PI;
                                                j0valid[0] = true;
                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                if( !j0valid[ij0] ) { continue; }
                                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                        IKReal x71=x12;
                                        IKReal x72=((0.431800000000000)+(x71));
                                        IKReal x73=x11;
                                        IKReal x74=((pz)+(x73));
                                        IKReal x75=((((-1.00000000000000)*(x74)))+(x72));
                                        IKReal x76=x4;
                                        IKReal x77=x0;
                                        IKReal x78=x2;
                                        evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                        evalcond[1]=((0.396968950000000)+(((-0.0175310800000000)*(cj2)))+(((-1.00000000000000)*(x76)))+(((-1.00000000000000)*(x77)))+(((-1.00000000000000)*(x78)))+(((0.374025160000000)*(sj2))));
                                        evalcond[2]=x75;
                                        evalcond[3]=x75;
                                        evalcond[4]=((0.0240664700000000)+(((-1.00000000000000)*(x76)))+(((-1.00000000000000)*(x77)))+(((-1.00000000000000)*(x78)))+(((0.863600000000000)*(pz))));
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                        {
                                        {
                                            IKReal j0eval[1];
                                            j0eval[0]=(((px)*(px))+((py)*(py)));
                                            if( IKabs(j0eval[0]) < 0.000001  )
                                            {
                                                {
                                                    if( 1 )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((-1.00000000000000)*(px)*(((((0.0203000000000000)*(sj2)))+(((0.433100000000000)*(cj2)))))))+(((-0.150100000000000)*(py))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                continue;
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x79=x8;
                                                            IKReal x80=x9;
                                                            IKReal x81=((x79)+(x80));
                                                            IKReal x82=((-1.00000000000000)*(x81));
                                                            IKReal x83=((px)*(x82));
                                                            IKReal x84=((0.150100000000000)*(py));
                                                            IKReal x85=((x83)+(((-1.00000000000000)*(x84))));
                                                            IKReal x86=((IKabs(x85) != 0)?((IKReal)1/(x85)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((x86)*(((((0.00304703000000000)*(sj2)))+(((0.0650083100000000)*(cj2)))+(((px)*(py)))))), ((-1.00000000000000)*(x86)*(((0.0225300100000000)+(((-1.00000000000000)*((px)*(px))))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1]={false};
                                                IKReal x87=x4;
                                                IKReal x88=x0;
                                                IKReal x89=((x88)+(x87));
                                                IKReal x90=((IKabs(x89) != 0)?((IKReal)1/(x89)):(IKReal)1.0e30);
                                                IKReal x91=x8;
                                                IKReal x92=x9;
                                                IKReal x93=((x91)+(x92));
                                                j0array[0]=IKatan2(((x90)*(((((-0.150100000000000)*(px)))+(((-1.00000000000000)*(py)*(x93)))))), ((x90)*(((((0.150100000000000)*(py)))+(((-1.00000000000000)*(px)*(x93)))))));
                                                sj0array[0]=IKsin(j0array[0]);
                                                cj0array[0]=IKcos(j0array[0]);
                                                if( j0array[0] > IKPI )
                                                    j0array[0]-=IK2PI;
                                                else if( j0array[0] < -IKPI )
                                                    j0array[0]+=IK2PI;
                                                j0valid[0] = true;
                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                if( !j0valid[ij0] ) { continue; }
                                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                        if( 1 )
                                        {
                                        {
                                            IKReal j0eval[1];
                                            j0eval[0]=((((-1.00000000000000)*(sj1)*((py)*(py))))+(((-1.00000000000000)*(sj1)*((px)*(px)))));
                                            if( IKabs(j0eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[4];
                                                    IKReal x94=x8;
                                                    IKReal x95=x9;
                                                    IKReal x96=((x95)+(x94));
                                                    IKReal x97=((x96)+(((-1.00000000000000)*(pz))));
                                                    evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((0.396968950000000)+(((-0.0175310800000000)*(cj2)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.374025160000000)*(sj2))));
                                                    evalcond[2]=x97;
                                                    evalcond[3]=x97;
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((py)*(((0.431800000000000)+(((0.433100000000000)*(sj2)))+(((-0.0203000000000000)*(cj2)))))))+(((0.150100000000000)*(px))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((px)*(((0.431800000000000)+(((0.433100000000000)*(sj2)))+(((-0.0203000000000000)*(cj2)))))))+(((-0.150100000000000)*(py))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x98=x12;
                                                                        IKReal x99=((0.431800000000000)+(x98));
                                                                        IKReal x100=x11;
                                                                        IKReal x101=((((-1.00000000000000)*(x100)))+(x99));
                                                                        IKReal x102=((px)*(x101));
                                                                        IKReal x103=((0.150100000000000)*(py));
                                                                        IKReal x104=((((-1.00000000000000)*(x103)))+(x102));
                                                                        IKReal x105=((IKabs(x104) != 0)?((IKReal)1/(x104)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((-1.00000000000000)*(x105)*(((0.0648131800000000)+(((-0.00304703000000000)*(cj2)))+(((0.0650083100000000)*(sj2)))+(((-1.00000000000000)*(px)*(py)))))), ((-1.00000000000000)*(x105)*(((0.0225300100000000)+(((-1.00000000000000)*((px)*(px))))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x106=((0.150100000000000)*(px));
                                                            IKReal x107=x12;
                                                            IKReal x108=((0.431800000000000)+(x107));
                                                            IKReal x109=x11;
                                                            IKReal x110=((((-1.00000000000000)*(x109)))+(x108));
                                                            IKReal x111=((py)*(x110));
                                                            IKReal x112=((x111)+(x106));
                                                            IKReal x113=((IKabs(x112) != 0)?((IKReal)1/(x112)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((-1.00000000000000)*(x113)*(((0.0225300100000000)+(((-1.00000000000000)*((py)*(py))))))), ((x113)*(((0.0648131800000000)+(((-0.00304703000000000)*(cj2)))+(((0.0650083100000000)*(sj2)))+(((px)*(py)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                    IKReal x114=x8;
                                                    IKReal x115=x9;
                                                    IKReal x116=((x115)+(x114)+(pz));
                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((0.396968950000000)+(((-0.0175310800000000)*(cj2)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.374025160000000)*(sj2))));
                                                    evalcond[2]=x116;
                                                    evalcond[3]=((-1.00000000000000)*(x116));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=(((px)*(px))+((py)*(py)));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((-1.00000000000000)*(px)*(((0.431800000000000)+(((0.433100000000000)*(sj2)))+(((-0.0203000000000000)*(cj2)))))))+(((-0.150100000000000)*(py))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x117=x12;
                                                                        IKReal x118=((0.431800000000000)+(x117));
                                                                        IKReal x119=x11;
                                                                        IKReal x120=((((-1.00000000000000)*(x119)))+(x118));
                                                                        IKReal x121=((px)*(x120));
                                                                        IKReal x122=((0.150100000000000)*(py));
                                                                        IKReal x123=((x122)+(x121));
                                                                        IKReal x124=((-1.00000000000000)*(x123));
                                                                        IKReal x125=((IKabs(x124) != 0)?((IKReal)1/(x124)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((x125)*(((0.0648131800000000)+(((-0.00304703000000000)*(cj2)))+(((0.0650083100000000)*(sj2)))+(((px)*(py)))))), ((-1.00000000000000)*(x125)*(((0.0225300100000000)+(((-1.00000000000000)*((px)*(px))))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x126=x4;
                                                            IKReal x127=x0;
                                                            IKReal x128=((x126)+(x127));
                                                            IKReal x129=((IKabs(x128) != 0)?((IKReal)1/(x128)):(IKReal)1.0e30);
                                                            IKReal x130=x12;
                                                            IKReal x131=((0.431800000000000)+(x130));
                                                            IKReal x132=x11;
                                                            IKReal x133=((x131)+(((-1.00000000000000)*(x132))));
                                                            j0array[0]=IKatan2(((x129)*(((((-1.00000000000000)*(py)*(x133)))+(((-0.150100000000000)*(px)))))), ((x129)*(((((-1.00000000000000)*(px)*(x133)))+(((0.150100000000000)*(py)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    continue;
                                                
                                                } else
                                                {
                                                }
                                                }
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1]={false};
                                                IKReal x134=x8;
                                                IKReal x135=x9;
                                                IKReal x136=((x135)+(x134));
                                                IKReal x137=((cj1)*(pz));
                                                IKReal x138=((x136)+(((-1.00000000000000)*(x137))));
                                                IKReal x139=x0;
                                                IKReal x140=((sj1)*(x139));
                                                IKReal x141=x4;
                                                IKReal x142=((sj1)*(x141));
                                                IKReal x143=((x140)+(x142));
                                                IKReal x144=((-1.00000000000000)*(x143));
                                                IKReal x145=((IKabs(x144) != 0)?((IKReal)1/(x144)):(IKReal)1.0e30);
                                                j0array[0]=IKatan2(((x145)*(((((-1.00000000000000)*(py)*(x138)))+(((0.150100000000000)*(px)*(sj1)))))), ((x145)*(((((-0.150100000000000)*(py)*(sj1)))+(((-1.00000000000000)*(px)*(x138)))))));
                                                sj0array[0]=IKsin(j0array[0]);
                                                cj0array[0]=IKcos(j0array[0]);
                                                if( j0array[0] > IKPI )
                                                    j0array[0]-=IK2PI;
                                                else if( j0array[0] < -IKPI )
                                                    j0array[0]+=IK2PI;
                                                j0valid[0] = true;
                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                if( !j0valid[ij0] ) { continue; }
                                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                    }
                                    }
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                    bool j0valid[1]={false};
                                    IKReal x146=x12;
                                    IKReal x147=((pz)*(sj1));
                                    IKReal x148=((0.431800000000000)+(x146)+(x147));
                                    IKReal x149=x11;
                                    IKReal x150=((((-1.00000000000000)*(x149)))+(x148));
                                    IKReal x151=x4;
                                    IKReal x152=((cj1)*(x151));
                                    IKReal x153=x0;
                                    IKReal x154=((cj1)*(x153));
                                    IKReal x155=((x154)+(x152));
                                    IKReal x156=((-1.00000000000000)*(x155));
                                    IKReal x157=((IKabs(x156) != 0)?((IKReal)1/(x156)):(IKReal)1.0e30);
                                    j0array[0]=IKatan2(((x157)*(((((-1.00000000000000)*(py)*(x150)))+(((0.150100000000000)*(cj1)*(px)))))), ((x157)*(((((-0.150100000000000)*(cj1)*(py)))+(((-1.00000000000000)*(px)*(x150)))))));
                                    sj0array[0]=IKsin(j0array[0]);
                                    cj0array[0]=IKcos(j0array[0]);
                                    if( j0array[0] > IKPI )
                                        j0array[0]-=IK2PI;
                                    else if( j0array[0] < -IKPI )
                                        j0array[0]+=IK2PI;
                                    j0valid[0] = true;
                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                    {
                                    if( !j0valid[ij0] ) { continue; }
                                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                }
                }
            
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x158=x4;
                IKReal x159=x0;
                IKReal x160=((x159)+(x158));
                if( (x160) < (IKReal)-0.00001 )
                    continue;
                IKReal x161=IKsqrt(x160);
                IKReal x162=IKabs(x161);
                IKReal x163=((IKabs(x162) != 0)?((IKReal)1/(x162)):(IKReal)1.0e30);
                IKReal x164=((0.150100000000000)*(x163));
                if( (x164) < -1.0001 || (x164) > 1.0001 )
                    continue;
                IKReal x165=IKasin(x164);
                IKReal x166=((-1.00000000000000)*(py));
                IKReal x167=IKatan2(x166, px);
                j0array[0]=((((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x167))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x167)))+(x165));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0)
                {
                if( !j0valid[ij0] ) { continue; }
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                    IKReal j1eval[1];
                    j1eval[0]=((((-1.00000000000000)*((pz)*(pz))))+(((-1.00000000000000)*((((((cj0)*(px)))+(((py)*(sj0)))))*(((((cj0)*(px)))+(((py)*(sj0)))))))));
                    if( IKabs(j1eval[0]) < 0.000001  )
                    {
                        {
                            if( 1 )
                            {
                            {
                                IKReal j1eval[1];
                                j1eval[0]=((((((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))*(((0.431800000000000)+(((0.433100000000000)*(sj2)))+(((-0.0203000000000000)*(cj2)))))))+(((pz)*(((((0.0203000000000000)*(sj2)))+(((0.433100000000000)*(cj2))))))));
                                if( IKabs(j1eval[0]) < 0.000001  )
                                {
                                    {
                                        if( 1 )
                                        {
                                        continue;
                                    
                                    } else
                                    {
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x168=((cj0)*(px));
                                    IKReal x169=((py)*(sj0));
                                    IKReal x170=((x168)+(x169));
                                    IKReal x171=((-1.00000000000000)*(x170));
                                    IKReal x172=((0.433100000000000)*(sj2));
                                    IKReal x173=((0.431800000000000)+(x172));
                                    IKReal x174=((0.0203000000000000)*(cj2));
                                    IKReal x175=((((-1.00000000000000)*(x174)))+(x173));
                                    IKReal x176=((0.0203000000000000)*(sj2));
                                    IKReal x177=((0.433100000000000)*(cj2));
                                    IKReal x178=((x177)+(x176));
                                    IKReal x179=((pz)*(x178));
                                    IKReal x180=((x171)*(x175));
                                    IKReal x181=((x179)+(x180));
                                    IKReal x182=((IKabs(x181) != 0)?((IKReal)1/(x181)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((x182)*(((((x175)*(((((-0.433100000000000)*(cj2)))+(((-0.0203000000000000)*(sj2)))))))+(((-1.00000000000000)*(pz)*(x171)))))), ((x182)*((((pz)*(pz))+(((-1.00000000000000)*((x175)*(x175))))))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                    {
                                    if( !j1valid[ij1] ) { continue; }
                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                        
                        } else
                        {
                        }
                        }
                    
                    } else
                    {
                        {
                        IKReal j1array[1], cj1array[1], sj1array[1];
                        bool j1valid[1]={false};
                        IKReal x183=((cj0)*(px));
                        IKReal x184=((py)*(sj0));
                        IKReal x185=((x184)+(x183));
                        IKReal x186=((-1.00000000000000)*(x185));
                        IKReal x187=((0.0203000000000000)*(sj2));
                        IKReal x188=((0.433100000000000)*(cj2));
                        IKReal x189=((x187)+(x188));
                        IKReal x190=((0.433100000000000)*(sj2));
                        IKReal x191=((0.431800000000000)+(x190));
                        IKReal x192=((0.0203000000000000)*(cj2));
                        IKReal x193=((((-1.00000000000000)*(x192)))+(x191));
                        IKReal x194=(x186)*(x186);
                        IKReal x195=x2;
                        IKReal x196=((x195)+(x194));
                        IKReal x197=((-1.00000000000000)*(x196));
                        IKReal x198=((IKabs(x197) != 0)?((IKReal)1/(x197)):(IKReal)1.0e30);
                        j1array[0]=IKatan2(((x198)*(((((x186)*(x189)))+(((pz)*(x193)))))), ((x198)*(((((x186)*(x193)))+(((-1.00000000000000)*(pz)*(x189)))))));
                        sj1array[0]=IKsin(j1array[0]);
                        cj1array[0]=IKcos(j1array[0]);
                        if( j1array[0] > IKPI )
                            j1array[0]-=IK2PI;
                        else if( j1array[0] < -IKPI )
                            j1array[0]+=IK2PI;
                        j1valid[0] = true;
                        for(int ij1 = 0; ij1 < 1; ++ij1)
                        {
                        if( !j1valid[ij1] ) { continue; }
                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                        
                        rotationfunction0(vsolutions);
                        }
                        }
                    
                    }
                
                }
                }
                }
            
            }
        
        }
        }
        }
    
    } else
    {
    }
    }
}
return vsolutions.size()>0;
}
    void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        IKReal x38=((cj0)*(cj1)*(cj2));
        IKReal x39=((cj0)*(sj1)*(sj2));
        IKReal x40=((((-1.00000000000000)*(x39)))+(x38));
        IKReal x41=((cj2)*(sj1));
        IKReal x42=((cj1)*(sj2));
        IKReal x43=((x42)+(x41));
        IKReal x44=((-1.00000000000000)*(x43));
        IKReal x45=((cj1)*(cj2)*(sj0));
        IKReal x46=((sj0)*(sj1)*(sj2));
        IKReal x47=((((-1.00000000000000)*(x46)))+(x45));
        IKReal x48=((cj1)*(cj2));
        IKReal x49=((sj1)*(sj2));
        IKReal x50=((((-1.00000000000000)*(x49)))+(x48));
        IKReal x51=((sj0)*(x42));
        IKReal x52=((sj0)*(x41));
        IKReal x53=((x51)+(x52));
        IKReal x54=((cj0)*(x41));
        IKReal x55=((cj0)*(x42));
        IKReal x56=((x55)+(x54));
        new_r00=((((r20)*(x44)))+(((r00)*(x40)))+(((r10)*(x47))));
        new_r01=((((r01)*(x40)))+(((r11)*(x47)))+(((r21)*(x44))));
        new_r02=((((r22)*(x44)))+(((r02)*(x40)))+(((r12)*(x47))));
        new_r10=((((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r10))));
        new_r11=((((-1.00000000000000)*(r01)*(sj0)))+(((cj0)*(r11))));
        new_r12=((((cj0)*(r12)))+(((-1.00000000000000)*(r02)*(sj0))));
        new_r20=((((r10)*(x53)))+(((r00)*(x56)))+(((r20)*(x50))));
        new_r21=((((r11)*(x53)))+(((r01)*(x56)))+(((r21)*(x50))));
        new_r22=((((r22)*(x50)))+(((r02)*(x56)))+(((r12)*(x53))));
        {
        IKReal j4eval;
        j4eval=new_r22;
        if( j4eval >= -1.000010 && j4eval <= -0.999990 )
        {
            {
            j4 = 3.141593; sj4 = 0.000000; cj4 = -1.000000;
            IKReal j3mul = 1;
            j3=0;
            IKReal j5mul=1.00000000000000;
            j5=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r10)), new_r11)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(6);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[3].fmul = j3mul;
            solution.basesol[3].freeind = 0;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 3;
            }
        
        } else
        if( j4eval >= 0.999990 && j4eval <= 1.000010 )
        {
            {
            j4 = 0.000000; sj4 = 0.000000; cj4 = 1.000000;
            IKReal j3mul = 1;
            j3=0;
            IKReal j5mul=-1.00000000000000;
            j5=((((-1.00000000000000)*(IKatan2(new_r10, ((-1.00000000000000)*(new_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(6);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[3].fmul = j3mul;
            solution.basesol[3].freeind = 0;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 3;
            }
        
        } else
        {
            {
            IKReal j3array[2], cj3array[2], sj3array[2];
            bool j3valid[2]={false};
            j3array[0]=IKatan2(new_r12, new_r02);
            sj3array[0]=IKsin(j3array[0]);
            cj3array[0]=IKcos(j3array[0]);
            j3array[1] = j3array[0] > 0 ? j3array[0]-IKPI : j3array[0]+IKPI;
            sj3array[1] = -sj3array[0];
            cj3array[1] = -cj3array[0];
            if( j3array[0] > IKPI )
                j3array[0]-=IK2PI;
            else if( j3array[0] < -IKPI )
                j3array[0]+=IK2PI;
            j3valid[0] = true;
            if( j3array[1] > IKPI )
                j3array[1]-=IK2PI;
            else if( j3array[1] < -IKPI )
                j3array[1]+=IK2PI;
            j3valid[1] = true;
            if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                j3valid[1]=false;
            for(int ij3 = 0; ij3 < 2; ++ij3)
            {
            if( !j3valid[ij3] ) { continue; }
            j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
            
            {
            IKReal evalcond[1];
                evalcond[0]=IKsin(j3);
                if( IKabs(evalcond[0]) < 0.000010  )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                IKReal x57=IKcos(j3);
                IKReal x58=((IKabs(x57) != 0)?((IKReal)1/(x57)):(IKReal)1.0e30);
                j5array[0]=IKatan2(((new_r10)*(x58)), ((new_r11)*(x58)));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((new_r02)*(((IKabs(IKcos(j3)) != 0)?((IKReal)1/(IKcos(j3))):(IKReal)1.0e30))), new_r22);
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(6);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.vfree.resize(0);
                }
                }
                }
                }
            
            } else
            {
                if( 1 )
                {
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((new_r12)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30))), new_r22);
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                {
                IKReal evalcond[1];
                    evalcond[0]=IKsin(j4);
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    IKReal x59=IKsin(j3);
                    IKReal x60=IKcos(j4);
                    IKReal x61=((IKabs(x60) != 0)?((IKReal)1/(x60)):(IKReal)1.0e30);
                    IKReal x62=IKcos(j3);
                    j5array[0]=IKatan2(((((-1.00000000000000)*(new_r00)*(x59)))+(((new_r10)*(x62)))), ((((new_r00)*(x61)*(x62)))+(((new_r10)*(x59)*(x61)))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    for(int ij5 = 0; ij5 < 1; ++ij5)
                    {
                    if( !j5valid[ij5] ) { continue; }
                    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    IKReal x63=((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30);
                    j5array[0]=IKatan2(((new_r21)*(x63)), ((-1.00000000000000)*(new_r20)*(x63)));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    for(int ij5 = 0; ij5 < 1; ++ij5)
                    {
                    if( !j5valid[ij5] ) { continue; }
                    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                }
                }
                }
                }
                }
            
            } else
            {
            }
            }
            }
            }
            }
        
        }
        }
    }};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
