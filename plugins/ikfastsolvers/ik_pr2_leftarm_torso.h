/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2011-02-07 22:01:09.183923
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 2; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0, 3}; return freeparams; }
IKFAST_API int getNumJoints() { return 8; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60;
x0=IKcos(j[1]);
x1=IKsin(j[2]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=((x2)*(x4));
x7=((x0)*(x1)*(x3));
x8=((x7)+(x6));
x9=((-1.00000000000000)*(x8));
x10=IKcos(j[2]);
x11=IKcos(j[4]);
x12=IKcos(j[5]);
x13=((x0)*(x1)*(x2));
x14=((x3)*(x4));
x15=((((-1.00000000000000)*(x14)))+(x13));
x16=IKsin(j[5]);
x17=((x11)*(x9));
x18=((x0)*(x10)*(x5));
x19=((((-1.00000000000000)*(x18)))+(x17));
x20=IKcos(j[7]);
x21=((x12)*(x15));
x22=IKsin(j[7]);
x23=IKcos(j[6]);
x24=((x12)*(x19));
x25=((x15)*(x16));
x26=((x24)+(x25));
x27=((x23)*(x26));
x28=IKsin(j[6]);
x29=((x5)*(x9));
x30=((x0)*(x10)*(x11));
x31=((x30)+(x29));
x32=((x0)*(x2));
x33=((x1)*(x14));
x34=((((-1.00000000000000)*(x33)))+(x32));
x35=((x11)*(x34));
x36=((x10)*(x4)*(x5));
x37=((((-1.00000000000000)*(x36)))+(x35));
x38=((x1)*(x6));
x39=((x0)*(x3));
x40=((x39)+(x38));
x41=((x12)*(x40));
x42=((x12)*(x37));
x43=((x16)*(x40));
x44=((x42)+(x43));
x45=((x23)*(x44));
x46=((x10)*(x11)*(x4));
x47=((x34)*(x5));
x48=((x46)+(x47));
x49=((x1)*(x5));
x50=((x10)*(x11)*(x3));
x51=((x49)+(((-1.00000000000000)*(x50))));
x52=((x10)*(x12)*(x2));
x53=((x10)*(x3)*(x5));
x54=((x1)*(x11));
x55=((x54)+(x53));
x56=((-1.00000000000000)*(x55));
x57=((x10)*(x16)*(x2));
x58=((x12)*(x51));
x59=((x58)+(x57));
x60=((x23)*(x59));
eerot[0]=((((x20)*(((((-1.00000000000000)*(x28)*(x31)))+(x27)))))+(((x22)*(((((-1.00000000000000)*(x16)*(x19)))+(x21))))));
eerot[1]=((((x20)*(((((-1.00000000000000)*(x16)*(x19)))+(x21)))))+(((-1.00000000000000)*(x22)*(((((-1.00000000000000)*(x28)*(x31)))+(x27))))));
eerot[2]=((((x23)*(x31)))+(((x26)*(x28))));
eetrans[0]=((-0.0500000000000000)+(((0.100000000000000)*(x0)))+(((0.400000000000000)*(x0)*(x10)))+(((0.321000000000000)*(x29)))+(((0.321000000000000)*(x30)))+(((0.180000000000000)*(x23)*(x31)))+(((0.180000000000000)*(x26)*(x28))));
eerot[3]=((((x20)*(((((-1.00000000000000)*(x28)*(x48)))+(x45)))))+(((x22)*(((x41)+(((-1.00000000000000)*(x16)*(x37))))))));
eerot[4]=((((x20)*(((x41)+(((-1.00000000000000)*(x16)*(x37)))))))+(((-1.00000000000000)*(x22)*(((((-1.00000000000000)*(x28)*(x48)))+(x45))))));
eerot[5]=((((x28)*(((((x12)*(((((-1.00000000000000)*(x36)))+(x35)))))+(x43)))))+(((x23)*(x48))));
eetrans[1]=((0.188000000000000)+(((0.100000000000000)*(x4)))+(((0.321000000000000)*(x47)))+(((0.321000000000000)*(x46)))+(((0.400000000000000)*(x10)*(x4)))+(((0.180000000000000)*(x28)*(x44)))+(((0.180000000000000)*(x23)*(x48))));
eerot[6]=((((x20)*(((x60)+(((-1.00000000000000)*(x28)*(x56)))))))+(((x22)*(((((-1.00000000000000)*(x16)*(x51)))+(x52))))));
eerot[7]=((((-1.00000000000000)*(x22)*(((x60)+(((-1.00000000000000)*(x28)*(x56)))))))+(((x20)*(((((-1.00000000000000)*(x16)*(x51)))+(x52))))));
eerot[8]=((((x28)*(x59)))+(((x23)*(x56))));
eetrans[2]=((0.739675000000000)+(((0.180000000000000)*(x28)*(x59)))+(((-0.400000000000000)*(x1)))+(((-0.321000000000000)*(x53)))+(((-0.321000000000000)*(x54)))+(((0.180000000000000)*(x23)*(x56)))+(j[0]));
}

class IKSolver {
public:
IKReal j15, cj15, sj15,
j16, cj16, sj16,
j18, cj18, sj18,
j19, cj19, sj19,
j20, cj20, sj20,
j21, cj21, sj21,
j12, cj12, sj12,
j17, cj17, sj17,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j12=pfree[0]; cj12=cos(pfree[0]); sj12=sin(pfree[0]);
j17=pfree[1]; cj17=cos(pfree[1]); sj17=sin(pfree[1]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((0.0500000000000000)+(((-0.180000000000000)*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.188000000000000)+(((-0.180000000000000)*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.739675000000000)+(((-0.180000000000000)*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
IKReal coniccoeffs[6], j15array[4];
int numsolutions;
IKReal x0=(px)*(px);
IKReal x1=(sj17)*(sj17);
IKReal x2=(py)*(py);
IKReal x3=(j12)*(j12);
IKReal x4=((0.0625000000000000)*(x1)*(x2));
coniccoeffs[0]=((x0)+(x4)+(((-0.0625000000000000)*(x0)*(x1)))+(((-1.00000000000000)*(x2))));
coniccoeffs[1]=((((-0.0625000000000000)*(px)*(py)*(x1)))+(((px)*(py))));
coniccoeffs[2]=((((0.312500000000000)*(px)*(x1)*(x3)))+(((0.312500000000000)*(pp)*(px)*(x1)))+(((-0.0790753125000000)*(px)*(x1)))+(((-0.625000000000000)*(j12)*(px)*(pz)*(x1))));
coniccoeffs[3]=0;
coniccoeffs[4]=((((-0.625000000000000)*(j12)*(py)*(pz)*(x1)))+(((0.312500000000000)*(pp)*(py)*(x1)))+(((-0.0790753125000000)*(py)*(x1)))+(((0.312500000000000)*(py)*(x1)*(x3))));
coniccoeffs[5]=((((0.00299451924843750)*(x1)))+(((-1.56250000000000)*(x1)*((x3)*(x3))))+(((-3.12500000000000)*(pp)*(x1)*(x3)))+(((6.25000000000000)*(j12)*(pp)*(pz)*(x1)))+(((0.790753125000000)*(pp)*(x1)))+(((-1.58150625000000)*(j12)*(pz)*(x1)))+(((-1.56250000000000)*(x1)*((pp)*(pp))))+(((-6.25000000000000)*(x1)*(x3)*((pz)*(pz))))+(((0.790753125000000)*(x1)*(x3)))+(((-1.00000000000000)*(x0)))+(((-1.00000000000000)*(x4)))+(((6.25000000000000)*(j12)*(pz)*(x1)*(x3))));
conicsolver(coniccoeffs,j15array,numsolutions);
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
{
    j15 = j15array[ij15]; cj15 = IKcos(j15); sj15 = IKsin(j15);

{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.800000000000000)*(sj17)*((j12)*(j12))))+(((0.800000000000000)*(sj17)*((cj15)*(cj15))*((px)*(px))))+(((0.00800000000000000)*(sj17)))+(((1.60000000000000)*(cj15)*(px)*(py)*(sj15)*(sj17)))+(((-1.60000000000000)*(j12)*(pz)*(sj17)))+(((0.800000000000000)*(sj17)*((py)*(py))*((sj15)*(sj15))))+(((-0.160000000000000)*(cj15)*(px)*(sj17)))+(((-0.160000000000000)*(py)*(sj15)*(sj17)))+(((0.800000000000000)*(sj17)*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[3];
IKReal x5=((px)*(sj15));
IKReal x6=((cj15)*(py));
IKReal x7=((x5)+(((-1.00000000000000)*(x6))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x7;
evalcond[2]=x7;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*((j12)*(j12)))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
    j18valid[1]=false;
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[1];
dummyeval[0]=((0.160000000000000)+(((0.256800000000000)*(cj18)))+(((0.103041000000000)*((sj18)*(sj18))))+(((0.103041000000000)*((cj18)*(cj18)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.321000000000000)*(py)*(sj15)*(sj18)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(cj18)*(j12)))+(((-0.321000000000000)*(cj15)*(px)*(sj18)))+(((0.321000000000000)*(cj18)*(pz)))+(((-0.400000000000000)*(j12)))+(((0.0321000000000000)*(sj18))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.0400000000000000)+(((-0.321000000000000)*(cj15)*(cj18)*(px)))+(((-0.400000000000000)*(cj15)*(px)))+(((-0.321000000000000)*(pz)*(sj18)))+(((0.321000000000000)*(j12)*(sj18)))+(((-0.321000000000000)*(cj18)*(py)*(sj15)))+(((-0.400000000000000)*(py)*(sj15)))+(((0.0321000000000000)*(cj18))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x8=((((-1.00000000000000)*(j12)))+(pz));
IKReal x9=((0.321000000000000)*(cj18));
IKReal x10=((0.400000000000000)+(x9));
IKReal x11=((0.321000000000000)*(j12)*(sj18));
IKReal x12=((0.0321000000000000)*(cj18));
IKReal x13=((0.0400000000000000)+(x11)+(x12));
IKReal x14=((0.400000000000000)*(py)*(sj15));
IKReal x15=((0.400000000000000)*(cj15)*(px));
IKReal x16=((py)*(sj15)*(x9));
IKReal x17=((0.321000000000000)*(pz)*(sj18));
IKReal x18=((cj15)*(px)*(x9));
IKReal x19=((x15)+(x14)+(x17)+(x16)+(x18));
IKReal x20=((((-1.00000000000000)*(x19)))+(x13));
IKReal x21=((IKabs(x20) != 0)?((IKReal)1/(x20)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x21)*(((((-1.00000000000000)*(x8)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((0.321000000000000)*(sj18)*(x10)))))), ((x21)*(((((-1.00000000000000)*((x10)*(x10))))+((x8)*(x8))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
    j16array[0]-=IK2PI;
else if( j16array[0] < -IKPI )
    j16array[0]+=IK2PI;
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] ) { continue; }
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x101=((((-1.00000000000000)*(j12)))+(pz));
IKReal x102=((0.400000000000000)*(pz));
IKReal x103=((0.321000000000000)*(cj18)*(pz));
IKReal x104=((0.0321000000000000)*(sj18));
IKReal x105=((x104)+(x102)+(x103));
IKReal x106=((0.400000000000000)*(j12));
IKReal x107=((0.321000000000000)*(cj15)*(px)*(sj18));
IKReal x108=((0.321000000000000)*(py)*(sj15)*(sj18));
IKReal x109=((0.321000000000000)*(cj18)*(j12));
IKReal x110=((x108)+(x109)+(x106)+(x107));
IKReal x111=((((-1.00000000000000)*(x110)))+(x105));
IKReal x112=((IKabs(x111) != 0)?((IKReal)1/(x111)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x112)*(((((-1.00000000000000)*((x101)*(x101))))+(((0.103041000000000)*((sj18)*(sj18))))))), ((x112)*(((((-1.00000000000000)*(x101)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((-0.321000000000000)*(sj18)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
    j16array[0]-=IK2PI;
else if( j16array[0] < -IKPI )
    j16array[0]+=IK2PI;
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] ) { continue; }
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x113=((0.256800000000000)*(cj18));
IKReal x114=(sj18)*(sj18);
IKReal x115=((0.103041000000000)*(x114));
IKReal x116=(cj18)*(cj18);
IKReal x117=((0.103041000000000)*(x116));
IKReal x118=((0.160000000000000)+(x113)+(x117)+(x115));
IKReal x119=((IKabs(x118) != 0)?((IKReal)1/(x118)):(IKReal)1.0e30);
IKReal x120=((((-1.00000000000000)*(j12)))+(pz));
IKReal x121=((py)*(sj15));
IKReal x122=((cj15)*(px));
IKReal x123=((x122)+(x121));
IKReal x124=((0.100000000000000)+(((-1.00000000000000)*(x123))));
j16array[0]=IKatan2(((x119)*(((((-1.00000000000000)*(x120)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((0.321000000000000)*(sj18)*(x124)))))), ((x119)*(((((-1.00000000000000)*(x124)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((-0.321000000000000)*(sj18)*(x120)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
    j16array[0]-=IK2PI;
else if( j16array[0] < -IKPI )
    j16array[0]+=IK2PI;
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] ) { continue; }
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
IKReal x125=((cj15)*(py));
IKReal x126=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x125)))+(x126));
evalcond[2]=((((-1.00000000000000)*(x126)))+(x125));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*((j12)*(j12)))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
    j18valid[1]=false;
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[1];
dummyeval[0]=((0.160000000000000)+(((0.256800000000000)*(cj18)))+(((0.103041000000000)*((sj18)*(sj18))))+(((0.103041000000000)*((cj18)*(cj18)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.321000000000000)*(py)*(sj15)*(sj18)))+(((-0.321000000000000)*(cj18)*(pz)))+(((-0.400000000000000)*(pz)))+(((0.400000000000000)*(j12)))+(((-0.321000000000000)*(cj15)*(px)*(sj18)))+(((0.321000000000000)*(cj18)*(j12)))+(((0.0321000000000000)*(sj18))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.0400000000000000)+(((-0.321000000000000)*(cj15)*(cj18)*(px)))+(((-0.400000000000000)*(cj15)*(px)))+(((0.321000000000000)*(pz)*(sj18)))+(((-0.321000000000000)*(cj18)*(py)*(sj15)))+(((-0.400000000000000)*(py)*(sj15)))+(((-0.321000000000000)*(j12)*(sj18)))+(((0.0321000000000000)*(cj18))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x127=((((-1.00000000000000)*(j12)))+(pz));
IKReal x128=((0.321000000000000)*(cj18));
IKReal x129=((0.400000000000000)+(x128));
IKReal x130=((0.321000000000000)*(pz)*(sj18));
IKReal x131=((0.0321000000000000)*(cj18));
IKReal x132=((0.0400000000000000)+(x131)+(x130));
IKReal x133=((0.400000000000000)*(py)*(sj15));
IKReal x134=((0.400000000000000)*(cj15)*(px));
IKReal x135=((py)*(sj15)*(x128));
IKReal x136=((0.321000000000000)*(j12)*(sj18));
IKReal x137=((cj15)*(px)*(x128));
IKReal x138=((x135)+(x134)+(x137)+(x136)+(x133));
IKReal x139=((x132)+(((-1.00000000000000)*(x138))));
IKReal x140=((IKabs(x139) != 0)?((IKReal)1/(x139)):(IKReal)1.0e30);
j16array[0]=IKatan2(((-1.00000000000000)*(x140)*(((((x127)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((0.321000000000000)*(sj18)*(x129)))))), ((x140)*((((x127)*(x127))+(((-1.00000000000000)*((x129)*(x129))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
    j16array[0]-=IK2PI;
else if( j16array[0] < -IKPI )
    j16array[0]+=IK2PI;
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] ) { continue; }
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x141=((((-1.00000000000000)*(j12)))+(pz));
IKReal x142=((0.400000000000000)*(j12));
IKReal x143=((0.321000000000000)*(cj18)*(j12));
IKReal x144=((0.0321000000000000)*(sj18));
IKReal x145=((x142)+(x143)+(x144));
IKReal x146=((0.400000000000000)*(pz));
IKReal x147=((0.321000000000000)*(cj15)*(px)*(sj18));
IKReal x148=((0.321000000000000)*(py)*(sj15)*(sj18));
IKReal x149=((0.321000000000000)*(cj18)*(pz));
IKReal x150=((x146)+(x147)+(x148)+(x149));
IKReal x151=((((-1.00000000000000)*(x150)))+(x145));
IKReal x152=((IKabs(x151) != 0)?((IKReal)1/(x151)):(IKReal)1.0e30);
j16array[0]=IKatan2(((-1.00000000000000)*(x152)*(((((x141)*(((j12)+(((-1.00000000000000)*(pz)))))))+(((0.103041000000000)*((sj18)*(sj18))))))), ((x152)*(((((x141)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((-0.321000000000000)*(sj18)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
    j16array[0]-=IK2PI;
else if( j16array[0] < -IKPI )
    j16array[0]+=IK2PI;
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] ) { continue; }
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x153=((0.256800000000000)*(cj18));
IKReal x154=(sj18)*(sj18);
IKReal x155=((0.103041000000000)*(x154));
IKReal x156=(cj18)*(cj18);
IKReal x157=((0.103041000000000)*(x156));
IKReal x158=((0.160000000000000)+(x157)+(x155)+(x153));
IKReal x159=((IKabs(x158) != 0)?((IKReal)1/(x158)):(IKReal)1.0e30);
IKReal x160=((((-1.00000000000000)*(j12)))+(pz));
IKReal x161=((py)*(sj15));
IKReal x162=((cj15)*(px));
IKReal x163=((x162)+(x161));
IKReal x164=((0.100000000000000)+(((-1.00000000000000)*(x163))));
j16array[0]=IKatan2(((x159)*(((((-1.00000000000000)*(x160)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((-0.321000000000000)*(sj18)*(x164)))))), ((x159)*(((((-1.00000000000000)*(x164)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((0.321000000000000)*(sj18)*(x160)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
    j16array[0]-=IK2PI;
else if( j16array[0] < -IKPI )
    j16array[0]+=IK2PI;
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] ) { continue; }
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x165=x3;
IKReal x166=((0.0669590000000000)+(x165)+(pp));
IKReal x167=((0.200000000000000)*(cj15)*(px));
IKReal x168=((2.00000000000000)*(j12)*(pz));
IKReal x169=((0.200000000000000)*(py)*(sj15));
IKReal x170=((x168)+(x169)+(x167));
IKReal x171=((((-1.00000000000000)*(x170)))+(x166));
IKReal x172=((cj17)*(px)*(sj15));
IKReal x173=((cj15)*(cj17)*(py));
IKReal x174=((((-1.00000000000000)*(x173)))+(x172));
IKReal x175=((0.800000000000000)*(sj17)*(x165));
IKReal x176=(cj15)*(cj15);
IKReal x177=x0;
IKReal x178=((0.800000000000000)*(sj17)*(x176)*(x177));
IKReal x179=((0.00800000000000000)*(sj17));
IKReal x180=((1.60000000000000)*(cj15)*(px)*(py)*(sj15)*(sj17));
IKReal x181=x2;
IKReal x182=(sj15)*(sj15);
IKReal x183=((0.800000000000000)*(sj17)*(x181)*(x182));
IKReal x184=(pz)*(pz);
IKReal x185=((0.800000000000000)*(sj17)*(x184));
IKReal x186=((x179)+(x178)+(x175)+(x185)+(x180)+(x183));
IKReal x187=((0.160000000000000)*(cj15)*(px)*(sj17));
IKReal x188=((0.160000000000000)*(py)*(sj15)*(sj17));
IKReal x189=((1.60000000000000)*(j12)*(pz)*(sj17));
IKReal x190=((x187)+(x188)+(x189));
IKReal x191=((((-1.00000000000000)*(x190)))+(x186));
IKReal x192=((IKabs(x191) != 0)?((IKReal)1/(x191)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x192)*(((((x171)*(((((j12)*(sj17)))+(((-1.00000000000000)*(pz)*(sj17)))))))+(((-1.00000000000000)*(x174)*(((0.0800000000000000)+(((-0.800000000000000)*(py)*(sj15)))+(((-0.800000000000000)*(cj15)*(px)))))))))), ((x192)*(((((x174)*(((((0.800000000000000)*(pz)))+(((-0.800000000000000)*(j12)))))))+(((x171)*(((((cj15)*(px)*(sj17)))+(((py)*(sj15)*(sj17)))+(((-0.100000000000000)*(sj17)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
    j16array[0]-=IK2PI;
else if( j16array[0] < -IKPI )
    j16array[0]+=IK2PI;
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] ) { continue; }
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=sj17;
dummyeval[1]=sj16;
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal evalcond[4];
IKReal x193=((px)*(sj15));
IKReal x194=((cj15)*(py));
IKReal x195=((((-1.00000000000000)*(x194)))+(x193));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x195;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((0.800000000000000)*(j12)*(sj16)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=x195;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj16;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[4];
IKReal x196=x193;
IKReal x197=x194;
IKReal x198=((((-1.00000000000000)*(x197)))+(x196));
evalcond[0]=((IKfmod(((-1.57079632679490)+(j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x198;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.800000000000000)*(j12)))+(((0.200000000000000)*(cj15)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=x198;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(j12)))+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x199=x193;
IKReal x200=x194;
IKReal x201=((x199)+(((-1.00000000000000)*(x200))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j16)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x201;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*((j12)*(j12))))+(((-0.800000000000000)*(j12))));
evalcond[3]=x201;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))+(((-3.11526479750779)*(j12)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x202=x193;
IKReal x203=x194;
IKReal x204=((((-1.00000000000000)*(x203)))+(x202));
evalcond[0]=((IKfmod(((j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x204;
evalcond[2]=((-0.146959000000000)+(((2.00000000000000)*(j12)*(pz)))+(((py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((cj15)*(px)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=x204;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(j12)))+(((-3.11526479750779)*(pz)))), ((-1.55763239875389)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x205=x193;
IKReal x206=x194;
IKReal x207=((((-1.00000000000000)*(x206)))+(x205));
evalcond[0]=((IKfmod(((-3.14159265358979)+(j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x207;
evalcond[2]=((0.0130410000000000)+(((2.00000000000000)*(j12)*(pz)))+(((-0.600000000000000)*(py)*(sj15)))+(((-0.600000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=x207;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(pz)))+(((-3.11526479750779)*(j12)))), ((-0.934579439252336)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00970487475859124)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((-128.400000000000)*(sj16)))+(((-321.000000000000)*(pz)))+(((321.000000000000)*(sj16)*(((0.400000000000000)+(((0.100000000000000)*(cj16)))+(((-1.00000000000000)*(j12)*(sj16)))+(((pz)*(sj16)))+(((-1.00000000000000)*(cj15)*(cj16)*(px)))+(((-1.00000000000000)*(cj16)*(py)*(sj15)))))))+(((321.000000000000)*(j12)))))), ((-1.24610591900312)+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))+(((-3.11526479750779)*(pz)*(sj16)))+(((3.11526479750779)*(j12)*(sj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
IKReal x208=x3;
j18array[0]=IKatan2(((0.00970487475859124)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((-128.400000000000)*(sj16)))+(((-321.000000000000)*(pz)))+(((401.250000000000)*(sj16)*(((0.253041000000000)+(((0.200000000000000)*(cj15)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((-1.00000000000000)*(x208)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))))))+(((321.000000000000)*(j12)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(x208)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(cj16)*(pz)))+(((-3.11526479750779)*(cj15)*(px)*(sj16)))+(((-3.11526479750779)*(py)*(sj15)*(sj16)))+(((3.11526479750779)*(cj16)*(j12)))+(((0.311526479750779)*(sj16)))), ((0.00970487475859124)*(((IKabs(sj16) != 0)?((IKReal)1/(sj16)):(IKReal)1.0e30))*(((((-128.400000000000)*(sj16)))+(((-321.000000000000)*(pz)))+(((321.000000000000)*(cj16)*(((((cj15)*(px)*(sj16)))+(((-1.00000000000000)*(cj16)*(j12)))+(((py)*(sj15)*(sj16)))+(((-0.100000000000000)*(sj16)))+(((cj16)*(pz)))))))+(((321.000000000000)*(j12)))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x209=((cj15)*(py));
IKReal x210=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x209)))+(x210));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((0.800000000000000)*(j12)*(sj16)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=((x209)+(((-1.00000000000000)*(x210))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj16;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[4];
IKReal x211=x209;
IKReal x212=x210;
evalcond[0]=((IKfmod(((-1.57079632679490)+(j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((x212)+(((-1.00000000000000)*(x211))));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.800000000000000)*(j12)))+(((0.200000000000000)*(cj15)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=((x211)+(((-1.00000000000000)*(x212))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(j12)))+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x213=x209;
IKReal x214=x210;
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j16)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((x214)+(((-1.00000000000000)*(x213))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*((j12)*(j12))))+(((-0.800000000000000)*(j12))));
evalcond[3]=((x213)+(((-1.00000000000000)*(x214))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))+(((-3.11526479750779)*(j12)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x215=x209;
IKReal x216=x210;
evalcond[0]=((IKfmod(((j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((x216)+(((-1.00000000000000)*(x215))));
evalcond[2]=((-0.146959000000000)+(((2.00000000000000)*(j12)*(pz)))+(((py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((cj15)*(px)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=((x215)+(((-1.00000000000000)*(x216))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(pz)))+(((-3.11526479750779)*(j12)))), ((-1.55763239875389)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x217=x209;
IKReal x218=x210;
evalcond[0]=((IKfmod(((-3.14159265358979)+(j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((x218)+(((-1.00000000000000)*(x217))));
evalcond[2]=((0.0130410000000000)+(((2.00000000000000)*(j12)*(pz)))+(((-0.600000000000000)*(py)*(sj15)))+(((-0.600000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=((x217)+(((-1.00000000000000)*(x218))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(j12)))+(((-3.11526479750779)*(pz)))), ((-0.934579439252336)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.00970487475859124)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((-128.400000000000)*(sj16)))+(((-321.000000000000)*(pz)))+(((321.000000000000)*(sj16)*(((0.400000000000000)+(((0.100000000000000)*(cj16)))+(((-1.00000000000000)*(j12)*(sj16)))+(((pz)*(sj16)))+(((-1.00000000000000)*(cj15)*(cj16)*(px)))+(((-1.00000000000000)*(cj16)*(py)*(sj15)))))))+(((321.000000000000)*(j12)))))), ((-1.24610591900312)+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))+(((-3.11526479750779)*(pz)*(sj16)))+(((3.11526479750779)*(j12)*(sj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
IKReal x219=x3;
j18array[0]=IKatan2(((-0.00970487475859124)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((-128.400000000000)*(sj16)))+(((-321.000000000000)*(pz)))+(((321.000000000000)*(j12)))+(((401.250000000000)*(sj16)*(((0.253041000000000)+(((0.200000000000000)*(cj15)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((-1.00000000000000)*(x219)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))))))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*(x219)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(cj16)*(pz)))+(((3.11526479750779)*(cj15)*(px)*(sj16)))+(((3.11526479750779)*(py)*(sj15)*(sj16)))+(((-0.311526479750779)*(sj16)))+(((-3.11526479750779)*(cj16)*(j12)))), ((0.00970487475859124)*(((IKabs(sj16) != 0)?((IKReal)1/(sj16)):(IKReal)1.0e30))*(((((-128.400000000000)*(sj16)))+(((-321.000000000000)*(pz)))+(((-321.000000000000)*(cj16)*(((((0.100000000000000)*(sj16)))+(((-1.00000000000000)*(cj16)*(pz)))+(((-1.00000000000000)*(cj15)*(px)*(sj16)))+(((-1.00000000000000)*(py)*(sj15)*(sj16)))+(((cj16)*(j12)))))))+(((321.000000000000)*(j12)))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-0.146959000000000)+(((2.00000000000000)*(j12)*(pz)))+(((py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((cj15)*(px)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[2]=((((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((cj17)*(px)*(sj15)))+(((j12)*(sj17)))+(((-1.00000000000000)*(pz)*(sj17))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(px)*(sj15)*(sj17)))+(((-3.11526479750779)*(cj17)*(pz)))+(((3.11526479750779)*(cj17)*(j12)))+(((3.11526479750779)*(cj15)*(py)*(sj17)))), ((-1.55763239875389)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((0.0130410000000000)+(((2.00000000000000)*(j12)*(pz)))+(((-0.600000000000000)*(py)*(sj15)))+(((-0.600000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[2]=((((-1.00000000000000)*(j12)*(sj17)))+(((pz)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((cj17)*(px)*(sj15))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(px)*(sj15)*(sj17)))+(((3.11526479750779)*(cj17)*(pz)))+(((-3.11526479750779)*(cj17)*(j12)))+(((3.11526479750779)*(cj15)*(py)*(sj17)))), ((-0.934579439252336)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
IKReal x220=((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30);
IKReal x221=((px)*(sj15));
IKReal x222=((cj15)*(py));
j18array[0]=IKatan2(((3.11526479750779)*(x220)*(((x222)+(((-1.00000000000000)*(x221)))))), ((9.70487475859124)*(x220)*(((IKabs(sj16) != 0)?((IKReal)1/(sj16)):(IKReal)1.0e30))*(((((0.321000000000000)*(cj16)*(cj17)*(((x221)+(((-1.00000000000000)*(x222)))))))+(((-0.321000000000000)*(sj17)*(((((0.400000000000000)*(sj16)))+(((-1.00000000000000)*(j12)))+(pz)))))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((3.11526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj15)))+(((cj15)*(py)))))), ((-1.24610591900312)+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))+(((-3.11526479750779)*(pz)*(sj16)))+(((3.11526479750779)*(j12)*(sj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((3.11526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj15)))+(((cj15)*(py)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*((j12)*(j12))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((3.11526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj15)))+(((cj15)*(py)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*((j12)*(j12))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
    j18array[0]-=IK2PI;
else if( j18array[0] < -IKPI )
    j18array[0]+=IK2PI;
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] ) { continue; }
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[1];
dummyeval[0]=((0.160000000000000)+(((0.103041000000000)*((cj17)*(cj17))*((sj18)*(sj18))))+(((0.256800000000000)*(cj18)))+(((0.103041000000000)*((cj18)*(cj18)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.0400000000000000)+(((-0.321000000000000)*(cj15)*(cj18)*(px)))+(((-0.400000000000000)*(cj15)*(px)))+(((-0.321000000000000)*(cj17)*(pz)*(sj18)))+(((-0.321000000000000)*(cj18)*(py)*(sj15)))+(((-0.400000000000000)*(py)*(sj15)))+(((0.321000000000000)*(cj17)*(j12)*(sj18)))+(((0.0321000000000000)*(cj18))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.0321000000000000)*(cj17)*(sj18)))+(((-0.321000000000000)*(cj18)*(pz)))+(((-0.400000000000000)*(pz)))+(((0.400000000000000)*(j12)))+(((0.321000000000000)*(cj15)*(cj17)*(px)*(sj18)))+(((0.321000000000000)*(cj17)*(py)*(sj15)*(sj18)))+(((0.321000000000000)*(cj18)*(j12))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x223=((0.321000000000000)*(cj18));
IKReal x224=((0.400000000000000)+(x223));
IKReal x225=((py)*(sj15));
IKReal x226=((cj15)*(px));
IKReal x227=((x225)+(x226));
IKReal x228=((0.100000000000000)+(((-1.00000000000000)*(x227))));
IKReal x229=((0.400000000000000)*(j12));
IKReal x230=((0.321000000000000)*(cj17)*(sj18)*(x226));
IKReal x231=((0.321000000000000)*(cj17)*(sj18)*(x225));
IKReal x232=((j12)*(x223));
IKReal x233=((x229)+(x232)+(x230)+(x231));
IKReal x234=((0.0321000000000000)*(cj17)*(sj18));
IKReal x235=((0.400000000000000)*(pz));
IKReal x236=((pz)*(x223));
IKReal x237=((x236)+(x234)+(x235));
IKReal x238=((((-1.00000000000000)*(x237)))+(x233));
IKReal x239=((IKabs(x238) != 0)?((IKReal)1/(x238)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x239)*((((x224)*(x224))+(((-1.00000000000000)*((x228)*(x228))))))), ((x239)*(((((0.321000000000000)*(cj17)*(sj18)*(x224)))+(((x228)*(((((-1.00000000000000)*(j12)))+(pz)))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
    j16array[0]-=IK2PI;
else if( j16array[0] < -IKPI )
    j16array[0]+=IK2PI;
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] ) { continue; }
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x240=((((-1.00000000000000)*(j12)))+(pz));
IKReal x241=((0.321000000000000)*(cj18));
IKReal x242=((0.400000000000000)+(x241));
IKReal x243=((0.321000000000000)*(cj17)*(j12)*(sj18));
IKReal x244=((0.0321000000000000)*(cj18));
IKReal x245=((0.0400000000000000)+(x243)+(x244));
IKReal x246=((0.400000000000000)*(py)*(sj15));
IKReal x247=((0.400000000000000)*(cj15)*(px));
IKReal x248=((py)*(sj15)*(x241));
IKReal x249=((0.321000000000000)*(cj17)*(pz)*(sj18));
IKReal x250=((cj15)*(px)*(x241));
IKReal x251=((x250)+(x247)+(x246)+(x249)+(x248));
IKReal x252=((x245)+(((-1.00000000000000)*(x251))));
IKReal x253=((IKabs(x252) != 0)?((IKReal)1/(x252)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x253)*(((((-1.00000000000000)*(x240)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((0.321000000000000)*(cj17)*(sj18)*(x242)))))), ((x253)*((((x240)*(x240))+(((-1.00000000000000)*((x242)*(x242))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
    j16array[0]-=IK2PI;
else if( j16array[0] < -IKPI )
    j16array[0]+=IK2PI;
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] ) { continue; }
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x254=(cj17)*(cj17);
IKReal x255=(sj18)*(sj18);
IKReal x256=((0.103041000000000)*(x254)*(x255));
IKReal x257=((0.256800000000000)*(cj18));
IKReal x258=(cj18)*(cj18);
IKReal x259=((0.103041000000000)*(x258));
IKReal x260=((0.160000000000000)+(x259)+(x256)+(x257));
IKReal x261=((IKabs(x260) != 0)?((IKReal)1/(x260)):(IKReal)1.0e30);
IKReal x262=((((-1.00000000000000)*(j12)))+(pz));
IKReal x263=((py)*(sj15));
IKReal x264=((cj15)*(px));
IKReal x265=((x264)+(x263));
IKReal x266=((0.100000000000000)+(((-1.00000000000000)*(x265))));
j16array[0]=IKatan2(((x261)*(((((0.321000000000000)*(cj17)*(sj18)*(x266)))+(((-1.00000000000000)*(x262)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))), ((x261)*(((((-0.321000000000000)*(cj17)*(sj18)*(x262)))+(((-1.00000000000000)*(x266)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
    j16array[0]-=IK2PI;
else if( j16array[0] < -IKPI )
    j16array[0]+=IK2PI;
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] ) { continue; }
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x22=((cj16)*(sj18));
IKReal x23=((cj17)*(cj18)*(sj16));
IKReal x24=((x22)+(x23));
IKReal x25=((-1.00000000000000)*(x24));
IKReal x26=((sj16)*(sj18));
IKReal x27=((cj16)*(cj17)*(cj18));
IKReal x28=((((-1.00000000000000)*(x27)))+(x26));
IKReal x29=((cj15)*(x25));
IKReal x30=((-1.00000000000000)*(cj18)*(sj15)*(sj17));
IKReal x31=((x30)+(x29));
IKReal x32=((cj15)*(cj18)*(sj17));
IKReal x33=((sj15)*(x25));
IKReal x34=((x33)+(x32));
IKReal x35=((cj15)*(sj16)*(sj17));
IKReal x36=((cj17)*(sj15));
IKReal x37=((((-1.00000000000000)*(x36)))+(x35));
IKReal x38=((sj15)*(sj16)*(sj17));
IKReal x39=((cj15)*(cj17));
IKReal x40=((x39)+(x38));
IKReal x41=((cj16)*(cj18));
IKReal x42=((cj17)*(x26));
IKReal x43=((((-1.00000000000000)*(x42)))+(x41));
IKReal x44=((cj18)*(sj16));
IKReal x45=((cj17)*(x22));
IKReal x46=((x44)+(x45));
IKReal x47=((-1.00000000000000)*(x46));
IKReal x48=((cj15)*(x43));
IKReal x49=((cj15)*(sj17)*(sj18));
IKReal x50=((sj15)*(x43));
IKReal x51=((x49)+(x50));
IKReal x52=((-1.00000000000000)*(sj15)*(sj17)*(sj18));
IKReal x53=((x48)+(x52));
new_r00=((((r00)*(x31)))+(((r10)*(x34)))+(((r20)*(x28))));
new_r01=((((r01)*(x31)))+(((r21)*(x28)))+(((r11)*(x34))));
new_r02=((((r22)*(x28)))+(((r02)*(x31)))+(((r12)*(x34))));
new_r10=((((cj16)*(r20)*(sj17)))+(((r00)*(x37)))+(((r10)*(x40))));
new_r11=((((cj16)*(r21)*(sj17)))+(((r01)*(x37)))+(((r11)*(x40))));
new_r12=((((r02)*(x37)))+(((r12)*(x40)))+(((cj16)*(r22)*(sj17))));
new_r20=((((r20)*(x47)))+(((r10)*(x51)))+(((r00)*(x53))));
new_r21=((((r11)*(x51)))+(((r01)*(((x48)+(((-1.00000000000000)*(sj15)*(sj17)*(sj18)))))))+(((r21)*(x47))));
new_r22=((((r02)*(x53)))+(((r22)*(x47)))+(((r12)*(x51))));
{
IKReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
cj20array[0]=new_r22;
if( cj20array[0] >= -1.0001 && cj20array[0] <= 1.0001 )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
if( j20valid[0] && j20valid[1] && IKabs(cj20array[0]-cj20array[1]) < 0.0001 && IKabs(sj20array[0]-sj20array[1]) < 0.0001 )
    j20valid[1]=false;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] ) { continue; }
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r02)*(sj20)))+(((-1.00000000000000)*(new_r10)*(new_r12)*(sj20))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[7];
IKReal x54=((-1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x54;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x54;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
IKReal x55=IKatan2(new_r02, new_r12);
j19array[0]=((-1.00000000000000)*(x55));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.00000000000000)*(x55))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
    j19array[0]-=IK2PI;
else if( j19array[0] < -IKPI )
    j19array[0]+=IK2PI;
j19valid[0] = true;
if( j19array[1] > IKPI )
    j19array[1]-=IK2PI;
else if( j19array[1] < -IKPI )
    j19array[1]+=IK2PI;
j19valid[1] = true;
if( j19valid[0] && j19valid[1] && IKabs(cj19array[0]-cj19array[1]) < 0.0001 && IKabs(sj19array[0]-sj19array[1]) < 0.0001 )
    j19valid[1]=false;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] ) { continue; }
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}
}
}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
IKReal x56=IKatan2(new_r02, new_r12);
j19array[0]=((-1.00000000000000)*(x56));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.00000000000000)*(x56))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
    j19array[0]-=IK2PI;
else if( j19array[0] < -IKPI )
    j19array[0]+=IK2PI;
j19valid[0] = true;
if( j19array[1] > IKPI )
    j19array[1]-=IK2PI;
else if( j19array[1] < -IKPI )
    j19array[1]+=IK2PI;
j19valid[1] = true;
if( j19valid[0] && j19valid[1] && IKabs(cj19array[0]-cj19array[1]) < 0.0001 && IKabs(sj19array[0]-sj19array[1]) < 0.0001 )
    j19valid[1]=false;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] ) { continue; }
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x57=((new_r10)*(new_r12)*(sj20));
IKReal x58=((new_r00)*(new_r02)*(sj20));
IKReal x59=((x58)+(x57));
j19array[0]=IKatan2(((-1.00000000000000)*(cj20)*(new_r12)*(new_r20)*(((IKabs(x59) != 0)?((IKReal)1/(x59)):(IKReal)1.0e30))), ((-1.00000000000000)*(cj20)*(new_r02)*(new_r20)*(((IKabs(x59) != 0)?((IKReal)1/(x59)):(IKReal)1.0e30))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
    j19array[0]-=IK2PI;
else if( j19array[0] < -IKPI )
    j19array[0]+=IK2PI;
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] ) { continue; }
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x60=((cj19)*(new_r12));
IKReal x61=((new_r02)*(sj19));
IKReal x62=((x60)+(((-1.00000000000000)*(x61))));
IKReal x63=((-1.00000000000000)+(new_r22));
IKReal x64=((cj19)*(new_r02));
IKReal x65=((new_r12)*(sj19));
IKReal x66=((x64)+(x65));
evalcond[0]=((IKfmod(((j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x63;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x62;
evalcond[5]=x62;
evalcond[6]=x66;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x63;
evalcond[10]=x66;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

} else
{
IKReal x67=((cj19)*(new_r12));
IKReal x68=((new_r02)*(sj19));
IKReal x69=((x67)+(((-1.00000000000000)*(x68))));
IKReal x70=((cj19)*(new_r02));
IKReal x71=((new_r12)*(sj19));
IKReal x72=((x71)+(x70));
evalcond[0]=((IKfmod(((-3.14159265358979)+(j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x69;
evalcond[5]=x69;
evalcond[6]=x72;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x72));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x73=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x73)), ((-1.00000000000000)*(new_r20)*(x73)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((new_r21)*(sj20)))+(((-1.00000000000000)*(cj20)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(cj20)*(new_r01)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r00)*(sj19)))+(((cj19)*(new_r10)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x74=(new_r12)*(new_r12);
IKReal x75=(new_r02)*(new_r02);
IKReal x76=((x75)+(x74));
j19array[0]=IKatan2(((new_r12)*(sj20)*(((IKabs(x76) != 0)?((IKReal)1/(x76)):(IKReal)1.0e30))), ((new_r02)*(sj20)*(((IKabs(x76) != 0)?((IKReal)1/(x76)):(IKReal)1.0e30))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
    j19array[0]-=IK2PI;
else if( j19array[0] < -IKPI )
    j19array[0]+=IK2PI;
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] ) { continue; }
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x77=((cj19)*(new_r12));
IKReal x78=((new_r02)*(sj19));
IKReal x79=((((-1.00000000000000)*(x78)))+(x77));
IKReal x80=((-1.00000000000000)+(new_r22));
IKReal x81=((cj19)*(new_r02));
IKReal x82=((new_r12)*(sj19));
IKReal x83=((x82)+(x81));
evalcond[0]=((IKfmod(((j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x80;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x79;
evalcond[5]=x79;
evalcond[6]=x83;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x80;
evalcond[10]=x83;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

} else
{
IKReal x84=((cj19)*(new_r12));
IKReal x85=((new_r02)*(sj19));
IKReal x86=((x84)+(((-1.00000000000000)*(x85))));
IKReal x87=((cj19)*(new_r02));
IKReal x88=((new_r12)*(sj19));
IKReal x89=((x88)+(x87));
evalcond[0]=((IKfmod(((-3.14159265358979)+(j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x86;
evalcond[5]=x86;
evalcond[6]=x89;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x89));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x90=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x90)), ((-1.00000000000000)*(new_r20)*(x90)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((new_r21)*(sj20)))+(((-1.00000000000000)*(cj20)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(cj20)*(new_r01)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r00)*(sj19)))+(((cj19)*(new_r10)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x91=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x91)), ((-1.00000000000000)*(new_r20)*(x91)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
    j21array[0]-=IK2PI;
else if( j21array[0] < -IKPI )
    j21array[0]+=IK2PI;
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] ) { continue; }
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r11)*(new_r12)))+(((-1.00000000000000)*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r02)))+(((-1.00000000000000)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x92=((new_r10)*(new_r12));
IKReal x93=((new_r00)*(new_r02));
IKReal x94=((x93)+(x92));
j19array[0]=IKatan2(((cj20)*(cj21)*(new_r12)*(((IKabs(x94) != 0)?((IKReal)1/(x94)):(IKReal)1.0e30))), ((cj20)*(cj21)*(new_r02)*(((IKabs(x94) != 0)?((IKReal)1/(x94)):(IKReal)1.0e30))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
    j19array[0]-=IK2PI;
else if( j19array[0] < -IKPI )
    j19array[0]+=IK2PI;
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] ) { continue; }
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x95=((new_r11)*(new_r12));
IKReal x96=((new_r01)*(new_r02));
IKReal x97=((x95)+(x96));
j19array[0]=IKatan2(((-1.00000000000000)*(cj20)*(new_r12)*(sj21)*(((IKabs(x97) != 0)?((IKReal)1/(x97)):(IKReal)1.0e30))), ((-1.00000000000000)*(cj20)*(new_r02)*(sj21)*(((IKabs(x97) != 0)?((IKReal)1/(x97)):(IKReal)1.0e30))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
    j19array[0]-=IK2PI;
else if( j19array[0] < -IKPI )
    j19array[0]+=IK2PI;
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] ) { continue; }
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x98=(new_r12)*(new_r12);
IKReal x99=(new_r02)*(new_r02);
IKReal x100=((x99)+(x98));
j19array[0]=IKatan2(((new_r12)*(sj20)*(((IKabs(x100) != 0)?((IKReal)1/(x100)):(IKReal)1.0e30))), ((new_r02)*(sj20)*(((IKabs(x100) != 0)?((IKReal)1/(x100)):(IKReal)1.0e30))));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
    j19array[0]-=IK2PI;
else if( j19array[0] < -IKPI )
    j19array[0]+=IK2PI;
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] ) { continue; }
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots3(IKReal rawcoeffs[3+1], IKReal rawroots[3], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[3];
    const int maxsteps = 50;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[3];
    IKReal err[3];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 3; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
static inline void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
    IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
/// intersection of a conic and the unit circle
static inline void conicsolver(IKReal _C0[6], IKReal roots[4], int& numroots)
{
    numroots = 0;
    // have to normalize _C0
    IKReal maxval = IKabs(_C0[0]);
    for(int i = 1; i < 6; ++i) {
        if( maxval < IKabs(_C0[i]) ) {
            maxval = IKabs(_C0[i]);
        }
    }
    IKReal C0[6];
    for(int i = 0; i < 6; ++i) {
        C0[i]=_C0[i]/maxval;
    }
    IKReal rawcoeffs[4] = {-1,
                           C0[5] - C0[0] - C0[3],
                           C0[0]*C0[5] + C0[3]*C0[5] - C0[0]*C0[3] + C0[1]*C0[1] - C0[2]*C0[2] - C0[4]*C0[4],
                           C0[0]*C0[3]*C0[5] + 2*C0[1]*C0[2]*C0[4] - C0[0]*C0[4]*C0[4] - C0[3]*C0[2]*C0[2] - C0[5]*C0[1]*C0[1]};
    IKReal proots[3];
    int numproots, numyroots;
    polyroots3(rawcoeffs,proots,numproots);
    if( numproots < 1 ) {
        return;
    }
    int iroot=0;
    IKReal a, b, c, d, e, f;
    a = C0[0]+proots[iroot]; b = C0[1]; c = C0[3]+proots[iroot]; d = C0[2]; e = C0[4]; f = C0[5]-proots[iroot];
    IKReal adjugate[9] = {c*f-e*e, -b*f+e*d, b*e-c*d, -b*f+d*e, a*f-d*d, -a*e+b*d, b*e-d*c, -a*e+d*b, a*c-b*b};
    // find the greatest absolute value of adjugate and take that column
    int maxindex = 0;
    IKReal val = IKabs(adjugate[maxindex]);
    for(int i = 1; i < 9; ++i) {
        IKReal newval = IKabs(adjugate[i]);
        if( val < newval ) {
            val = newval;
            maxindex = i;
        }
    }
    maxindex = maxindex%3;
    if( adjugate[0] > 0 || adjugate[4] > 0 || adjugate[8] > 0 || adjugate[4*maxindex] >= 0 ) {
        // according to the structure of the matrix, should be always negative if a solution exists...
        return;
    }
    IKReal bmult = 1.0/IKsqrt(-adjugate[4*maxindex]);
    IKReal p[3] = {adjugate[maxindex]*bmult, adjugate[3+maxindex]*bmult, adjugate[6+maxindex]*bmult}; // intersection point
    // C = C0 - [p_x] = 2gh^t, C is rank1
    IKReal C[9] = {a,b+p[2],d-p[1],b-p[2],c,e+p[0],d+p[1],e-p[0],f};
    maxindex = 0;
    val = IKabs(C[maxindex]);
    for(int i = 1; i < 9; ++i) {
        IKReal newval = IKabs(C[i]);
        if( val < newval ) {
            val = newval;
            maxindex = i;
        }
    }
    int row = maxindex/3;
    int col = maxindex%3;
    IKReal lineequation[3], coeffs[3], yintersections[2];
    for(int i = 0; i < 2; ++i) {
        if( i == 0 ) {
            lineequation[0] = C[3*row];
            lineequation[1] = C[3*row+1];
            lineequation[2] = C[3*row+2];
        }
        else {
            lineequation[0] = C[col];
            lineequation[1] = C[3+col];
            lineequation[2] = C[6+col];
        }

        if( IKabs(lineequation[0]) < std::numeric_limits<IKReal>::epsilon() ) {
            yintersections[0] = -lineequation[2]/lineequation[1];
            IKReal x = 1-yintersections[0]*yintersections[0];
            if( x <= 0 && x > -std::numeric_limits<IKReal>::epsilon() ) {
                roots[numroots++] = yintersections[0] > 0 ? IKPI_2 : -IKPI_2;
            }
            else {
                x = IKsqrt(x);
                roots[numroots++] = IKatan2(yintersections[0], x);
                roots[numroots] = IKPI - roots[numroots-1]; numroots++;
            }
        }
        else {
            coeffs[0] = lineequation[0]*lineequation[0]+lineequation[1]*lineequation[1];
            coeffs[1] = 2*lineequation[1]*lineequation[2];
            coeffs[2] = lineequation[2]*lineequation[2]-lineequation[0]*lineequation[0];
            polyroots2(coeffs,yintersections,numyroots);
            for(int j = 0; j < numyroots; ++j) {
                // the mathematical solution would be: IKatan2(yintersections[j],-(lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0]);
                // however due to numerical imprecisions, it is better to compute sqrt(1-yintersections[j]*yintersections[j]) and choose sign 
                IKReal x = 1-yintersections[j]*yintersections[j];
                if( x <= 0 ) {
                    if( x > -std::numeric_limits<IKReal>::epsilon() ) {
                        roots[numroots++] = IKatan2(yintersections[j],-(lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0]);
                    }
                }
                else {
                    x = IKsqrt(x);
                    if( (lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0] > 0 ) {
                        x = -x;
                    }
                    roots[numroots++] = IKatan2(yintersections[j],x);
                }
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "12ceb0aaa06143fe305efa6e48faae0b"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
