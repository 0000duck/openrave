/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 31 generated on 2011-02-15 20:51:50.200579
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 2; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0, 3}; return freeparams; }
IKFAST_API int getNumJoints() { return 8; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60;
x0=IKcos(j[1]);
x1=IKsin(j[2]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=((x2)*(x4));
x7=((x0)*(x1)*(x3));
x8=((x7)+(x6));
x9=((-1.00000000000000)*(x8));
x10=IKcos(j[2]);
x11=IKcos(j[4]);
x12=IKcos(j[5]);
x13=((x0)*(x1)*(x2));
x14=((x3)*(x4));
x15=((((-1.00000000000000)*(x14)))+(x13));
x16=IKsin(j[5]);
x17=((x11)*(x9));
x18=((x0)*(x10)*(x5));
x19=((((-1.00000000000000)*(x18)))+(x17));
x20=IKcos(j[7]);
x21=((x12)*(x15));
x22=IKsin(j[7]);
x23=IKcos(j[6]);
x24=((x12)*(x19));
x25=((x15)*(x16));
x26=((x24)+(x25));
x27=((x23)*(x26));
x28=IKsin(j[6]);
x29=((x5)*(x9));
x30=((x0)*(x10)*(x11));
x31=((x30)+(x29));
x32=((x0)*(x2));
x33=((x1)*(x14));
x34=((((-1.00000000000000)*(x33)))+(x32));
x35=((x11)*(x34));
x36=((x10)*(x4)*(x5));
x37=((((-1.00000000000000)*(x36)))+(x35));
x38=((x1)*(x6));
x39=((x0)*(x3));
x40=((x39)+(x38));
x41=((x12)*(x40));
x42=((x12)*(x37));
x43=((x16)*(x40));
x44=((x42)+(x43));
x45=((x23)*(x44));
x46=((x10)*(x11)*(x4));
x47=((x34)*(x5));
x48=((x46)+(x47));
x49=((x1)*(x5));
x50=((x10)*(x11)*(x3));
x51=((x49)+(((-1.00000000000000)*(x50))));
x52=((x10)*(x12)*(x2));
x53=((x10)*(x3)*(x5));
x54=((x1)*(x11));
x55=((x54)+(x53));
x56=((-1.00000000000000)*(x55));
x57=((x10)*(x16)*(x2));
x58=((x12)*(x51));
x59=((x58)+(x57));
x60=((x23)*(x59));
eerot[0]=((((x20)*(((((-1.00000000000000)*(x28)*(x31)))+(x27)))))+(((x22)*(((((-1.00000000000000)*(x16)*(x19)))+(x21))))));
eerot[1]=((((x20)*(((((-1.00000000000000)*(x16)*(x19)))+(x21)))))+(((-1.00000000000000)*(x22)*(((((-1.00000000000000)*(x28)*(x31)))+(x27))))));
eerot[2]=((((x23)*(x31)))+(((x26)*(x28))));
eetrans[0]=((-0.0500000000000000)+(((0.100000000000000)*(x0)))+(((0.400000000000000)*(x0)*(x10)))+(((0.321000000000000)*(x29)))+(((0.321000000000000)*(x30)))+(((0.180000000000000)*(x23)*(x31)))+(((0.180000000000000)*(x26)*(x28))));
eerot[3]=((((x20)*(((((-1.00000000000000)*(x28)*(x48)))+(x45)))))+(((x22)*(((x41)+(((-1.00000000000000)*(x16)*(x37))))))));
eerot[4]=((((x20)*(((x41)+(((-1.00000000000000)*(x16)*(x37)))))))+(((-1.00000000000000)*(x22)*(((((-1.00000000000000)*(x28)*(x48)))+(x45))))));
eerot[5]=((((x28)*(((((x12)*(((((-1.00000000000000)*(x36)))+(x35)))))+(x43)))))+(((x23)*(x48))));
eetrans[1]=((0.188000000000000)+(((0.100000000000000)*(x4)))+(((0.321000000000000)*(x47)))+(((0.321000000000000)*(x46)))+(((0.400000000000000)*(x10)*(x4)))+(((0.180000000000000)*(x28)*(x44)))+(((0.180000000000000)*(x23)*(x48))));
eerot[6]=((((x20)*(((x60)+(((-1.00000000000000)*(x28)*(x56)))))))+(((x22)*(((((-1.00000000000000)*(x16)*(x51)))+(x52))))));
eerot[7]=((((-1.00000000000000)*(x22)*(((x60)+(((-1.00000000000000)*(x28)*(x56)))))))+(((x20)*(((((-1.00000000000000)*(x16)*(x51)))+(x52))))));
eerot[8]=((((x28)*(x59)))+(((x23)*(x56))));
eetrans[2]=((0.739675000000000)+(((0.180000000000000)*(x28)*(x59)))+(((-0.400000000000000)*(x1)))+(((-0.321000000000000)*(x53)))+(((-0.321000000000000)*(x54)))+(((0.180000000000000)*(x23)*(x56)))+(j[0]));
}

class IKSolver {
public:
IKReal j15, cj15, sj15,
j16, cj16, sj16,
j18, cj18, sj18,
j19, cj19, sj19,
j20, cj20, sj20,
j21, cj21, sj21,
j12, cj12, sj12,
j17, cj17, sj17,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j12=pfree[0]; cj12=cos(pfree[0]); sj12=sin(pfree[0]);
j17=pfree[1]; cj17=cos(pfree[1]); sj17=sin(pfree[1]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((0.0500000000000000)+(((-0.180000000000000)*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.188000000000000)+(py)+(((-0.180000000000000)*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.739675000000000)+(((-0.180000000000000)*(r22)))+(((-1.00000000000000)*(j12)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(sj17)*(sj17);
dummyeval[0]=((((-20.8714637692216)*(x0)*((px)*(px))))+(((-208.714637692216)*(pp)*(px)*(x0)))+(((-333.943420307546)*((py)*(py))))+(x0)+(((52.8133606362760)*(px)*(x0)))+(((-521.786594230540)*(x0)*((pp)*(pp))))+(((264.066803181380)*(pp)*(x0))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IKReal evalcond[1];
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((j17)+(3.14159265358979)), 6.28318530717959)))))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[1+1], zeror[1];
int numroots;
op[0]=px;
op[1]=0;
polyroots1(op,zeror,numroots);
IKReal j15array[1], cj15array[1], sj15array[1], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IKReal htj15 = zeror[ij15];
tempj15array[0]=((2.00000000000000)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
bool valid = true;
for( int kj15 = 0; kj15 < numsolutions; ++kj15)
{
    if( IKabs(cj15array[kj15]-cj15array[numsolutions]) < 0.0001 && IKabs(sj15array[kj15]-sj15array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
    j18valid[1]=false;
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x1=((10.0000000000000)*(cj18)*(pz));
IKReal x2=((12.4610591900312)*(pz));
IKReal x3=((x2)+(x1)+(sj18));
IKReal x4=((10.0000000000000)*(cj15)*(px)*(sj18));
IKReal x5=((x3)+(((-1.00000000000000)*(x4))));
dummyeval[0]=x5;
dummyeval[1]=x5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x6=(sj18)*(sj18);
IKReal x7=((2.49221183800623)*(cj18));
IKReal x8=(cj18)*(cj18);
IKReal x9=((1.55277996137460)+(x7)+(x6)+(x8));
dummyeval[0]=x9;
dummyeval[1]=x9;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x10=((1.24610591900312)+(cj18));
IKReal x11=((12.4610591900312)*(cj15)*(px));
IKReal x12=((10.0000000000000)*(pz)*(sj18));
IKReal x13=((10.0000000000000)*(cj15)*(cj18)*(px));
IKReal x14=((x11)+(x13)+(x12));
IKReal x15=((((-1.00000000000000)*(x14)))+(x10));
dummyeval[0]=x15;
dummyeval[1]=x15;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x16=((0.321000000000000)*(cj18));
IKReal x17=((0.400000000000000)+(x16));
IKReal x18=((32.1000000000000)*(cj18));
IKReal x19=((40.0000000000000)+(x18));
IKReal x20=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x21=((321.000000000000)*(pz)*(sj18));
IKReal x22=((400.000000000000)*(cj15)*(px));
IKReal x23=((x20)+(x21)+(x22));
IKReal x24=((((-1.00000000000000)*(x23)))+(x19));
IKReal x25=((IKabs(x24) != 0)?((IKReal)1/(x24)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x25)*(((((321.000000000000)*(sj18)*(x17)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))))))))), ((x25)*(((((-1000.00000000000)*((x17)*(x17))))+(((1000.00000000000)*((pz)*(pz))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x111=(sj18)*(sj18);
IKReal x112=((103041.000000000)*(x111));
IKReal x113=(cj18)*(cj18);
IKReal x114=((103041.000000000)*(x113));
IKReal x115=((256800.000000000)*(cj18));
IKReal x116=((160000.000000000)+(x112)+(x115)+(x114));
IKReal x117=((IKabs(x116) != 0)?((IKReal)1/(x116)):(IKReal)1.0e30);
IKReal x118=((cj15)*(px));
IKReal x119=((0.100000000000000)+(((-1.00000000000000)*(x118))));
j16array[0]=IKatan2(((-1.00000000000000)*(x117)*(((((-321000.000000000)*(sj18)*(x119)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))), ((-1.00000000000000)*(x117)*(((((x119)*(((400000.000000000)+(((321000.000000000)*(cj18)))))))+(((321000.000000000)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((321000.000000000)*(cj18)*(pz)))+(((32100.0000000000)*(sj18)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((321000.000000000)*(cj18)*(pz)))+(((32100.0000000000)*(sj18)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj18)*(sj18))))+(((-1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((-321.000000000000)*(cj15)*(px)*(sj18)))+(((400.000000000000)*(pz)))+(((321.000000000000)*(cj18)*(pz)))+(((32.1000000000000)*(sj18))))) != 0)?((IKReal)1/(((((-321.000000000000)*(cj15)*(px)*(sj18)))+(((400.000000000000)*(pz)))+(((321.000000000000)*(cj18)*(pz)))+(((32.1000000000000)*(sj18)))))):(IKReal)1.0e30))*(((((-321.000000000000)*(sj18)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

}

}

} else
{
evalcond[0]=((IKabs(py))+(IKabs(((IKfmod(j17, 6.28318530717959))+(-3.14159265358979)))));
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[1+1], zeror[1];
int numroots;
op[0]=px;
op[1]=0;
polyroots1(op,zeror,numroots);
IKReal j15array[1], cj15array[1], sj15array[1], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IKReal htj15 = zeror[ij15];
tempj15array[0]=((2.00000000000000)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
bool valid = true;
for( int kj15 = 0; kj15 < numsolutions; ++kj15)
{
    if( IKabs(cj15array[kj15]-cj15array[numsolutions]) < 0.0001 && IKabs(sj15array[kj15]-sj15array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
    j18valid[1]=false;
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x120=((10.0000000000000)*(cj15)*(px)*(sj18));
IKReal x121=((10.0000000000000)*(cj18)*(pz));
IKReal x122=((12.4610591900312)*(pz));
IKReal x123=((x122)+(x120)+(x121));
IKReal x124=((((-1.00000000000000)*(x123)))+(sj18));
dummyeval[0]=x124;
dummyeval[1]=x124;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x125=(sj18)*(sj18);
IKReal x126=((2.49221183800623)*(cj18));
IKReal x127=(cj18)*(cj18);
IKReal x128=((1.55277996137460)+(x126)+(x127)+(x125));
dummyeval[0]=x128;
dummyeval[1]=x128;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x129=((10.0000000000000)*(pz)*(sj18));
IKReal x130=((1.24610591900312)+(x129)+(cj18));
IKReal x131=((12.4610591900312)*(cj15)*(px));
IKReal x132=((10.0000000000000)*(cj15)*(cj18)*(px));
IKReal x133=((x131)+(x132));
IKReal x134=((x130)+(((-1.00000000000000)*(x133))));
dummyeval[0]=x134;
dummyeval[1]=x134;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x135=((0.321000000000000)*(cj18));
IKReal x136=((0.400000000000000)+(x135));
IKReal x137=((32.1000000000000)*(cj18));
IKReal x138=((321.000000000000)*(pz)*(sj18));
IKReal x139=((40.0000000000000)+(x137)+(x138));
IKReal x140=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x141=((400.000000000000)*(cj15)*(px));
IKReal x142=((x140)+(x141));
IKReal x143=((((-1.00000000000000)*(x142)))+(x139));
IKReal x144=((IKabs(x143) != 0)?((IKReal)1/(x143)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x144)*(((((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))))))+(((-321.000000000000)*(sj18)*(x136)))))), ((x144)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((x136)*(x136))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x145=(sj18)*(sj18);
IKReal x146=((103041.000000000)*(x145));
IKReal x147=(cj18)*(cj18);
IKReal x148=((103041.000000000)*(x147));
IKReal x149=((256800.000000000)*(cj18));
IKReal x150=((160000.000000000)+(x146)+(x148)+(x149));
IKReal x151=((IKabs(x150) != 0)?((IKReal)1/(x150)):(IKReal)1.0e30);
IKReal x152=((cj15)*(px));
IKReal x153=((0.100000000000000)+(((-1.00000000000000)*(x152))));
j16array[0]=IKatan2(((-1.00000000000000)*(x151)*(((((321000.000000000)*(sj18)*(x153)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))), ((x151)*(((((-1.00000000000000)*(x153)*(((400000.000000000)+(((321000.000000000)*(cj18)))))))+(((321000.000000000)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj18)*(pz)))+(((32100.0000000000)*(sj18)))+(((-321000.000000000)*(cj15)*(px)*(sj18))))) != 0)?((IKReal)1/(((((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj18)*(pz)))+(((32100.0000000000)*(sj18)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))))):(IKReal)1.0e30))*(((((-103041.000000000)*((sj18)*(sj18))))+(((1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz)))+(((32.1000000000000)*(sj18))))) != 0)?((IKReal)1/(((((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz)))+(((32.1000000000000)*(sj18)))))):(IKReal)1.0e30))*(((((-321.000000000000)*(sj18)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x154=(sj17)*(sj17);
IKReal x155=(px)*(px);
IKReal x156=(py)*(py);
IKReal x157=(pp)*(pp);
IKReal x158=((417.429275384432)*(pp)*(py)*(x154));
IKReal x159=((1335.77368123018)*(px)*(py));
IKReal x160=((83.4858550768864)*(px)*(py)*(x154));
IKReal x161=((105.626721272552)*(py)*(x154));
IKReal x162=((208.714637692216)*(pp)*(px)*(x154));
IKReal x163=((264.066803181380)*(pp)*(x154));
IKReal x164=((52.8133606362760)*(px)*(x154));
IKReal x165=((20.8714637692216)*(x154)*(x155));
IKReal x166=((333.943420307546)*(x156));
IKReal x167=((521.786594230540)*(x154)*(x157));
op[0]=((((-1.00000000000000)*(x162)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(x163)+(x164)+(x154));
op[1]=((((-1.00000000000000)*(x159)))+(((-1.00000000000000)*(x161)))+(x160)+(x158));
op[2]=((((-83.4858550768864)*(x154)*(x156)))+(((-1335.77368123018)*(x155)))+(((2.00000000000000)*(x154)))+(((667.886840615091)*(x156)))+(((41.7429275384432)*(x154)*(x155)))+(((528.133606362760)*(pp)*(x154)))+(((-1043.57318846108)*(x154)*(x157))));
op[3]=((((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x160)))+(x159)+(x158));
op[4]=((((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(x162)+(x163)+(x154));
polyroots4(op,zeror,numroots);
IKReal j15array[4], cj15array[4], sj15array[4], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IKReal htj15 = zeror[ij15];
tempj15array[0]=((2.00000000000000)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
bool valid = true;
for( int kj15 = 0; kj15 < numsolutions; ++kj15)
{
    if( IKabs(cj15array[kj15]-cj15array[numsolutions]) < 0.0001 && IKabs(sj15array[kj15]-sj15array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x168=((20.0000000000000)*(py)*(sj15)*(sj17));
IKReal x169=((20.0000000000000)*(cj15)*(px)*(sj17));
IKReal x170=((x168)+(x169));
IKReal x171=(pz)*(pz);
IKReal x172=((100.000000000000)*(sj17)*(x171));
IKReal x173=(cj15)*(cj15);
IKReal x174=x155;
IKReal x175=((100.000000000000)*(sj17)*(x173)*(x174));
IKReal x176=x156;
IKReal x177=(sj15)*(sj15);
IKReal x178=((100.000000000000)*(sj17)*(x176)*(x177));
IKReal x179=((200.000000000000)*(cj15)*(px)*(py)*(sj15)*(sj17));
IKReal x180=((x179)+(x178)+(x172)+(x175)+(sj17));
IKReal x181=((((-1.00000000000000)*(x180)))+(x170));
dummyeval[0]=x181;
dummyeval[1]=x181;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
IKReal x182=((px)*(sj15));
IKReal x183=((cj15)*(py));
IKReal x184=((((-1.00000000000000)*(x183)))+(x182));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x184;
evalcond[2]=x184;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
    j18valid[1]=false;
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x185=((10.0000000000000)*(cj18)*(pz));
IKReal x186=((12.4610591900312)*(pz));
IKReal x187=((x185)+(x186)+(sj18));
IKReal x188=((10.0000000000000)*(cj15)*(px)*(sj18));
IKReal x189=((10.0000000000000)*(py)*(sj15)*(sj18));
IKReal x190=((x188)+(x189));
IKReal x191=((((-1.00000000000000)*(x190)))+(x187));
dummyeval[0]=x191;
dummyeval[1]=x191;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x192=(sj18)*(sj18);
IKReal x193=((2.49221183800623)*(cj18));
IKReal x194=(cj18)*(cj18);
IKReal x195=((1.55277996137460)+(x193)+(x192)+(x194));
dummyeval[0]=x195;
dummyeval[1]=x195;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x196=((1.24610591900312)+(cj18));
IKReal x197=((12.4610591900312)*(cj15)*(px));
IKReal x198=((12.4610591900312)*(py)*(sj15));
IKReal x199=((10.0000000000000)*(cj18)*(py)*(sj15));
IKReal x200=((10.0000000000000)*(pz)*(sj18));
IKReal x201=((10.0000000000000)*(cj15)*(cj18)*(px));
IKReal x202=((x199)+(x198)+(x197)+(x201)+(x200));
IKReal x203=((x196)+(((-1.00000000000000)*(x202))));
dummyeval[0]=x203;
dummyeval[1]=x203;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x204=((0.321000000000000)*(cj18));
IKReal x205=((0.400000000000000)+(x204));
IKReal x206=((32.1000000000000)*(cj18));
IKReal x207=((40.0000000000000)+(x206));
IKReal x208=((321.000000000000)*(cj18)*(py)*(sj15));
IKReal x209=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x210=((321.000000000000)*(pz)*(sj18));
IKReal x211=((400.000000000000)*(py)*(sj15));
IKReal x212=((400.000000000000)*(cj15)*(px));
IKReal x213=((x210)+(x211)+(x212)+(x209)+(x208));
IKReal x214=((x207)+(((-1.00000000000000)*(x213))));
IKReal x215=((IKabs(x214) != 0)?((IKReal)1/(x214)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x215)*(((((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((321.000000000000)*(sj18)*(x205)))))), ((x215)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((x205)*(x205))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x216=(sj18)*(sj18);
IKReal x217=((103041.000000000)*(x216));
IKReal x218=(cj18)*(cj18);
IKReal x219=((103041.000000000)*(x218));
IKReal x220=((256800.000000000)*(cj18));
IKReal x221=((160000.000000000)+(x217)+(x219)+(x220));
IKReal x222=((IKabs(x221) != 0)?((IKReal)1/(x221)):(IKReal)1.0e30);
IKReal x223=((py)*(sj15));
IKReal x224=((cj15)*(px));
IKReal x225=((x223)+(x224));
IKReal x226=((0.100000000000000)+(((-1.00000000000000)*(x225))));
j16array[0]=IKatan2(((-1.00000000000000)*(x222)*(((((-321000.000000000)*(sj18)*(x226)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))), ((-1.00000000000000)*(x222)*(((((x226)*(((400000.000000000)+(((321000.000000000)*(cj18)))))))+(((321000.000000000)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((321000.000000000)*(cj18)*(pz)))+(((32100.0000000000)*(sj18)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((321000.000000000)*(cj18)*(pz)))+(((32100.0000000000)*(sj18)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj18)*(sj18))))+(((-1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((-321.000000000000)*(cj15)*(px)*(sj18)))+(((400.000000000000)*(pz)))+(((321.000000000000)*(cj18)*(pz)))+(((32.1000000000000)*(sj18)))+(((-321.000000000000)*(py)*(sj15)*(sj18))))) != 0)?((IKReal)1/(((((-321.000000000000)*(cj15)*(px)*(sj18)))+(((400.000000000000)*(pz)))+(((321.000000000000)*(cj18)*(pz)))+(((32.1000000000000)*(sj18)))+(((-321.000000000000)*(py)*(sj15)*(sj18)))))):(IKReal)1.0e30))*(((((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((-321.000000000000)*(sj18)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
IKReal x227=((cj15)*(py));
IKReal x228=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((x228)+(((-1.00000000000000)*(x227))));
evalcond[2]=((x227)+(((-1.00000000000000)*(x228))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
    j18valid[1]=false;
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x229=((10.0000000000000)*(cj15)*(px)*(sj18));
IKReal x230=((10.0000000000000)*(cj18)*(pz));
IKReal x231=((12.4610591900312)*(pz));
IKReal x232=((10.0000000000000)*(py)*(sj15)*(sj18));
IKReal x233=((x229)+(x232)+(x230)+(x231));
IKReal x234=((((-1.00000000000000)*(x233)))+(sj18));
dummyeval[0]=x234;
dummyeval[1]=x234;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x235=(sj18)*(sj18);
IKReal x236=((2.49221183800623)*(cj18));
IKReal x237=(cj18)*(cj18);
IKReal x238=((1.55277996137460)+(x236)+(x237)+(x235));
dummyeval[0]=x238;
dummyeval[1]=x238;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x239=((10.0000000000000)*(pz)*(sj18));
IKReal x240=((1.24610591900312)+(cj18)+(x239));
IKReal x241=((12.4610591900312)*(cj15)*(px));
IKReal x242=((12.4610591900312)*(py)*(sj15));
IKReal x243=((10.0000000000000)*(cj18)*(py)*(sj15));
IKReal x244=((10.0000000000000)*(cj15)*(cj18)*(px));
IKReal x245=((x243)+(x242)+(x241)+(x244));
IKReal x246=((x240)+(((-1.00000000000000)*(x245))));
dummyeval[0]=x246;
dummyeval[1]=x246;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x247=((0.321000000000000)*(cj18));
IKReal x248=((0.400000000000000)+(x247));
IKReal x249=((32.1000000000000)*(cj18));
IKReal x250=((321.000000000000)*(pz)*(sj18));
IKReal x251=((40.0000000000000)+(x250)+(x249));
IKReal x252=((321.000000000000)*(cj18)*(py)*(sj15));
IKReal x253=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x254=((400.000000000000)*(py)*(sj15));
IKReal x255=((400.000000000000)*(cj15)*(px));
IKReal x256=((x254)+(x255)+(x252)+(x253));
IKReal x257=((x251)+(((-1.00000000000000)*(x256))));
IKReal x258=((IKabs(x257) != 0)?((IKReal)1/(x257)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x258)*(((((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((-321.000000000000)*(sj18)*(x248)))))), ((x258)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((x248)*(x248))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x259=(sj18)*(sj18);
IKReal x260=((103041.000000000)*(x259));
IKReal x261=(cj18)*(cj18);
IKReal x262=((103041.000000000)*(x261));
IKReal x263=((256800.000000000)*(cj18));
IKReal x264=((160000.000000000)+(x260)+(x263)+(x262));
IKReal x265=((IKabs(x264) != 0)?((IKReal)1/(x264)):(IKReal)1.0e30);
IKReal x266=((py)*(sj15));
IKReal x267=((cj15)*(px));
IKReal x268=((x267)+(x266));
IKReal x269=((0.100000000000000)+(((-1.00000000000000)*(x268))));
j16array[0]=IKatan2(((-1.00000000000000)*(x265)*(((((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((321000.000000000)*(sj18)*(x269)))))), ((x265)*(((((-1.00000000000000)*(x269)*(((400000.000000000)+(((321000.000000000)*(cj18)))))))+(((321000.000000000)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj18)*(pz)))+(((32100.0000000000)*(sj18)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18))))) != 0)?((IKReal)1/(((((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj18)*(pz)))+(((32100.0000000000)*(sj18)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))))):(IKReal)1.0e30))*(((((-103041.000000000)*((sj18)*(sj18))))+(((1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz)))+(((32.1000000000000)*(sj18)))+(((-321.000000000000)*(py)*(sj15)*(sj18))))) != 0)?((IKReal)1/(((((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz)))+(((32.1000000000000)*(sj18)))+(((-321.000000000000)*(py)*(sj15)*(sj18)))))):(IKReal)1.0e30))*(((((-321.000000000000)*(sj18)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x270=((cj17)*(px)*(sj15));
IKReal x271=((cj15)*(cj17)*(py));
IKReal x272=((x270)+(((-1.00000000000000)*(x271))));
IKReal x273=((0.0669590000000000)+(pp));
IKReal x274=((0.200000000000000)*(cj15)*(px));
IKReal x275=((0.200000000000000)*(py)*(sj15));
IKReal x276=((x274)+(x275));
IKReal x277=((x273)+(((-1.00000000000000)*(x276))));
IKReal x278=((0.800000000000000)*(cj15)*(px)*(sj17));
IKReal x279=((0.800000000000000)*(py)*(sj15)*(sj17));
IKReal x280=((x278)+(x279));
IKReal x281=x156;
IKReal x282=(sj15)*(sj15);
IKReal x283=((4.00000000000000)*(sj17)*(x281)*(x282));
IKReal x284=((8.00000000000000)*(cj15)*(px)*(py)*(sj15)*(sj17));
IKReal x285=(pz)*(pz);
IKReal x286=((4.00000000000000)*(sj17)*(x285));
IKReal x287=(cj15)*(cj15);
IKReal x288=x155;
IKReal x289=((4.00000000000000)*(sj17)*(x287)*(x288));
IKReal x290=((0.0400000000000000)*(sj17));
IKReal x291=((x290)+(x289)+(x286)+(x284)+(x283));
IKReal x292=((((-1.00000000000000)*(x291)))+(x280));
IKReal x293=((IKabs(x292) != 0)?((IKReal)1/(x292)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x293)*(((((x272)*(((0.400000000000000)+(((-4.00000000000000)*(py)*(sj15)))+(((-4.00000000000000)*(cj15)*(px)))))))+(((5.00000000000000)*(pz)*(sj17)*(x277)))))), ((x293)*(((((x277)*(((((-5.00000000000000)*(cj15)*(px)*(sj17)))+(((0.500000000000000)*(sj17)))+(((-5.00000000000000)*(py)*(sj15)*(sj17)))))))+(((-4.00000000000000)*(pz)*(x272)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj16;
dummyeval[1]=cj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
evalcond[0]=((IKfmod(((-1.57079632679490)+(j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((cj17)*(px)*(sj15)))+(((-1.00000000000000)*(cj15)*(px)*(sj17)))+(((-1.00000000000000)*(py)*(sj15)*(sj17)))+(((0.100000000000000)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x294=((px)*(sj15));
IKReal x295=((cj15)*(py));
IKReal x296=((((-1.00000000000000)*(x295)))+(x294));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x296;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x296;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x297=((cj15)*(py));
IKReal x298=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x297)))+(x298));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((((-1.00000000000000)*(x298)))+(x297));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x299=((py)*(sj15));
IKReal x300=((cj15)*(px));
IKReal x301=((x300)+(x299));
IKReal x302=((0.100000000000000)+(((-1.00000000000000)*(x301))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x302;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(x300)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x299))));
evalcond[3]=x302;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x303=((py)*(sj15));
IKReal x304=((cj15)*(px));
evalcond[0]=((IKfmod(((1.57079632679490)+(j17)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((0.100000000000000)+(((-1.00000000000000)*(x303)))+(((-1.00000000000000)*(x304))));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(x303)))+(((0.200000000000000)*(x304)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((-0.100000000000000)+(x304)+(x303));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(py)*(sj15)))+(((-1000.00000000000)*(cj15)*(px)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j16)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((cj15)*(px)*(sj17)))+(((-0.100000000000000)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((cj17)*(px)*(sj15)))+(((py)*(sj15)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x305=((px)*(sj15));
IKReal x306=((cj15)*(py));
IKReal x307=((x305)+(((-1.00000000000000)*(x306))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x307;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x307;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x308=((cj15)*(py));
IKReal x309=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((x309)+(((-1.00000000000000)*(x308))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((x308)+(((-1.00000000000000)*(x309))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x310=((py)*(sj15));
IKReal x311=((cj15)*(px));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((0.100000000000000)+(((-1.00000000000000)*(x310)))+(((-1.00000000000000)*(x311))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(x311)))+(((0.200000000000000)*(x310)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((-0.100000000000000)+(x311)+(x310));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x312=((py)*(sj15));
IKReal x313=((cj15)*(px));
IKReal x314=((x313)+(x312));
IKReal x315=((0.100000000000000)+(((-1.00000000000000)*(x314))));
evalcond[0]=((IKfmod(((1.57079632679490)+(j17)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x315;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(x312)))+(((0.200000000000000)*(x313)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x315;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(py)*(sj15)))+(((-1000.00000000000)*(cj15)*(px)))))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[2]=((((-1.00000000000000)*(cj16)*(pz)))+(((-1.00000000000000)*(cj15)*(px)*(sj16)))+(((-1.00000000000000)*(py)*(sj15)*(sj16)))+(((0.100000000000000)*(sj16))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((1.57079632679490)+(j17)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[2]=((((cj15)*(px)*(sj16)))+(((-0.100000000000000)*(sj16)))+(((py)*(sj15)*(sj16)))+(((cj16)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x316=((px)*(sj15));
IKReal x317=((cj15)*(py));
IKReal x318=((x316)+(((-1.00000000000000)*(x317))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x318;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[3]=x318;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(cj16)*(pz)))+(((-3.11526479750779)*(cj15)*(px)*(sj16)))+(((-3.11526479750779)*(py)*(sj15)*(sj16)))+(((0.311526479750779)*(sj16)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x319=((cj15)*(py));
IKReal x320=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j17)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((x320)+(((-1.00000000000000)*(x319))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[3]=((((-1.00000000000000)*(x320)))+(x319));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj16;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x321=x319;
IKReal x322=x320;
evalcond[0]=((IKfmod(((j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((-1.00000000000000)*(x321)))+(x322));
evalcond[2]=((-0.146959000000000)+(((py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((cj15)*(px))));
evalcond[3]=((((-1.00000000000000)*(x322)))+(x321));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((3.11526479750779)*(pz)), ((-1.55763239875389)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x323=x319;
IKReal x324=x320;
evalcond[0]=((IKfmod(((-3.14159265358979)+(j16)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((-1.00000000000000)*(x323)))+(x324));
evalcond[2]=((0.0130410000000000)+(((-0.600000000000000)*(py)*(sj15)))+(((-0.600000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((((-1.00000000000000)*(x324)))+(x323));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-3.11526479750779)*(pz)), ((-0.934579439252336)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
IKReal x325=((IKabs(sj16) != 0)?((IKReal)1/(sj16)):(IKReal)1.0e30);
j18array[0]=IKatan2(((((3.11526479750779)*(cj16)*(pz)))+(((3.11526479750779)*(cj15)*(px)*(sj16)))+(((3.11526479750779)*(py)*(sj15)*(sj16)))+(((-0.311526479750779)*(sj16)))), ((-1.24610591900312)+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))+(((-3.11526479750779)*(pz)*(x325)))+(((3.11526479750779)*(pz)*(x325)*((cj16)*(cj16))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
IKReal x326=((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30);
j18array[0]=IKatan2(((((-3.11526479750779)*(pz)*(x326)*((sj16)*(sj16))))+(((3.11526479750779)*(pz)*(x326)))+(((3.11526479750779)*(cj15)*(px)*(sj16)))+(((3.11526479750779)*(py)*(sj15)*(sj16)))+(((-0.311526479750779)*(sj16)))), ((-1.24610591900312)+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))+(((-3.11526479750779)*(pz)*(sj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((400.000000000000)*(sj16)))+(((-1250.00000000000)*(sj16)*(((0.253041000000000)+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))))))+(((1000.00000000000)*(pz)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((((1250.00000000000)*(sj16)*(((0.253041000000000)+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))))))+(((-1000.00000000000)*(pz)))+(((-400.000000000000)*(sj16)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-1.24610591900312)+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))+(((-3.11526479750779)*(pz)*(sj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((-0.778816199376947)*(cj15)*(px)))+(((3.89408099688474)*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x327=((2.49221183800623)*(cj18));
IKReal x328=(cj18)*(cj18);
IKReal x329=(cj17)*(cj17);
IKReal x330=(sj18)*(sj18);
IKReal x331=((x329)*(x330));
IKReal x332=((1.55277996137460)+(x331)+(x327)+(x328));
dummyeval[0]=x332;
dummyeval[1]=x332;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x333=((1.24610591900312)+(cj18));
IKReal x334=((12.4610591900312)*(cj15)*(px));
IKReal x335=((12.4610591900312)*(py)*(sj15));
IKReal x336=((10.0000000000000)*(cj18)*(py)*(sj15));
IKReal x337=((10.0000000000000)*(cj17)*(pz)*(sj18));
IKReal x338=((10.0000000000000)*(cj15)*(cj18)*(px));
IKReal x339=((x338)+(x337)+(x336)+(x335)+(x334));
IKReal x340=((x333)+(((-1.00000000000000)*(x339))));
dummyeval[0]=x340;
dummyeval[1]=x340;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x341=((10.0000000000000)*(cj17)*(py)*(sj15)*(sj18));
IKReal x342=((10.0000000000000)*(cj15)*(cj17)*(px)*(sj18));
IKReal x343=((x342)+(x341));
IKReal x344=((10.0000000000000)*(cj18)*(pz));
IKReal x345=((12.4610591900312)*(pz));
IKReal x346=((cj17)*(sj18));
IKReal x347=((x346)+(x344)+(x345));
IKReal x348=((x343)+(((-1.00000000000000)*(x347))));
dummyeval[0]=x348;
dummyeval[1]=x348;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x349=((py)*(sj15));
IKReal x350=((cj15)*(px));
IKReal x351=((x350)+(x349));
IKReal x352=((0.100000000000000)+(((-1.00000000000000)*(x351))));
IKReal x353=((0.321000000000000)*(cj18));
IKReal x354=((0.400000000000000)+(x353));
IKReal x355=((321.000000000000)*(cj17)*(sj18)*(x350));
IKReal x356=((321.000000000000)*(cj17)*(sj18)*(x349));
IKReal x357=((x355)+(x356));
IKReal x358=((32.1000000000000)*(cj17)*(sj18));
IKReal x359=((400.000000000000)*(pz));
IKReal x360=((321.000000000000)*(cj18)*(pz));
IKReal x361=((x359)+(x358)+(x360));
IKReal x362=((((-1.00000000000000)*(x361)))+(x357));
IKReal x363=((IKabs(x362) != 0)?((IKReal)1/(x362)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x363)*(((((-1000.00000000000)*((x352)*(x352))))+(((1000.00000000000)*((x354)*(x354))))))), ((x363)*(((((321.000000000000)*(cj17)*(sj18)*(x354)))+(((1000.00000000000)*(pz)*(x352)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x364=((0.321000000000000)*(cj18));
IKReal x365=((0.400000000000000)+(x364));
IKReal x366=((32.1000000000000)*(cj18));
IKReal x367=((40.0000000000000)+(x366));
IKReal x368=((321.000000000000)*(cj18)*(py)*(sj15));
IKReal x369=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x370=((321.000000000000)*(cj17)*(pz)*(sj18));
IKReal x371=((400.000000000000)*(py)*(sj15));
IKReal x372=((400.000000000000)*(cj15)*(px));
IKReal x373=((x372)+(x371)+(x370)+(x368)+(x369));
IKReal x374=((((-1.00000000000000)*(x373)))+(x367));
IKReal x375=((IKabs(x374) != 0)?((IKReal)1/(x374)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x375)*(((((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((321.000000000000)*(cj17)*(sj18)*(x365)))))), ((x375)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((x365)*(x365))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x376=(cj17)*(cj17);
IKReal x377=(sj18)*(sj18);
IKReal x378=((103041.000000000)*(x376)*(x377));
IKReal x379=(cj18)*(cj18);
IKReal x380=((103041.000000000)*(x379));
IKReal x381=((256800.000000000)*(cj18));
IKReal x382=((160000.000000000)+(x380)+(x381)+(x378));
IKReal x383=((IKabs(x382) != 0)?((IKReal)1/(x382)):(IKReal)1.0e30);
IKReal x384=((py)*(sj15));
IKReal x385=((cj15)*(px));
IKReal x386=((x384)+(x385));
IKReal x387=((0.100000000000000)+(((-1.00000000000000)*(x386))));
j16array[0]=IKatan2(((-1.00000000000000)*(x383)*(((((-321000.000000000)*(cj17)*(sj18)*(x387)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))), ((-1.00000000000000)*(x383)*(((((x387)*(((400000.000000000)+(((321000.000000000)*(cj18)))))))+(((321000.000000000)*(cj17)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
static inline void polyroots1(IKReal rawcoeffs[1+1], IKReal rawroots[1], int& numroots) {
    if( rawcoeffs[0] == 0 ) {
        numroots=0;
    }
    else {
        rawroots[0] = -rawcoeffs[1]/rawcoeffs[0];
        numroots=1;
    }
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x26=((cj16)*(sj18));
IKReal x27=((cj17)*(cj18)*(sj16));
IKReal x28=((x26)+(x27));
IKReal x29=((-1.00000000000000)*(x28));
IKReal x30=((sj16)*(sj18));
IKReal x31=((cj16)*(cj17)*(cj18));
IKReal x32=((((-1.00000000000000)*(x31)))+(x30));
IKReal x33=((cj15)*(x29));
IKReal x34=((-1.00000000000000)*(cj18)*(sj15)*(sj17));
IKReal x35=((x33)+(x34));
IKReal x36=((cj15)*(cj18)*(sj17));
IKReal x37=((sj15)*(x29));
IKReal x38=((x37)+(x36));
IKReal x39=((cj15)*(sj16)*(sj17));
IKReal x40=((cj17)*(sj15));
IKReal x41=((((-1.00000000000000)*(x40)))+(x39));
IKReal x42=((sj15)*(sj16)*(sj17));
IKReal x43=((cj15)*(cj17));
IKReal x44=((x42)+(x43));
IKReal x45=((cj16)*(cj18));
IKReal x46=((cj17)*(x30));
IKReal x47=((((-1.00000000000000)*(x46)))+(x45));
IKReal x48=((cj18)*(sj16));
IKReal x49=((cj17)*(x26));
IKReal x50=((x48)+(x49));
IKReal x51=((-1.00000000000000)*(x50));
IKReal x52=((cj15)*(x47));
IKReal x53=((cj15)*(sj17)*(sj18));
IKReal x54=((sj15)*(x47));
IKReal x55=((x54)+(x53));
IKReal x56=((-1.00000000000000)*(sj15)*(sj17)*(sj18));
IKReal x57=((x56)+(x52));
new_r00=((((r20)*(x32)))+(((r00)*(x35)))+(((r10)*(x38))));
new_r01=((((r01)*(x35)))+(((r11)*(x38)))+(((r21)*(x32))));
new_r02=((((r22)*(x32)))+(((r02)*(x35)))+(((r12)*(x38))));
new_r10=((((cj16)*(r20)*(sj17)))+(((r00)*(x41)))+(((r10)*(x44))));
new_r11=((((cj16)*(r21)*(sj17)))+(((r01)*(x41)))+(((r11)*(x44))));
new_r12=((((r02)*(x41)))+(((r12)*(x44)))+(((cj16)*(r22)*(sj17))));
new_r20=((((r10)*(x55)))+(((r00)*(x57)))+(((r20)*(x51))));
new_r21=((((r11)*(x55)))+(((r21)*(x51)))+(((r01)*(((x52)+(((-1.00000000000000)*(sj15)*(sj17)*(sj18))))))));
new_r22=((((r22)*(x51)))+(((r02)*(x57)))+(((r12)*(x55))));
{
IKReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
cj20array[0]=new_r22;
if( cj20array[0] >= -1.0001 && cj20array[0] <= 1.0001 )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
if( j20valid[0] && j20valid[1] && IKabs(cj20array[0]-cj20array[1]) < 0.0001 && IKabs(sj20array[0]-sj20array[1]) < 0.0001 )
    j20valid[1]=false;
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r02)*(sj20)))+(((-1.00000000000000)*(new_r10)*(new_r12)*(sj20))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
IKReal x58=((-1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x58;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x58;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
IKReal x59=IKatan2(new_r02, new_r12);
j19array[0]=((-1.00000000000000)*(x59));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.00000000000000)*(x59))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
if( j19valid[0] && j19valid[1] && IKabs(cj19array[0]-cj19array[1]) < 0.0001 && IKabs(sj19array[0]-sj19array[1]) < 0.0001 )
    j19valid[1]=false;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}
}
}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
IKReal x60=IKatan2(new_r02, new_r12);
j19array[0]=((-1.00000000000000)*(x60));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.00000000000000)*(x60))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
if( j19valid[0] && j19valid[1] && IKabs(cj19array[0]-cj19array[1]) < 0.0001 && IKabs(sj19array[0]-sj19array[1]) < 0.0001 )
    j19valid[1]=false;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x61=((new_r10)*(new_r12)*(sj20));
IKReal x62=((new_r00)*(new_r02)*(sj20));
IKReal x63=((x61)+(x62));
IKReal x64=((-1.00000000000000)*(x63));
IKReal x65=((IKabs(x64) != 0)?((IKReal)1/(x64)):(IKReal)1.0e30);
j19array[0]=IKatan2(((cj20)*(new_r12)*(new_r20)*(x65)), ((cj20)*(new_r02)*(new_r20)*(x65)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x66=((cj19)*(new_r12));
IKReal x67=((new_r02)*(sj19));
IKReal x68=((x66)+(((-1.00000000000000)*(x67))));
IKReal x69=((-1.00000000000000)+(new_r22));
IKReal x70=((cj19)*(new_r02));
IKReal x71=((new_r12)*(sj19));
IKReal x72=((x71)+(x70));
evalcond[0]=((IKfmod(((j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x69;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x68;
evalcond[5]=x68;
evalcond[6]=x72;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x69;
evalcond[10]=x72;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

} else
{
IKReal x73=((cj19)*(new_r12));
IKReal x74=((new_r02)*(sj19));
IKReal x75=((((-1.00000000000000)*(x74)))+(x73));
IKReal x76=((cj19)*(new_r02));
IKReal x77=((new_r12)*(sj19));
IKReal x78=((x77)+(x76));
evalcond[0]=((IKfmod(((-3.14159265358979)+(j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x75;
evalcond[5]=x75;
evalcond[6]=x78;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x78));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x79=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x79)), ((-1.00000000000000)*(new_r20)*(x79)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r00)*(sj19)))+(((cj19)*(new_r10)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((new_r21)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))), ((((cj19)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x80=(new_r12)*(new_r12);
IKReal x81=(new_r02)*(new_r02);
IKReal x82=((x80)+(x81));
IKReal x83=((IKabs(x82) != 0)?((IKReal)1/(x82)):(IKReal)1.0e30);
j19array[0]=IKatan2(((new_r12)*(sj20)*(x83)), ((new_r02)*(sj20)*(x83)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x84=((cj19)*(new_r12));
IKReal x85=((new_r02)*(sj19));
IKReal x86=((x84)+(((-1.00000000000000)*(x85))));
IKReal x87=((-1.00000000000000)+(new_r22));
IKReal x88=((cj19)*(new_r02));
IKReal x89=((new_r12)*(sj19));
IKReal x90=((x88)+(x89));
evalcond[0]=((IKfmod(((j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x87;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x86;
evalcond[5]=x86;
evalcond[6]=x90;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x87;
evalcond[10]=x90;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

} else
{
IKReal x91=((cj19)*(new_r12));
IKReal x92=((new_r02)*(sj19));
IKReal x93=((x91)+(((-1.00000000000000)*(x92))));
IKReal x94=((cj19)*(new_r02));
IKReal x95=((new_r12)*(sj19));
IKReal x96=((x95)+(x94));
evalcond[0]=((IKfmod(((-3.14159265358979)+(j20)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x93;
evalcond[5]=x93;
evalcond[6]=x96;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x96));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x97=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x97)), ((-1.00000000000000)*(new_r20)*(x97)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r00)*(sj19)))+(((cj19)*(new_r10)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((new_r21)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))), ((((cj19)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x98=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x98)), ((-1.00000000000000)*(new_r20)*(x98)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x99=((new_r02)*(new_r11));
IKReal x100=((new_r01)*(new_r12));
IKReal x101=((((-1.00000000000000)*(x100)))+(x99));
IKReal x102=((IKabs(x101) != 0)?((IKReal)1/(x101)):(IKReal)1.0e30);
j19array[0]=IKatan2(((cj21)*(new_r12)*(x102)), ((cj21)*(new_r02)*(x102)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x103=((new_r02)*(new_r10));
IKReal x104=((new_r00)*(new_r12));
IKReal x105=((((-1.00000000000000)*(x104)))+(x103));
IKReal x106=((IKabs(x105) != 0)?((IKReal)1/(x105)):(IKReal)1.0e30);
j19array[0]=IKatan2(((new_r12)*(sj21)*(x106)), ((new_r02)*(sj21)*(x106)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x107=(new_r12)*(new_r12);
IKReal x108=(new_r02)*(new_r02);
IKReal x109=((x108)+(x107));
IKReal x110=((IKabs(x109) != 0)?((IKReal)1/(x109)):(IKReal)1.0e30);
j19array[0]=IKatan2(((new_r12)*(sj20)*(x110)), ((new_r02)*(sj20)*(x110)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j15;
solution.basesol[2].foffset = j16;
solution.basesol[3].foffset = j17;
solution.basesol[4].foffset = j18;
solution.basesol[5].foffset = j19;
solution.basesol[6].foffset = j20;
solution.basesol[7].foffset = j21;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "12ceb0aaa06143fe305efa6e48faae0b"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
