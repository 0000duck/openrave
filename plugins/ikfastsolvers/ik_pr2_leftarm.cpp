#define IKFAST_NAMESPACE ik_pr2_leftarm
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 59 generated on 2012-06-21 00:08:01.759827
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKcos(j[3]);
x8=IKcos(j[1]);
x9=IKsin(j[3]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((1.00000000000000)*(x12));
x15=((0.180000000000000)*(x7));
x16=((0.180000000000000)*(x5));
x17=((0.321000000000000)*(x3));
x18=((1.00000000000000)*(x1));
x19=((0.180000000000000)*(x9));
x20=((1.00000000000000)*(x13));
x21=((1.00000000000000)*(x9));
x22=((0.180000000000000)*(x6));
x23=((1.00000000000000)*(x3));
x24=((x8)*(x9));
x25=((x0)*(x8));
x26=((x0)*(x3));
x27=((x0)*(x2));
x28=((x4)*(x7));
x29=((-1.00000000000000)*(x7));
x30=((x1)*(x4));
x31=((x1)*(x8));
x32=((x2)*(x8));
x33=((x31)*(x7));
x34=((x21)*(x25));
x35=((x18)*(x24));
x36=((x23)*(x7)*(x8));
x37=((((x27)*(x4)))+(((-1.00000000000000)*(x18)*(x3))));
x38=((x27)+(((-1.00000000000000)*(x18)*(x3)*(x4))));
x39=((((x2)*(x30)))+(x26));
x40=((((-1.00000000000000)*(x36)))+(((x4)*(x9))));
x41=((((-1.00000000000000)*(x18)*(x2)))+(((-1.00000000000000)*(x0)*(x23)*(x4))));
x42=((x37)*(x5));
x43=((x38)*(x7));
x44=((x39)*(x5));
x45=((((x21)*(x3)*(x8)))+(((1.00000000000000)*(x28))));
x46=((x38)*(x9));
x47=((x41)*(x7));
x48=((x41)*(x9));
x49=((((x32)*(x5)))+(((x40)*(x6))));
x50=((((-1.00000000000000)*(x1)*(x24)))+(x43));
x51=((((x32)*(x6)))+(((x5)*(((((-1.00000000000000)*(x21)*(x4)))+(x36))))));
x52=((((-1.00000000000000)*(x18)*(x7)*(x8)))+(((-1.00000000000000)*(x21)*(x38))));
x53=((x13)*(x49));
x54=((((-1.00000000000000)*(x0)*(x24)))+(x47));
x55=((x50)*(x6));
x56=((((-1.00000000000000)*(x48)))+(((x25)*(x29))));
x57=((x54)*(x6));
x58=((x44)+(x55));
x59=((((x6)*(((((-1.00000000000000)*(x34)))+(x47)))))+(x42));
x60=((((x5)*(((((x29)*(x38)))+(x35)))))+(((x39)*(x6))));
x61=((((x5)*(((((x29)*(x41)))+(x34)))))+(((x37)*(x6))));
x62=((x13)*(x59));
eerot[0]=((((x11)*(x61)))+(((x10)*(((((x12)*(x56)))+(x62))))));
eerot[1]=((((x11)*(((((-1.00000000000000)*(x20)*(x59)))+(((-1.00000000000000)*(x14)*(x56)))))))+(((x10)*(x61))));
eerot[2]=((((x13)*(((x48)+(((x25)*(x7)))))))+(((x12)*(((x42)+(x57))))));
eetrans[0]=((((x9)*(((((-1.00000000000000)*(x0)*(x17)*(x4)))+(((-0.321000000000000)*(x1)*(x2)))))))+(((0.100000000000000)*(x0)))+(((0.321000000000000)*(x25)*(x7)))+(((0.400000000000000)*(x25)))+(((x12)*(((((x16)*(x37)))+(((x22)*(x54)))))))+(((x13)*(((((x19)*(x41)))+(((x15)*(x25))))))));
eerot[3]=((((x11)*(x60)))+(((x10)*(((((x13)*(x58)))+(((x12)*(x52))))))));
eerot[4]=((((x11)*(((((-1.00000000000000)*(x20)*(x58)))+(((-1.00000000000000)*(x14)*(x52)))))))+(((x10)*(x60))));
eerot[5]=((((x13)*(((x33)+(x46)))))+(((x12)*(((((x6)*(((((-1.00000000000000)*(x35)))+(x43)))))+(x44))))));
eetrans[1]=((0.188000000000000)+(((0.100000000000000)*(x1)))+(((x13)*(((((x19)*(x38)))+(((x15)*(x31)))))))+(((0.321000000000000)*(x33)))+(((0.400000000000000)*(x31)))+(((x9)*(((((-1.00000000000000)*(x17)*(x30)))+(((0.321000000000000)*(x27)))))))+(((x12)*(((((x16)*(x39)))+(((x22)*(x50))))))));
eerot[6]=((((x11)*(x51)))+(((x10)*(((x53)+(((x12)*(x45))))))));
eerot[7]=((((x10)*(x51)))+(((x11)*(((((-1.00000000000000)*(x20)*(x49)))+(((-1.00000000000000)*(x14)*(x45))))))));
eerot[8]=((((x12)*(x49)))+(((-1.00000000000000)*(x13)*(x45))));
eetrans[2]=((((x13)*(((((-1.00000000000000)*(x19)*(x3)*(x8)))+(((-1.00000000000000)*(x15)*(x4)))))))+(((x12)*(((((x16)*(x32)))+(((x22)*(x40)))))))+(((-1.00000000000000)*(x17)*(x24)))+(((-0.400000000000000)*(x4)))+(((-0.321000000000000)*(x28))));
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j15,cj15,sj15,htj15,j16,cj16,sj16,htj16,j18,cj18,sj18,htj18,j19,cj19,sj19,htj19,j20,cj20,sj20,htj20,j21,cj21,sj21,htj21,j17,cj17,sj17,htj17,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij15[2], _nj15,_ij16[2], _nj16,_ij18[2], _nj18,_ij19[2], _nj19,_ij20[2], _nj20,_ij21[2], _nj21,_ij17[2], _nj17;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j15=numeric_limits<IKReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IKReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j18=numeric_limits<IKReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1; j19=numeric_limits<IKReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IKReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IKReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1;  _ij17[0] = -1; _ij17[1] = -1; _nj17 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
j17=pfree[0]; cj17=cos(pfree[0]); sj17=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.180000000000000)*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.188000000000000)+(((-0.180000000000000)*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((pz)+(((-0.180000000000000)*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal gconst0;
gconst0=((-1.00000000000000)*(py));
IKReal gconst1;
gconst1=((0.642000000000000)*(sj17));
IKReal gconst2;
gconst2=((-1.00000000000000)*(py));
IKReal gconst3;
gconst3=((0.509841000000000)+(((0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst4;
gconst4=((-0.00375900000000000)+(((0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst5;
gconst5=((-1.00000000000000)*(py));
IKReal gconst6;
gconst6=((0.642000000000000)*(sj17));
IKReal gconst7;
gconst7=((-1.00000000000000)*(py));
IKReal gconst8;
gconst8=((0.509841000000000)+(((0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst9;
gconst9=((-0.00375900000000000)+(((0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst10;
gconst10=((2.00000000000000)*(px));
IKReal gconst11;
gconst11=((2.00000000000000)*(px));
IKReal gconst12;
gconst12=((0.400000000000000)*(py));
IKReal gconst13;
gconst13=((0.400000000000000)*(py));
IKReal gconst14;
gconst14=((2.00000000000000)*(px));
IKReal gconst15;
gconst15=((2.00000000000000)*(px));
IKReal gconst16;
gconst16=((0.400000000000000)*(py));
IKReal gconst17;
gconst17=((0.400000000000000)*(py));
IKReal gconst18;
gconst18=py;
IKReal gconst19;
gconst19=((0.642000000000000)*(sj17));
IKReal gconst20;
gconst20=py;
IKReal gconst21;
gconst21=((0.509841000000000)+(((-0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst22;
gconst22=((-0.00375900000000000)+(((-0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst23;
gconst23=py;
IKReal gconst24;
gconst24=((0.642000000000000)*(sj17));
IKReal gconst25;
gconst25=py;
IKReal gconst26;
gconst26=((0.509841000000000)+(((-0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst27;
gconst27=((-0.00375900000000000)+(((-0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal x63=((gconst20)*(gconst21));
IKReal x64=((gconst23)*(gconst27));
IKReal x65=((gconst25)*(gconst26));
IKReal x66=((gconst18)*(gconst22));
dummyeval[0]=((((-1.00000000000000)*(x64)*(x66)))+(((-1.00000000000000)*(x63)*(x65)))+(((-1.00000000000000)*(gconst19)*(gconst22)*(gconst24)*(gconst26)))+(((x63)*(x64)))+(((x65)*(x66))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[8+1], zeror[8];
int numroots;
IKReal x67=((1.00000000000000)*(gconst8));
IKReal x68=((gconst3)*(gconst7));
IKReal x69=((gconst0)*(gconst8));
IKReal x70=((gconst13)*(gconst15));
IKReal x71=((1.00000000000000)*(gconst22));
IKReal x72=((gconst19)*(gconst24));
IKReal x73=((gconst0)*(gconst9));
IKReal x74=((gconst1)*(gconst6));
IKReal x75=((gconst27)*(gconst5));
IKReal x76=((gconst2)*(gconst3));
IKReal x77=((1.00000000000000)*(gconst4));
IKReal x78=((gconst17)*(gconst5));
IKReal x79=((gconst12)*(gconst14));
IKReal x80=((gconst2)*(gconst9));
IKReal x81=((1.00000000000000)*(gconst16));
IKReal x82=((gconst18)*(gconst25));
IKReal x83=((gconst12)*(gconst7));
IKReal x84=((gconst18)*(gconst9));
IKReal x85=((gconst20)*(gconst27));
IKReal x86=((gconst26)*(gconst4));
IKReal x87=((gconst1)*(gconst24));
IKReal x88=((gconst11)*(gconst3));
IKReal x89=((1.00000000000000)*(gconst26));
IKReal x90=((gconst20)*(gconst21));
IKReal x91=((gconst13)*(gconst16));
IKReal x92=((gconst18)*(gconst23));
IKReal x93=((gconst21)*(gconst25));
IKReal x94=((gconst2)*(gconst21));
IKReal x95=((gconst12)*(gconst2));
IKReal x96=((gconst5)*(gconst9));
IKReal x97=((gconst20)*(gconst3));
IKReal x98=((gconst4)*(gconst7));
IKReal x99=((gconst11)*(gconst12));
IKReal x100=((gconst14)*(gconst17));
IKReal x101=((gconst15)*(gconst4));
IKReal x102=((1.00000000000000)*(gconst13));
IKReal x103=((gconst10)*(gconst8));
IKReal x104=((gconst0)*(gconst16));
IKReal x105=((gconst23)*(gconst27));
IKReal x106=((gconst22)*(gconst25));
IKReal x107=((gconst10)*(gconst16));
IKReal x108=((gconst19)*(gconst6));
IKReal x109=((gconst22)*(gconst7));
IKReal x110=((gconst0)*(gconst7));
IKReal x111=((gconst17)*(gconst23));
IKReal x112=((gconst10)*(gconst14));
IKReal x113=((gconst11)*(gconst21));
IKReal x114=((gconst12)*(gconst20));
IKReal x115=((gconst18)*(gconst26));
IKReal x116=((gconst14)*(gconst9));
IKReal x117=((gconst13)*(gconst7));
IKReal x118=((gconst16)*(gconst22));
IKReal x119=((gconst23)*(x90));
IKReal x120=((gconst10)*(gconst25)*(gconst26));
IKReal x121=((gconst15)*(gconst22)*(gconst26));
IKReal x122=((gconst14)*(gconst18)*(gconst27));
op[0]=((((-1.00000000000000)*(gconst26)*(x71)*(x72)))+(((-1.00000000000000)*(gconst25)*(x89)*(x90)))+(((gconst22)*(gconst26)*(x82)))+(((-1.00000000000000)*(gconst27)*(x71)*(x92)))+(((gconst21)*(gconst23)*(x85))));
op[1]=((((-1.00000000000000)*(x122)*(x71)))+(((-1.00000000000000)*(gconst25)*(x81)*(x90)))+(((gconst13)*(gconst26)*(x82)))+(((gconst10)*(gconst26)*(x106)))+(((-1.00000000000000)*(gconst11)*(x89)*(x93)))+(((gconst14)*(gconst21)*(x85)))+(((-1.00000000000000)*(gconst17)*(x71)*(x92)))+(((-1.00000000000000)*(gconst27)*(x102)*(x92)))+(((-1.00000000000000)*(gconst25)*(x114)*(x89)))+(((-1.00000000000000)*(gconst16)*(x71)*(x72)))+(((-1.00000000000000)*(gconst13)*(x72)*(x89)))+(((x111)*(x90)))+(((gconst15)*(gconst22)*(x115)))+(((x118)*(x82)))+(((x105)*(x113)))+(((-1.00000000000000)*(gconst10)*(x105)*(x71)))+(((-1.00000000000000)*(gconst15)*(x89)*(x90)))+(((gconst12)*(gconst23)*(x85))));
op[2]=((((-1.00000000000000)*(gconst15)*(x81)*(x90)))+(((-1.00000000000000)*(gconst27)*(x112)*(x71)))+(((gconst15)*(gconst18)*(x118)))+(((x79)*(x85)))+(((x100)*(x90)))+(((x82)*(x91)))+(((x106)*(x107)))+(((x111)*(x114)))+(((x111)*(x113)))+(((x82)*(x86)))+(((gconst23)*(gconst3)*(x85)))+(((gconst14)*(gconst27)*(x113)))+(((-1.00000000000000)*(gconst22)*(x67)*(x72)))+(((-1.00000000000000)*(gconst17)*(x102)*(x92)))+(((x115)*(x70)))+(((-1.00000000000000)*(gconst25)*(x89)*(x99)))+(((-1.00000000000000)*(gconst25)*(x89)*(x97)))+(((-1.00000000000000)*(gconst25)*(x67)*(x90)))+(((x109)*(x115)))+(((gconst9)*(x119)))+(((-1.00000000000000)*(gconst25)*(x114)*(x81)))+(((-1.00000000000000)*(gconst26)*(x71)*(x87)))+(((-1.00000000000000)*(gconst11)*(x81)*(x93)))+(((gconst22)*(gconst8)*(x82)))+(((x75)*(x90)))+(((gconst13)*(x120)))+(((gconst0)*(gconst26)*(x106)))+(((-1.00000000000000)*(gconst18)*(x71)*(x75)))+(((-1.00000000000000)*(gconst13)*(x72)*(x81)))+(((-1.00000000000000)*(gconst10)*(x102)*(x105)))+(((-1.00000000000000)*(gconst23)*(x71)*(x84)))+(((gconst10)*(x121)))+(((-1.00000000000000)*(gconst7)*(x89)*(x90)))+(((-1.00000000000000)*(gconst2)*(x89)*(x93)))+(((-1.00000000000000)*(gconst0)*(x105)*(x71)))+(((-1.00000000000000)*(gconst15)*(x113)*(x89)))+(((-1.00000000000000)*(gconst10)*(x111)*(x71)))+(((-1.00000000000000)*(x102)*(x122)))+(((x105)*(x99)))+(((x105)*(x94)))+(((-1.00000000000000)*(gconst26)*(x72)*(x77)))+(((-1.00000000000000)*(gconst26)*(x108)*(x71)))+(((-1.00000000000000)*(gconst27)*(x77)*(x92)))+(((-1.00000000000000)*(gconst18)*(x100)*(x71)))+(((-1.00000000000000)*(gconst15)*(x114)*(x89))));
op[3]=((((-1.00000000000000)*(gconst17)*(gconst18)*(gconst23)*(gconst4)))+(((gconst16)*(gconst18)*(gconst25)*(gconst4)))+(((gconst15)*(gconst18)*(gconst22)*(gconst8)))+(((-1.00000000000000)*(gconst16)*(gconst19)*(gconst22)*(gconst6)))+(((gconst11)*(gconst12)*(gconst14)*(gconst27)))+(((-1.00000000000000)*(gconst16)*(gconst20)*(gconst21)*(gconst7)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst14)*(gconst27)))+(((gconst0)*(gconst16)*(gconst22)*(gconst25)))+(((gconst0)*(gconst15)*(gconst22)*(gconst26)))+(((gconst14)*(gconst2)*(gconst21)*(gconst27)))+(((gconst10)*(gconst13)*(gconst15)*(gconst26)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst21)*(gconst25)))+(((gconst11)*(gconst23)*(gconst27)*(gconst3)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst17)*(gconst23)))+(((gconst11)*(gconst14)*(gconst17)*(gconst21)))+(((-1.00000000000000)*(gconst15)*(gconst20)*(gconst26)*(gconst3)))+(((gconst12)*(gconst14)*(gconst17)*(gconst20)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst22)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst16)*(gconst20)*(gconst25)*(gconst3)))+(((gconst11)*(gconst21)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((-1.00000000000000)*(gconst11)*(gconst21)*(gconst26)*(gconst7)))+(((gconst14)*(gconst20)*(gconst21)*(gconst9)))+(((gconst16)*(gconst18)*(gconst22)*(gconst7)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst22)*(gconst5)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst21)*(gconst26)))+(((gconst12)*(gconst20)*(gconst23)*(gconst9)))+(((gconst13)*(gconst18)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst16)*(gconst20)))+(((gconst10)*(gconst25)*(gconst26)*(gconst4)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst27)*(gconst5)))+(((gconst14)*(gconst20)*(gconst27)*(gconst3)))+(((gconst15)*(gconst18)*(gconst26)*(gconst4)))+(((gconst13)*(gconst15)*(gconst16)*(gconst18)))+(((gconst10)*(gconst22)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst17)*(gconst22)*(gconst23)))+(((-1.00000000000000)*(gconst15)*(gconst20)*(gconst21)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst15)*(gconst16)*(gconst21)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst17)*(gconst22)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst24)*(gconst8)))+(((gconst11)*(gconst12)*(gconst17)*(gconst23)))+(((gconst12)*(gconst2)*(gconst23)*(gconst27)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((gconst17)*(gconst20)*(gconst23)*(gconst3)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst26)*(gconst6)))+(((gconst17)*(gconst20)*(gconst21)*(gconst5)))+(((-1.00000000000000)*(gconst12)*(gconst2)*(gconst25)*(gconst26)))+(((gconst10)*(gconst15)*(gconst16)*(gconst22)))+(((-1.00000000000000)*(gconst1)*(gconst16)*(gconst22)*(gconst24)))+(((-1.00000000000000)*(gconst0)*(gconst13)*(gconst23)*(gconst27)))+(((gconst11)*(gconst21)*(gconst27)*(gconst5)))+(((gconst13)*(gconst18)*(gconst26)*(gconst7)))+(((gconst17)*(gconst2)*(gconst21)*(gconst23)))+(((-1.00000000000000)*(gconst10)*(gconst23)*(gconst27)*(gconst4)))+(((-1.00000000000000)*(gconst0)*(gconst14)*(gconst22)*(gconst27)))+(((gconst0)*(gconst13)*(gconst25)*(gconst26)))+(((-1.00000000000000)*(gconst11)*(gconst25)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst1)*(gconst13)*(gconst24)*(gconst26)))+(((gconst10)*(gconst22)*(gconst26)*(gconst7)))+(((gconst12)*(gconst20)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst27)*(gconst4)))+(((-1.00000000000000)*(gconst12)*(gconst20)*(gconst26)*(gconst7)))+(((-1.00000000000000)*(gconst11)*(gconst21)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst16)*(gconst19)*(gconst24)*(gconst4)))+(((gconst10)*(gconst13)*(gconst16)*(gconst25)))+(((-1.00000000000000)*(gconst12)*(gconst20)*(gconst25)*(gconst8))));
op[4]=((((gconst12)*(gconst14)*(gconst2)*(gconst27)))+(((-1.00000000000000)*(gconst11)*(gconst15)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst10)*(gconst17)*(gconst23)*(gconst4)))+(((gconst10)*(gconst15)*(gconst22)*(gconst8)))+(((-1.00000000000000)*(gconst13)*(gconst17)*(gconst18)*(gconst5)))+(((gconst2)*(gconst23)*(gconst27)*(gconst3)))+(((gconst18)*(gconst22)*(gconst7)*(gconst8)))+(((gconst14)*(gconst17)*(gconst2)*(gconst21)))+(((gconst20)*(gconst27)*(gconst3)*(gconst5)))+(((-1.00000000000000)*(gconst2)*(gconst21)*(gconst25)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst17)))+(((-1.00000000000000)*(gconst18)*(gconst27)*(gconst4)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst14)*(gconst17)))+(((-1.00000000000000)*(gconst2)*(gconst21)*(gconst26)*(gconst7)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst2)*(gconst26)))+(((gconst10)*(gconst16)*(gconst22)*(gconst7)))+(((gconst13)*(gconst15)*(gconst18)*(gconst8)))+(((gconst12)*(gconst17)*(gconst2)*(gconst23)))+(((gconst10)*(gconst13)*(gconst15)*(gconst16)))+(((-1.00000000000000)*(gconst1)*(gconst13)*(gconst16)*(gconst24)))+(((gconst11)*(gconst14)*(gconst27)*(gconst3)))+(((-1.00000000000000)*(gconst0)*(gconst13)*(gconst14)*(gconst27)))+(((-1.00000000000000)*(gconst1)*(gconst22)*(gconst24)*(gconst8)))+(((gconst18)*(gconst25)*(gconst4)*(gconst8)))+(((-1.00000000000000)*(gconst12)*(gconst16)*(gconst20)*(gconst7)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst18)*(gconst9)))+(((gconst0)*(gconst13)*(gconst16)*(gconst25)))+(((gconst13)*(gconst16)*(gconst18)*(gconst7)))+(((-1.00000000000000)*(gconst20)*(gconst26)*(gconst3)*(gconst7)))+(((gconst11)*(gconst12)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst14)*(gconst17)*(gconst22)))+(((-1.00000000000000)*(gconst20)*(gconst25)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst20)*(gconst8)))+(((-1.00000000000000)*(gconst19)*(gconst26)*(gconst4)*(gconst6)))+(((-1.00000000000000)*(gconst15)*(gconst16)*(gconst2)*(gconst21)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst22)*(gconst9)))+(((gconst10)*(gconst13)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst5)*(gconst9)))+(((gconst10)*(gconst13)*(gconst26)*(gconst7)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((gconst0)*(gconst13)*(gconst15)*(gconst26)))+(((-1.00000000000000)*(gconst12)*(gconst16)*(gconst2)*(gconst25)))+(((-1.00000000000000)*(gconst20)*(gconst21)*(gconst7)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst26)*(gconst7)))+(((-1.00000000000000)*(gconst2)*(gconst25)*(gconst26)*(gconst3)))+(((gconst2)*(gconst21)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst14)*(gconst17)*(gconst18)*(gconst4)))+(((gconst2)*(gconst21)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst16)*(gconst19)*(gconst6)))+(((-1.00000000000000)*(gconst0)*(gconst22)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst27)*(gconst4)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst25)*(gconst8)))+(((gconst12)*(gconst14)*(gconst20)*(gconst9)))+(((gconst18)*(gconst26)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst0)*(gconst23)*(gconst27)*(gconst4)))+(((gconst20)*(gconst21)*(gconst5)*(gconst9)))+(((gconst11)*(gconst12)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst22)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst1)*(gconst22)*(gconst26)*(gconst6)))+(((gconst10)*(gconst15)*(gconst26)*(gconst4)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst23)*(gconst9)))+(((gconst11)*(gconst17)*(gconst23)*(gconst3)))+(((-1.00000000000000)*(gconst10)*(gconst17)*(gconst22)*(gconst5)))+(((gconst0)*(gconst15)*(gconst16)*(gconst22)))+(((-1.00000000000000)*(gconst11)*(gconst16)*(gconst21)*(gconst7)))+(((gconst0)*(gconst25)*(gconst26)*(gconst4)))+(((-1.00000000000000)*(gconst19)*(gconst24)*(gconst4)*(gconst8)))+(((gconst0)*(gconst22)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst18)*(gconst23)*(gconst4)*(gconst9)))+(((gconst11)*(gconst14)*(gconst21)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst16)*(gconst25)*(gconst3)))+(((-1.00000000000000)*(gconst11)*(gconst15)*(gconst21)*(gconst8)))+(((gconst14)*(gconst17)*(gconst20)*(gconst3)))+(((gconst12)*(gconst17)*(gconst20)*(gconst5)))+(((gconst11)*(gconst17)*(gconst21)*(gconst5)))+(((-1.00000000000000)*(gconst19)*(gconst22)*(gconst6)*(gconst8)))+(((gconst15)*(gconst16)*(gconst18)*(gconst4)))+(((gconst0)*(gconst22)*(gconst26)*(gconst7)))+(((gconst20)*(gconst23)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst24)*(gconst26)*(gconst4)))+(((gconst10)*(gconst16)*(gconst25)*(gconst4)))+(((-1.00000000000000)*(gconst0)*(gconst13)*(gconst17)*(gconst23)))+(((-1.00000000000000)*(gconst15)*(gconst16)*(gconst20)*(gconst3))));
op[5]=((((gconst0)*(gconst13)*(gconst26)*(gconst7)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst25)*(gconst3)))+(((-1.00000000000000)*(gconst13)*(gconst18)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst16)*(gconst19)*(gconst4)*(gconst6)))+(((gconst17)*(gconst20)*(gconst3)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst14)*(gconst27)*(gconst4)))+(((gconst10)*(gconst15)*(gconst16)*(gconst4)))+(((-1.00000000000000)*(gconst0)*(gconst17)*(gconst23)*(gconst4)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst14)*(gconst9)))+(((-1.00000000000000)*(gconst16)*(gconst20)*(gconst3)*(gconst7)))+(((gconst12)*(gconst20)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst14)*(gconst22)*(gconst9)))+(((gconst11)*(gconst14)*(gconst17)*(gconst3)))+(((gconst0)*(gconst15)*(gconst22)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst13)*(gconst14)*(gconst17)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst21)*(gconst8)))+(((gconst10)*(gconst25)*(gconst4)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst25)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst1)*(gconst16)*(gconst22)*(gconst6)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst26)*(gconst3)))+(((-1.00000000000000)*(gconst11)*(gconst26)*(gconst3)*(gconst7)))+(((gconst17)*(gconst2)*(gconst23)*(gconst3)))+(((gconst0)*(gconst16)*(gconst25)*(gconst4)))+(((gconst10)*(gconst26)*(gconst4)*(gconst7)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst15)*(gconst8)))+(((gconst14)*(gconst2)*(gconst21)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst13)*(gconst27)*(gconst5)))+(((gconst17)*(gconst2)*(gconst21)*(gconst5)))+(((gconst12)*(gconst14)*(gconst17)*(gconst2)))+(((-1.00000000000000)*(gconst16)*(gconst2)*(gconst21)*(gconst7)))+(((gconst11)*(gconst23)*(gconst3)*(gconst9)))+(((gconst10)*(gconst13)*(gconst16)*(gconst7)))+(((gconst11)*(gconst12)*(gconst17)*(gconst5)))+(((-1.00000000000000)*(gconst12)*(gconst2)*(gconst25)*(gconst8)))+(((gconst12)*(gconst2)*(gconst27)*(gconst5)))+(((gconst11)*(gconst21)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst6)*(gconst8)))+(((-1.00000000000000)*(gconst10)*(gconst23)*(gconst4)*(gconst9)))+(((gconst0)*(gconst13)*(gconst15)*(gconst16)))+(((-1.00000000000000)*(gconst1)*(gconst16)*(gconst24)*(gconst4)))+(((gconst14)*(gconst20)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst15)*(gconst16)*(gconst2)))+(((-1.00000000000000)*(gconst0)*(gconst13)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst15)*(gconst16)*(gconst3)))+(((gconst16)*(gconst18)*(gconst4)*(gconst7)))+(((gconst12)*(gconst2)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst2)*(gconst26)*(gconst7)))+(((gconst10)*(gconst22)*(gconst7)*(gconst8)))+(((-1.00000000000000)*(gconst1)*(gconst13)*(gconst24)*(gconst8)))+(((-1.00000000000000)*(gconst15)*(gconst20)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst12)*(gconst20)*(gconst7)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst17)*(gconst4)))+(((gconst13)*(gconst18)*(gconst7)*(gconst8)))+(((gconst10)*(gconst13)*(gconst15)*(gconst8)))+(((-1.00000000000000)*(gconst17)*(gconst18)*(gconst4)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst22)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst21)*(gconst7)*(gconst8)))+(((gconst14)*(gconst2)*(gconst27)*(gconst3)))+(((-1.00000000000000)*(gconst1)*(gconst13)*(gconst26)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst27)*(gconst4)*(gconst5)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst4)*(gconst9)))+(((gconst0)*(gconst15)*(gconst26)*(gconst4)))+(((gconst15)*(gconst18)*(gconst4)*(gconst8)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst17)*(gconst5)))+(((gconst0)*(gconst13)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst17)*(gconst22)*(gconst5)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst16)*(gconst7)))+(((gconst11)*(gconst27)*(gconst3)*(gconst5)))+(((gconst0)*(gconst16)*(gconst22)*(gconst7))));
op[6]=((((-1.00000000000000)*(gconst26)*(x74)*(x77)))+(((x110)*(x86)))+(((x96)*(x97)))+(((x96)*(x99)))+(((x79)*(x80)))+(((-1.00000000000000)*(gconst2)*(x81)*(x83)))+(((-1.00000000000000)*(gconst13)*(x74)*(x81)))+(((x107)*(x98)))+(((x78)*(x88)))+(((gconst23)*(gconst9)*(x76)))+(((x100)*(x76)))+(((-1.00000000000000)*(gconst23)*(x73)*(x77)))+(((-1.00000000000000)*(gconst25)*(x67)*(x76)))+(((-1.00000000000000)*(gconst22)*(x67)*(x74)))+(((-1.00000000000000)*(gconst15)*(x76)*(x81)))+(((x78)*(x95)))+(((-1.00000000000000)*(gconst9)*(x112)*(x77)))+(((-1.00000000000000)*(gconst14)*(x102)*(x73)))+(((-1.00000000000000)*(gconst4)*(x108)*(x67)))+(((gconst18)*(gconst8)*(x98)))+(((x103)*(x117)))+(((x69)*(x70)))+(((-1.00000000000000)*(gconst5)*(x71)*(x73)))+(((-1.00000000000000)*(gconst10)*(x102)*(x96)))+(((-1.00000000000000)*(gconst20)*(x67)*(x68)))+(((x75)*(x76)))+(((-1.00000000000000)*(gconst2)*(x68)*(x89)))+(((-1.00000000000000)*(gconst10)*(x77)*(x78)))+(((-1.00000000000000)*(gconst0)*(x102)*(x78)))+(((gconst21)*(gconst5)*(x80)))+(((x109)*(x69)))+(((-1.00000000000000)*(gconst11)*(x68)*(x81)))+(((x116)*(x88)))+(((-1.00000000000000)*(gconst4)*(x67)*(x87)))+(((-1.00000000000000)*(gconst11)*(x67)*(x83)))+(((-1.00000000000000)*(gconst5)*(x77)*(x84)))+(((-1.00000000000000)*(gconst0)*(x75)*(x77)))+(((-1.00000000000000)*(gconst0)*(x100)*(x77)))+(((gconst25)*(gconst4)*(x69)))+(((x101)*(x103)))+(((x101)*(x104)))+(((-1.00000000000000)*(gconst15)*(x67)*(x88)))+(((-1.00000000000000)*(gconst7)*(x67)*(x94)))+(((x110)*(x91)))+(((-1.00000000000000)*(gconst15)*(x67)*(x95))));
op[7]=((((x101)*(x69)))+(((-1.00000000000000)*(gconst0)*(x77)*(x78)))+(((x103)*(x98)))+(((x116)*(x76)))+(((-1.00000000000000)*(gconst13)*(x67)*(x74)))+(((gconst12)*(gconst5)*(x80)))+(((-1.00000000000000)*(gconst2)*(x68)*(x81)))+(((-1.00000000000000)*(gconst11)*(x67)*(x68)))+(((x88)*(x96)))+(((-1.00000000000000)*(gconst16)*(x74)*(x77)))+(((-1.00000000000000)*(gconst14)*(x73)*(x77)))+(((-1.00000000000000)*(gconst2)*(x67)*(x83)))+(((x76)*(x78)))+(((-1.00000000000000)*(gconst15)*(x67)*(x76)))+(((-1.00000000000000)*(gconst10)*(x77)*(x96)))+(((x117)*(x69)))+(((x104)*(x98)))+(((-1.00000000000000)*(gconst5)*(x102)*(x73))));
op[8]=((((-1.00000000000000)*(gconst5)*(x73)*(x77)))+(((-1.00000000000000)*(gconst2)*(x67)*(x68)))+(((x69)*(x98)))+(((x76)*(x96)))+(((-1.00000000000000)*(gconst4)*(x67)*(x74))));
polyroots8(op,zeror,numroots);
IKReal j15array[8], cj15array[8], sj15array[8], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IKReal htj15 = zeror[ij15];
tempj15array[0]=((2.00000000000000)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[8]={true,true,true,true,true,true,true,true};
_nj15 = 8;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IKReal dummyeval[1];
IKReal gconst44;
IKReal x123=((4.00000000000000)*(sj17));
IKReal x124=((0.800000000000000)*(sj17));
IKReal x125=((py)*(sj15));
IKReal x126=((cj15)*(px));
gconst44=IKsign(((((-8.00000000000000)*(sj17)*(x125)*(x126)))+(((-1.00000000000000)*(x123)*((x126)*(x126))))+(((-1.00000000000000)*(x123)*((pz)*(pz))))+(((-1.00000000000000)*(x123)*((x125)*(x125))))+(((x124)*(x125)))+(((x124)*(x126)))+(((-0.0400000000000000)*(sj17)))));
IKReal x127=((20.0000000000000)*(sj17));
IKReal x128=((cj15)*(px));
IKReal x129=((py)*(sj15));
IKReal x130=((100.000000000000)*(sj17));
dummyeval[0]=((((-1.00000000000000)*(x130)*((pz)*(pz))))+(((-200.000000000000)*(sj17)*(x128)*(x129)))+(((-1.00000000000000)*(x130)*((x129)*(x129))))+(((-1.00000000000000)*(sj17)))+(((-1.00000000000000)*(x130)*((x128)*(x128))))+(((x127)*(x129)))+(((x127)*(x128))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[3];
IKReal x131=((((px)*(sj15)))+(((-1.00000000000000)*(cj15)*(py))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x131;
evalcond[2]=x131;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[1];
IKReal gconst47;
IKReal x132=((321.000000000000)*(cj18));
IKReal x133=((cj15)*(px));
IKReal x134=((py)*(sj15));
gconst47=IKsign(((40.0000000000000)+(((-321.000000000000)*(pz)*(sj18)))+(((32.1000000000000)*(cj18)))+(((-400.000000000000)*(x133)))+(((-400.000000000000)*(x134)))+(((-1.00000000000000)*(x132)*(x133)))+(((-1.00000000000000)*(x132)*(x134)))));
IKReal x135=((cj15)*(px));
IKReal x136=((10.0000000000000)*(cj18));
IKReal x137=((py)*(sj15));
dummyeval[0]=((1.24610591900312)+(((-1.00000000000000)*(x135)*(x136)))+(((-12.4610591900312)*(x137)))+(((-12.4610591900312)*(x135)))+(((-10.0000000000000)*(pz)*(sj18)))+(((-1.00000000000000)*(x136)*(x137)))+(cj18));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x138=((10.0000000000000)*(sj18));
dummyeval[0]=((((-1.00000000000000)*(py)*(sj15)*(x138)))+(((-1.00000000000000)*(cj15)*(px)*(x138)))+(((10.0000000000000)*(cj18)*(pz)))+(sj18)+(((12.4610591900312)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IKReal x139=((321000.000000000)*(sj18));
IKReal x140=((py)*(sj15));
IKReal x141=((cj15)*(px));
IKReal x142=((1000.00000000000)*(pz));
IKReal x143=((321.000000000000)*(sj18));
IKReal x144=((cj18)*(pz));
if( IKabs(((((IKabs(((((321000.000000000)*(x144)))+(((-1.00000000000000)*(x139)*(x140)))+(((-1.00000000000000)*(x139)*(x141)))+(((400000.000000000)*(pz)))+(((32100.0000000000)*(sj18))))) != 0)?((IKReal)1/(((((321000.000000000)*(x144)))+(((-1.00000000000000)*(x139)*(x140)))+(((-1.00000000000000)*(x139)*(x141)))+(((400000.000000000)*(pz)))+(((32100.0000000000)*(sj18)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj18)*(sj18))))+(((-1000000.00000000)*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((32.1000000000000)*(sj18)))+(((-1.00000000000000)*(x140)*(x143)))+(((321.000000000000)*(x144)))+(((400.000000000000)*(pz)))+(((-1.00000000000000)*(x141)*(x143))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-1.00000000000000)*(x140)*(x143)))+(((321.000000000000)*(x144)))+(((400.000000000000)*(pz)))+(((-1.00000000000000)*(x141)*(x143)))))):(IKReal)1.0e30))*(((((-103.041000000000)*(cj18)*(sj18)))+(((-100.000000000000)*(pz)))+(((x140)*(x142)))+(((-128.400000000000)*(sj18)))+(((x141)*(x142))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((321000.000000000)*(x144)))+(((-1.00000000000000)*(x139)*(x140)))+(((-1.00000000000000)*(x139)*(x141)))+(((400000.000000000)*(pz)))+(((32100.0000000000)*(sj18))))) != 0)?((IKReal)1/(((((321000.000000000)*(x144)))+(((-1.00000000000000)*(x139)*(x140)))+(((-1.00000000000000)*(x139)*(x141)))+(((400000.000000000)*(pz)))+(((32100.0000000000)*(sj18)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj18)*(sj18))))+(((-1000000.00000000)*((pz)*(pz))))))))+IKsqr(((((IKabs(((((32.1000000000000)*(sj18)))+(((-1.00000000000000)*(x140)*(x143)))+(((321.000000000000)*(x144)))+(((400.000000000000)*(pz)))+(((-1.00000000000000)*(x141)*(x143))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-1.00000000000000)*(x140)*(x143)))+(((321.000000000000)*(x144)))+(((400.000000000000)*(pz)))+(((-1.00000000000000)*(x141)*(x143)))))):(IKReal)1.0e30))*(((((-103.041000000000)*(cj18)*(sj18)))+(((-100.000000000000)*(pz)))+(((x140)*(x142)))+(((-128.400000000000)*(sj18)))+(((x141)*(x142)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((321000.000000000)*(x144)))+(((-1.00000000000000)*(x139)*(x140)))+(((-1.00000000000000)*(x139)*(x141)))+(((400000.000000000)*(pz)))+(((32100.0000000000)*(sj18))))) != 0)?((IKReal)1/(((((321000.000000000)*(x144)))+(((-1.00000000000000)*(x139)*(x140)))+(((-1.00000000000000)*(x139)*(x141)))+(((400000.000000000)*(pz)))+(((32100.0000000000)*(sj18)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj18)*(sj18))))+(((-1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((32.1000000000000)*(sj18)))+(((-1.00000000000000)*(x140)*(x143)))+(((321.000000000000)*(x144)))+(((400.000000000000)*(pz)))+(((-1.00000000000000)*(x141)*(x143))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-1.00000000000000)*(x140)*(x143)))+(((321.000000000000)*(x144)))+(((400.000000000000)*(pz)))+(((-1.00000000000000)*(x141)*(x143)))))):(IKReal)1.0e30))*(((((-103.041000000000)*(cj18)*(sj18)))+(((-100.000000000000)*(pz)))+(((x140)*(x142)))+(((-128.400000000000)*(sj18)))+(((x141)*(x142)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IKReal evalcond[5];
IKReal x145=IKsin(j16);
IKReal x146=IKcos(j16);
IKReal x147=((0.321000000000000)*(sj18));
IKReal x148=((cj15)*(px));
IKReal x149=((0.321000000000000)*(cj18));
IKReal x150=((py)*(sj15));
IKReal x151=((pz)*(x145));
IKReal x152=((0.800000000000000)*(x146));
IKReal x153=((1.00000000000000)*(x146));
evalcond[0]=((((0.400000000000000)*(x145)))+(((x145)*(x149)))+(pz)+(((x146)*(x147))));
evalcond[1]=((0.400000000000000)+(((-1.00000000000000)*(x150)*(x153)))+(((0.100000000000000)*(x146)))+(x151)+(x149)+(((-1.00000000000000)*(x148)*(x153))));
evalcond[2]=((0.100000000000000)+(((0.400000000000000)*(x146)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x148)))+(((x146)*(x149)))+(((-1.00000000000000)*(x145)*(x147))));
evalcond[3]=((-0.0669590000000000)+(((-0.0800000000000000)*(x146)))+(((0.200000000000000)*(x148)))+(((-0.800000000000000)*(x151)))+(((0.200000000000000)*(x150)))+(((x150)*(x152)))+(((-1.00000000000000)*(pp)))+(((x148)*(x152))));
evalcond[4]=((((pz)*(x146)))+(((-0.100000000000000)*(x145)))+(((x145)*(x148)))+(x147)+(((x145)*(x150))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IKReal x225=((1000.00000000000)*(pz));
if( IKabs(((gconst47)*(((((-100.000000000000)*(pz)))+(((103.041000000000)*(cj18)*(sj18)))+(((cj15)*(px)*(x225)))+(((py)*(sj15)*(x225)))+(((128.400000000000)*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((-160.000000000000)+(((pz)*(x225)))+(((-256.800000000000)*(cj18)))+(((-103.041000000000)*((cj18)*(cj18)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst47)*(((((-100.000000000000)*(pz)))+(((103.041000000000)*(cj18)*(sj18)))+(((cj15)*(px)*(x225)))+(((py)*(sj15)*(x225)))+(((128.400000000000)*(sj18)))))), ((gconst47)*(((-160.000000000000)+(((pz)*(x225)))+(((-256.800000000000)*(cj18)))+(((-103.041000000000)*((cj18)*(cj18))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IKReal evalcond[5];
IKReal x226=IKsin(j16);
IKReal x227=IKcos(j16);
IKReal x228=((0.321000000000000)*(sj18));
IKReal x229=((cj15)*(px));
IKReal x230=((0.321000000000000)*(cj18));
IKReal x231=((py)*(sj15));
IKReal x232=((pz)*(x226));
IKReal x233=((0.800000000000000)*(x227));
IKReal x234=((1.00000000000000)*(x227));
evalcond[0]=((((x227)*(x228)))+(((x226)*(x230)))+(((0.400000000000000)*(x226)))+(pz));
evalcond[1]=((0.400000000000000)+(((0.100000000000000)*(x227)))+(x232)+(x230)+(((-1.00000000000000)*(x231)*(x234)))+(((-1.00000000000000)*(x229)*(x234))));
evalcond[2]=((0.100000000000000)+(((0.400000000000000)*(x227)))+(((x227)*(x230)))+(((-1.00000000000000)*(x226)*(x228)))+(((-1.00000000000000)*(x231)))+(((-1.00000000000000)*(x229))));
evalcond[3]=((-0.0669590000000000)+(((0.200000000000000)*(x231)))+(((x229)*(x233)))+(((0.200000000000000)*(x229)))+(((-1.00000000000000)*(pp)))+(((x231)*(x233)))+(((-0.0800000000000000)*(x227)))+(((-0.800000000000000)*(x232))));
evalcond[4]=((((pz)*(x227)))+(((x226)*(x231)))+(((-0.100000000000000)*(x226)))+(x228)+(((x226)*(x229))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
IKReal x235=((cj15)*(py));
IKReal x236=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((x236)+(((-1.00000000000000)*(x235))));
evalcond[2]=((x235)+(((-1.00000000000000)*(x236))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[1];
IKReal gconst48;
IKReal x237=((321.000000000000)*(cj18));
IKReal x238=((cj15)*(px));
IKReal x239=((py)*(sj15));
gconst48=IKsign(((-40.0000000000000)+(((x237)*(x239)))+(((x237)*(x238)))+(((-321.000000000000)*(pz)*(sj18)))+(((-32.1000000000000)*(cj18)))+(((400.000000000000)*(x239)))+(((400.000000000000)*(x238)))));
IKReal x240=((py)*(sj15));
IKReal x241=((10.0000000000000)*(cj18));
IKReal x242=((cj15)*(px));
dummyeval[0]=((-1.24610591900312)+(((x240)*(x241)))+(((-10.0000000000000)*(pz)*(sj18)))+(((12.4610591900312)*(x240)))+(((12.4610591900312)*(x242)))+(((x241)*(x242)))+(((-1.00000000000000)*(cj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x243=((10.0000000000000)*(sj18));
dummyeval[0]=((((py)*(sj15)*(x243)))+(((cj15)*(px)*(x243)))+(((10.0000000000000)*(cj18)*(pz)))+(((-1.00000000000000)*(sj18)))+(((12.4610591900312)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IKReal x244=((321000.000000000)*(sj18));
IKReal x245=((py)*(sj15));
IKReal x246=((cj15)*(px));
IKReal x247=((1000.00000000000)*(pz));
IKReal x248=((321.000000000000)*(sj18));
IKReal x249=((cj18)*(pz));
if( IKabs(((((IKabs(((((x244)*(x245)))+(((x244)*(x246)))+(((400000.000000000)*(pz)))+(((321000.000000000)*(x249)))+(((-32100.0000000000)*(sj18))))) != 0)?((IKReal)1/(((((x244)*(x245)))+(((x244)*(x246)))+(((400000.000000000)*(pz)))+(((321000.000000000)*(x249)))+(((-32100.0000000000)*(sj18)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj18)*(sj18))))+(((-1000000.00000000)*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((400.000000000000)*(pz)))+(((-32.1000000000000)*(sj18)))+(((x245)*(x248)))+(((321.000000000000)*(x249)))+(((x246)*(x248))))) != 0)?((IKReal)1/(((((400.000000000000)*(pz)))+(((-32.1000000000000)*(sj18)))+(((x245)*(x248)))+(((321.000000000000)*(x249)))+(((x246)*(x248)))))):(IKReal)1.0e30))*(((((-100.000000000000)*(pz)))+(((103.041000000000)*(cj18)*(sj18)))+(((x245)*(x247)))+(((128.400000000000)*(sj18)))+(((x246)*(x247))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x244)*(x245)))+(((x244)*(x246)))+(((400000.000000000)*(pz)))+(((321000.000000000)*(x249)))+(((-32100.0000000000)*(sj18))))) != 0)?((IKReal)1/(((((x244)*(x245)))+(((x244)*(x246)))+(((400000.000000000)*(pz)))+(((321000.000000000)*(x249)))+(((-32100.0000000000)*(sj18)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj18)*(sj18))))+(((-1000000.00000000)*((pz)*(pz))))))))+IKsqr(((((IKabs(((((400.000000000000)*(pz)))+(((-32.1000000000000)*(sj18)))+(((x245)*(x248)))+(((321.000000000000)*(x249)))+(((x246)*(x248))))) != 0)?((IKReal)1/(((((400.000000000000)*(pz)))+(((-32.1000000000000)*(sj18)))+(((x245)*(x248)))+(((321.000000000000)*(x249)))+(((x246)*(x248)))))):(IKReal)1.0e30))*(((((-100.000000000000)*(pz)))+(((103.041000000000)*(cj18)*(sj18)))+(((x245)*(x247)))+(((128.400000000000)*(sj18)))+(((x246)*(x247)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((x244)*(x245)))+(((x244)*(x246)))+(((400000.000000000)*(pz)))+(((321000.000000000)*(x249)))+(((-32100.0000000000)*(sj18))))) != 0)?((IKReal)1/(((((x244)*(x245)))+(((x244)*(x246)))+(((400000.000000000)*(pz)))+(((321000.000000000)*(x249)))+(((-32100.0000000000)*(sj18)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj18)*(sj18))))+(((-1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((400.000000000000)*(pz)))+(((-32.1000000000000)*(sj18)))+(((x245)*(x248)))+(((321.000000000000)*(x249)))+(((x246)*(x248))))) != 0)?((IKReal)1/(((((400.000000000000)*(pz)))+(((-32.1000000000000)*(sj18)))+(((x245)*(x248)))+(((321.000000000000)*(x249)))+(((x246)*(x248)))))):(IKReal)1.0e30))*(((((-100.000000000000)*(pz)))+(((103.041000000000)*(cj18)*(sj18)))+(((x245)*(x247)))+(((128.400000000000)*(sj18)))+(((x246)*(x247)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IKReal evalcond[5];
IKReal x250=IKsin(j16);
IKReal x251=IKcos(j16);
IKReal x252=((0.321000000000000)*(sj18));
IKReal x253=((cj15)*(px));
IKReal x254=((0.321000000000000)*(cj18));
IKReal x255=((py)*(sj15));
IKReal x256=((pz)*(x250));
IKReal x257=((0.800000000000000)*(x251));
IKReal x258=((1.00000000000000)*(x251));
IKReal x259=((1.00000000000000)*(x250));
evalcond[0]=((((-1.00000000000000)*(x251)*(x252)))+(((x250)*(x254)))+(pz)+(((0.400000000000000)*(x250))));
evalcond[1]=((0.400000000000000)+(((-1.00000000000000)*(x255)*(x258)))+(((0.100000000000000)*(x251)))+(x254)+(x256)+(((-1.00000000000000)*(x253)*(x258))));
evalcond[2]=((0.100000000000000)+(((x251)*(x254)))+(((x250)*(x252)))+(((0.400000000000000)*(x251)))+(((-1.00000000000000)*(x253)))+(((-1.00000000000000)*(x255))));
evalcond[3]=((-0.0669590000000000)+(((0.200000000000000)*(x255)))+(((0.200000000000000)*(x253)))+(((-1.00000000000000)*(pp)))+(((x253)*(x257)))+(((x255)*(x257)))+(((-0.800000000000000)*(x256)))+(((-0.0800000000000000)*(x251))));
evalcond[4]=((((-1.00000000000000)*(x255)*(x259)))+(((0.100000000000000)*(x250)))+(x252)+(((-1.00000000000000)*(pz)*(x258)))+(((-1.00000000000000)*(x253)*(x259))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IKReal x260=((1000.00000000000)*(pz));
if( IKabs(((gconst48)*(((((-1.00000000000000)*(cj15)*(px)*(x260)))+(((100.000000000000)*(pz)))+(((103.041000000000)*(cj18)*(sj18)))+(((-1.00000000000000)*(py)*(sj15)*(x260)))+(((128.400000000000)*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((160.000000000000)+(((256.800000000000)*(cj18)))+(((103.041000000000)*((cj18)*(cj18))))+(((-1.00000000000000)*(pz)*(x260))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst48)*(((((-1.00000000000000)*(cj15)*(px)*(x260)))+(((100.000000000000)*(pz)))+(((103.041000000000)*(cj18)*(sj18)))+(((-1.00000000000000)*(py)*(sj15)*(x260)))+(((128.400000000000)*(sj18)))))), ((gconst48)*(((160.000000000000)+(((256.800000000000)*(cj18)))+(((103.041000000000)*((cj18)*(cj18))))+(((-1.00000000000000)*(pz)*(x260)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IKReal evalcond[5];
IKReal x261=IKsin(j16);
IKReal x262=IKcos(j16);
IKReal x263=((0.321000000000000)*(sj18));
IKReal x264=((cj15)*(px));
IKReal x265=((0.321000000000000)*(cj18));
IKReal x266=((py)*(sj15));
IKReal x267=((pz)*(x261));
IKReal x268=((0.800000000000000)*(x262));
IKReal x269=((1.00000000000000)*(x262));
IKReal x270=((1.00000000000000)*(x261));
evalcond[0]=((((-1.00000000000000)*(x262)*(x263)))+(((0.400000000000000)*(x261)))+(pz)+(((x261)*(x265))));
evalcond[1]=((0.400000000000000)+(x265)+(x267)+(((0.100000000000000)*(x262)))+(((-1.00000000000000)*(x266)*(x269)))+(((-1.00000000000000)*(x264)*(x269))));
evalcond[2]=((0.100000000000000)+(((0.400000000000000)*(x262)))+(((-1.00000000000000)*(x266)))+(((-1.00000000000000)*(x264)))+(((x262)*(x265)))+(((x261)*(x263))));
evalcond[3]=((-0.0669590000000000)+(((x266)*(x268)))+(((-0.0800000000000000)*(x262)))+(((-0.800000000000000)*(x267)))+(((x264)*(x268)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x264)))+(((0.200000000000000)*(x266))));
evalcond[4]=((x263)+(((0.100000000000000)*(x261)))+(((-1.00000000000000)*(x266)*(x270)))+(((-1.00000000000000)*(x264)*(x270)))+(((-1.00000000000000)*(pz)*(x269))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))))+IKsqr(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))), ((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[2];
evalcond[0]=((((px)*(sj15)))+(((-1.00000000000000)*(cj15)*(py)))+(((0.321000000000000)*(sj17)*(IKsin(j18)))));
evalcond[1]=((0.253041000000000)+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((0.256800000000000)*(IKcos(j18)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst45;
IKReal x271=((321.000000000000)*(cj18));
IKReal x272=((cj15)*(px));
IKReal x273=((py)*(sj15));
gconst45=IKsign(((-40.0000000000000)+(((400.000000000000)*(x273)))+(((400.000000000000)*(x272)))+(((x271)*(x273)))+(((x271)*(x272)))+(((321.000000000000)*(cj17)*(pz)*(sj18)))+(((-32.1000000000000)*(cj18)))));
IKReal x274=((py)*(sj15));
IKReal x275=((10.0000000000000)*(cj18));
IKReal x276=((cj15)*(px));
dummyeval[0]=((-1.24610591900312)+(((x275)*(x276)))+(((12.4610591900312)*(x274)))+(((12.4610591900312)*(x276)))+(((x274)*(x275)))+(((10.0000000000000)*(cj17)*(pz)*(sj18)))+(((-1.00000000000000)*(cj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IKReal x277=((cj17)*(sj18));
IKReal x278=((1000.00000000000)*(pz));
if( IKabs(((gconst45)*(((((-128.400000000000)*(x277)))+(((-103.041000000000)*(cj18)*(x277)))+(((100.000000000000)*(pz)))+(((-1.00000000000000)*(cj15)*(px)*(x278)))+(((-1.00000000000000)*(py)*(sj15)*(x278))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((160.000000000000)+(((-1.00000000000000)*(pz)*(x278)))+(((256.800000000000)*(cj18)))+(((103.041000000000)*((cj18)*(cj18)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst45)*(((((-128.400000000000)*(x277)))+(((-103.041000000000)*(cj18)*(x277)))+(((100.000000000000)*(pz)))+(((-1.00000000000000)*(cj15)*(px)*(x278)))+(((-1.00000000000000)*(py)*(sj15)*(x278)))))), ((gconst45)*(((160.000000000000)+(((-1.00000000000000)*(pz)*(x278)))+(((256.800000000000)*(cj18)))+(((103.041000000000)*((cj18)*(cj18))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IKReal evalcond[6];
IKReal x279=IKsin(j16);
IKReal x280=IKcos(j16);
IKReal x281=((0.321000000000000)*(sj18));
IKReal x282=((cj15)*(px));
IKReal x283=((py)*(sj15));
IKReal x284=((px)*(sj15));
IKReal x285=((1.00000000000000)*(sj17));
IKReal x286=((cj15)*(py));
IKReal x287=((0.321000000000000)*(cj18));
IKReal x288=((pz)*(x280));
IKReal x289=((1.00000000000000)*(x282));
IKReal x290=((0.321000000000000)*(x280));
IKReal x291=((sj17)*(x279));
IKReal x292=((pz)*(x279));
IKReal x293=((0.800000000000000)*(x280));
IKReal x294=((cj17)*(x279));
evalcond[0]=((((0.400000000000000)*(x279)))+(((x279)*(x287)))+(pz)+(((cj17)*(x280)*(x281))));
evalcond[1]=((0.400000000000000)+(((-1.00000000000000)*(x280)*(x283)))+(((-1.00000000000000)*(x280)*(x289)))+(x292)+(x287)+(((0.100000000000000)*(x280))));
evalcond[2]=((0.100000000000000)+(((-1.00000000000000)*(x283)))+(((0.400000000000000)*(x280)))+(((-1.00000000000000)*(x289)))+(((x280)*(x287)))+(((-1.00000000000000)*(x281)*(x294))));
evalcond[3]=((-0.0669590000000000)+(((-0.800000000000000)*(x292)))+(((x282)*(x293)))+(((x283)*(x293)))+(((-0.0800000000000000)*(x280)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x282)))+(((0.200000000000000)*(x283))));
evalcond[4]=((((0.100000000000000)*(x291)))+(((-1.00000000000000)*(x279)*(x282)*(x285)))+(((-1.00000000000000)*(x279)*(x283)*(x285)))+(((cj17)*(x284)))+(((-1.00000000000000)*(cj17)*(x286)))+(((-1.00000000000000)*(x285)*(x288))));
evalcond[5]=((((sj17)*(x284)))+(((-0.100000000000000)*(x294)))+(((x282)*(x294)))+(((x283)*(x294)))+(((cj17)*(x288)))+(x281)+(((-1.00000000000000)*(x285)*(x286))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IKReal x295=(cj15)*(cj15);
IKReal x296=(px)*(px);
IKReal x297=(py)*(py);
IKReal x298=(sj15)*(sj15);
IKReal x299=((5.00000000000000)*(pp));
IKReal x300=((py)*(sj15));
IKReal x301=((pz)*(sj17));
IKReal x302=((0.400000000000000)*(cj17));
IKReal x303=((px)*(sj15));
IKReal x304=((cj15)*(px)*(sj17));
IKReal x305=((4.00000000000000)*(cj17)*(py));
IKReal x306=((4.00000000000000)*(cj15)*(cj17)*(sj15));
if( IKabs(((gconst44)*(((((-1.00000000000000)*(x296)*(x306)))+(((px)*(x295)*(x305)))+(((0.334795000000000)*(x301)))+(((x299)*(x301)))+(((-1.00000000000000)*(px)*(x298)*(x305)))+(((x297)*(x306)))+(((-1.00000000000000)*(x300)*(x301)))+(((x302)*(x303)))+(((-1.00000000000000)*(cj15)*(px)*(x301)))+(((-1.00000000000000)*(cj15)*(py)*(x302))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((-0.434795000000000)*(x304)))+(((0.500000000000000)*(pp)*(sj17)))+(((sj17)*(x295)*(x296)))+(((cj15)*(pz)*(x305)))+(((-1.00000000000000)*(sj17)*(x299)*(x300)))+(((-1.00000000000000)*(x299)*(x304)))+(((-4.00000000000000)*(cj17)*(pz)*(x303)))+(((-0.434795000000000)*(sj17)*(x300)))+(((sj17)*(x297)*(x298)))+(((2.00000000000000)*(x300)*(x304)))+(((0.0334795000000000)*(sj17))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst44)*(((((-1.00000000000000)*(x296)*(x306)))+(((px)*(x295)*(x305)))+(((0.334795000000000)*(x301)))+(((x299)*(x301)))+(((-1.00000000000000)*(px)*(x298)*(x305)))+(((x297)*(x306)))+(((-1.00000000000000)*(x300)*(x301)))+(((x302)*(x303)))+(((-1.00000000000000)*(cj15)*(px)*(x301)))+(((-1.00000000000000)*(cj15)*(py)*(x302)))))), ((gconst44)*(((((-0.434795000000000)*(x304)))+(((0.500000000000000)*(pp)*(sj17)))+(((sj17)*(x295)*(x296)))+(((cj15)*(pz)*(x305)))+(((-1.00000000000000)*(sj17)*(x299)*(x300)))+(((-1.00000000000000)*(x299)*(x304)))+(((-4.00000000000000)*(cj17)*(pz)*(x303)))+(((-0.434795000000000)*(sj17)*(x300)))+(((sj17)*(x297)*(x298)))+(((2.00000000000000)*(x300)*(x304)))+(((0.0334795000000000)*(sj17)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IKReal evalcond[2];
IKReal x307=IKcos(j16);
IKReal x308=IKsin(j16);
IKReal x309=((1.00000000000000)*(py));
IKReal x310=((cj15)*(px));
IKReal x311=((py)*(sj15));
IKReal x312=((sj17)*(x308));
IKReal x313=((0.800000000000000)*(x307));
evalcond[0]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)*(x308)))+(((x310)*(x313)))+(((0.200000000000000)*(x310)))+(((0.200000000000000)*(x311)))+(((-0.0800000000000000)*(x307)))+(((-1.00000000000000)*(pp)))+(((x311)*(x313))));
evalcond[1]=((((-1.00000000000000)*(x310)*(x312)))+(((cj17)*(px)*(sj15)))+(((0.100000000000000)*(x312)))+(((-1.00000000000000)*(cj15)*(cj17)*(x309)))+(((-1.00000000000000)*(pz)*(sj17)*(x307)))+(((-1.00000000000000)*(sj15)*(x309)*(x312))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj16;
dummyeval[1]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal evalcond[4];
IKReal x314=((1.00000000000000)*(py));
IKReal x315=((cj15)*(px));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.200000000000000)*(x315)))+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((cj17)*(px)*(sj15)))+(((-1.00000000000000)*(sj17)*(x315)))+(((-1.00000000000000)*(cj15)*(cj17)*(x314)))+(((0.100000000000000)*(sj17)))+(((-1.00000000000000)*(sj15)*(sj17)*(x314))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[4];
IKReal x316=((((px)*(sj15)))+(((-1.00000000000000)*(cj15)*(py))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x316;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x316;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.311526479750779)+(((-3.11526479750779)*(py)*(sj15)))+(((-3.11526479750779)*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((-3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.311526479750779)+(((-3.11526479750779)*(py)*(sj15)))+(((-3.11526479750779)*(cj15)*(px)))))+IKsqr(((-1.24610591900312)+(((-3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(py)*(sj15)))+(((-3.11526479750779)*(cj15)*(px)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[3];
IKReal x317=IKcos(j18);
IKReal x318=((py)*(sj15));
IKReal x319=((cj15)*(px));
evalcond[0]=((0.253041000000000)+(((0.200000000000000)*(x318)))+(((0.200000000000000)*(x319)))+(((-1.00000000000000)*(pp)))+(((0.256800000000000)*(x317))));
evalcond[1]=((0.400000000000000)+(((0.321000000000000)*(x317)))+(pz));
evalcond[2]=((0.100000000000000)+(((-0.321000000000000)*(IKsin(j18))))+(((-1.00000000000000)*(x319)))+(((-1.00000000000000)*(x318))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x320=((cj15)*(py));
IKReal x321=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x320)))+(x321));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((((-1.00000000000000)*(x321)))+(x320));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-0.311526479750779)+(((3.11526479750779)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((-3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.311526479750779)+(((3.11526479750779)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(px)))))+IKsqr(((-1.24610591900312)+(((-3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(px)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[3];
IKReal x322=IKcos(j18);
IKReal x323=((py)*(sj15));
IKReal x324=((cj15)*(px));
evalcond[0]=((0.253041000000000)+(((0.200000000000000)*(x324)))+(((0.200000000000000)*(x323)))+(((-1.00000000000000)*(pp)))+(((0.256800000000000)*(x322))));
evalcond[1]=((0.400000000000000)+(((0.321000000000000)*(x322)))+(pz));
evalcond[2]=((0.100000000000000)+(((-1.00000000000000)*(x323)))+(((-1.00000000000000)*(x324)))+(((0.321000000000000)*(IKsin(j18)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x325=((py)*(sj15));
IKReal x326=((cj15)*(px));
IKReal x327=((0.100000000000000)+(((-1.00000000000000)*(x325)))+(((-1.00000000000000)*(x326))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j17)), 6.28318530717959)));
evalcond[1]=x327;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(x326)))+(((0.200000000000000)*(x325)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x327;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((-3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py)))))+IKsqr(((-1.24610591900312)+(((-3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[3];
IKReal x328=IKcos(j18);
evalcond[0]=((((px)*(sj15)))+(((-1.00000000000000)*(cj15)*(py)))+(((0.321000000000000)*(IKsin(j18)))));
evalcond[1]=((0.253041000000000)+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((0.256800000000000)*(x328))));
evalcond[2]=((0.400000000000000)+(((0.321000000000000)*(x328)))+(pz));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x329=((cj15)*(px));
IKReal x330=((py)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j17)), 6.28318530717959)));
evalcond[1]=((0.100000000000000)+(((-1.00000000000000)*(x329)))+(((-1.00000000000000)*(x330))));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(x329)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x330))));
evalcond[3]=((-0.100000000000000)+(x330)+(x329));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((-3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py)))))+IKsqr(((-1.24610591900312)+(((-3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[3];
IKReal x331=IKcos(j18);
evalcond[0]=((((px)*(sj15)))+(((-1.00000000000000)*(cj15)*(py)))+(((-0.321000000000000)*(IKsin(j18)))));
evalcond[1]=((0.253041000000000)+(((0.256800000000000)*(x331)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((0.400000000000000)+(((0.321000000000000)*(x331)))+(pz));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))))+IKsqr(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))), ((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x332=IKcos(j18);
IKReal x333=IKsin(j18);
IKReal x334=((py)*(sj15));
IKReal x335=((px)*(sj15));
IKReal x336=((cj15)*(px));
IKReal x337=((0.321000000000000)*(x333));
IKReal x338=((1.00000000000000)*(cj15)*(py));
evalcond[0]=((x335)+(((sj17)*(x337)))+(((-1.00000000000000)*(x338))));
evalcond[1]=((0.253041000000000)+(((0.256800000000000)*(x332)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x336)))+(((0.200000000000000)*(x334))));
evalcond[2]=((0.400000000000000)+(((0.321000000000000)*(x332)))+(pz));
evalcond[3]=((0.100000000000000)+(((-1.00000000000000)*(x336)))+(((-1.00000000000000)*(x334)))+(((-1.00000000000000)*(cj17)*(x337))));
evalcond[4]=((((-0.100000000000000)*(cj17)))+(x337)+(((sj17)*(x335)))+(((-1.00000000000000)*(sj17)*(x338)))+(((cj17)*(x336)))+(((cj17)*(x334))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(cj15)*(px)))+(((-1000.00000000000)*(py)*(sj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((-3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(cj15)*(px)))+(((-1000.00000000000)*(py)*(sj15)))))))+IKsqr(((-1.24610591900312)+(((-3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(cj15)*(px)))+(((-1000.00000000000)*(py)*(sj15)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x339=IKcos(j18);
IKReal x340=IKsin(j18);
IKReal x341=((py)*(sj15));
IKReal x342=((px)*(sj15));
IKReal x343=((cj15)*(px));
IKReal x344=((0.321000000000000)*(x340));
IKReal x345=((1.00000000000000)*(cj15)*(py));
evalcond[0]=((((sj17)*(x344)))+(x342)+(((-1.00000000000000)*(x345))));
evalcond[1]=((0.253041000000000)+(((0.256800000000000)*(x339)))+(((0.200000000000000)*(x343)))+(((0.200000000000000)*(x341)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((0.400000000000000)+(((0.321000000000000)*(x339)))+(pz));
evalcond[3]=((0.100000000000000)+(((-1.00000000000000)*(cj17)*(x344)))+(((-1.00000000000000)*(x341)))+(((-1.00000000000000)*(x343))));
evalcond[4]=((((-1.00000000000000)*(sj17)*(x345)))+(((-0.100000000000000)*(cj17)))+(((sj17)*(x342)))+(x344)+(((cj17)*(x341)))+(((cj17)*(x343))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((-3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))))+IKsqr(((-1.24610591900312)+(((-3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x346=IKcos(j18);
IKReal x347=IKsin(j18);
IKReal x348=((py)*(sj15));
IKReal x349=((px)*(sj15));
IKReal x350=((cj15)*(px));
IKReal x351=((0.321000000000000)*(x347));
IKReal x352=((1.00000000000000)*(cj15)*(py));
evalcond[0]=((((-1.00000000000000)*(x352)))+(x349)+(((sj17)*(x351))));
evalcond[1]=((0.253041000000000)+(((0.200000000000000)*(x348)))+(((0.200000000000000)*(x350)))+(((-1.00000000000000)*(pp)))+(((0.256800000000000)*(x346))));
evalcond[2]=((0.400000000000000)+(((0.321000000000000)*(x346)))+(pz));
evalcond[3]=((0.100000000000000)+(((-1.00000000000000)*(cj17)*(x351)))+(((-1.00000000000000)*(x350)))+(((-1.00000000000000)*(x348))));
evalcond[4]=((((-0.100000000000000)*(cj17)))+(((-1.00000000000000)*(sj17)*(x352)))+(((sj17)*(x349)))+(x351)+(((cj17)*(x348)))+(((cj17)*(x350))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x353=((cj15)*(px));
IKReal x354=((py)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(x353)))+(((0.200000000000000)*(x354)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((-0.100000000000000)*(sj17)))+(((sj17)*(x354)))+(((sj17)*(x353)))+(((cj17)*(px)*(sj15))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[4];
IKReal x355=((((px)*(sj15)))+(((-1.00000000000000)*(cj15)*(py))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x355;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x355;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((-0.311526479750779)+(((3.11526479750779)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.311526479750779)+(((3.11526479750779)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(px)))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(py)*(sj15)))+(((3.11526479750779)*(cj15)*(px)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[3];
IKReal x356=IKcos(j18);
IKReal x357=((py)*(sj15));
IKReal x358=((cj15)*(px));
evalcond[0]=((0.253041000000000)+(((0.200000000000000)*(x358)))+(((0.200000000000000)*(x357)))+(((-1.00000000000000)*(pp)))+(((0.256800000000000)*(x356))));
evalcond[1]=((-0.400000000000000)+(((-0.321000000000000)*(x356)))+(pz));
evalcond[2]=((0.100000000000000)+(((-1.00000000000000)*(x357)))+(((-1.00000000000000)*(x358)))+(((0.321000000000000)*(IKsin(j18)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x359=((cj15)*(py));
IKReal x360=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x359)))+(x360));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((((-1.00000000000000)*(x360)))+(x359));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.311526479750779)+(((-3.11526479750779)*(py)*(sj15)))+(((-3.11526479750779)*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.311526479750779)+(((-3.11526479750779)*(py)*(sj15)))+(((-3.11526479750779)*(cj15)*(px)))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(py)*(sj15)))+(((-3.11526479750779)*(cj15)*(px)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[3];
IKReal x361=IKcos(j18);
IKReal x362=((py)*(sj15));
IKReal x363=((cj15)*(px));
evalcond[0]=((0.253041000000000)+(((0.256800000000000)*(x361)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x363)))+(((0.200000000000000)*(x362))));
evalcond[1]=((-0.400000000000000)+(((-0.321000000000000)*(x361)))+(pz));
evalcond[2]=((0.100000000000000)+(((-1.00000000000000)*(x362)))+(((-1.00000000000000)*(x363)))+(((-0.321000000000000)*(IKsin(j18)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x364=((cj15)*(px));
IKReal x365=((py)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j17)), 6.28318530717959)));
evalcond[1]=((0.100000000000000)+(((-1.00000000000000)*(x364)))+(((-1.00000000000000)*(x365))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x365)))+(((0.200000000000000)*(x364))));
evalcond[3]=((-0.100000000000000)+(x364)+(x365));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py)))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[3];
IKReal x366=IKcos(j18);
evalcond[0]=((((px)*(sj15)))+(((-1.00000000000000)*(cj15)*(py)))+(((0.321000000000000)*(IKsin(j18)))));
evalcond[1]=((0.253041000000000)+(((0.256800000000000)*(x366)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((-0.400000000000000)+(((-0.321000000000000)*(x366)))+(pz));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x367=((py)*(sj15));
IKReal x368=((cj15)*(px));
IKReal x369=((0.100000000000000)+(((-1.00000000000000)*(x368)))+(((-1.00000000000000)*(x367))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j17)), 6.28318530717959)));
evalcond[1]=x369;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x368)))+(((0.200000000000000)*(x367))));
evalcond[3]=x369;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py)))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[3];
IKReal x370=IKcos(j18);
evalcond[0]=((((px)*(sj15)))+(((-1.00000000000000)*(cj15)*(py)))+(((-0.321000000000000)*(IKsin(j18)))));
evalcond[1]=((0.253041000000000)+(((0.256800000000000)*(x370)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((-0.400000000000000)+(((-0.321000000000000)*(x370)))+(pz));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))))+IKsqr(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))), ((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x371=IKcos(j18);
IKReal x372=IKsin(j18);
IKReal x373=((px)*(sj15));
IKReal x374=((1.00000000000000)*(cj15));
IKReal x375=((0.321000000000000)*(x372));
IKReal x376=((1.00000000000000)*(py)*(sj15));
evalcond[0]=((((sj17)*(x375)))+(x373)+(((-1.00000000000000)*(py)*(x374))));
evalcond[1]=((0.253041000000000)+(((0.256800000000000)*(x371)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((-0.400000000000000)+(((-0.321000000000000)*(x371)))+(pz));
evalcond[3]=((0.100000000000000)+(((cj17)*(x375)))+(((-1.00000000000000)*(x376)))+(((-1.00000000000000)*(px)*(x374))));
evalcond[4]=((((sj17)*(x373)))+(((-1.00000000000000)*(cj17)*(x376)))+(((-1.00000000000000)*(cj17)*(px)*(x374)))+(x375)+(((-1.00000000000000)*(py)*(sj17)*(x374)))+(((0.100000000000000)*(cj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((-100.000000000000)+(((1000.00000000000)*(py)*(sj15)))+(((1000.00000000000)*(cj15)*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((-100.000000000000)+(((1000.00000000000)*(py)*(sj15)))+(((1000.00000000000)*(cj15)*(px)))))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((-100.000000000000)+(((1000.00000000000)*(py)*(sj15)))+(((1000.00000000000)*(cj15)*(px)))))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x377=IKcos(j18);
IKReal x378=IKsin(j18);
IKReal x379=((px)*(sj15));
IKReal x380=((1.00000000000000)*(cj15));
IKReal x381=((0.321000000000000)*(x378));
IKReal x382=((1.00000000000000)*(py)*(sj15));
evalcond[0]=((((-1.00000000000000)*(py)*(x380)))+(x379)+(((sj17)*(x381))));
evalcond[1]=((0.253041000000000)+(((0.256800000000000)*(x377)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((-0.400000000000000)+(((-0.321000000000000)*(x377)))+(pz));
evalcond[3]=((0.100000000000000)+(((-1.00000000000000)*(px)*(x380)))+(((-1.00000000000000)*(x382)))+(((cj17)*(x381))));
evalcond[4]=((((sj17)*(x379)))+(((-1.00000000000000)*(cj17)*(px)*(x380)))+(x381)+(((-1.00000000000000)*(py)*(sj17)*(x380)))+(((-1.00000000000000)*(cj17)*(x382)))+(((0.100000000000000)*(cj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((3.11526479750779)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))))+IKsqr(((-1.24610591900312)+(((3.11526479750779)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x383=IKcos(j18);
IKReal x384=IKsin(j18);
IKReal x385=((px)*(sj15));
IKReal x386=((1.00000000000000)*(cj15));
IKReal x387=((0.321000000000000)*(x384));
IKReal x388=((1.00000000000000)*(py)*(sj15));
evalcond[0]=((((-1.00000000000000)*(py)*(x386)))+(x385)+(((sj17)*(x387))));
evalcond[1]=((0.253041000000000)+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((0.256800000000000)*(x383))));
evalcond[2]=((-0.400000000000000)+(pz)+(((-0.321000000000000)*(x383))));
evalcond[3]=((0.100000000000000)+(((-1.00000000000000)*(px)*(x386)))+(((-1.00000000000000)*(x388)))+(((cj17)*(x387))));
evalcond[4]=((((-1.00000000000000)*(cj17)*(px)*(x386)))+(x387)+(((-1.00000000000000)*(py)*(sj17)*(x386)))+(((-1.00000000000000)*(cj17)*(x388)))+(((sj17)*(x385)))+(((0.100000000000000)*(cj17))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x389=((1.00000000000000)*(sj16));
IKReal x390=((cj15)*(px));
IKReal x391=((py)*(sj15));
IKReal x392=((0.800000000000000)*(cj16));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j17)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.200000000000000)*(x390)))+(((0.200000000000000)*(x391)))+(((x391)*(x392)))+(((-1.00000000000000)*(pp)))+(((-0.800000000000000)*(pz)*(sj16)))+(((-0.0800000000000000)*(cj16)))+(((x390)*(x392))));
evalcond[2]=((((-1.00000000000000)*(x389)*(x391)))+(((-1.00000000000000)*(x389)*(x390)))+(((-1.00000000000000)*(cj16)*(pz)))+(((0.100000000000000)*(sj16))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py)))))+IKsqr(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-3.11526479750779)*(px)*(sj15)))+(((3.11526479750779)*(cj15)*(py)))), ((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x393=IKcos(j18);
IKReal x394=((py)*(sj15));
IKReal x395=((1.00000000000000)*(cj16));
IKReal x396=((1.00000000000000)*(cj15));
IKReal x397=((cj15)*(px));
IKReal x398=((0.321000000000000)*(x393));
evalcond[0]=((((px)*(sj15)))+(((-1.00000000000000)*(py)*(x396)))+(((0.321000000000000)*(IKsin(j18)))));
evalcond[1]=((0.253041000000000)+(((0.200000000000000)*(x394)))+(((0.200000000000000)*(x397)))+(((0.256800000000000)*(x393)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((0.400000000000000)*(sj16)))+(pz)+(((sj16)*(x398))));
evalcond[3]=((0.400000000000000)+(((-1.00000000000000)*(x394)*(x395)))+(((-1.00000000000000)*(x395)*(x397)))+(((pz)*(sj16)))+(x398)+(((0.100000000000000)*(cj16))));
evalcond[4]=((0.100000000000000)+(((-1.00000000000000)*(x394)))+(((cj16)*(x398)))+(((0.400000000000000)*(cj16)))+(((-1.00000000000000)*(px)*(x396))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x399=((cj15)*(px));
IKReal x400=((0.800000000000000)*(cj16));
IKReal x401=((py)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j17)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.200000000000000)*(x399)))+(((-1.00000000000000)*(pp)))+(((-0.800000000000000)*(pz)*(sj16)))+(((-0.0800000000000000)*(cj16)))+(((0.200000000000000)*(x401)))+(((x399)*(x400)))+(((x400)*(x401))));
evalcond[2]=((((-0.100000000000000)*(sj16)))+(((cj16)*(pz)))+(((sj16)*(x401)))+(((sj16)*(x399))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py)))))+IKsqr(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((3.11526479750779)*(px)*(sj15)))+(((-3.11526479750779)*(cj15)*(py)))), ((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x402=IKcos(j18);
IKReal x403=((py)*(sj15));
IKReal x404=((1.00000000000000)*(cj16));
IKReal x405=((1.00000000000000)*(cj15));
IKReal x406=((cj15)*(px));
IKReal x407=((0.321000000000000)*(x402));
evalcond[0]=((((px)*(sj15)))+(((-0.321000000000000)*(IKsin(j18))))+(((-1.00000000000000)*(py)*(x405))));
evalcond[1]=((0.253041000000000)+(((0.256800000000000)*(x402)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x403)))+(((0.200000000000000)*(x406))));
evalcond[2]=((((0.400000000000000)*(sj16)))+(pz)+(((sj16)*(x407))));
evalcond[3]=((0.400000000000000)+(((pz)*(sj16)))+(((-1.00000000000000)*(x403)*(x404)))+(x407)+(((-1.00000000000000)*(x404)*(x406)))+(((0.100000000000000)*(cj16))));
evalcond[4]=((0.100000000000000)+(((-1.00000000000000)*(px)*(x405)))+(((cj16)*(x407)))+(((0.400000000000000)*(cj16)))+(((-1.00000000000000)*(x403))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x408=((py)*(sj15));
IKReal x409=((0.800000000000000)*(cj16));
IKReal x410=((cj15)*(px));
IKReal x411=((((px)*(sj15)))+(((-1.00000000000000)*(cj15)*(py))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x411;
evalcond[2]=((-0.0669590000000000)+(((x409)*(x410)))+(((x408)*(x409)))+(((-1.00000000000000)*(pp)))+(((-0.800000000000000)*(pz)*(sj16)))+(((-0.0800000000000000)*(cj16)))+(((0.200000000000000)*(x410)))+(((0.200000000000000)*(x408))));
evalcond[3]=x411;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IKReal x412=((3.11526479750779)*(sj16));
IKReal x413=((py)*(sj15));
IKReal x414=((cj15)*(px));
if( IKabs(((((-1.00000000000000)*(x412)*(x413)))+(((-1.00000000000000)*(x412)*(x414)))+(((0.311526479750779)*(sj16)))+(((-3.11526479750779)*(cj16)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(x414)))+(((-0.778816199376947)*(x413))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(x412)*(x413)))+(((-1.00000000000000)*(x412)*(x414)))+(((0.311526479750779)*(sj16)))+(((-3.11526479750779)*(cj16)*(pz)))))+IKsqr(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(x414)))+(((-0.778816199376947)*(x413)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((-1.00000000000000)*(x412)*(x413)))+(((-1.00000000000000)*(x412)*(x414)))+(((0.311526479750779)*(sj16)))+(((-3.11526479750779)*(cj16)*(pz)))), ((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(x414)))+(((-0.778816199376947)*(x413)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x415=IKcos(j18);
IKReal x416=IKsin(j18);
IKReal x417=((py)*(sj15));
IKReal x418=((cj15)*(px));
IKReal x419=((1.00000000000000)*(cj16));
IKReal x420=((0.321000000000000)*(x415));
IKReal x421=((0.321000000000000)*(x416));
evalcond[0]=((0.253041000000000)+(((0.256800000000000)*(x415)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x418)))+(((0.200000000000000)*(x417))));
evalcond[1]=((((cj16)*(x421)))+(((0.400000000000000)*(sj16)))+(pz)+(((sj16)*(x420))));
evalcond[2]=((0.400000000000000)+(((-1.00000000000000)*(x417)*(x419)))+(((-1.00000000000000)*(x418)*(x419)))+(((pz)*(sj16)))+(x420)+(((0.100000000000000)*(cj16))));
evalcond[3]=((0.100000000000000)+(((cj16)*(x420)))+(((-1.00000000000000)*(sj16)*(x421)))+(((0.400000000000000)*(cj16)))+(((-1.00000000000000)*(x417)))+(((-1.00000000000000)*(x418))));
evalcond[4]=((((-0.100000000000000)*(sj16)))+(x421)+(((cj16)*(pz)))+(((sj16)*(x417)))+(((sj16)*(x418))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x422=((py)*(sj15));
IKReal x423=((cj15)*(py));
IKReal x424=((0.800000000000000)*(cj16));
IKReal x425=((cj15)*(px));
IKReal x426=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x423)))+(x426));
evalcond[2]=((-0.0669590000000000)+(((x424)*(x425)))+(((0.200000000000000)*(x422)))+(((0.200000000000000)*(x425)))+(((-1.00000000000000)*(pp)))+(((-0.800000000000000)*(pz)*(sj16)))+(((-0.0800000000000000)*(cj16)))+(((x422)*(x424))));
evalcond[3]=((((-1.00000000000000)*(x426)))+(x423));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst46;
gconst46=IKsign(((((321.000000000000)*((cj16)*(cj16))))+(((321.000000000000)*((sj16)*(sj16))))));
dummyeval[0]=(((sj16)*(sj16))+((cj16)*(cj16)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IKReal x427=((cj16)*(sj16));
IKReal x428=((py)*(sj15));
IKReal x429=((3.11526479750779)*(cj16));
IKReal x430=((1000.00000000000)*(pz));
IKReal x431=((cj15)*(px));
if( IKabs(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((-100.000000000000)*(x427)))+(((1000.00000000000)*(x427)*(x431)))+(((1000.00000000000)*(x427)*(x428)))+(x430)+(((-1.00000000000000)*(x430)*((sj16)*(sj16)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((x429)*(x431)))+(((-3.11526479750779)*(pz)*(sj16)))+(((x428)*(x429)))+(((-0.311526479750779)*(cj16))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((-100.000000000000)*(x427)))+(((1000.00000000000)*(x427)*(x431)))+(((1000.00000000000)*(x427)*(x428)))+(x430)+(((-1.00000000000000)*(x430)*((sj16)*(sj16))))))))+IKsqr(((-1.24610591900312)+(((x429)*(x431)))+(((-3.11526479750779)*(pz)*(sj16)))+(((x428)*(x429)))+(((-0.311526479750779)*(cj16)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((-100.000000000000)*(x427)))+(((1000.00000000000)*(x427)*(x431)))+(((1000.00000000000)*(x427)*(x428)))+(x430)+(((-1.00000000000000)*(x430)*((sj16)*(sj16))))))), ((-1.24610591900312)+(((x429)*(x431)))+(((-3.11526479750779)*(pz)*(sj16)))+(((x428)*(x429)))+(((-0.311526479750779)*(cj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x432=IKcos(j18);
IKReal x433=IKsin(j18);
IKReal x434=((1.00000000000000)*(cj16));
IKReal x435=((py)*(sj15));
IKReal x436=((cj15)*(px));
IKReal x437=((0.321000000000000)*(x432));
IKReal x438=((1.00000000000000)*(x436));
IKReal x439=((0.321000000000000)*(x433));
evalcond[0]=((0.253041000000000)+(((0.256800000000000)*(x432)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x436)))+(((0.200000000000000)*(x435))));
evalcond[1]=((((0.400000000000000)*(sj16)))+(((sj16)*(x437)))+(pz)+(((-1.00000000000000)*(cj16)*(x439))));
evalcond[2]=((0.400000000000000)+(((-1.00000000000000)*(x434)*(x435)))+(((-1.00000000000000)*(x434)*(x436)))+(((pz)*(sj16)))+(x437)+(((0.100000000000000)*(cj16))));
evalcond[3]=((0.100000000000000)+(((-1.00000000000000)*(x438)))+(((-1.00000000000000)*(x435)))+(((cj16)*(x437)))+(((sj16)*(x439)))+(((0.400000000000000)*(cj16))));
evalcond[4]=((((-1.00000000000000)*(sj16)*(x435)))+(x439)+(((-1.00000000000000)*(pz)*(x434)))+(((-1.00000000000000)*(sj16)*(x438)))+(((0.100000000000000)*(sj16))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IKReal x440=((250.000000000000)*(sj16));
IKReal x441=((py)*(sj15));
IKReal x442=((cj15)*(px));
if( IKabs(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((83.6987500000000)*(sj16)))+(((1250.00000000000)*(pp)*(sj16)))+(((1000.00000000000)*(pz)))+(((-1.00000000000000)*(x440)*(x441)))+(((-1.00000000000000)*(x440)*(x442))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(x441)))+(((-0.778816199376947)*(x442))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((83.6987500000000)*(sj16)))+(((1250.00000000000)*(pp)*(sj16)))+(((1000.00000000000)*(pz)))+(((-1.00000000000000)*(x440)*(x441)))+(((-1.00000000000000)*(x440)*(x442)))))))+IKsqr(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(x441)))+(((-0.778816199376947)*(x442)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((83.6987500000000)*(sj16)))+(((1250.00000000000)*(pp)*(sj16)))+(((1000.00000000000)*(pz)))+(((-1.00000000000000)*(x440)*(x441)))+(((-1.00000000000000)*(x440)*(x442)))))), ((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(x441)))+(((-0.778816199376947)*(x442)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x443=IKcos(j18);
IKReal x444=IKsin(j18);
IKReal x445=((1.00000000000000)*(cj16));
IKReal x446=((py)*(sj15));
IKReal x447=((cj15)*(px));
IKReal x448=((0.321000000000000)*(x443));
IKReal x449=((1.00000000000000)*(x447));
IKReal x450=((0.321000000000000)*(x444));
evalcond[0]=((0.253041000000000)+(((0.256800000000000)*(x443)))+(((0.200000000000000)*(x446)))+(((0.200000000000000)*(x447)))+(((-1.00000000000000)*(pp))));
evalcond[1]=((((0.400000000000000)*(sj16)))+(((-1.00000000000000)*(cj16)*(x450)))+(pz)+(((sj16)*(x448))));
evalcond[2]=((0.400000000000000)+(((-1.00000000000000)*(x445)*(x446)))+(((-1.00000000000000)*(x445)*(x447)))+(((pz)*(sj16)))+(x448)+(((0.100000000000000)*(cj16))));
evalcond[3]=((0.100000000000000)+(((-1.00000000000000)*(x449)))+(((-1.00000000000000)*(x446)))+(((cj16)*(x448)))+(((sj16)*(x450)))+(((0.400000000000000)*(cj16))));
evalcond[4]=((((-1.00000000000000)*(sj16)*(x446)))+(x450)+(((-1.00000000000000)*(pz)*(x445)))+(((0.100000000000000)*(sj16)))+(((-1.00000000000000)*(sj16)*(x449))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IKReal x451=((1000.00000000000)*(cj16));
IKReal x452=((1000.00000000000)*(sj16));
IKReal x453=((py)*(sj15));
IKReal x454=((cj15)*(px));
if( IKabs(((gconst46)*(((((x452)*(x453)))+(((x452)*(x454)))+(((pz)*(x451)))+(((-100.000000000000)*(sj16))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((-100.000000000000)*(cj16)))+(((-400.000000000000)*((sj16)*(sj16))))+(((-400.000000000000)*((cj16)*(cj16))))+(((-1.00000000000000)*(pz)*(x452)))+(((x451)*(x453)))+(((x451)*(x454))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j18array[0]=IKatan2(((gconst46)*(((((x452)*(x453)))+(((x452)*(x454)))+(((pz)*(x451)))+(((-100.000000000000)*(sj16)))))), ((gconst46)*(((((-100.000000000000)*(cj16)))+(((-400.000000000000)*((sj16)*(sj16))))+(((-400.000000000000)*((cj16)*(cj16))))+(((-1.00000000000000)*(pz)*(x452)))+(((x451)*(x453)))+(((x451)*(x454)))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[5];
IKReal x455=IKcos(j18);
IKReal x456=IKsin(j18);
IKReal x457=((1.00000000000000)*(cj16));
IKReal x458=((py)*(sj15));
IKReal x459=((cj15)*(px));
IKReal x460=((0.321000000000000)*(x455));
IKReal x461=((1.00000000000000)*(x459));
IKReal x462=((0.321000000000000)*(x456));
evalcond[0]=((0.253041000000000)+(((0.200000000000000)*(x458)))+(((0.200000000000000)*(x459)))+(((-1.00000000000000)*(pp)))+(((0.256800000000000)*(x455))));
evalcond[1]=((((0.400000000000000)*(sj16)))+(((sj16)*(x460)))+(((-1.00000000000000)*(cj16)*(x462)))+(pz));
evalcond[2]=((0.400000000000000)+(((pz)*(sj16)))+(x460)+(((-1.00000000000000)*(x457)*(x459)))+(((-1.00000000000000)*(x457)*(x458)))+(((0.100000000000000)*(cj16))));
evalcond[3]=((0.100000000000000)+(((-1.00000000000000)*(x458)))+(((-1.00000000000000)*(x461)))+(((sj16)*(x462)))+(((0.400000000000000)*(cj16)))+(((cj16)*(x460))));
evalcond[4]=((((-1.00000000000000)*(pz)*(x457)))+(((-1.00000000000000)*(sj16)*(x458)))+(x462)+(((0.100000000000000)*(sj16)))+(((-1.00000000000000)*(sj16)*(x461))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IKReal x463=((250.000000000000)*(sj16));
IKReal x464=((py)*(sj15));
IKReal x465=((cj15)*(px));
if( IKabs(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(pz)))+(((x463)*(x464)))+(((x463)*(x465)))+(((-1250.00000000000)*(pp)*(sj16)))+(((-83.6987500000000)*(sj16))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(x465)))+(((-0.778816199376947)*(x464))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(pz)))+(((x463)*(x464)))+(((x463)*(x465)))+(((-1250.00000000000)*(pp)*(sj16)))+(((-83.6987500000000)*(sj16)))))))+IKsqr(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(x465)))+(((-0.778816199376947)*(x464)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(pz)))+(((x463)*(x464)))+(((x463)*(x465)))+(((-1250.00000000000)*(pp)*(sj16)))+(((-83.6987500000000)*(sj16)))))), ((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(x465)))+(((-0.778816199376947)*(x464)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[6];
IKReal x466=IKcos(j18);
IKReal x467=IKsin(j18);
IKReal x468=((cj17)*(sj16));
IKReal x469=((cj16)*(cj17));
IKReal x470=((cj15)*(px));
IKReal x471=((1.00000000000000)*(cj16));
IKReal x472=((py)*(sj15));
IKReal x473=((px)*(sj15));
IKReal x474=((0.321000000000000)*(x467));
IKReal x475=((0.321000000000000)*(x466));
IKReal x476=((1.00000000000000)*(cj15)*(py));
evalcond[0]=((((-1.00000000000000)*(x476)))+(((sj17)*(x474)))+(x473));
evalcond[1]=((0.253041000000000)+(((0.200000000000000)*(x470)))+(((0.200000000000000)*(x472)))+(((-1.00000000000000)*(pp)))+(((0.256800000000000)*(x466))));
evalcond[2]=((((x469)*(x474)))+(((sj16)*(x475)))+(((0.400000000000000)*(sj16)))+(pz));
evalcond[3]=((0.400000000000000)+(((pz)*(sj16)))+(x475)+(((-1.00000000000000)*(x471)*(x472)))+(((-1.00000000000000)*(x470)*(x471)))+(((0.100000000000000)*(cj16))));
evalcond[4]=((0.100000000000000)+(((-1.00000000000000)*(x468)*(x474)))+(((cj16)*(x475)))+(((-1.00000000000000)*(x470)))+(((-1.00000000000000)*(x472)))+(((0.400000000000000)*(cj16))));
evalcond[5]=((((-1.00000000000000)*(sj17)*(x476)))+(((-0.100000000000000)*(x468)))+(((sj17)*(x473)))+(x474)+(((pz)*(x469)))+(((x468)*(x472)))+(((x468)*(x470))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IKReal x477=((3.11526479750779)*(cj16));
if( IKabs(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.24610591900312)+(((-3.11526479750779)*(pz)*(sj16)))+(((cj15)*(px)*(x477)))+(((py)*(sj15)*(x477)))+(((-0.311526479750779)*(cj16))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))))+IKsqr(((-1.24610591900312)+(((-3.11526479750779)*(pz)*(sj16)))+(((cj15)*(px)*(x477)))+(((py)*(sj15)*(x477)))+(((-0.311526479750779)*(cj16)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)*(sj16)))+(((cj15)*(px)*(x477)))+(((py)*(sj15)*(x477)))+(((-0.311526479750779)*(cj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[6];
IKReal x478=IKcos(j18);
IKReal x479=IKsin(j18);
IKReal x480=((cj17)*(sj16));
IKReal x481=((cj16)*(cj17));
IKReal x482=((cj15)*(px));
IKReal x483=((1.00000000000000)*(cj16));
IKReal x484=((py)*(sj15));
IKReal x485=((px)*(sj15));
IKReal x486=((0.321000000000000)*(x479));
IKReal x487=((0.321000000000000)*(x478));
IKReal x488=((1.00000000000000)*(cj15)*(py));
evalcond[0]=((((-1.00000000000000)*(x488)))+(x485)+(((sj17)*(x486))));
evalcond[1]=((0.253041000000000)+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(x482)))+(((0.200000000000000)*(x484)))+(((0.256800000000000)*(x478))));
evalcond[2]=((((0.400000000000000)*(sj16)))+(((x481)*(x486)))+(pz)+(((sj16)*(x487))));
evalcond[3]=((0.400000000000000)+(((-1.00000000000000)*(x483)*(x484)))+(((pz)*(sj16)))+(x487)+(((-1.00000000000000)*(x482)*(x483)))+(((0.100000000000000)*(cj16))));
evalcond[4]=((0.100000000000000)+(((-1.00000000000000)*(x482)))+(((-1.00000000000000)*(x484)))+(((cj16)*(x487)))+(((0.400000000000000)*(cj16)))+(((-1.00000000000000)*(x480)*(x486))));
evalcond[5]=((((pz)*(x481)))+(((-0.100000000000000)*(x480)))+(((-1.00000000000000)*(sj17)*(x488)))+(x486)+(((x480)*(x484)))+(((x480)*(x482)))+(((sj17)*(x485))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))))+IKsqr(((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj15)))+(((1000.00000000000)*(cj15)*(py)))))), ((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))+(((-0.778816199376947)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IKReal evalcond[6];
IKReal x489=IKcos(j18);
IKReal x490=IKsin(j18);
IKReal x491=((cj17)*(sj16));
IKReal x492=((cj16)*(cj17));
IKReal x493=((cj15)*(px));
IKReal x494=((1.00000000000000)*(cj16));
IKReal x495=((py)*(sj15));
IKReal x496=((px)*(sj15));
IKReal x497=((0.321000000000000)*(x490));
IKReal x498=((0.321000000000000)*(x489));
IKReal x499=((1.00000000000000)*(cj15)*(py));
evalcond[0]=((((-1.00000000000000)*(x499)))+(x496)+(((sj17)*(x497))));
evalcond[1]=((0.253041000000000)+(((0.200000000000000)*(x493)))+(((0.200000000000000)*(x495)))+(((-1.00000000000000)*(pp)))+(((0.256800000000000)*(x489))));
evalcond[2]=((((0.400000000000000)*(sj16)))+(pz)+(((sj16)*(x498)))+(((x492)*(x497))));
evalcond[3]=((0.400000000000000)+(((-1.00000000000000)*(x494)*(x495)))+(((-1.00000000000000)*(x493)*(x494)))+(((pz)*(sj16)))+(x498)+(((0.100000000000000)*(cj16))));
evalcond[4]=((0.100000000000000)+(((-1.00000000000000)*(x491)*(x497)))+(((-1.00000000000000)*(x495)))+(((-1.00000000000000)*(x493)))+(((0.400000000000000)*(cj16)))+(((cj16)*(x498))));
evalcond[5]=((((pz)*(x492)))+(((x491)*(x493)))+(((x491)*(x495)))+(((-1.00000000000000)*(sj17)*(x499)))+(((-0.100000000000000)*(x491)))+(x497)+(((sj17)*(x496))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x154=((1.00000000000000)*(cj17));
IKReal x155=((cj18)*(sj16));
IKReal x156=((cj16)*(sj17));
IKReal x157=((sj16)*(sj18));
IKReal x158=((sj16)*(sj17));
IKReal x159=((cj16)*(cj18));
IKReal x160=((sj17)*(sj18));
IKReal x161=((cj16)*(sj18));
IKReal x162=((cj18)*(sj15)*(sj17));
IKReal x163=((((-1.00000000000000)*(x154)*(x159)))+(x157));
IKReal x164=((((sj15)*(x158)))+(((cj15)*(cj17))));
IKReal x165=((((cj15)*(x158)))+(((-1.00000000000000)*(sj15)*(x154))));
IKReal x166=((((-1.00000000000000)*(x154)*(x157)))+(x159));
IKReal x167=((cj15)*(x166));
IKReal x168=((((-1.00000000000000)*(x154)*(x155)))+(((-1.00000000000000)*(x161))));
IKReal x169=((((-1.00000000000000)*(x154)*(x161)))+(((-1.00000000000000)*(x155))));
IKReal x170=((cj15)*(x168));
IKReal x171=((((sj15)*(x166)))+(((cj15)*(x160))));
IKReal x172=((((-1.00000000000000)*(sj15)*(x160)))+(x167));
IKReal x173=((((cj15)*(cj18)*(sj17)))+(((sj15)*(x168))));
IKReal x174=((x170)+(((-1.00000000000000)*(x162))));
new_r00=((((r00)*(x174)))+(((r20)*(x163)))+(((r10)*(x173))));
new_r01=((((r01)*(x174)))+(((r21)*(x163)))+(((r11)*(x173))));
new_r02=((((r22)*(x163)))+(((r02)*(((x170)+(((-1.00000000000000)*(x162)))))))+(((r12)*(x173))));
new_r10=((((r00)*(x165)))+(((r20)*(x156)))+(((r10)*(x164))));
new_r11=((((r01)*(x165)))+(((r21)*(x156)))+(((r11)*(x164))));
new_r12=((((r12)*(x164)))+(((r22)*(x156)))+(((r02)*(x165))));
new_r20=((((r20)*(x169)))+(((r10)*(x171)))+(((r00)*(((((-1.00000000000000)*(sj15)*(x160)))+(x167))))));
new_r21=((((r01)*(x172)))+(((r21)*(x169)))+(((r11)*(x171))));
new_r22=((((r22)*(x169)))+(((r12)*(x171)))+(((r02)*(x172))));
{
IKReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
cj20array[0]=new_r22;
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IKReal dummyeval[1];
IKReal gconst50;
gconst50=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst49;
gconst49=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
IKReal x175=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j20)), 6.28318530717959)));
evalcond[1]=x175;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x175;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x176=IKatan2(new_r02, new_r12);
j19array[0]=((-1.00000000000000)*(x176));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.00000000000000)*(x176))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IKReal evalcond[1];
evalcond[0]=((((-1.00000000000000)*(new_r02)*(IKsin(j19))))+(((new_r12)*(IKcos(j19)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((-1.00000000000000)*(cj19)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj19)))+(((cj19)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj19)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj19)))))+IKsqr(((((new_r10)*(sj19)))+(((cj19)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((-1.00000000000000)*(cj19)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj19)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[4];
IKReal x177=IKsin(j21);
IKReal x178=((1.00000000000000)*(sj19));
IKReal x179=((1.00000000000000)*(IKcos(j21)));
evalcond[0]=((((-1.00000000000000)*(x177)))+(((cj19)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(x178))));
evalcond[1]=((((-1.00000000000000)*(x179)))+(((cj19)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(x178))));
evalcond[2]=((x177)+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((((-1.00000000000000)*(x179)))+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[0].indices[0] = _ij15[0];
solution.basesol[0].indices[1] = _ij15[1];
solution.basesol[0].maxsolutions = _nj15;
solution.basesol[1].foffset = j16;
solution.basesol[1].indices[0] = _ij16[0];
solution.basesol[1].indices[1] = _ij16[1];
solution.basesol[1].maxsolutions = _nj16;
solution.basesol[2].foffset = j17;
solution.basesol[2].indices[0] = _ij17[0];
solution.basesol[2].indices[1] = _ij17[1];
solution.basesol[2].maxsolutions = _nj17;
solution.basesol[3].foffset = j18;
solution.basesol[3].indices[0] = _ij18[0];
solution.basesol[3].indices[1] = _ij18[1];
solution.basesol[3].maxsolutions = _nj18;
solution.basesol[4].foffset = j19;
solution.basesol[4].indices[0] = _ij19[0];
solution.basesol[4].indices[1] = _ij19[1];
solution.basesol[4].maxsolutions = _nj19;
solution.basesol[5].foffset = j20;
solution.basesol[5].indices[0] = _ij20[0];
solution.basesol[5].indices[1] = _ij20[1];
solution.basesol[5].maxsolutions = _nj20;
solution.basesol[6].foffset = j21;
solution.basesol[6].indices[0] = _ij21[0];
solution.basesol[6].indices[1] = _ij21[1];
solution.basesol[6].maxsolutions = _nj21;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j20, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x180=IKatan2(new_r02, new_r12);
j19array[0]=((-1.00000000000000)*(x180));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.00000000000000)*(x180))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IKReal evalcond[1];
evalcond[0]=((((-1.00000000000000)*(new_r02)*(IKsin(j19))))+(((new_r12)*(IKcos(j19)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((cj19)*(new_r01)))+(((new_r11)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj19)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))))+IKsqr(((((-1.00000000000000)*(cj19)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj19)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(cj19)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[4];
IKReal x181=IKcos(j21);
IKReal x182=((1.00000000000000)*(sj19));
IKReal x183=((1.00000000000000)*(IKsin(j21)));
evalcond[0]=((((-1.00000000000000)*(x183)))+(((cj19)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(x182))));
evalcond[1]=((((-1.00000000000000)*(x181)))+(((-1.00000000000000)*(new_r01)*(x182)))+(((cj19)*(new_r11))));
evalcond[2]=((((-1.00000000000000)*(x183)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((x181)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[0].indices[0] = _ij15[0];
solution.basesol[0].indices[1] = _ij15[1];
solution.basesol[0].maxsolutions = _nj15;
solution.basesol[1].foffset = j16;
solution.basesol[1].indices[0] = _ij16[0];
solution.basesol[1].indices[1] = _ij16[1];
solution.basesol[1].maxsolutions = _nj16;
solution.basesol[2].foffset = j17;
solution.basesol[2].indices[0] = _ij17[0];
solution.basesol[2].indices[1] = _ij17[1];
solution.basesol[2].maxsolutions = _nj17;
solution.basesol[3].foffset = j18;
solution.basesol[3].indices[0] = _ij18[0];
solution.basesol[3].indices[1] = _ij18[1];
solution.basesol[3].maxsolutions = _nj18;
solution.basesol[4].foffset = j19;
solution.basesol[4].indices[0] = _ij19[0];
solution.basesol[4].indices[1] = _ij19[1];
solution.basesol[4].maxsolutions = _nj19;
solution.basesol[5].foffset = j20;
solution.basesol[5].indices[0] = _ij20[0];
solution.basesol[5].indices[1] = _ij20[1];
solution.basesol[5].maxsolutions = _nj20;
solution.basesol[6].foffset = j21;
solution.basesol[6].indices[0] = _ij21[0];
solution.basesol[6].indices[1] = _ij21[1];
solution.basesol[6].maxsolutions = _nj21;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IKReal x184=((gconst49)*(sj20));
if( IKabs(((new_r12)*(x184))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x184))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((new_r12)*(x184)), ((new_r02)*(x184)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IKReal evalcond[6];
IKReal x185=IKcos(j19);
IKReal x186=IKsin(j19);
IKReal x187=((1.00000000000000)*(sj20));
IKReal x188=((new_r02)*(x185));
IKReal x189=((sj20)*(x185));
IKReal x190=((new_r12)*(x186));
IKReal x191=((sj20)*(x186));
evalcond[0]=((((new_r12)*(x185)))+(((-1.00000000000000)*(new_r02)*(x186))));
evalcond[1]=((((-1.00000000000000)*(x187)))+(x190)+(x188));
evalcond[2]=((((new_r10)*(x191)))+(((new_r00)*(x189)))+(((cj20)*(new_r20))));
evalcond[3]=((((new_r11)*(x191)))+(((new_r01)*(x189)))+(((cj20)*(new_r21))));
evalcond[4]=((-1.00000000000000)+(((sj20)*(x190)))+(((sj20)*(x188)))+(((cj20)*(new_r22))));
evalcond[5]=((((-1.00000000000000)*(new_r22)*(x187)))+(((cj20)*(x188)))+(((cj20)*(x190))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst51;
gconst51=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x192=((-1.00000000000000)+(new_r22));
IKReal x193=((((-1.00000000000000)*(new_r02)*(sj19)))+(((cj19)*(new_r12))));
IKReal x194=((((cj19)*(new_r02)))+(((new_r12)*(sj19))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j20)), 6.28318530717959)));
evalcond[1]=x192;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x193;
evalcond[5]=x193;
evalcond[6]=x194;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x192;
evalcond[10]=x194;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((-1.00000000000000)*(cj19)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj19)))+(((cj19)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj19)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj19)))))+IKsqr(((((new_r10)*(sj19)))+(((cj19)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((-1.00000000000000)*(cj19)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj19)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[4];
IKReal x195=IKsin(j21);
IKReal x196=((1.00000000000000)*(sj19));
IKReal x197=((1.00000000000000)*(IKcos(j21)));
evalcond[0]=((((-1.00000000000000)*(x195)))+(((-1.00000000000000)*(new_r00)*(x196)))+(((cj19)*(new_r10))));
evalcond[1]=((((-1.00000000000000)*(x197)))+(((-1.00000000000000)*(new_r01)*(x196)))+(((cj19)*(new_r11))));
evalcond[2]=((x195)+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((((-1.00000000000000)*(x197)))+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[0].indices[0] = _ij15[0];
solution.basesol[0].indices[1] = _ij15[1];
solution.basesol[0].maxsolutions = _nj15;
solution.basesol[1].foffset = j16;
solution.basesol[1].indices[0] = _ij16[0];
solution.basesol[1].indices[1] = _ij16[1];
solution.basesol[1].maxsolutions = _nj16;
solution.basesol[2].foffset = j17;
solution.basesol[2].indices[0] = _ij17[0];
solution.basesol[2].indices[1] = _ij17[1];
solution.basesol[2].maxsolutions = _nj17;
solution.basesol[3].foffset = j18;
solution.basesol[3].indices[0] = _ij18[0];
solution.basesol[3].indices[1] = _ij18[1];
solution.basesol[3].maxsolutions = _nj18;
solution.basesol[4].foffset = j19;
solution.basesol[4].indices[0] = _ij19[0];
solution.basesol[4].indices[1] = _ij19[1];
solution.basesol[4].maxsolutions = _nj19;
solution.basesol[5].foffset = j20;
solution.basesol[5].indices[0] = _ij20[0];
solution.basesol[5].indices[1] = _ij20[1];
solution.basesol[5].maxsolutions = _nj20;
solution.basesol[6].foffset = j21;
solution.basesol[6].indices[0] = _ij21[0];
solution.basesol[6].indices[1] = _ij21[1];
solution.basesol[6].maxsolutions = _nj21;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x198=((new_r12)*(sj19));
IKReal x199=((1.00000000000000)*(new_r02));
IKReal x200=((((-1.00000000000000)*(sj19)*(x199)))+(((cj19)*(new_r12))));
evalcond[0]=((-3.14159265358979)+(IKfmod(j20, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x200;
evalcond[5]=x200;
evalcond[6]=((x198)+(((cj19)*(new_r02))));
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((((-1.00000000000000)*(cj19)*(x199)))+(((-1.00000000000000)*(x198))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((((cj19)*(new_r01)))+(((new_r11)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj19)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj19))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))))+IKsqr(((((-1.00000000000000)*(cj19)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj19)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(cj19)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[4];
IKReal x201=IKcos(j21);
IKReal x202=((1.00000000000000)*(sj19));
IKReal x203=((1.00000000000000)*(IKsin(j21)));
evalcond[0]=((((-1.00000000000000)*(new_r00)*(x202)))+(((-1.00000000000000)*(x203)))+(((cj19)*(new_r10))));
evalcond[1]=((((cj19)*(new_r11)))+(((-1.00000000000000)*(x201)))+(((-1.00000000000000)*(new_r01)*(x202))));
evalcond[2]=((((-1.00000000000000)*(x203)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((x201)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[0].indices[0] = _ij15[0];
solution.basesol[0].indices[1] = _ij15[1];
solution.basesol[0].maxsolutions = _nj15;
solution.basesol[1].foffset = j16;
solution.basesol[1].indices[0] = _ij16[0];
solution.basesol[1].indices[1] = _ij16[1];
solution.basesol[1].maxsolutions = _nj16;
solution.basesol[2].foffset = j17;
solution.basesol[2].indices[0] = _ij17[0];
solution.basesol[2].indices[1] = _ij17[1];
solution.basesol[2].maxsolutions = _nj17;
solution.basesol[3].foffset = j18;
solution.basesol[3].indices[0] = _ij18[0];
solution.basesol[3].indices[1] = _ij18[1];
solution.basesol[3].maxsolutions = _nj18;
solution.basesol[4].foffset = j19;
solution.basesol[4].indices[0] = _ij19[0];
solution.basesol[4].indices[1] = _ij19[1];
solution.basesol[4].maxsolutions = _nj19;
solution.basesol[5].foffset = j20;
solution.basesol[5].indices[0] = _ij20[0];
solution.basesol[5].indices[1] = _ij20[1];
solution.basesol[5].maxsolutions = _nj20;
solution.basesol[6].foffset = j21;
solution.basesol[6].indices[0] = _ij21[0];
solution.basesol[6].indices[1] = _ij21[1];
solution.basesol[6].maxsolutions = _nj21;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((gconst51)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst51)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst51)*(new_r21)), ((-1.00000000000000)*(gconst51)*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[8];
IKReal x204=IKsin(j21);
IKReal x205=IKcos(j21);
IKReal x206=((1.00000000000000)*(sj20));
IKReal x207=((1.00000000000000)*(sj19));
IKReal x208=((cj19)*(new_r00));
IKReal x209=((new_r10)*(sj19));
IKReal x210=((new_r11)*(sj19));
IKReal x211=((cj19)*(new_r01));
IKReal x212=((1.00000000000000)*(x205));
evalcond[0]=((((sj20)*(x205)))+(new_r20));
evalcond[1]=((((-1.00000000000000)*(x204)*(x206)))+(new_r21));
evalcond[2]=((((-1.00000000000000)*(new_r00)*(x207)))+(((cj19)*(new_r10)))+(((-1.00000000000000)*(x204))));
evalcond[3]=((((cj19)*(new_r11)))+(((-1.00000000000000)*(x212)))+(((-1.00000000000000)*(new_r01)*(x207))));
evalcond[4]=((x210)+(x211)+(((cj20)*(x204))));
evalcond[5]=((((-1.00000000000000)*(cj20)*(x212)))+(x209)+(x208));
evalcond[6]=((((-1.00000000000000)*(new_r21)*(x206)))+(((cj20)*(x211)))+(((cj20)*(x210)))+(x204));
evalcond[7]=((((-1.00000000000000)*(new_r20)*(x206)))+(((cj20)*(x208)))+(((cj20)*(x209)))+(((-1.00000000000000)*(x212))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[0].indices[0] = _ij15[0];
solution.basesol[0].indices[1] = _ij15[1];
solution.basesol[0].maxsolutions = _nj15;
solution.basesol[1].foffset = j16;
solution.basesol[1].indices[0] = _ij16[0];
solution.basesol[1].indices[1] = _ij16[1];
solution.basesol[1].maxsolutions = _nj16;
solution.basesol[2].foffset = j17;
solution.basesol[2].indices[0] = _ij17[0];
solution.basesol[2].indices[1] = _ij17[1];
solution.basesol[2].maxsolutions = _nj17;
solution.basesol[3].foffset = j18;
solution.basesol[3].indices[0] = _ij18[0];
solution.basesol[3].indices[1] = _ij18[1];
solution.basesol[3].maxsolutions = _nj18;
solution.basesol[4].foffset = j19;
solution.basesol[4].indices[0] = _ij19[0];
solution.basesol[4].indices[1] = _ij19[1];
solution.basesol[4].maxsolutions = _nj19;
solution.basesol[5].foffset = j20;
solution.basesol[5].indices[0] = _ij20[0];
solution.basesol[5].indices[1] = _ij20[1];
solution.basesol[5].maxsolutions = _nj20;
solution.basesol[6].foffset = j21;
solution.basesol[6].indices[0] = _ij21[0];
solution.basesol[6].indices[1] = _ij21[1];
solution.basesol[6].maxsolutions = _nj21;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((gconst50)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst50)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j21array[0]=IKatan2(((gconst50)*(new_r21)), ((-1.00000000000000)*(gconst50)*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IKReal evalcond[2];
evalcond[0]=((((sj20)*(IKcos(j21))))+(new_r20));
evalcond[1]=((((-1.00000000000000)*(sj20)*(IKsin(j21))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst52;
gconst52=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IKReal x213=((gconst52)*(sj20));
if( IKabs(((new_r12)*(x213))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x213))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j19array[0]=IKatan2(((new_r12)*(x213)), ((new_r02)*(x213)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IKReal evalcond[12];
IKReal x214=IKcos(j19);
IKReal x215=IKsin(j19);
IKReal x216=((1.00000000000000)*(cj21));
IKReal x217=((1.00000000000000)*(sj20));
IKReal x218=((new_r11)*(x215));
IKReal x219=((new_r00)*(x214));
IKReal x220=((new_r12)*(x215));
IKReal x221=((new_r01)*(x214));
IKReal x222=((1.00000000000000)*(x215));
IKReal x223=((new_r10)*(x215));
IKReal x224=((new_r02)*(x214));
evalcond[0]=((((-1.00000000000000)*(new_r02)*(x222)))+(((new_r12)*(x214))));
evalcond[1]=((x220)+(x224)+(((-1.00000000000000)*(x217))));
evalcond[2]=((((-1.00000000000000)*(sj21)))+(((new_r10)*(x214)))+(((-1.00000000000000)*(new_r00)*(x222))));
evalcond[3]=((((-1.00000000000000)*(new_r01)*(x222)))+(((-1.00000000000000)*(x216)))+(((new_r11)*(x214))));
evalcond[4]=((x218)+(x221)+(((cj20)*(sj21))));
evalcond[5]=((((-1.00000000000000)*(cj20)*(x216)))+(x219)+(x223));
evalcond[6]=((((sj20)*(x219)))+(((sj20)*(x223)))+(((cj20)*(new_r20))));
evalcond[7]=((((sj20)*(x218)))+(((sj20)*(x221)))+(((cj20)*(new_r21))));
evalcond[8]=((-1.00000000000000)+(((sj20)*(x224)))+(((sj20)*(x220)))+(((cj20)*(new_r22))));
evalcond[9]=((((cj20)*(x224)))+(((cj20)*(x220)))+(((-1.00000000000000)*(new_r22)*(x217))));
evalcond[10]=((((cj20)*(x218)))+(((cj20)*(x221)))+(((-1.00000000000000)*(new_r21)*(x217)))+(sj21));
evalcond[11]=((((cj20)*(x219)))+(((cj20)*(x223)))+(((-1.00000000000000)*(new_r20)*(x217)))+(((-1.00000000000000)*(x216))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[0].indices[0] = _ij15[0];
solution.basesol[0].indices[1] = _ij15[1];
solution.basesol[0].maxsolutions = _nj15;
solution.basesol[1].foffset = j16;
solution.basesol[1].indices[0] = _ij16[0];
solution.basesol[1].indices[1] = _ij16[1];
solution.basesol[1].maxsolutions = _nj16;
solution.basesol[2].foffset = j17;
solution.basesol[2].indices[0] = _ij17[0];
solution.basesol[2].indices[1] = _ij17[1];
solution.basesol[2].maxsolutions = _nj17;
solution.basesol[3].foffset = j18;
solution.basesol[3].indices[0] = _ij18[0];
solution.basesol[3].indices[1] = _ij18[1];
solution.basesol[3].maxsolutions = _nj18;
solution.basesol[4].foffset = j19;
solution.basesol[4].indices[0] = _ij19[0];
solution.basesol[4].indices[1] = _ij19[1];
solution.basesol[4].maxsolutions = _nj19;
solution.basesol[5].foffset = j20;
solution.basesol[5].indices[0] = _ij20[0];
solution.basesol[5].indices[1] = _ij20[1];
solution.basesol[5].maxsolutions = _nj20;
solution.basesol[6].foffset = j21;
solution.basesol[6].indices[0] = _ij21[0];
solution.basesol[6].indices[1] = _ij21[1];
solution.basesol[6].maxsolutions = _nj21;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots8(IKReal rawcoeffs[8+1], IKReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    const IKReal tolsqrt = sqrt(std::numeric_limits<IKReal>::epsilon());
    complex<IKReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[8];
    IKReal err[8];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IKReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "c45a6ca7742b52feb0b51dbc6c01064f"; }

IKFAST_API const char* getIKFastVersion() { return "59"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "ikbase.h"
namespace IKFAST_NAMESPACE {
#ifdef RAVE_REGISTER_BOOST
#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()
BOOST_TYPEOF_REGISTER_TYPE(IKSolution)
#endif
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, const std::vector<dReal>& vfreeinc) {
    std::vector<int> vfree(getNumFreeParameters());
    for(size_t i = 0; i < vfree.size(); ++i) {
        vfree[i] = getFreeParameters()[i];
    }
    return IkSolverBasePtr(new IkFastSolver<IKReal,IKSolution>(ik,vfree,vfreeinc,getNumJoints(),static_cast<IkParameterizationType>(getIKType()), boost::shared_ptr<void>(), getKinematicsHash(), penv));
}
} // end namespace
