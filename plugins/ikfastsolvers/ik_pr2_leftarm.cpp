#define IKFAST_NAMESPACE ik_pr2_leftarm
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 65 generated on 2013-07-18 15:11:39.234468
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==65);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKcos(j[3]);
x8=IKcos(j[1]);
x9=IKsin(j[3]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((IkReal(1.00000000000000))*(x12));
x15=((IkReal(0.180000000000000))*(x7));
x16=((IkReal(0.180000000000000))*(x5));
x17=((IkReal(0.321000000000000))*(x3));
x18=((IkReal(1.00000000000000))*(x1));
x19=((IkReal(0.180000000000000))*(x9));
x20=((IkReal(1.00000000000000))*(x13));
x21=((IkReal(1.00000000000000))*(x9));
x22=((IkReal(0.180000000000000))*(x6));
x23=((IkReal(1.00000000000000))*(x3));
x24=((x8)*(x9));
x25=((x0)*(x8));
x26=((x0)*(x3));
x27=((x0)*(x2));
x28=((x4)*(x7));
x29=((IkReal(-1.00000000000000))*(x7));
x30=((x1)*(x4));
x31=((x1)*(x8));
x32=((x2)*(x8));
x33=((x31)*(x7));
x34=((x21)*(x25));
x35=((x18)*(x24));
x36=((x23)*(x7)*(x8));
x37=((((x27)*(x4)))+(((IkReal(-1.00000000000000))*(x18)*(x3))));
x38=((x27)+(((IkReal(-1.00000000000000))*(x18)*(x3)*(x4))));
x39=((((x2)*(x30)))+(x26));
x40=((((IkReal(-1.00000000000000))*(x36)))+(((x4)*(x9))));
x41=((((IkReal(-1.00000000000000))*(x18)*(x2)))+(((IkReal(-1.00000000000000))*(x0)*(x23)*(x4))));
x42=((x37)*(x5));
x43=((x38)*(x7));
x44=((x39)*(x5));
x45=((((x21)*(x3)*(x8)))+(((IkReal(1.00000000000000))*(x28))));
x46=((x38)*(x9));
x47=((x41)*(x7));
x48=((x41)*(x9));
x49=((((x32)*(x5)))+(((x40)*(x6))));
x50=((((IkReal(-1.00000000000000))*(x1)*(x24)))+(x43));
x51=((((x32)*(x6)))+(((x5)*(((((IkReal(-1.00000000000000))*(x21)*(x4)))+(x36))))));
x52=((((IkReal(-1.00000000000000))*(x18)*(x7)*(x8)))+(((IkReal(-1.00000000000000))*(x21)*(x38))));
x53=((x13)*(x49));
x54=((((IkReal(-1.00000000000000))*(x0)*(x24)))+(x47));
x55=((x50)*(x6));
x56=((((IkReal(-1.00000000000000))*(x48)))+(((x25)*(x29))));
x57=((x54)*(x6));
x58=((x44)+(x55));
x59=((((x6)*(((((IkReal(-1.00000000000000))*(x34)))+(x47)))))+(x42));
x60=((((x5)*(((((x29)*(x38)))+(x35)))))+(((x39)*(x6))));
x61=((((x5)*(((((x29)*(x41)))+(x34)))))+(((x37)*(x6))));
x62=((x13)*(x59));
eerot[0]=((((x11)*(x61)))+(((x10)*(((((x12)*(x56)))+(x62))))));
eerot[1]=((((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x59)))+(((IkReal(-1.00000000000000))*(x14)*(x56)))))))+(((x10)*(x61))));
eerot[2]=((((x13)*(((x48)+(((x25)*(x7)))))))+(((x12)*(((x42)+(x57))))));
eetrans[0]=((((x9)*(((((IkReal(-1.00000000000000))*(x0)*(x17)*(x4)))+(((IkReal(-0.321000000000000))*(x1)*(x2)))))))+(((IkReal(0.100000000000000))*(x0)))+(((IkReal(0.321000000000000))*(x25)*(x7)))+(((IkReal(0.400000000000000))*(x25)))+(((x12)*(((((x16)*(x37)))+(((x22)*(x54)))))))+(((x13)*(((((x19)*(x41)))+(((x15)*(x25))))))));
eerot[3]=((((x11)*(x60)))+(((x10)*(((((x13)*(x58)))+(((x12)*(x52))))))));
eerot[4]=((((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x58)))+(((IkReal(-1.00000000000000))*(x14)*(x52)))))))+(((x10)*(x60))));
eerot[5]=((((x13)*(((x33)+(x46)))))+(((x12)*(((((x6)*(((((IkReal(-1.00000000000000))*(x35)))+(x43)))))+(x44))))));
eetrans[1]=((IkReal(0.188000000000000))+(((IkReal(0.100000000000000))*(x1)))+(((x13)*(((((x19)*(x38)))+(((x15)*(x31)))))))+(((IkReal(0.321000000000000))*(x33)))+(((IkReal(0.400000000000000))*(x31)))+(((x9)*(((((IkReal(-1.00000000000000))*(x17)*(x30)))+(((IkReal(0.321000000000000))*(x27)))))))+(((x12)*(((((x16)*(x39)))+(((x22)*(x50))))))));
eerot[6]=((((x11)*(x51)))+(((x10)*(((x53)+(((x12)*(x45))))))));
eerot[7]=((((x10)*(x51)))+(((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x49)))+(((IkReal(-1.00000000000000))*(x14)*(x45))))))));
eerot[8]=((((x12)*(x49)))+(((IkReal(-1.00000000000000))*(x13)*(x45))));
eetrans[2]=((((x13)*(((((IkReal(-1.00000000000000))*(x19)*(x3)*(x8)))+(((IkReal(-1.00000000000000))*(x15)*(x4)))))))+(((x12)*(((((x16)*(x32)))+(((x22)*(x40)))))))+(((IkReal(-1.00000000000000))*(x17)*(x24)))+(((IkReal(-0.400000000000000))*(x4)))+(((IkReal(-0.321000000000000))*(x28))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j15,cj15,sj15,htj15,j16,cj16,sj16,htj16,j18,cj18,sj18,htj18,j19,cj19,sj19,htj19,j20,cj20,sj20,htj20,j21,cj21,sj21,htj21,j17,cj17,sj17,htj17,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij15[2], _nj15,_ij16[2], _nj16,_ij18[2], _nj18,_ij19[2], _nj19,_ij20[2], _nj20,_ij21[2], _nj21,_ij17[2], _nj17;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j18=numeric_limits<IkReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1; j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1;  _ij17[0] = -1; _ij17[1] = -1; _nj17 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j17=pfree[0]; cj17=cos(pfree[0]); sj17=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((IkReal(-0.180000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(-0.188000000000000))+(((IkReal(-0.180000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((pz)+(((IkReal(-0.180000000000000))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
CheckValue<IkReal> x63 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x63.valid ) {
    continue;
}
CheckValue<IkReal> x64 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x64.valid ) {
    continue;
}
CheckValue<IkReal> x65 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x65.valid ) {
    continue;
}
pp=((x63.value)+(x64.value)+(x65.value));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=((IkReal(-1.00000000000000))*(py));
IkReal gconst1;
gconst1=((IkReal(0.642000000000000))*(sj17));
IkReal gconst2;
gconst2=((IkReal(-1.00000000000000))*(py));
IkReal gconst3;
gconst3=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst4;
gconst4=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst5;
gconst5=((IkReal(-1.00000000000000))*(py));
IkReal gconst6;
gconst6=((IkReal(0.642000000000000))*(sj17));
IkReal gconst7;
gconst7=((IkReal(-1.00000000000000))*(py));
IkReal gconst8;
gconst8=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst9;
gconst9=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst10;
gconst10=((IkReal(2.00000000000000))*(px));
IkReal gconst11;
gconst11=((IkReal(2.00000000000000))*(px));
IkReal gconst12;
gconst12=((IkReal(0.400000000000000))*(py));
IkReal gconst13;
gconst13=((IkReal(0.400000000000000))*(py));
IkReal gconst14;
gconst14=((IkReal(2.00000000000000))*(px));
IkReal gconst15;
gconst15=((IkReal(2.00000000000000))*(px));
IkReal gconst16;
gconst16=((IkReal(0.400000000000000))*(py));
IkReal gconst17;
gconst17=((IkReal(0.400000000000000))*(py));
IkReal gconst18;
gconst18=py;
IkReal gconst19;
gconst19=((IkReal(0.642000000000000))*(sj17));
IkReal gconst20;
gconst20=py;
IkReal gconst21;
gconst21=((IkReal(0.509841000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst22;
gconst22=((IkReal(-0.00375900000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst23;
gconst23=py;
IkReal gconst24;
gconst24=((IkReal(0.642000000000000))*(sj17));
IkReal gconst25;
gconst25=py;
IkReal gconst26;
gconst26=((IkReal(0.509841000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst27;
gconst27=((IkReal(-0.00375900000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal x66=((gconst20)*(gconst21));
IkReal x67=((gconst23)*(gconst27));
IkReal x68=((gconst25)*(gconst26));
IkReal x69=((gconst18)*(gconst22));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x66)*(x68)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst22)*(gconst24)*(gconst26)))+(((x68)*(x69)))+(((IkReal(-1.00000000000000))*(x67)*(x69)))+(((x66)*(x67))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x70=((IkReal(1.00000000000000))*(gconst8));
IkReal x71=((gconst3)*(gconst7));
IkReal x72=((gconst0)*(gconst8));
IkReal x73=((gconst13)*(gconst15));
IkReal x74=((IkReal(1.00000000000000))*(gconst22));
IkReal x75=((gconst19)*(gconst24));
IkReal x76=((gconst0)*(gconst9));
IkReal x77=((gconst1)*(gconst6));
IkReal x78=((gconst27)*(gconst5));
IkReal x79=((gconst2)*(gconst3));
IkReal x80=((IkReal(1.00000000000000))*(gconst4));
IkReal x81=((gconst17)*(gconst5));
IkReal x82=((gconst12)*(gconst14));
IkReal x83=((gconst2)*(gconst9));
IkReal x84=((IkReal(1.00000000000000))*(gconst16));
IkReal x85=((gconst18)*(gconst25));
IkReal x86=((gconst12)*(gconst7));
IkReal x87=((gconst18)*(gconst9));
IkReal x88=((gconst20)*(gconst27));
IkReal x89=((gconst26)*(gconst4));
IkReal x90=((gconst1)*(gconst24));
IkReal x91=((gconst11)*(gconst3));
IkReal x92=((IkReal(1.00000000000000))*(gconst26));
IkReal x93=((gconst20)*(gconst21));
IkReal x94=((gconst13)*(gconst16));
IkReal x95=((gconst18)*(gconst23));
IkReal x96=((gconst21)*(gconst25));
IkReal x97=((gconst2)*(gconst21));
IkReal x98=((gconst12)*(gconst2));
IkReal x99=((gconst5)*(gconst9));
IkReal x100=((gconst20)*(gconst3));
IkReal x101=((gconst4)*(gconst7));
IkReal x102=((gconst11)*(gconst12));
IkReal x103=((gconst14)*(gconst17));
IkReal x104=((gconst15)*(gconst4));
IkReal x105=((IkReal(1.00000000000000))*(gconst13));
IkReal x106=((gconst10)*(gconst8));
IkReal x107=((gconst0)*(gconst16));
IkReal x108=((gconst23)*(gconst27));
IkReal x109=((gconst22)*(gconst25));
IkReal x110=((gconst10)*(gconst16));
IkReal x111=((gconst19)*(gconst6));
IkReal x112=((gconst22)*(gconst7));
IkReal x113=((gconst0)*(gconst7));
IkReal x114=((gconst17)*(gconst23));
IkReal x115=((gconst10)*(gconst14));
IkReal x116=((gconst11)*(gconst21));
IkReal x117=((gconst12)*(gconst20));
IkReal x118=((gconst18)*(gconst26));
IkReal x119=((gconst14)*(gconst9));
IkReal x120=((gconst13)*(gconst7));
IkReal x121=((gconst16)*(gconst22));
IkReal x122=((gconst23)*(x93));
IkReal x123=((gconst10)*(gconst25)*(gconst26));
IkReal x124=((gconst15)*(gconst22)*(gconst26));
IkReal x125=((gconst14)*(gconst18)*(gconst27));
op[0]=((((IkReal(-1.00000000000000))*(gconst26)*(x74)*(x75)))+(((IkReal(-1.00000000000000))*(gconst25)*(x92)*(x93)))+(((gconst22)*(gconst26)*(x85)))+(((IkReal(-1.00000000000000))*(gconst27)*(x74)*(x95)))+(((gconst21)*(gconst23)*(x88))));
op[1]=((((IkReal(-1.00000000000000))*(gconst11)*(x92)*(x96)))+(((IkReal(-1.00000000000000))*(gconst27)*(x105)*(x95)))+(((IkReal(-1.00000000000000))*(gconst25)*(x84)*(x93)))+(((gconst13)*(gconst26)*(x85)))+(((gconst10)*(gconst26)*(x109)))+(((IkReal(-1.00000000000000))*(gconst25)*(x117)*(x92)))+(((gconst14)*(gconst21)*(x88)))+(((IkReal(-1.00000000000000))*(gconst13)*(x75)*(x92)))+(((x114)*(x93)))+(((IkReal(-1.00000000000000))*(gconst10)*(x108)*(x74)))+(((x121)*(x85)))+(((IkReal(-1.00000000000000))*(gconst16)*(x74)*(x75)))+(((x108)*(x116)))+(((IkReal(-1.00000000000000))*(x125)*(x74)))+(((gconst15)*(gconst22)*(x118)))+(((IkReal(-1.00000000000000))*(gconst17)*(x74)*(x95)))+(((gconst12)*(gconst23)*(x88)))+(((IkReal(-1.00000000000000))*(gconst15)*(x92)*(x93))));
op[2]=((((IkReal(-1.00000000000000))*(gconst10)*(x114)*(x74)))+(((IkReal(-1.00000000000000))*(gconst0)*(x108)*(x74)))+(((x112)*(x118)))+(((x82)*(x88)))+(((gconst23)*(gconst3)*(x88)))+(((gconst9)*(x122)))+(((IkReal(-1.00000000000000))*(gconst10)*(x105)*(x108)))+(((gconst14)*(gconst27)*(x116)))+(((x114)*(x116)))+(((x114)*(x117)))+(((IkReal(-1.00000000000000))*(gconst13)*(x75)*(x84)))+(((gconst15)*(gconst18)*(x121)))+(((x78)*(x93)))+(((x103)*(x93)))+(((x85)*(x89)))+(((IkReal(-1.00000000000000))*(gconst25)*(x100)*(x92)))+(((IkReal(-1.00000000000000))*(gconst25)*(x117)*(x84)))+(((x109)*(x110)))+(((IkReal(-1.00000000000000))*(gconst25)*(x102)*(x92)))+(((x85)*(x94)))+(((IkReal(-1.00000000000000))*(gconst25)*(x70)*(x93)))+(((IkReal(-1.00000000000000))*(gconst27)*(x115)*(x74)))+(((x102)*(x108)))+(((IkReal(-1.00000000000000))*(gconst15)*(x84)*(x93)))+(((x118)*(x73)))+(((x108)*(x97)))+(((IkReal(-1.00000000000000))*(gconst27)*(x80)*(x95)))+(((IkReal(-1.00000000000000))*(gconst7)*(x92)*(x93)))+(((IkReal(-1.00000000000000))*(gconst26)*(x74)*(x90)))+(((gconst22)*(gconst8)*(x85)))+(((IkReal(-1.00000000000000))*(gconst22)*(x70)*(x75)))+(((IkReal(-1.00000000000000))*(gconst15)*(x117)*(x92)))+(((gconst13)*(x123)))+(((IkReal(-1.00000000000000))*(gconst26)*(x111)*(x74)))+(((IkReal(-1.00000000000000))*(gconst17)*(x105)*(x95)))+(((gconst0)*(gconst26)*(x109)))+(((IkReal(-1.00000000000000))*(gconst18)*(x74)*(x78)))+(((IkReal(-1.00000000000000))*(gconst23)*(x74)*(x87)))+(((gconst10)*(x124)))+(((IkReal(-1.00000000000000))*(gconst2)*(x92)*(x96)))+(((IkReal(-1.00000000000000))*(gconst11)*(x84)*(x96)))+(((IkReal(-1.00000000000000))*(x105)*(x125)))+(((IkReal(-1.00000000000000))*(gconst26)*(x75)*(x80)))+(((IkReal(-1.00000000000000))*(gconst18)*(x103)*(x74)))+(((IkReal(-1.00000000000000))*(gconst15)*(x116)*(x92))));
op[3]=((((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst23)*(gconst4)))+(((gconst16)*(gconst18)*(gconst25)*(gconst4)))+(((gconst15)*(gconst18)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst22)*(gconst6)))+(((gconst11)*(gconst12)*(gconst14)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst21)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst27)))+(((gconst0)*(gconst16)*(gconst22)*(gconst25)))+(((gconst0)*(gconst15)*(gconst22)*(gconst26)))+(((gconst14)*(gconst2)*(gconst21)*(gconst27)))+(((gconst10)*(gconst13)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst21)*(gconst25)))+(((gconst11)*(gconst23)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst17)*(gconst23)))+(((gconst11)*(gconst14)*(gconst17)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst26)*(gconst3)))+(((gconst12)*(gconst14)*(gconst17)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst22)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst25)*(gconst3)))+(((gconst11)*(gconst21)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst26)*(gconst7)))+(((gconst14)*(gconst20)*(gconst21)*(gconst9)))+(((gconst16)*(gconst18)*(gconst22)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst22)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst21)*(gconst26)))+(((gconst12)*(gconst20)*(gconst23)*(gconst9)))+(((gconst13)*(gconst18)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst20)))+(((gconst10)*(gconst25)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst27)*(gconst5)))+(((gconst14)*(gconst20)*(gconst27)*(gconst3)))+(((gconst15)*(gconst18)*(gconst26)*(gconst4)))+(((gconst13)*(gconst15)*(gconst16)*(gconst18)))+(((gconst10)*(gconst22)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst22)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst21)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst17)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst24)*(gconst8)))+(((gconst11)*(gconst12)*(gconst17)*(gconst23)))+(((gconst12)*(gconst2)*(gconst23)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((gconst17)*(gconst20)*(gconst23)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst26)*(gconst6)))+(((gconst17)*(gconst20)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst25)*(gconst26)))+(((gconst10)*(gconst15)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst22)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst23)*(gconst27)))+(((gconst11)*(gconst21)*(gconst27)*(gconst5)))+(((gconst13)*(gconst18)*(gconst26)*(gconst7)))+(((gconst17)*(gconst2)*(gconst21)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst23)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst22)*(gconst27)))+(((gconst0)*(gconst13)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst24)*(gconst26)))+(((gconst10)*(gconst22)*(gconst26)*(gconst7)))+(((gconst12)*(gconst20)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst24)*(gconst4)))+(((gconst10)*(gconst13)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst25)*(gconst8))));
op[4]=((((gconst12)*(gconst14)*(gconst2)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst23)*(gconst4)))+(((gconst10)*(gconst15)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst5)))+(((gconst2)*(gconst23)*(gconst27)*(gconst3)))+(((gconst18)*(gconst22)*(gconst7)*(gconst8)))+(((gconst14)*(gconst17)*(gconst2)*(gconst21)))+(((gconst20)*(gconst27)*(gconst3)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst21)*(gconst25)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst27)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst21)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst2)*(gconst26)))+(((gconst10)*(gconst16)*(gconst22)*(gconst7)))+(((gconst13)*(gconst15)*(gconst18)*(gconst8)))+(((gconst12)*(gconst17)*(gconst2)*(gconst23)))+(((gconst10)*(gconst13)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst16)*(gconst24)))+(((gconst11)*(gconst14)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst14)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst24)*(gconst8)))+(((gconst18)*(gconst25)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst20)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst9)))+(((gconst0)*(gconst13)*(gconst16)*(gconst25)))+(((gconst13)*(gconst16)*(gconst18)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst26)*(gconst3)*(gconst7)))+(((gconst11)*(gconst12)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst17)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst25)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst20)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst26)*(gconst4)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst2)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst22)*(gconst9)))+(((gconst10)*(gconst13)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst5)*(gconst9)))+(((gconst10)*(gconst13)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((gconst0)*(gconst13)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst2)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst21)*(gconst7)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst25)*(gconst26)*(gconst3)))+(((gconst2)*(gconst21)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst4)))+(((gconst2)*(gconst21)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst19)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst8)))+(((gconst12)*(gconst14)*(gconst20)*(gconst9)))+(((gconst18)*(gconst26)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst23)*(gconst27)*(gconst4)))+(((gconst20)*(gconst21)*(gconst5)*(gconst9)))+(((gconst11)*(gconst12)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst22)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst26)*(gconst6)))+(((gconst10)*(gconst15)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst23)*(gconst9)))+(((gconst11)*(gconst17)*(gconst23)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst22)*(gconst5)))+(((gconst0)*(gconst15)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst21)*(gconst7)))+(((gconst0)*(gconst25)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst24)*(gconst4)*(gconst8)))+(((gconst0)*(gconst22)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst23)*(gconst4)*(gconst9)))+(((gconst11)*(gconst14)*(gconst21)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst25)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst21)*(gconst8)))+(((gconst14)*(gconst17)*(gconst20)*(gconst3)))+(((gconst12)*(gconst17)*(gconst20)*(gconst5)))+(((gconst11)*(gconst17)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst22)*(gconst6)*(gconst8)))+(((gconst15)*(gconst16)*(gconst18)*(gconst4)))+(((gconst0)*(gconst22)*(gconst26)*(gconst7)))+(((gconst20)*(gconst23)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst24)*(gconst26)*(gconst4)))+(((gconst10)*(gconst16)*(gconst25)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst17)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst20)*(gconst3))));
op[5]=((((gconst0)*(gconst13)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst25)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst4)*(gconst6)))+(((gconst17)*(gconst20)*(gconst3)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst27)*(gconst4)))+(((gconst10)*(gconst15)*(gconst16)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst23)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst3)*(gconst7)))+(((gconst12)*(gconst20)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst22)*(gconst9)))+(((gconst11)*(gconst14)*(gconst17)*(gconst3)))+(((gconst0)*(gconst15)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst21)*(gconst8)))+(((gconst10)*(gconst25)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst22)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst26)*(gconst3)*(gconst7)))+(((gconst17)*(gconst2)*(gconst23)*(gconst3)))+(((gconst0)*(gconst16)*(gconst25)*(gconst4)))+(((gconst10)*(gconst26)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst8)))+(((gconst14)*(gconst2)*(gconst21)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst27)*(gconst5)))+(((gconst17)*(gconst2)*(gconst21)*(gconst5)))+(((gconst12)*(gconst14)*(gconst17)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst21)*(gconst7)))+(((gconst11)*(gconst23)*(gconst3)*(gconst9)))+(((gconst10)*(gconst13)*(gconst16)*(gconst7)))+(((gconst11)*(gconst12)*(gconst17)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst25)*(gconst8)))+(((gconst12)*(gconst2)*(gconst27)*(gconst5)))+(((gconst11)*(gconst21)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst6)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst23)*(gconst4)*(gconst9)))+(((gconst0)*(gconst13)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst24)*(gconst4)))+(((gconst14)*(gconst20)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst3)))+(((gconst16)*(gconst18)*(gconst4)*(gconst7)))+(((gconst12)*(gconst2)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst26)*(gconst7)))+(((gconst10)*(gconst22)*(gconst7)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst24)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst7)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst17)*(gconst4)))+(((gconst13)*(gconst18)*(gconst7)*(gconst8)))+(((gconst10)*(gconst13)*(gconst15)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst7)*(gconst8)))+(((gconst14)*(gconst2)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst26)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst27)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst4)*(gconst9)))+(((gconst0)*(gconst15)*(gconst26)*(gconst4)))+(((gconst15)*(gconst18)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst17)*(gconst5)))+(((gconst0)*(gconst13)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst22)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst7)))+(((gconst11)*(gconst27)*(gconst3)*(gconst5)))+(((gconst0)*(gconst16)*(gconst22)*(gconst7))));
op[6]=((((x113)*(x94)))+(((IkReal(-1.00000000000000))*(gconst11)*(x70)*(x86)))+(((IkReal(-1.00000000000000))*(gconst9)*(x115)*(x80)))+(((IkReal(-1.00000000000000))*(gconst15)*(x70)*(x98)))+(((IkReal(-1.00000000000000))*(gconst15)*(x70)*(x91)))+(((x113)*(x89)))+(((x112)*(x72)))+(((x100)*(x99)))+(((x81)*(x98)))+(((x81)*(x91)))+(((IkReal(-1.00000000000000))*(gconst5)*(x74)*(x76)))+(((x82)*(x83)))+(((IkReal(-1.00000000000000))*(gconst2)*(x84)*(x86)))+(((gconst23)*(gconst9)*(x79)))+(((IkReal(-1.00000000000000))*(gconst14)*(x105)*(x76)))+(((x78)*(x79)))+(((x102)*(x99)))+(((x106)*(x120)))+(((IkReal(-1.00000000000000))*(gconst7)*(x70)*(x97)))+(((IkReal(-1.00000000000000))*(gconst0)*(x105)*(x81)))+(((gconst25)*(gconst4)*(x72)))+(((IkReal(-1.00000000000000))*(gconst4)*(x111)*(x70)))+(((IkReal(-1.00000000000000))*(gconst13)*(x77)*(x84)))+(((IkReal(-1.00000000000000))*(gconst10)*(x105)*(x99)))+(((IkReal(-1.00000000000000))*(gconst22)*(x70)*(x77)))+(((IkReal(-1.00000000000000))*(gconst20)*(x70)*(x71)))+(((IkReal(-1.00000000000000))*(gconst10)*(x80)*(x81)))+(((IkReal(-1.00000000000000))*(gconst11)*(x71)*(x84)))+(((IkReal(-1.00000000000000))*(gconst15)*(x79)*(x84)))+(((x119)*(x91)))+(((gconst21)*(gconst5)*(x83)))+(((IkReal(-1.00000000000000))*(gconst5)*(x80)*(x87)))+(((IkReal(-1.00000000000000))*(gconst26)*(x77)*(x80)))+(((IkReal(-1.00000000000000))*(gconst0)*(x78)*(x80)))+(((IkReal(-1.00000000000000))*(gconst23)*(x76)*(x80)))+(((IkReal(-1.00000000000000))*(gconst2)*(x71)*(x92)))+(((IkReal(-1.00000000000000))*(gconst4)*(x70)*(x90)))+(((x104)*(x107)))+(((x104)*(x106)))+(((x72)*(x73)))+(((IkReal(-1.00000000000000))*(gconst25)*(x70)*(x79)))+(((gconst18)*(gconst8)*(x101)))+(((x101)*(x110)))+(((IkReal(-1.00000000000000))*(gconst0)*(x103)*(x80)))+(((x103)*(x79))));
op[7]=((((x79)*(x81)))+(((IkReal(-1.00000000000000))*(gconst11)*(x70)*(x71)))+(((IkReal(-1.00000000000000))*(gconst13)*(x70)*(x77)))+(((IkReal(-1.00000000000000))*(gconst5)*(x105)*(x76)))+(((x120)*(x72)))+(((IkReal(-1.00000000000000))*(gconst0)*(x80)*(x81)))+(((IkReal(-1.00000000000000))*(gconst2)*(x70)*(x86)))+(((gconst12)*(gconst5)*(x83)))+(((x104)*(x72)))+(((IkReal(-1.00000000000000))*(gconst15)*(x70)*(x79)))+(((x119)*(x79)))+(((IkReal(-1.00000000000000))*(gconst16)*(x77)*(x80)))+(((IkReal(-1.00000000000000))*(gconst10)*(x80)*(x99)))+(((IkReal(-1.00000000000000))*(gconst2)*(x71)*(x84)))+(((x101)*(x106)))+(((x101)*(x107)))+(((IkReal(-1.00000000000000))*(gconst14)*(x76)*(x80)))+(((x91)*(x99))));
op[8]=((((IkReal(-1.00000000000000))*(gconst2)*(x70)*(x71)))+(((x79)*(x99)))+(((x101)*(x72)))+(((IkReal(-1.00000000000000))*(gconst4)*(x70)*(x77)))+(((IkReal(-1.00000000000000))*(gconst5)*(x76)*(x80))));
polyroots8(op,zeror,numroots);
IkReal j15array[8], cj15array[8], sj15array[8], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((IkReal(2.00000000000000))*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[8]={true,true,true,true,true,true,true,true};
_nj15 = 8;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst44;
IkReal x126=((IkReal(4.00000000000000))*(sj17));
IkReal x127=((IkReal(0.800000000000000))*(sj17));
IkReal x128=((py)*(sj15));
IkReal x129=((cj15)*(px));
CheckValue<IkReal> x130 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x130.valid ) {
    continue;
}
CheckValue<IkReal> x131 = IKPowWithIntegerCheck(x128,2.00000000000000);
if( !x131.valid ) {
    continue;
}
CheckValue<IkReal> x132 = IKPowWithIntegerCheck(x129,2.00000000000000);
if( !x132.valid ) {
    continue;
}
gconst44=IKsign(((((IkReal(-1.00000000000000))*(x126)*(x130.value)))+(((IkReal(-8.00000000000000))*(sj17)*(x128)*(x129)))+(((IkReal(-1.00000000000000))*(x126)*(x131.value)))+(((IkReal(-1.00000000000000))*(x126)*(x132.value)))+(((IkReal(-0.0400000000000000))*(sj17)))+(((x127)*(x129)))+(((x127)*(x128)))));
IkReal x133=((IkReal(20.0000000000000))*(sj17));
IkReal x134=((cj15)*(px));
IkReal x135=((py)*(sj15));
IkReal x136=((IkReal(100.000000000000))*(sj17));
CheckValue<IkReal> x137 = IKPowWithIntegerCheck(x134,2.00000000000000);
if( !x137.valid ) {
    continue;
}
CheckValue<IkReal> x138 = IKPowWithIntegerCheck(x135,2.00000000000000);
if( !x138.valid ) {
    continue;
}
CheckValue<IkReal> x139 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x139.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x136)*(x137.value)))+(((IkReal(-1.00000000000000))*(sj17)))+(((x133)*(x134)))+(((x133)*(x135)))+(((IkReal(-200.000000000000))*(sj17)*(x134)*(x135)))+(((IkReal(-1.00000000000000))*(x136)*(x138.value)))+(((IkReal(-1.00000000000000))*(x136)*(x139.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x140=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j17))), IkReal(6.28318530717959))));
evalcond[1]=x140;
evalcond[2]=x140;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x141=((IkReal(321.000000000000))*(cj18));
IkReal x142=((cj15)*(px));
IkReal x143=((py)*(sj15));
gconst49=IKsign(((IkReal(40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(-400.000000000000))*(x143)))+(((IkReal(-400.000000000000))*(x142)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x141)*(x143)))+(((IkReal(-1.00000000000000))*(x141)*(x142)))));
IkReal x144=((cj15)*(px));
IkReal x145=((IkReal(10.0000000000000))*(cj18));
IkReal x146=((py)*(sj15));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-12.4610591900312))*(x146)))+(((IkReal(-12.4610591900312))*(x144)))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(-1.00000000000000))*(x144)*(x145)))+(cj18)+(((IkReal(-1.00000000000000))*(x145)*(x146))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x147=((IkReal(10.0000000000000))*(sj18));
dummyeval[0]=((((IkReal(10.0000000000000))*(cj18)*(pz)))+(((IkReal(-1.00000000000000))*(cj15)*(px)*(x147)))+(sj18)+(((IkReal(-1.00000000000000))*(py)*(sj15)*(x147)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x148=x140;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=x148;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x148;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj15)))+(((IkReal(1.38696255201110))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x149=IKsin(j16);
IkReal x150=IKcos(j16);
IkReal x151=((cj15)*(px));
IkReal x152=((py)*(sj15));
IkReal x153=((IkReal(1.00000000000000))*(x150));
IkReal x154=((IkReal(0.800000000000000))*(x150));
evalcond[0]=((IkReal(0.721000000000000))*(x149));
evalcond[1]=((((x149)*(x152)))+(((x149)*(x151)))+(((IkReal(-0.100000000000000))*(x149))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(-1.00000000000000))*(x151)*(x153)))+(((IkReal(0.100000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x152)*(x153))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x150)))+(((IkReal(0.200000000000000))*(x151)))+(((IkReal(0.200000000000000))*(x152)))+(((x152)*(x154)))+(((x151)*(x154)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x801=x140;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=x801;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x801;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(cj15)*(px)))+(((IkReal(12.6582278481013))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x802=IKsin(j16);
IkReal x803=IKcos(j16);
IkReal x804=((cj15)*(px));
IkReal x805=((py)*(sj15));
IkReal x806=((IkReal(1.00000000000000))*(x803));
IkReal x807=((IkReal(0.800000000000000))*(x803));
evalcond[0]=((IkReal(0.0790000000000000))*(x802));
evalcond[1]=((((IkReal(-0.100000000000000))*(x802)))+(((x802)*(x805)))+(((x802)*(x804))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(-1.00000000000000))*(x804)*(x806)))+(((IkReal(-1.00000000000000))*(x805)*(x806)))+(((IkReal(0.100000000000000))*(x803))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x804)*(x807)))+(((IkReal(0.200000000000000))*(x804)))+(((IkReal(0.200000000000000))*(x805)))+(((x805)*(x807)))+(((IkReal(-0.0800000000000000))*(x803)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x808=((IkReal(321000.000000000))*(sj18));
IkReal x809=((py)*(sj15));
IkReal x810=((cj15)*(px));
IkReal x811=((IkReal(1000.00000000000))*(pz));
IkReal x812=((IkReal(321.000000000000))*(sj18));
IkReal x813=((cj18)*(pz));
CheckValue<IkReal> x814 = IKPowWithIntegerCheck(((((IkReal(-1.00000000000000))*(x808)*(x810)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x813)))+(((IkReal(-1.00000000000000))*(x808)*(x809)))+(((IkReal(32100.0000000000))*(sj18)))),-1.00000000000000);
if( !x814.valid ) {
    continue;
}
CheckValue<IkReal> x815 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x815.valid ) {
    continue;
}
CheckValue<IkReal> x816 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x816.valid ) {
    continue;
}
CheckValue<IkReal> x817 = IKPowWithIntegerCheck(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x809)*(x812)))+(((IkReal(-1.00000000000000))*(x810)*(x812)))+(((IkReal(321.000000000000))*(x813)))),-1.00000000000000);
if( !x817.valid ) {
    continue;
}
if( IKabs(((x814.value)*(((((IkReal(103041.000000000))*(x815.value)))+(((IkReal(-1000000.00000000))*(x816.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x817.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((x809)*(x811)))+(((IkReal(-128.400000000000))*(sj18)))+(((x810)*(x811))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x814.value)*(((((IkReal(103041.000000000))*(x815.value)))+(((IkReal(-1000000.00000000))*(x816.value)))))))+IKsqr(((x817.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((x809)*(x811)))+(((IkReal(-128.400000000000))*(sj18)))+(((x810)*(x811)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x814.value)*(((((IkReal(103041.000000000))*(x815.value)))+(((IkReal(-1000000.00000000))*(x816.value)))))), ((x817.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((x809)*(x811)))+(((IkReal(-128.400000000000))*(sj18)))+(((x810)*(x811)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x818=IKsin(j16);
IkReal x819=IKcos(j16);
IkReal x820=((IkReal(0.321000000000000))*(sj18));
IkReal x821=((IkReal(0.321000000000000))*(cj18));
IkReal x822=((py)*(sj15));
IkReal x823=((cj15)*(px));
IkReal x824=((pz)*(x818));
IkReal x825=((x819)*(x823));
evalcond[0]=((((x819)*(x820)))+(((IkReal(0.400000000000000))*(x818)))+(pz)+(((x818)*(x821))));
evalcond[1]=((((pz)*(x819)))+(((x818)*(x822)))+(((x818)*(x823)))+(x820)+(((IkReal(-0.100000000000000))*(x818))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x818)*(x820)))+(((x819)*(x821)))+(((IkReal(0.400000000000000))*(x819)))+(((IkReal(-1.00000000000000))*(x823)))+(((IkReal(-1.00000000000000))*(x822))));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x825)))+(((IkReal(-1.00000000000000))*(x819)*(x822)))+(x821)+(x824)+(((IkReal(0.100000000000000))*(x819))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x819)*(x822)))+(((IkReal(0.800000000000000))*(x825)))+(((IkReal(-0.800000000000000))*(x824)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x822)))+(((IkReal(0.200000000000000))*(x823)))+(((IkReal(-0.0800000000000000))*(x819))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x826=((IkReal(1000.00000000000))*(pz));
CheckValue<IkReal> x828 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x828.valid ) {
    continue;
}
CheckValue<IkReal> x827 = IKatan2WithCheck(((gconst49)*(((((IkReal(-100.000000000000))*(pz)))+(((py)*(sj15)*(x826)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((cj15)*(px)*(x826)))+(((IkReal(128.400000000000))*(sj18)))))),((gconst49)*(((IkReal(-160.000000000000))+(((pz)*(x826)))+(((IkReal(-256.800000000000))*(cj18)))+(((IkReal(-103.041000000000))*(x828.value)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x827.valid ) {
    continue;
}
j16array[0]=x827.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x829=IKsin(j16);
IkReal x830=IKcos(j16);
IkReal x831=((IkReal(0.321000000000000))*(sj18));
IkReal x832=((IkReal(0.321000000000000))*(cj18));
IkReal x833=((py)*(sj15));
IkReal x834=((cj15)*(px));
IkReal x835=((pz)*(x829));
IkReal x836=((x830)*(x834));
evalcond[0]=((((IkReal(0.400000000000000))*(x829)))+(((x829)*(x832)))+(pz)+(((x830)*(x831))));
evalcond[1]=((((IkReal(-0.100000000000000))*(x829)))+(((pz)*(x830)))+(((x829)*(x834)))+(((x829)*(x833)))+(x831));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x830)))+(((x830)*(x832)))+(((IkReal(-1.00000000000000))*(x833)))+(((IkReal(-1.00000000000000))*(x834)))+(((IkReal(-1.00000000000000))*(x829)*(x831))));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x830)*(x833)))+(((IkReal(-1.00000000000000))*(x836)))+(((IkReal(0.100000000000000))*(x830)))+(x835)+(x832));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x836)))+(((IkReal(-0.0800000000000000))*(x830)))+(((IkReal(-0.800000000000000))*(x835)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x834)))+(((IkReal(0.200000000000000))*(x833)))+(((IkReal(0.800000000000000))*(x830)*(x833))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x837=((cj15)*(py));
IkReal x838=((px)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j17))))), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x837)))+(x838));
evalcond[2]=((((IkReal(-1.00000000000000))*(x838)))+(x837));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst50;
IkReal x839=((IkReal(321.000000000000))*(cj18));
IkReal x840=((cj15)*(px));
IkReal x841=((py)*(sj15));
gconst50=IKsign(((IkReal(-40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((x839)*(x841)))+(((x839)*(x840)))+(((IkReal(-32.1000000000000))*(cj18)))+(((IkReal(400.000000000000))*(x840)))+(((IkReal(400.000000000000))*(x841)))));
IkReal x842=((py)*(sj15));
IkReal x843=((IkReal(10.0000000000000))*(cj18));
IkReal x844=((cj15)*(px));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((x843)*(x844)))+(((IkReal(12.4610591900312))*(x844)))+(((IkReal(12.4610591900312))*(x842)))+(((x842)*(x843)))+(((IkReal(-1.00000000000000))*(cj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x845=((IkReal(10.0000000000000))*(sj18));
dummyeval[0]=((((py)*(sj15)*(x845)))+(((IkReal(10.0000000000000))*(cj18)*(pz)))+(((IkReal(-1.00000000000000))*(sj18)))+(((cj15)*(px)*(x845)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x846=((cj15)*(py));
IkReal x847=((px)*(sj15));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x846)))+(x847));
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x847)))+(x846));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj15)))+(((IkReal(1.38696255201110))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x848=IKsin(j16);
IkReal x849=IKcos(j16);
IkReal x850=((py)*(sj15));
IkReal x851=((cj15)*(px));
IkReal x852=((IkReal(1.00000000000000))*(x850));
IkReal x853=((IkReal(1.00000000000000))*(x851));
IkReal x854=((IkReal(0.800000000000000))*(x849));
evalcond[0]=((IkReal(0.721000000000000))*(x848));
evalcond[1]=((((IkReal(-1.00000000000000))*(x848)*(x853)))+(((IkReal(-1.00000000000000))*(x848)*(x852)))+(((IkReal(0.100000000000000))*(x848))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(-1.00000000000000))*(x849)*(x853)))+(((IkReal(-1.00000000000000))*(x849)*(x852)))+(((IkReal(0.100000000000000))*(x849))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x850)*(x854)))+(((IkReal(-0.0800000000000000))*(x849)))+(((IkReal(-1.00000000000000))*(pp)))+(((x851)*(x854)))+(((IkReal(0.200000000000000))*(x850)))+(((IkReal(0.200000000000000))*(x851))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x855=((cj15)*(py));
IkReal x856=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((((IkReal(-1.00000000000000))*(x855)))+(x856));
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x856)))+(x855));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(cj15)*(px)))+(((IkReal(12.6582278481013))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x857=IKsin(j16);
IkReal x858=IKcos(j16);
IkReal x859=((cj15)*(px));
IkReal x860=((py)*(sj15));
IkReal x861=((IkReal(1.00000000000000))*(x860));
IkReal x862=((IkReal(0.800000000000000))*(x858));
evalcond[0]=((IkReal(0.0790000000000000))*(x857));
evalcond[1]=((((IkReal(-1.00000000000000))*(x857)*(x859)))+(((IkReal(0.100000000000000))*(x857)))+(((IkReal(-1.00000000000000))*(x857)*(x861))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x858)))+(((IkReal(-1.00000000000000))*(x858)*(x859)))+(((IkReal(-1.00000000000000))*(x858)*(x861))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x860)))+(((IkReal(-1.00000000000000))*(pp)))+(((x859)*(x862)))+(((IkReal(-0.0800000000000000))*(x858)))+(((x860)*(x862)))+(((IkReal(0.200000000000000))*(x859))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x863=((IkReal(321000.000000000))*(sj18));
IkReal x864=((py)*(sj15));
IkReal x865=((cj15)*(px));
IkReal x866=((IkReal(1000.00000000000))*(pz));
IkReal x867=((IkReal(321.000000000000))*(sj18));
IkReal x868=((cj18)*(pz));
CheckValue<IkReal> x869 = IKPowWithIntegerCheck(((((x863)*(x864)))+(((x863)*(x865)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x868)))+(((IkReal(-32100.0000000000))*(sj18)))),-1.00000000000000);
if( !x869.valid ) {
    continue;
}
CheckValue<IkReal> x870 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x870.valid ) {
    continue;
}
CheckValue<IkReal> x871 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x871.valid ) {
    continue;
}
CheckValue<IkReal> x872 = IKPowWithIntegerCheck(((((IkReal(321.000000000000))*(x868)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((x865)*(x867)))+(((x864)*(x867)))),-1.00000000000000);
if( !x872.valid ) {
    continue;
}
if( IKabs(((x869.value)*(((((IkReal(103041.000000000))*(x870.value)))+(((IkReal(-1000000.00000000))*(x871.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x872.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((x865)*(x866)))+(((x864)*(x866)))+(((IkReal(128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x869.value)*(((((IkReal(103041.000000000))*(x870.value)))+(((IkReal(-1000000.00000000))*(x871.value)))))))+IKsqr(((x872.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((x865)*(x866)))+(((x864)*(x866)))+(((IkReal(128.400000000000))*(sj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x869.value)*(((((IkReal(103041.000000000))*(x870.value)))+(((IkReal(-1000000.00000000))*(x871.value)))))), ((x872.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((x865)*(x866)))+(((x864)*(x866)))+(((IkReal(128.400000000000))*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x873=IKsin(j16);
IkReal x874=IKcos(j16);
IkReal x875=((IkReal(0.321000000000000))*(sj18));
IkReal x876=((IkReal(0.321000000000000))*(cj18));
IkReal x877=((cj15)*(px));
IkReal x878=((py)*(sj15));
IkReal x879=((pz)*(x873));
IkReal x880=((IkReal(1.00000000000000))*(x873));
IkReal x881=((IkReal(1.00000000000000))*(x874));
IkReal x882=((x874)*(x877));
evalcond[0]=((((x873)*(x876)))+(pz)+(((IkReal(0.400000000000000))*(x873)))+(((IkReal(-1.00000000000000))*(x874)*(x875))));
evalcond[1]=((IkReal(0.100000000000000))+(((x874)*(x876)))+(((IkReal(-1.00000000000000))*(x878)))+(((IkReal(-1.00000000000000))*(x877)))+(((x873)*(x875)))+(((IkReal(0.400000000000000))*(x874))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x874)))+(((IkReal(-1.00000000000000))*(x877)*(x881)))+(x879)+(x876)+(((IkReal(-1.00000000000000))*(x878)*(x881))));
evalcond[3]=((((IkReal(-1.00000000000000))*(pz)*(x881)))+(((IkReal(0.100000000000000))*(x873)))+(((IkReal(-1.00000000000000))*(x877)*(x880)))+(x875)+(((IkReal(-1.00000000000000))*(x878)*(x880))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x882)))+(((IkReal(0.200000000000000))*(x878)))+(((IkReal(0.200000000000000))*(x877)))+(((IkReal(-0.800000000000000))*(x879)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x874)*(x878)))+(((IkReal(-0.0800000000000000))*(x874))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x883=((IkReal(1000.00000000000))*(pz));
CheckValue<IkReal> x885 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x885.valid ) {
    continue;
}
CheckValue<IkReal> x884 = IKatan2WithCheck(((gconst50)*(((((IkReal(100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(-1.00000000000000))*(cj15)*(px)*(x883)))+(((IkReal(-1.00000000000000))*(py)*(sj15)*(x883)))+(((IkReal(128.400000000000))*(sj18)))))),((gconst50)*(((IkReal(160.000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x883)))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(103.041000000000))*(x885.value)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x884.valid ) {
    continue;
}
j16array[0]=x884.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x886=IKsin(j16);
IkReal x887=IKcos(j16);
IkReal x888=((IkReal(0.321000000000000))*(sj18));
IkReal x889=((IkReal(0.321000000000000))*(cj18));
IkReal x890=((cj15)*(px));
IkReal x891=((py)*(sj15));
IkReal x892=((pz)*(x886));
IkReal x893=((IkReal(1.00000000000000))*(x886));
IkReal x894=((IkReal(1.00000000000000))*(x887));
IkReal x895=((x887)*(x890));
evalcond[0]=((((IkReal(-1.00000000000000))*(x887)*(x888)))+(((x886)*(x889)))+(((IkReal(0.400000000000000))*(x886)))+(pz));
evalcond[1]=((IkReal(0.100000000000000))+(((x887)*(x889)))+(((x886)*(x888)))+(((IkReal(-1.00000000000000))*(x890)))+(((IkReal(-1.00000000000000))*(x891)))+(((IkReal(0.400000000000000))*(x887))));
evalcond[2]=((IkReal(0.400000000000000))+(x889)+(x892)+(((IkReal(-1.00000000000000))*(x890)*(x894)))+(((IkReal(-1.00000000000000))*(x891)*(x894)))+(((IkReal(0.100000000000000))*(x887))));
evalcond[3]=((((IkReal(-1.00000000000000))*(pz)*(x894)))+(x888)+(((IkReal(-1.00000000000000))*(x890)*(x893)))+(((IkReal(-1.00000000000000))*(x891)*(x893)))+(((IkReal(0.100000000000000))*(x886))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x895)))+(((IkReal(-0.800000000000000))*(x892)))+(((IkReal(0.800000000000000))*(x887)*(x891)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x891)))+(((IkReal(0.200000000000000))*(x890)))+(((IkReal(-0.0800000000000000))*(x887))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x896=((IkReal(-1.00000000000000))*(cj15)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=x896;
evalcond[2]=x896;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x897=((py)*(sj15));
gconst51=IKsign(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x897)))+(((IkReal(-321.000000000000))*(cj18)*(x897)))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(32.1000000000000))*(cj18)))));
IkReal x898=((py)*(sj15));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-10.0000000000000))*(cj18)*(x898)))+(((IkReal(-12.4610591900312))*(x898)))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(cj18));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj18)*(pz)))+(sj18)+(((IkReal(-10.0000000000000))*(py)*(sj15)*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x899=x896;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=x899;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x899;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x900=IKsin(j16);
IkReal x901=IKcos(j16);
IkReal x902=((py)*(sj15));
evalcond[0]=((IkReal(0.721000000000000))*(x900));
evalcond[1]=((((x900)*(x902)))+(((IkReal(-0.100000000000000))*(x900))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(-1.00000000000000))*(x901)*(x902)))+(((IkReal(0.100000000000000))*(x901))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x902)))+(((IkReal(0.800000000000000))*(x901)*(x902)))+(((IkReal(-0.0800000000000000))*(x901)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x903=x896;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=x903;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x903;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x904=IKsin(j16);
IkReal x905=IKcos(j16);
IkReal x906=((py)*(sj15));
evalcond[0]=((IkReal(0.0790000000000000))*(x904));
evalcond[1]=((((IkReal(-0.100000000000000))*(x904)))+(((x904)*(x906))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(-1.00000000000000))*(x905)*(x906)))+(((IkReal(0.100000000000000))*(x905))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x906)))+(((IkReal(-0.0800000000000000))*(x905)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x905)*(x906))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x907=((cj18)*(pz));
IkReal x908=((py)*(sj15)*(sj18));
CheckValue<IkReal> x909 = IKPowWithIntegerCheck(((((IkReal(-321000.000000000))*(x908)))+(((IkReal(321000.000000000))*(x907)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))),-1.00000000000000);
if( !x909.valid ) {
    continue;
}
CheckValue<IkReal> x910 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x910.valid ) {
    continue;
}
CheckValue<IkReal> x911 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x911.valid ) {
    continue;
}
CheckValue<IkReal> x912 = IKPowWithIntegerCheck(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-321.000000000000))*(x908)))+(((IkReal(321.000000000000))*(x907)))),-1.00000000000000);
if( !x912.valid ) {
    continue;
}
if( IKabs(((x909.value)*(((((IkReal(103041.000000000))*(x910.value)))+(((IkReal(-1000000.00000000))*(x911.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x912.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x909.value)*(((((IkReal(103041.000000000))*(x910.value)))+(((IkReal(-1000000.00000000))*(x911.value)))))))+IKsqr(((x912.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x909.value)*(((((IkReal(103041.000000000))*(x910.value)))+(((IkReal(-1000000.00000000))*(x911.value)))))), ((x912.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x913=IKsin(j16);
IkReal x914=IKcos(j16);
IkReal x915=((py)*(sj15));
IkReal x916=((IkReal(0.321000000000000))*(sj18));
IkReal x917=((IkReal(0.321000000000000))*(cj18));
IkReal x918=((pz)*(x913));
evalcond[0]=((((x914)*(x916)))+(pz)+(((IkReal(0.400000000000000))*(x913)))+(((x913)*(x917))));
evalcond[1]=((((pz)*(x914)))+(((IkReal(-0.100000000000000))*(x913)))+(((x913)*(x915)))+(x916));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x914)))+(x918)+(x917)+(((IkReal(-1.00000000000000))*(x914)*(x915))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x913)*(x916)))+(((x914)*(x917)))+(((IkReal(0.400000000000000))*(x914)))+(((IkReal(-1.00000000000000))*(x915))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x915)))+(((IkReal(-0.0800000000000000))*(x914)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(x918)))+(((IkReal(0.800000000000000))*(x914)*(x915))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x920 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x920.valid ) {
    continue;
}
CheckValue<IkReal> x921 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x921.valid ) {
    continue;
}
CheckValue<IkReal> x919 = IKatan2WithCheck(((gconst51)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))),((gconst51)*(((IkReal(-160.000000000000))+(((IkReal(-256.800000000000))*(cj18)))+(((IkReal(1000.00000000000))*(x920.value)))+(((IkReal(-103.041000000000))*(x921.value)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x919.valid ) {
    continue;
}
j16array[0]=x919.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x922=IKsin(j16);
IkReal x923=IKcos(j16);
IkReal x924=((py)*(sj15));
IkReal x925=((IkReal(0.321000000000000))*(sj18));
IkReal x926=((IkReal(0.321000000000000))*(cj18));
IkReal x927=((pz)*(x922));
evalcond[0]=((pz)+(((x923)*(x925)))+(((x922)*(x926)))+(((IkReal(0.400000000000000))*(x922))));
evalcond[1]=((((IkReal(-0.100000000000000))*(x922)))+(((pz)*(x923)))+(((x922)*(x924)))+(x925));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x923)))+(((IkReal(-1.00000000000000))*(x923)*(x924)))+(x926)+(x927));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x924)))+(((x923)*(x926)))+(((IkReal(0.400000000000000))*(x923)))+(((IkReal(-1.00000000000000))*(x922)*(x925))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x923)*(x924)))+(((IkReal(-0.0800000000000000))*(x923)))+(((IkReal(0.200000000000000))*(x924)))+(((IkReal(-0.800000000000000))*(x927)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x928=((cj15)*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(-1.00000000000000))*(x928));
evalcond[2]=x928;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst52;
IkReal x929=((py)*(sj15));
gconst52=IKsign(((IkReal(-40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(400.000000000000))*(x929)))+(((IkReal(-32.1000000000000))*(cj18)))+(((IkReal(321.000000000000))*(cj18)*(x929)))));
IkReal x930=((py)*(sj15));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(12.4610591900312))*(x930)))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(10.0000000000000))*(cj18)*(x930)))+(((IkReal(-1.00000000000000))*(cj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj18)*(pz)))+(((IkReal(-1.00000000000000))*(sj18)))+(((IkReal(10.0000000000000))*(py)*(sj15)*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x931=((cj15)*(py));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-1.00000000000000))*(x931));
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x931;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x932=IKsin(j16);
IkReal x933=IKcos(j16);
IkReal x934=((py)*(sj15));
IkReal x935=((IkReal(1.00000000000000))*(x934));
evalcond[0]=((IkReal(0.721000000000000))*(x932));
evalcond[1]=((((IkReal(0.100000000000000))*(x932)))+(((IkReal(-1.00000000000000))*(x932)*(x935))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(0.100000000000000))*(x933)))+(((IkReal(-1.00000000000000))*(x933)*(x935))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x933)))+(((IkReal(0.800000000000000))*(x933)*(x934)))+(((IkReal(0.200000000000000))*(x934)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x936=((cj15)*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(-1.00000000000000))*(x936));
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x936;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x937=IKsin(j16);
IkReal x938=IKcos(j16);
IkReal x939=((py)*(sj15));
IkReal x940=((IkReal(1.00000000000000))*(x939));
evalcond[0]=((IkReal(0.0790000000000000))*(x937));
evalcond[1]=((((IkReal(0.100000000000000))*(x937)))+(((IkReal(-1.00000000000000))*(x937)*(x940))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x938)))+(((IkReal(-1.00000000000000))*(x938)*(x940))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x938)))+(((IkReal(0.800000000000000))*(x938)*(x939)))+(((IkReal(0.200000000000000))*(x939)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x941=((cj18)*(pz));
IkReal x942=((py)*(sj15)*(sj18));
CheckValue<IkReal> x943 = IKPowWithIntegerCheck(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x942)))+(((IkReal(321000.000000000))*(x941)))+(((IkReal(-32100.0000000000))*(sj18)))),-1.00000000000000);
if( !x943.valid ) {
    continue;
}
CheckValue<IkReal> x944 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x944.valid ) {
    continue;
}
CheckValue<IkReal> x945 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x945.valid ) {
    continue;
}
CheckValue<IkReal> x946 = IKPowWithIntegerCheck(((((IkReal(321.000000000000))*(x941)))+(((IkReal(321.000000000000))*(x942)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))),-1.00000000000000);
if( !x946.valid ) {
    continue;
}
if( IKabs(((x943.value)*(((((IkReal(103041.000000000))*(x944.value)))+(((IkReal(-1000000.00000000))*(x945.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x946.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x943.value)*(((((IkReal(103041.000000000))*(x944.value)))+(((IkReal(-1000000.00000000))*(x945.value)))))))+IKsqr(((x946.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x943.value)*(((((IkReal(103041.000000000))*(x944.value)))+(((IkReal(-1000000.00000000))*(x945.value)))))), ((x946.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x947=IKsin(j16);
IkReal x948=IKcos(j16);
IkReal x949=((py)*(sj15));
IkReal x950=((IkReal(0.321000000000000))*(sj18));
IkReal x951=((IkReal(0.321000000000000))*(cj18));
IkReal x952=((IkReal(1.00000000000000))*(x948));
IkReal x953=((pz)*(x947));
evalcond[0]=((((x947)*(x951)))+(pz)+(((IkReal(0.400000000000000))*(x947)))+(((IkReal(-1.00000000000000))*(x948)*(x950))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x949)*(x952)))+(x953)+(x951)+(((IkReal(0.100000000000000))*(x948))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x952)))+(((IkReal(-1.00000000000000))*(x947)*(x949)))+(x950)+(((IkReal(0.100000000000000))*(x947))));
evalcond[3]=((IkReal(0.100000000000000))+(((x948)*(x951)))+(((IkReal(-1.00000000000000))*(x949)))+(((x947)*(x950)))+(((IkReal(0.400000000000000))*(x948))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x948)))+(((IkReal(-0.800000000000000))*(x953)))+(((IkReal(0.200000000000000))*(x949)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x948)*(x949))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x955 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x955.valid ) {
    continue;
}
CheckValue<IkReal> x956 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x956.valid ) {
    continue;
}
CheckValue<IkReal> x954 = IKatan2WithCheck(((gconst52)*(((((IkReal(100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(-1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))),((gconst52)*(((IkReal(160.000000000000))+(((IkReal(-1000.00000000000))*(x955.value)))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(103.041000000000))*(x956.value)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x954.valid ) {
    continue;
}
j16array[0]=x954.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x957=IKsin(j16);
IkReal x958=IKcos(j16);
IkReal x959=((py)*(sj15));
IkReal x960=((IkReal(0.321000000000000))*(sj18));
IkReal x961=((IkReal(0.321000000000000))*(cj18));
IkReal x962=((IkReal(1.00000000000000))*(x958));
IkReal x963=((pz)*(x957));
evalcond[0]=((((IkReal(-1.00000000000000))*(x958)*(x960)))+(((x957)*(x961)))+(pz)+(((IkReal(0.400000000000000))*(x957))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x958)))+(((IkReal(-1.00000000000000))*(x959)*(x962)))+(x963)+(x961));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x962)))+(((IkReal(0.100000000000000))*(x957)))+(((IkReal(-1.00000000000000))*(x957)*(x959)))+(x960));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x959)))+(((x957)*(x960)))+(((x958)*(x961)))+(((IkReal(0.400000000000000))*(x958))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x958)*(x959)))+(((IkReal(-0.800000000000000))*(x963)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x959)))+(((IkReal(-0.0800000000000000))*(x958))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x964=((px)*(sj15));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=x964;
evalcond[2]=x964;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst53;
IkReal x965=((cj15)*(px));
gconst53=IKsign(((IkReal(40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(-400.000000000000))*(x965)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-321.000000000000))*(cj18)*(x965)))));
IkReal x966=((cj15)*(px));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(cj18)+(((IkReal(-12.4610591900312))*(x966)))+(((IkReal(-10.0000000000000))*(cj18)*(x966))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj18)*(pz)))+(sj18)+(((IkReal(-10.0000000000000))*(cj15)*(px)*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x967=((px)*(sj15));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=x967;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x967;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x968=IKsin(j16);
IkReal x969=IKcos(j16);
IkReal x970=((cj15)*(px));
evalcond[0]=((IkReal(0.721000000000000))*(x968));
evalcond[1]=((((IkReal(-0.100000000000000))*(x968)))+(((x968)*(x970))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(0.100000000000000))*(x969)))+(((IkReal(-1.00000000000000))*(x969)*(x970))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x969)*(x970)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x970)))+(((IkReal(-0.0800000000000000))*(x969))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x971=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=x971;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x971;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x972=IKsin(j16);
IkReal x973=IKcos(j16);
IkReal x974=((cj15)*(px));
evalcond[0]=((IkReal(0.0790000000000000))*(x972));
evalcond[1]=((((IkReal(-0.100000000000000))*(x972)))+(((x972)*(x974))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x973)))+(((IkReal(-1.00000000000000))*(x973)*(x974))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x973)*(x974)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x974)))+(((IkReal(-0.0800000000000000))*(x973))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x975=((cj15)*(px));
IkReal x976=((cj18)*(pz));
CheckValue<IkReal> x977 = IKPowWithIntegerCheck(((((IkReal(400000.000000000))*(pz)))+(((IkReal(-321000.000000000))*(sj18)*(x975)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(321000.000000000))*(x976)))),-1.00000000000000);
if( !x977.valid ) {
    continue;
}
CheckValue<IkReal> x978 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x978.valid ) {
    continue;
}
CheckValue<IkReal> x979 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x979.valid ) {
    continue;
}
CheckValue<IkReal> x980 = IKPowWithIntegerCheck(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x976)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-321.000000000000))*(sj18)*(x975)))),-1.00000000000000);
if( !x980.valid ) {
    continue;
}
if( IKabs(((x977.value)*(((((IkReal(103041.000000000))*(x978.value)))+(((IkReal(-1000000.00000000))*(x979.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x980.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x975))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x977.value)*(((((IkReal(103041.000000000))*(x978.value)))+(((IkReal(-1000000.00000000))*(x979.value)))))))+IKsqr(((x980.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x975)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x977.value)*(((((IkReal(103041.000000000))*(x978.value)))+(((IkReal(-1000000.00000000))*(x979.value)))))), ((x980.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x975)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x981=IKsin(j16);
IkReal x982=IKcos(j16);
IkReal x983=((cj15)*(px));
IkReal x984=((IkReal(0.321000000000000))*(sj18));
IkReal x985=((IkReal(0.321000000000000))*(cj18));
IkReal x986=((pz)*(x981));
evalcond[0]=((((x981)*(x985)))+(((IkReal(0.400000000000000))*(x981)))+(((x982)*(x984)))+(pz));
evalcond[1]=((((x981)*(x983)))+(((IkReal(-0.100000000000000))*(x981)))+(((pz)*(x982)))+(x984));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x982)*(x983)))+(((IkReal(0.100000000000000))*(x982)))+(x985)+(x986));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x982)))+(((IkReal(-1.00000000000000))*(x983)))+(((x982)*(x985)))+(((IkReal(-1.00000000000000))*(x981)*(x984))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x986)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x983)))+(((IkReal(-0.0800000000000000))*(x982)))+(((IkReal(0.800000000000000))*(x982)*(x983))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x988 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x988.valid ) {
    continue;
}
CheckValue<IkReal> x989 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x989.valid ) {
    continue;
}
CheckValue<IkReal> x987 = IKatan2WithCheck(((gconst53)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(cj15)*(px)*(pz)))))),((gconst53)*(((IkReal(-160.000000000000))+(((IkReal(-256.800000000000))*(cj18)))+(((IkReal(1000.00000000000))*(x988.value)))+(((IkReal(-103.041000000000))*(x989.value)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x987.valid ) {
    continue;
}
j16array[0]=x987.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x990=IKsin(j16);
IkReal x991=IKcos(j16);
IkReal x992=((cj15)*(px));
IkReal x993=((IkReal(0.321000000000000))*(sj18));
IkReal x994=((IkReal(0.321000000000000))*(cj18));
IkReal x995=((pz)*(x990));
evalcond[0]=((((IkReal(0.400000000000000))*(x990)))+(((x991)*(x993)))+(((x990)*(x994)))+(pz));
evalcond[1]=((((pz)*(x991)))+(((x990)*(x992)))+(((IkReal(-0.100000000000000))*(x990)))+(x993));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x991)*(x992)))+(((IkReal(0.100000000000000))*(x991)))+(x995)+(x994));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x992)))+(((IkReal(0.400000000000000))*(x991)))+(((x991)*(x994)))+(((IkReal(-1.00000000000000))*(x990)*(x993))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x995)))+(((IkReal(0.800000000000000))*(x991)*(x992)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x991)))+(((IkReal(0.200000000000000))*(x992))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x996=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(py)));
evalcond[1]=x996;
evalcond[2]=((IkReal(-1.00000000000000))*(x996));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst54;
IkReal x997=((cj15)*(px));
gconst54=IKsign(((IkReal(-40.0000000000000))+(((IkReal(400.000000000000))*(x997)))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(321.000000000000))*(cj18)*(x997)))+(((IkReal(-32.1000000000000))*(cj18)))));
IkReal x998=((cj15)*(px));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(12.4610591900312))*(x998)))+(((IkReal(-1.00000000000000))*(cj18)))+(((IkReal(10.0000000000000))*(cj18)*(x998))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj15)*(px)*(sj18)))+(((IkReal(10.0000000000000))*(cj18)*(pz)))+(((IkReal(-1.00000000000000))*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x999=((px)*(sj15));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=x999;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(-1.00000000000000))*(x999));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x1000=IKsin(j16);
IkReal x1001=IKcos(j16);
IkReal x1002=((cj15)*(px));
IkReal x1003=((IkReal(1.00000000000000))*(x1002));
evalcond[0]=((IkReal(0.721000000000000))*(x1000));
evalcond[1]=((((IkReal(0.100000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x1000)*(x1003))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(0.100000000000000))*(x1001)))+(((IkReal(-1.00000000000000))*(x1001)*(x1003))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1002)))+(((IkReal(0.800000000000000))*(x1001)*(x1002)))+(((IkReal(-0.0800000000000000))*(x1001)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1004=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=x1004;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(-1.00000000000000))*(x1004));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x1005=IKsin(j16);
IkReal x1006=IKcos(j16);
IkReal x1007=((cj15)*(px));
IkReal x1008=((IkReal(1.00000000000000))*(x1007));
evalcond[0]=((IkReal(0.0790000000000000))*(x1005));
evalcond[1]=((((IkReal(0.100000000000000))*(x1005)))+(((IkReal(-1.00000000000000))*(x1005)*(x1008))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x1006)))+(((IkReal(-1.00000000000000))*(x1006)*(x1008))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1007)))+(((IkReal(-0.0800000000000000))*(x1006)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x1006)*(x1007))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1009=((cj15)*(px));
IkReal x1010=((cj18)*(pz));
CheckValue<IkReal> x1011 = IKPowWithIntegerCheck(((((IkReal(321000.000000000))*(x1010)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(sj18)*(x1009)))+(((IkReal(-32100.0000000000))*(sj18)))),-1.00000000000000);
if( !x1011.valid ) {
    continue;
}
CheckValue<IkReal> x1012 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1012.valid ) {
    continue;
}
CheckValue<IkReal> x1013 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x1013.valid ) {
    continue;
}
CheckValue<IkReal> x1014 = IKPowWithIntegerCheck(((((IkReal(321.000000000000))*(x1010)))+(((IkReal(321.000000000000))*(sj18)*(x1009)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))),-1.00000000000000);
if( !x1014.valid ) {
    continue;
}
if( IKabs(((x1011.value)*(((((IkReal(103041.000000000))*(x1012.value)))+(((IkReal(-1000000.00000000))*(x1013.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1014.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(1000.00000000000))*(pz)*(x1009)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1011.value)*(((((IkReal(103041.000000000))*(x1012.value)))+(((IkReal(-1000000.00000000))*(x1013.value)))))))+IKsqr(((x1014.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(1000.00000000000))*(pz)*(x1009)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x1011.value)*(((((IkReal(103041.000000000))*(x1012.value)))+(((IkReal(-1000000.00000000))*(x1013.value)))))), ((x1014.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(1000.00000000000))*(pz)*(x1009)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1015=IKsin(j16);
IkReal x1016=IKcos(j16);
IkReal x1017=((cj15)*(px));
IkReal x1018=((IkReal(0.321000000000000))*(sj18));
IkReal x1019=((IkReal(0.321000000000000))*(cj18));
IkReal x1020=((IkReal(1.00000000000000))*(x1016));
IkReal x1021=((pz)*(x1015));
evalcond[0]=((((IkReal(0.400000000000000))*(x1015)))+(((IkReal(-1.00000000000000))*(x1016)*(x1018)))+(pz)+(((x1015)*(x1019))));
evalcond[1]=((IkReal(0.400000000000000))+(x1019)+(x1021)+(((IkReal(-1.00000000000000))*(x1017)*(x1020)))+(((IkReal(0.100000000000000))*(x1016))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x1020)))+(x1018)+(((IkReal(-1.00000000000000))*(x1015)*(x1017)))+(((IkReal(0.100000000000000))*(x1015))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1016)*(x1019)))+(((IkReal(0.400000000000000))*(x1016)))+(((x1015)*(x1018)))+(((IkReal(-1.00000000000000))*(x1017))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1016)))+(((IkReal(0.800000000000000))*(x1016)*(x1017)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1017)))+(((IkReal(-0.800000000000000))*(x1021))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1023 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x1023.valid ) {
    continue;
}
CheckValue<IkReal> x1024 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1024.valid ) {
    continue;
}
CheckValue<IkReal> x1022 = IKatan2WithCheck(((gconst54)*(((((IkReal(100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))+(((IkReal(-1000.00000000000))*(cj15)*(px)*(pz)))))),((gconst54)*(((IkReal(160.000000000000))+(((IkReal(-1000.00000000000))*(x1023.value)))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(103.041000000000))*(x1024.value)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1022.valid ) {
    continue;
}
j16array[0]=x1022.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1025=IKsin(j16);
IkReal x1026=IKcos(j16);
IkReal x1027=((cj15)*(px));
IkReal x1028=((IkReal(0.321000000000000))*(sj18));
IkReal x1029=((IkReal(0.321000000000000))*(cj18));
IkReal x1030=((IkReal(1.00000000000000))*(x1026));
IkReal x1031=((pz)*(x1025));
evalcond[0]=((((IkReal(0.400000000000000))*(x1025)))+(((IkReal(-1.00000000000000))*(x1026)*(x1028)))+(pz)+(((x1025)*(x1029))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1027)*(x1030)))+(x1031)+(x1029)+(((IkReal(0.100000000000000))*(x1026))));
evalcond[2]=((x1028)+(((IkReal(-1.00000000000000))*(pz)*(x1030)))+(((IkReal(0.100000000000000))*(x1025)))+(((IkReal(-1.00000000000000))*(x1025)*(x1027))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1026)))+(((IkReal(-1.00000000000000))*(x1027)))+(((x1026)*(x1029)))+(((x1025)*(x1028))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x1026)*(x1027)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1026)))+(((IkReal(0.200000000000000))*(x1027)))+(((IkReal(-0.800000000000000))*(x1031))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1032=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=x1032;
evalcond[2]=x1032;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst55;
CheckValue<IkReal> x1033 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1033.valid ) {
    continue;
}
CheckValue<IkReal> x1034 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1034.valid ) {
    continue;
}
gconst55=IKsign(((IkReal(160000.000000000))+(((IkReal(103041.000000000))*(x1033.value)))+(((IkReal(256800.000000000))*(cj18)))+(((IkReal(103041.000000000))*(x1034.value)))));
CheckValue<IkReal> x1035 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1035.valid ) {
    continue;
}
CheckValue<IkReal> x1036 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1036.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(((IkReal(2.49221183800623))*(cj18)))+(x1035.value)+(x1036.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(py)*(sj15)))+(((IkReal(10.0000000000000))*(cj15)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(py)*(sj15)))+(((IkReal(10.0000000000000))*(cj15)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst56;
CheckValue<IkReal> x1037 = IKatan2WithCheck(((IkReal(10.0000000000000))*(px)),((IkReal(10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1037.valid ) {
    continue;
}
CheckValue<IkReal> x1039 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1039.valid ) {
    continue;
}
CheckValue<IkReal> x1040 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1040.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1039.value)))+(((IkReal(100.000000000000))*(x1040.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1038 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1039.value)))+(((IkReal(100.000000000000))*(x1040.value)))))),-1.00000000000000);
if( !x1038.valid ) {
    continue;
}
if( (x1038.value) < -1-IKFAST_SINCOS_THRESH || (x1038.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
gconst56=((((IkReal(-1.00000000000000))*(x1037.value)))+(IKasin(x1038.value)));
IkReal gconst57;
gconst57=IKsin(gconst56);
IkReal gconst58;
gconst58=IKcos(gconst56);
IkReal x1041=((((gconst57)*(px)))+(((IkReal(-1.00000000000000))*(gconst58)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst56)))+(j15))))), IkReal(6.28318530717959))));
evalcond[1]=x1041;
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(gconst58)*(px)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(cj18)))+(((IkReal(0.200000000000000))*(gconst57)*(py))));
evalcond[3]=x1041;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst68;
CheckValue<IkReal> x1042 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1042.valid ) {
    continue;
}
CheckValue<IkReal> x1043 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1043.valid ) {
    continue;
}
gconst68=IKsign(((IkReal(160000.000000000))+(((IkReal(103041.000000000))*(x1042.value)))+(((IkReal(256800.000000000))*(cj18)))+(((IkReal(103041.000000000))*(x1043.value)))));
CheckValue<IkReal> x1044 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1044.valid ) {
    continue;
}
CheckValue<IkReal> x1045 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1045.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(((IkReal(2.49221183800623))*(cj18)))+(x1044.value)+(x1045.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst58)*(px)))+(((IkReal(10.0000000000000))*(gconst57)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst58)*(px)))+(((IkReal(10.0000000000000))*(gconst57)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1046=((gconst58)*(px));
IkReal x1047=((gconst57)*(py));
CheckValue<IkReal> x1048 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1046)))+(((IkReal(1000.00000000000))*(x1047)))),-1.00000000000000);
if( !x1048.valid ) {
    continue;
}
CheckValue<IkReal> x1049 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1047)))+(((IkReal(-1.00000000000000))*(x1046)))),-1.00000000000000);
if( !x1049.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1048.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1049.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1048.value)))+IKsqr(((x1049.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1048.value)), ((x1049.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1050=IKsin(j16);
IkReal x1051=IKcos(j16);
IkReal x1052=((IkReal(0.321000000000000))*(sj18));
IkReal x1053=((gconst58)*(px));
IkReal x1054=((gconst57)*(py));
IkReal x1055=((IkReal(0.321000000000000))*(cj18));
IkReal x1056=((IkReal(0.800000000000000))*(x1051));
IkReal x1057=((IkReal(1.00000000000000))*(x1051));
evalcond[0]=((((x1050)*(x1055)))+(((IkReal(0.400000000000000))*(x1050)))+(((x1051)*(x1052))));
evalcond[1]=((x1052)+(((IkReal(-0.100000000000000))*(x1050)))+(((x1050)*(x1053)))+(((x1050)*(x1054))));
evalcond[2]=((IkReal(0.400000000000000))+(x1055)+(((IkReal(0.100000000000000))*(x1051)))+(((IkReal(-1.00000000000000))*(x1054)*(x1057)))+(((IkReal(-1.00000000000000))*(x1053)*(x1057))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1051)))+(((x1051)*(x1055)))+(((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(-1.00000000000000))*(x1053)))+(((IkReal(-1.00000000000000))*(x1050)*(x1052))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1051)))+(((x1054)*(x1056)))+(((IkReal(0.200000000000000))*(x1054)))+(((IkReal(0.200000000000000))*(x1053)))+(((x1053)*(x1056)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1058=((gconst57)*(py));
IkReal x1059=((gconst58)*(px));
CheckValue<IkReal> x1060 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1059)))+(((IkReal(1000.00000000000))*(x1058)))),-1.00000000000000);
if( !x1060.valid ) {
    continue;
}
CheckValue<IkReal> x1061 = IKPowWithIntegerCheck(((IkReal(-0.100000000000000))+(x1058)+(x1059)),-1.00000000000000);
if( !x1061.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1060.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1061.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1060.value)))+IKsqr(((x1061.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1060.value)), ((x1061.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1062=IKsin(j16);
IkReal x1063=IKcos(j16);
IkReal x1064=((IkReal(0.321000000000000))*(sj18));
IkReal x1065=((gconst58)*(px));
IkReal x1066=((gconst57)*(py));
IkReal x1067=((IkReal(0.321000000000000))*(cj18));
IkReal x1068=((IkReal(0.800000000000000))*(x1063));
IkReal x1069=((IkReal(1.00000000000000))*(x1063));
evalcond[0]=((((IkReal(0.400000000000000))*(x1062)))+(((x1062)*(x1067)))+(((x1063)*(x1064))));
evalcond[1]=((x1064)+(((IkReal(-0.100000000000000))*(x1062)))+(((x1062)*(x1065)))+(((x1062)*(x1066))));
evalcond[2]=((IkReal(0.400000000000000))+(x1067)+(((IkReal(0.100000000000000))*(x1063)))+(((IkReal(-1.00000000000000))*(x1066)*(x1069)))+(((IkReal(-1.00000000000000))*(x1065)*(x1069))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1063)))+(((IkReal(-1.00000000000000))*(x1062)*(x1064)))+(((x1063)*(x1067)))+(((IkReal(-1.00000000000000))*(x1065)))+(((IkReal(-1.00000000000000))*(x1066))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1063)))+(((IkReal(0.200000000000000))*(x1065)))+(((IkReal(0.200000000000000))*(x1066)))+(((x1066)*(x1068)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1065)*(x1068))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1070=((gconst58)*(px));
IkReal x1071=((IkReal(321000.000000000))*(cj18));
IkReal x1072=((gconst57)*(py));
IkReal x1073=((IkReal(321000.000000000))*(sj18));
CheckValue<IkReal> x1074 = IKatan2WithCheck(((gconst68)*(((((IkReal(-1.00000000000000))*(x1070)*(x1073)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(x1072)*(x1073)))))),((gconst68)*(((IkReal(-40000.0000000000))+(((x1070)*(x1071)))+(((x1071)*(x1072)))+(((IkReal(-32100.0000000000))*(cj18)))+(((IkReal(400000.000000000))*(x1070)))+(((IkReal(400000.000000000))*(x1072)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1074.valid ) {
    continue;
}
j16array[0]=x1074.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1075=IKsin(j16);
IkReal x1076=IKcos(j16);
IkReal x1077=((IkReal(0.321000000000000))*(sj18));
IkReal x1078=((gconst58)*(px));
IkReal x1079=((gconst57)*(py));
IkReal x1080=((IkReal(0.321000000000000))*(cj18));
IkReal x1081=((IkReal(0.800000000000000))*(x1076));
IkReal x1082=((IkReal(1.00000000000000))*(x1076));
evalcond[0]=((((IkReal(0.400000000000000))*(x1075)))+(((x1075)*(x1080)))+(((x1076)*(x1077))));
evalcond[1]=((x1077)+(((IkReal(-0.100000000000000))*(x1075)))+(((x1075)*(x1079)))+(((x1075)*(x1078))));
evalcond[2]=((IkReal(0.400000000000000))+(x1080)+(((IkReal(-1.00000000000000))*(x1078)*(x1082)))+(((IkReal(0.100000000000000))*(x1076)))+(((IkReal(-1.00000000000000))*(x1079)*(x1082))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1075)*(x1077)))+(((x1076)*(x1080)))+(((IkReal(0.400000000000000))*(x1076)))+(((IkReal(-1.00000000000000))*(x1078)))+(((IkReal(-1.00000000000000))*(x1079))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1079)*(x1081)))+(((IkReal(-0.0800000000000000))*(x1076)))+(((x1078)*(x1081)))+(((IkReal(0.200000000000000))*(x1079)))+(((IkReal(0.200000000000000))*(x1078)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst59;
CheckValue<IkReal> x1083 = IKatan2WithCheck(((IkReal(10.0000000000000))*(px)),((IkReal(10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1083.valid ) {
    continue;
}
CheckValue<IkReal> x1085 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1085.valid ) {
    continue;
}
CheckValue<IkReal> x1086 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1086.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1085.value)))+(((IkReal(100.000000000000))*(x1086.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1084 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1085.value)))+(((IkReal(100.000000000000))*(x1086.value)))))),-1.00000000000000);
if( !x1084.valid ) {
    continue;
}
if( (x1084.value) < -1-IKFAST_SINCOS_THRESH || (x1084.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
gconst59=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1083.value)))+(((IkReal(-1.00000000000000))*(IKasin(x1084.value)))));
IkReal gconst60;
gconst60=IKsin(gconst59);
IkReal gconst61;
gconst61=IKcos(gconst59);
IkReal x1087=((((gconst60)*(px)))+(((IkReal(-1.00000000000000))*(gconst61)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst59)))+(j15))))), IkReal(6.28318530717959))));
evalcond[1]=x1087;
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(gconst61)*(px)))+(((IkReal(0.200000000000000))*(gconst60)*(py)))+(((IkReal(0.256800000000000))*(cj18))));
evalcond[3]=x1087;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst69;
CheckValue<IkReal> x1088 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1088.valid ) {
    continue;
}
CheckValue<IkReal> x1089 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1089.valid ) {
    continue;
}
gconst69=IKsign(((IkReal(160000.000000000))+(((IkReal(103041.000000000))*(x1088.value)))+(((IkReal(256800.000000000))*(cj18)))+(((IkReal(103041.000000000))*(x1089.value)))));
CheckValue<IkReal> x1090 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1090.valid ) {
    continue;
}
CheckValue<IkReal> x1091 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1091.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(((IkReal(2.49221183800623))*(cj18)))+(x1090.value)+(x1091.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst60)*(py)))+(((IkReal(10.0000000000000))*(gconst61)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst60)*(py)))+(((IkReal(10.0000000000000))*(gconst61)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1092=((gconst61)*(px));
IkReal x1093=((gconst60)*(py));
CheckValue<IkReal> x1094 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1093)))+(((IkReal(1000.00000000000))*(x1092)))),-1.00000000000000);
if( !x1094.valid ) {
    continue;
}
CheckValue<IkReal> x1095 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1092)))+(((IkReal(-1.00000000000000))*(x1093)))),-1.00000000000000);
if( !x1095.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1094.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1095.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1094.value)))+IKsqr(((x1095.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1094.value)), ((x1095.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1096=IKsin(j16);
IkReal x1097=IKcos(j16);
IkReal x1098=((gconst60)*(py));
IkReal x1099=((IkReal(0.321000000000000))*(sj18));
IkReal x1100=((IkReal(0.321000000000000))*(cj18));
IkReal x1101=((gconst61)*(px));
IkReal x1102=((IkReal(1.00000000000000))*(x1097));
IkReal x1103=((IkReal(0.800000000000000))*(x1097));
evalcond[0]=((((x1096)*(x1100)))+(((IkReal(0.400000000000000))*(x1096)))+(((x1097)*(x1099))));
evalcond[1]=((x1099)+(((x1096)*(x1101)))+(((IkReal(-0.100000000000000))*(x1096)))+(((x1096)*(x1098))));
evalcond[2]=((IkReal(0.400000000000000))+(x1100)+(((IkReal(-1.00000000000000))*(x1098)*(x1102)))+(((IkReal(0.100000000000000))*(x1097)))+(((IkReal(-1.00000000000000))*(x1101)*(x1102))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1097)*(x1100)))+(((IkReal(-1.00000000000000))*(x1096)*(x1099)))+(((IkReal(-1.00000000000000))*(x1101)))+(((IkReal(-1.00000000000000))*(x1098)))+(((IkReal(0.400000000000000))*(x1097))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1098)*(x1103)))+(((x1101)*(x1103)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1097)))+(((IkReal(0.200000000000000))*(x1098)))+(((IkReal(0.200000000000000))*(x1101))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1104=((gconst61)*(px));
IkReal x1105=((gconst60)*(py));
CheckValue<IkReal> x1106 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1105)))+(((IkReal(1000.00000000000))*(x1104)))),-1.00000000000000);
if( !x1106.valid ) {
    continue;
}
CheckValue<IkReal> x1107 = IKPowWithIntegerCheck(((IkReal(-0.100000000000000))+(x1104)+(x1105)),-1.00000000000000);
if( !x1107.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1106.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1107.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1106.value)))+IKsqr(((x1107.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1106.value)), ((x1107.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1108=IKsin(j16);
IkReal x1109=IKcos(j16);
IkReal x1110=((gconst60)*(py));
IkReal x1111=((IkReal(0.321000000000000))*(sj18));
IkReal x1112=((IkReal(0.321000000000000))*(cj18));
IkReal x1113=((gconst61)*(px));
IkReal x1114=((IkReal(1.00000000000000))*(x1109));
IkReal x1115=((IkReal(0.800000000000000))*(x1109));
evalcond[0]=((((x1109)*(x1111)))+(((x1108)*(x1112)))+(((IkReal(0.400000000000000))*(x1108))));
evalcond[1]=((x1111)+(((x1108)*(x1113)))+(((x1108)*(x1110)))+(((IkReal(-0.100000000000000))*(x1108))));
evalcond[2]=((IkReal(0.400000000000000))+(x1112)+(((IkReal(-1.00000000000000))*(x1113)*(x1114)))+(((IkReal(0.100000000000000))*(x1109)))+(((IkReal(-1.00000000000000))*(x1110)*(x1114))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1109)*(x1112)))+(((IkReal(-1.00000000000000))*(x1110)))+(((IkReal(-1.00000000000000))*(x1113)))+(((IkReal(-1.00000000000000))*(x1108)*(x1111)))+(((IkReal(0.400000000000000))*(x1109))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1113)*(x1115)))+(((x1110)*(x1115)))+(((IkReal(-0.0800000000000000))*(x1109)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1110)))+(((IkReal(0.200000000000000))*(x1113))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1116=((IkReal(321000.000000000))*(cj18));
IkReal x1117=((gconst60)*(py));
IkReal x1118=((gconst61)*(px));
IkReal x1119=((IkReal(321000.000000000))*(sj18));
CheckValue<IkReal> x1120 = IKatan2WithCheck(((gconst69)*(((((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(x1118)*(x1119)))+(((IkReal(-1.00000000000000))*(x1117)*(x1119)))))),((gconst69)*(((IkReal(-40000.0000000000))+(((IkReal(-32100.0000000000))*(cj18)))+(((x1116)*(x1117)))+(((x1116)*(x1118)))+(((IkReal(400000.000000000))*(x1117)))+(((IkReal(400000.000000000))*(x1118)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1120.valid ) {
    continue;
}
j16array[0]=x1120.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1121=IKsin(j16);
IkReal x1122=IKcos(j16);
IkReal x1123=((gconst60)*(py));
IkReal x1124=((IkReal(0.321000000000000))*(sj18));
IkReal x1125=((IkReal(0.321000000000000))*(cj18));
IkReal x1126=((gconst61)*(px));
IkReal x1127=((IkReal(1.00000000000000))*(x1122));
IkReal x1128=((IkReal(0.800000000000000))*(x1122));
evalcond[0]=((((x1121)*(x1125)))+(((IkReal(0.400000000000000))*(x1121)))+(((x1122)*(x1124))));
evalcond[1]=((x1124)+(((IkReal(-0.100000000000000))*(x1121)))+(((x1121)*(x1123)))+(((x1121)*(x1126))));
evalcond[2]=((IkReal(0.400000000000000))+(x1125)+(((IkReal(-1.00000000000000))*(x1126)*(x1127)))+(((IkReal(-1.00000000000000))*(x1123)*(x1127)))+(((IkReal(0.100000000000000))*(x1122))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1121)*(x1124)))+(((IkReal(0.400000000000000))*(x1122)))+(((IkReal(-1.00000000000000))*(x1126)))+(((IkReal(-1.00000000000000))*(x1123)))+(((x1122)*(x1125))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1126)))+(((IkReal(0.200000000000000))*(x1123)))+(((IkReal(-0.0800000000000000))*(x1122)))+(((x1123)*(x1128)))+(((x1126)*(x1128))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst62;
CheckValue<IkReal> x1129 = IKatan2WithCheck(((IkReal(10.0000000000000))*(px)),((IkReal(10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1129.valid ) {
    continue;
}
CheckValue<IkReal> x1131 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1131.valid ) {
    continue;
}
CheckValue<IkReal> x1132 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1132.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1131.value)))+(((IkReal(100.000000000000))*(x1132.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1130 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1131.value)))+(((IkReal(100.000000000000))*(x1132.value)))))),-1.00000000000000);
if( !x1130.valid ) {
    continue;
}
if( (x1130.value) < -1-IKFAST_SINCOS_THRESH || (x1130.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
gconst62=((((IkReal(-1.00000000000000))*(x1129.value)))+(IKasin(x1130.value)));
IkReal gconst63;
gconst63=IKsin(gconst62);
IkReal gconst64;
gconst64=IKcos(gconst62);
IkReal x1133=((((IkReal(-1.00000000000000))*(gconst64)*(py)))+(((gconst63)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst62)))+(j15))))), IkReal(6.28318530717959))));
evalcond[1]=x1133;
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(gconst63)*(py)))+(((IkReal(0.200000000000000))*(gconst64)*(px)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(cj18))));
evalcond[3]=x1133;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst70;
CheckValue<IkReal> x1134 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1134.valid ) {
    continue;
}
CheckValue<IkReal> x1135 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1135.valid ) {
    continue;
}
gconst70=IKsign(((IkReal(160000.000000000))+(((IkReal(103041.000000000))*(x1134.value)))+(((IkReal(256800.000000000))*(cj18)))+(((IkReal(103041.000000000))*(x1135.value)))));
CheckValue<IkReal> x1136 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1136.valid ) {
    continue;
}
CheckValue<IkReal> x1137 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1137.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(((IkReal(2.49221183800623))*(cj18)))+(x1136.value)+(x1137.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst64)*(px)))+(((IkReal(10.0000000000000))*(gconst63)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst64)*(px)))+(((IkReal(10.0000000000000))*(gconst63)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1138=((gconst63)*(py));
IkReal x1139=((gconst64)*(px));
CheckValue<IkReal> x1140 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1138)))+(((IkReal(1000.00000000000))*(x1139)))),-1.00000000000000);
if( !x1140.valid ) {
    continue;
}
CheckValue<IkReal> x1141 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1139)))+(((IkReal(-1.00000000000000))*(x1138)))),-1.00000000000000);
if( !x1141.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1140.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1141.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1140.value)))+IKsqr(((x1141.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1140.value)), ((x1141.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1142=IKsin(j16);
IkReal x1143=IKcos(j16);
IkReal x1144=((gconst64)*(px));
IkReal x1145=((IkReal(0.321000000000000))*(sj18));
IkReal x1146=((gconst63)*(py));
IkReal x1147=((IkReal(0.321000000000000))*(cj18));
IkReal x1148=((IkReal(1.00000000000000))*(x1143));
IkReal x1149=((IkReal(0.800000000000000))*(x1143));
evalcond[0]=((((x1143)*(x1145)))+(((x1142)*(x1147)))+(((IkReal(0.400000000000000))*(x1142))));
evalcond[1]=((x1145)+(((x1142)*(x1144)))+(((x1142)*(x1146)))+(((IkReal(-0.100000000000000))*(x1142))));
evalcond[2]=((IkReal(0.400000000000000))+(x1147)+(((IkReal(-1.00000000000000))*(x1146)*(x1148)))+(((IkReal(-1.00000000000000))*(x1144)*(x1148)))+(((IkReal(0.100000000000000))*(x1143))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1143)*(x1147)))+(((IkReal(-1.00000000000000))*(x1144)))+(((IkReal(-1.00000000000000))*(x1146)))+(((IkReal(0.400000000000000))*(x1143)))+(((IkReal(-1.00000000000000))*(x1142)*(x1145))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1146)*(x1149)))+(((IkReal(-0.0800000000000000))*(x1143)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1144)*(x1149)))+(((IkReal(0.200000000000000))*(x1144)))+(((IkReal(0.200000000000000))*(x1146))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1150=((gconst64)*(px));
IkReal x1151=((gconst63)*(py));
CheckValue<IkReal> x1152 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1150)))+(((IkReal(1000.00000000000))*(x1151)))),-1.00000000000000);
if( !x1152.valid ) {
    continue;
}
CheckValue<IkReal> x1153 = IKPowWithIntegerCheck(((IkReal(-0.100000000000000))+(x1151)+(x1150)),-1.00000000000000);
if( !x1153.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1152.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1153.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1152.value)))+IKsqr(((x1153.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1152.value)), ((x1153.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1154=IKsin(j16);
IkReal x1155=IKcos(j16);
IkReal x1156=((gconst64)*(px));
IkReal x1157=((IkReal(0.321000000000000))*(sj18));
IkReal x1158=((gconst63)*(py));
IkReal x1159=((IkReal(0.321000000000000))*(cj18));
IkReal x1160=((IkReal(1.00000000000000))*(x1155));
IkReal x1161=((IkReal(0.800000000000000))*(x1155));
evalcond[0]=((((IkReal(0.400000000000000))*(x1154)))+(((x1154)*(x1159)))+(((x1155)*(x1157))));
evalcond[1]=((x1157)+(((IkReal(-0.100000000000000))*(x1154)))+(((x1154)*(x1156)))+(((x1154)*(x1158))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1156)*(x1160)))+(((IkReal(0.100000000000000))*(x1155)))+(x1159)+(((IkReal(-1.00000000000000))*(x1158)*(x1160))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1154)*(x1157)))+(((IkReal(-1.00000000000000))*(x1156)))+(((IkReal(-1.00000000000000))*(x1158)))+(((IkReal(0.400000000000000))*(x1155)))+(((x1155)*(x1159))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1156)))+(((IkReal(0.200000000000000))*(x1158)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1156)*(x1161)))+(((IkReal(-0.0800000000000000))*(x1155)))+(((x1158)*(x1161))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1162=((gconst64)*(px));
IkReal x1163=((IkReal(321000.000000000))*(gconst63)*(py));
CheckValue<IkReal> x1164 = IKatan2WithCheck(((gconst70)*(((((IkReal(-1.00000000000000))*(sj18)*(x1163)))+(((IkReal(-321000.000000000))*(sj18)*(x1162)))+(((IkReal(32100.0000000000))*(sj18)))))),((gconst70)*(((IkReal(-40000.0000000000))+(((IkReal(400000.000000000))*(gconst63)*(py)))+(((IkReal(400000.000000000))*(x1162)))+(((IkReal(321000.000000000))*(cj18)*(x1162)))+(((cj18)*(x1163)))+(((IkReal(-32100.0000000000))*(cj18)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1164.valid ) {
    continue;
}
j16array[0]=x1164.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1165=IKsin(j16);
IkReal x1166=IKcos(j16);
IkReal x1167=((gconst64)*(px));
IkReal x1168=((IkReal(0.321000000000000))*(sj18));
IkReal x1169=((gconst63)*(py));
IkReal x1170=((IkReal(0.321000000000000))*(cj18));
IkReal x1171=((IkReal(1.00000000000000))*(x1166));
IkReal x1172=((IkReal(0.800000000000000))*(x1166));
evalcond[0]=((((x1165)*(x1170)))+(((x1166)*(x1168)))+(((IkReal(0.400000000000000))*(x1165))));
evalcond[1]=((x1168)+(((x1165)*(x1169)))+(((x1165)*(x1167)))+(((IkReal(-0.100000000000000))*(x1165))));
evalcond[2]=((IkReal(0.400000000000000))+(x1170)+(((IkReal(0.100000000000000))*(x1166)))+(((IkReal(-1.00000000000000))*(x1167)*(x1171)))+(((IkReal(-1.00000000000000))*(x1169)*(x1171))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1166)*(x1170)))+(((IkReal(0.400000000000000))*(x1166)))+(((IkReal(-1.00000000000000))*(x1169)))+(((IkReal(-1.00000000000000))*(x1167)))+(((IkReal(-1.00000000000000))*(x1165)*(x1168))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1166)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1167)))+(((IkReal(0.200000000000000))*(x1169)))+(((x1167)*(x1172)))+(((x1169)*(x1172))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst65;
CheckValue<IkReal> x1173 = IKatan2WithCheck(((IkReal(10.0000000000000))*(px)),((IkReal(10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1173.valid ) {
    continue;
}
CheckValue<IkReal> x1175 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1175.valid ) {
    continue;
}
CheckValue<IkReal> x1176 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1176.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1175.value)))+(((IkReal(100.000000000000))*(x1176.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1174 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1175.value)))+(((IkReal(100.000000000000))*(x1176.value)))))),-1.00000000000000);
if( !x1174.valid ) {
    continue;
}
if( (x1174.value) < -1-IKFAST_SINCOS_THRESH || (x1174.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
gconst65=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1173.value)))+(((IkReal(-1.00000000000000))*(IKasin(x1174.value)))));
IkReal gconst66;
gconst66=IKsin(gconst65);
IkReal gconst67;
gconst67=IKcos(gconst65);
IkReal x1177=((((IkReal(-1.00000000000000))*(gconst67)*(py)))+(((gconst66)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst65)))+(j15))))), IkReal(6.28318530717959))));
evalcond[1]=x1177;
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(gconst67)*(px)))+(((IkReal(0.200000000000000))*(gconst66)*(py)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(cj18))));
evalcond[3]=x1177;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst71;
CheckValue<IkReal> x1178 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1178.valid ) {
    continue;
}
CheckValue<IkReal> x1179 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1179.valid ) {
    continue;
}
gconst71=IKsign(((IkReal(160000.000000000))+(((IkReal(103041.000000000))*(x1178.value)))+(((IkReal(256800.000000000))*(cj18)))+(((IkReal(103041.000000000))*(x1179.value)))));
CheckValue<IkReal> x1180 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1180.valid ) {
    continue;
}
CheckValue<IkReal> x1181 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1181.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(((IkReal(2.49221183800623))*(cj18)))+(x1180.value)+(x1181.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst66)*(py)))+(((IkReal(10.0000000000000))*(gconst67)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst66)*(py)))+(((IkReal(10.0000000000000))*(gconst67)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1182=((gconst66)*(py));
IkReal x1183=((gconst67)*(px));
CheckValue<IkReal> x1184 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1183)))+(((IkReal(1000.00000000000))*(x1182)))),-1.00000000000000);
if( !x1184.valid ) {
    continue;
}
CheckValue<IkReal> x1185 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1182)))+(((IkReal(-1.00000000000000))*(x1183)))),-1.00000000000000);
if( !x1185.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1184.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1185.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1184.value)))+IKsqr(((x1185.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1184.value)), ((x1185.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1186=IKsin(j16);
IkReal x1187=IKcos(j16);
IkReal x1188=((IkReal(0.321000000000000))*(sj18));
IkReal x1189=((gconst67)*(px));
IkReal x1190=((IkReal(0.321000000000000))*(cj18));
IkReal x1191=((gconst66)*(py));
IkReal x1192=((IkReal(0.800000000000000))*(x1187));
IkReal x1193=((IkReal(1.00000000000000))*(x1187));
evalcond[0]=((((x1187)*(x1188)))+(((x1186)*(x1190)))+(((IkReal(0.400000000000000))*(x1186))));
evalcond[1]=((x1188)+(((x1186)*(x1189)))+(((x1186)*(x1191)))+(((IkReal(-0.100000000000000))*(x1186))));
evalcond[2]=((IkReal(0.400000000000000))+(x1190)+(((IkReal(-1.00000000000000))*(x1191)*(x1193)))+(((IkReal(-1.00000000000000))*(x1189)*(x1193)))+(((IkReal(0.100000000000000))*(x1187))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1187)*(x1190)))+(((IkReal(-1.00000000000000))*(x1186)*(x1188)))+(((IkReal(0.400000000000000))*(x1187)))+(((IkReal(-1.00000000000000))*(x1189)))+(((IkReal(-1.00000000000000))*(x1191))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1189)*(x1192)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1191)))+(((IkReal(0.200000000000000))*(x1189)))+(((x1191)*(x1192)))+(((IkReal(-0.0800000000000000))*(x1187))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1194=((gconst66)*(py));
IkReal x1195=((gconst67)*(px));
CheckValue<IkReal> x1196 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1194)))+(((IkReal(1000.00000000000))*(x1195)))),-1.00000000000000);
if( !x1196.valid ) {
    continue;
}
CheckValue<IkReal> x1197 = IKPowWithIntegerCheck(((IkReal(-0.100000000000000))+(x1195)+(x1194)),-1.00000000000000);
if( !x1197.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1196.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1197.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1196.value)))+IKsqr(((x1197.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1196.value)), ((x1197.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1198=IKsin(j16);
IkReal x1199=IKcos(j16);
IkReal x1200=((IkReal(0.321000000000000))*(sj18));
IkReal x1201=((gconst67)*(px));
IkReal x1202=((IkReal(0.321000000000000))*(cj18));
IkReal x1203=((gconst66)*(py));
IkReal x1204=((IkReal(0.800000000000000))*(x1199));
IkReal x1205=((IkReal(1.00000000000000))*(x1199));
evalcond[0]=((((IkReal(0.400000000000000))*(x1198)))+(((x1199)*(x1200)))+(((x1198)*(x1202))));
evalcond[1]=((x1200)+(((IkReal(-0.100000000000000))*(x1198)))+(((x1198)*(x1201)))+(((x1198)*(x1203))));
evalcond[2]=((IkReal(0.400000000000000))+(x1202)+(((IkReal(-1.00000000000000))*(x1203)*(x1205)))+(((IkReal(-1.00000000000000))*(x1201)*(x1205)))+(((IkReal(0.100000000000000))*(x1199))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1199)))+(((x1199)*(x1202)))+(((IkReal(-1.00000000000000))*(x1203)))+(((IkReal(-1.00000000000000))*(x1201)))+(((IkReal(-1.00000000000000))*(x1198)*(x1200))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x1203)*(x1204)))+(((x1201)*(x1204)))+(((IkReal(0.200000000000000))*(x1201)))+(((IkReal(0.200000000000000))*(x1203)))+(((IkReal(-0.0800000000000000))*(x1199))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1206=((gconst66)*(py));
IkReal x1207=((IkReal(321000.000000000))*(sj18));
IkReal x1208=((IkReal(321000.000000000))*(cj18));
IkReal x1209=((gconst67)*(px));
CheckValue<IkReal> x1210 = IKatan2WithCheck(((gconst71)*(((((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(x1206)*(x1207)))+(((IkReal(-1.00000000000000))*(x1207)*(x1209)))))),((gconst71)*(((IkReal(-40000.0000000000))+(((IkReal(400000.000000000))*(x1209)))+(((IkReal(400000.000000000))*(x1206)))+(((x1208)*(x1209)))+(((IkReal(-32100.0000000000))*(cj18)))+(((x1206)*(x1208)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1210.valid ) {
    continue;
}
j16array[0]=x1210.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1211=IKsin(j16);
IkReal x1212=IKcos(j16);
IkReal x1213=((IkReal(0.321000000000000))*(sj18));
IkReal x1214=((gconst67)*(px));
IkReal x1215=((IkReal(0.321000000000000))*(cj18));
IkReal x1216=((gconst66)*(py));
IkReal x1217=((IkReal(0.800000000000000))*(x1212));
IkReal x1218=((IkReal(1.00000000000000))*(x1212));
evalcond[0]=((((x1212)*(x1213)))+(((x1211)*(x1215)))+(((IkReal(0.400000000000000))*(x1211))));
evalcond[1]=((x1213)+(((IkReal(-0.100000000000000))*(x1211)))+(((x1211)*(x1214)))+(((x1211)*(x1216))));
evalcond[2]=((IkReal(0.400000000000000))+(x1215)+(((IkReal(0.100000000000000))*(x1212)))+(((IkReal(-1.00000000000000))*(x1214)*(x1218)))+(((IkReal(-1.00000000000000))*(x1216)*(x1218))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1212)*(x1215)))+(((IkReal(-1.00000000000000))*(x1211)*(x1213)))+(((IkReal(0.400000000000000))*(x1212)))+(((IkReal(-1.00000000000000))*(x1216)))+(((IkReal(-1.00000000000000))*(x1214))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1214)*(x1217)))+(((IkReal(0.200000000000000))*(x1216)))+(((IkReal(0.200000000000000))*(x1214)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1212)))+(((x1216)*(x1217))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1219=((py)*(sj15));
IkReal x1220=((cj15)*(px));
CheckValue<IkReal> x1221 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1219)))+(((IkReal(1000.00000000000))*(x1220)))),-1.00000000000000);
if( !x1221.valid ) {
    continue;
}
CheckValue<IkReal> x1222 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1220)))+(((IkReal(-1.00000000000000))*(x1219)))),-1.00000000000000);
if( !x1222.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1221.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1222.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1221.value)))+IKsqr(((x1222.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1221.value)), ((x1222.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1223=IKsin(j16);
IkReal x1224=IKcos(j16);
IkReal x1225=((IkReal(0.321000000000000))*(sj18));
IkReal x1226=((cj15)*(px));
IkReal x1227=((IkReal(0.321000000000000))*(cj18));
IkReal x1228=((py)*(sj15));
IkReal x1229=((IkReal(0.800000000000000))*(x1224));
IkReal x1230=((IkReal(1.00000000000000))*(x1224));
evalcond[0]=((((x1223)*(x1227)))+(((x1224)*(x1225)))+(((IkReal(0.400000000000000))*(x1223))));
evalcond[1]=((x1225)+(((x1223)*(x1226)))+(((x1223)*(x1228)))+(((IkReal(-0.100000000000000))*(x1223))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x1224)))+(x1227)+(((IkReal(-1.00000000000000))*(x1226)*(x1230)))+(((IkReal(-1.00000000000000))*(x1228)*(x1230))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1226)))+(((IkReal(-1.00000000000000))*(x1228)))+(((x1224)*(x1227)))+(((IkReal(0.400000000000000))*(x1224)))+(((IkReal(-1.00000000000000))*(x1223)*(x1225))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1226)))+(((IkReal(0.200000000000000))*(x1228)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1226)*(x1229)))+(((IkReal(-0.0800000000000000))*(x1224)))+(((x1228)*(x1229))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1231=((py)*(sj15));
IkReal x1232=((cj15)*(px));
CheckValue<IkReal> x1233 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1232)))+(((IkReal(1000.00000000000))*(x1231)))),-1.00000000000000);
if( !x1233.valid ) {
    continue;
}
CheckValue<IkReal> x1234 = IKPowWithIntegerCheck(((IkReal(-0.100000000000000))+(x1231)+(x1232)),-1.00000000000000);
if( !x1234.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1233.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1234.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1233.value)))+IKsqr(((x1234.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1233.value)), ((x1234.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1235=IKsin(j16);
IkReal x1236=IKcos(j16);
IkReal x1237=((IkReal(0.321000000000000))*(sj18));
IkReal x1238=((cj15)*(px));
IkReal x1239=((IkReal(0.321000000000000))*(cj18));
IkReal x1240=((py)*(sj15));
IkReal x1241=((IkReal(0.800000000000000))*(x1236));
IkReal x1242=((IkReal(1.00000000000000))*(x1236));
evalcond[0]=((((x1235)*(x1239)))+(((IkReal(0.400000000000000))*(x1235)))+(((x1236)*(x1237))));
evalcond[1]=((x1237)+(((x1235)*(x1238)))+(((IkReal(-0.100000000000000))*(x1235)))+(((x1235)*(x1240))));
evalcond[2]=((IkReal(0.400000000000000))+(x1239)+(((IkReal(0.100000000000000))*(x1236)))+(((IkReal(-1.00000000000000))*(x1238)*(x1242)))+(((IkReal(-1.00000000000000))*(x1240)*(x1242))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1238)))+(((IkReal(-1.00000000000000))*(x1240)))+(((IkReal(-1.00000000000000))*(x1235)*(x1237)))+(((IkReal(0.400000000000000))*(x1236)))+(((x1236)*(x1239))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1240)))+(((x1240)*(x1241)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1238)))+(((x1238)*(x1241)))+(((IkReal(-0.0800000000000000))*(x1236))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1243=((IkReal(321000.000000000))*(py)*(sj15));
IkReal x1244=((IkReal(321000.000000000))*(cj15)*(px));
CheckValue<IkReal> x1245 = IKatan2WithCheck(((gconst55)*(((((IkReal(-1.00000000000000))*(sj18)*(x1243)))+(((IkReal(-1.00000000000000))*(sj18)*(x1244)))+(((IkReal(32100.0000000000))*(sj18)))))),((gconst55)*(((IkReal(-40000.0000000000))+(((cj18)*(x1244)))+(((cj18)*(x1243)))+(((IkReal(-32100.0000000000))*(cj18)))+(((IkReal(400000.000000000))*(cj15)*(px)))+(((IkReal(400000.000000000))*(py)*(sj15)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1245.valid ) {
    continue;
}
j16array[0]=x1245.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1246=IKsin(j16);
IkReal x1247=IKcos(j16);
IkReal x1248=((IkReal(0.321000000000000))*(sj18));
IkReal x1249=((cj15)*(px));
IkReal x1250=((IkReal(0.321000000000000))*(cj18));
IkReal x1251=((py)*(sj15));
IkReal x1252=((IkReal(0.800000000000000))*(x1247));
IkReal x1253=((IkReal(1.00000000000000))*(x1247));
evalcond[0]=((((x1246)*(x1250)))+(((IkReal(0.400000000000000))*(x1246)))+(((x1247)*(x1248))));
evalcond[1]=((((x1246)*(x1251)))+(x1248)+(((IkReal(-0.100000000000000))*(x1246)))+(((x1246)*(x1249))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1249)*(x1253)))+(x1250)+(((IkReal(-1.00000000000000))*(x1251)*(x1253)))+(((IkReal(0.100000000000000))*(x1247))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1247)*(x1250)))+(((IkReal(-1.00000000000000))*(x1249)))+(((IkReal(0.400000000000000))*(x1247)))+(((IkReal(-1.00000000000000))*(x1251)))+(((IkReal(-1.00000000000000))*(x1246)*(x1248))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1249)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1251)*(x1252)))+(((IkReal(0.200000000000000))*(x1251)))+(((x1249)*(x1252)))+(((IkReal(-0.0800000000000000))*(x1247))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1254=((cj15)*(py));
IkReal x1255=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((x1255)+(((IkReal(-1.00000000000000))*(x1254))));
evalcond[2]=((x1254)+(((IkReal(-1.00000000000000))*(x1255))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst72;
CheckValue<IkReal> x1256 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1256.valid ) {
    continue;
}
CheckValue<IkReal> x1257 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1257.valid ) {
    continue;
}
gconst72=IKsign(((IkReal(-160000.000000000))+(((IkReal(-103041.000000000))*(x1256.value)))+(((IkReal(-256800.000000000))*(cj18)))+(((IkReal(-103041.000000000))*(x1257.value)))));
CheckValue<IkReal> x1258 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1258.valid ) {
    continue;
}
CheckValue<IkReal> x1259 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1259.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-1.00000000000000))*(x1258.value)))+(((IkReal(-2.49221183800623))*(cj18)))+(((IkReal(-1.00000000000000))*(x1259.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(cj15)*(px)))+(((IkReal(-10.0000000000000))*(py)*(sj15))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1260=((cj15)*(px));
IkReal x1261=((py)*(sj15));
IkReal x1262=((IkReal(10.0000000000000))*(cj18));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-1.00000000000000))*(x1261)*(x1262)))+(((IkReal(-1.00000000000000))*(x1260)*(x1262)))+(cj18)+(((IkReal(-12.4610591900312))*(x1260)))+(((IkReal(-12.4610591900312))*(x1261))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(x1260)))+(((IkReal(-10.0000000000000))*(x1261))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst73;
CheckValue<IkReal> x1264 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1264.valid ) {
    continue;
}
CheckValue<IkReal> x1265 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1265.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1264.value)))+(((IkReal(100.000000000000))*(x1265.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1263 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1264.value)))+(((IkReal(100.000000000000))*(x1265.value)))))),-1.00000000000000);
if( !x1263.valid ) {
    continue;
}
if( (x1263.value) < -1-IKFAST_SINCOS_THRESH || (x1263.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1266 = IKatan2WithCheck(((IkReal(-10.0000000000000))*(px)),((IkReal(-10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1266.valid ) {
    continue;
}
gconst73=((((IkReal(-1.00000000000000))*(IKasin(x1263.value))))+(((IkReal(-1.00000000000000))*(x1266.value))));
IkReal gconst74;
gconst74=IKsin(gconst73);
IkReal gconst75;
gconst75=IKcos(gconst73);
IkReal x1267=((gconst74)*(px));
IkReal x1268=((gconst75)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst73)))+(j15))))), IkReal(6.28318530717959))));
evalcond[1]=((x1267)+(((IkReal(-1.00000000000000))*(x1268))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(gconst75)*(px)))+(((IkReal(0.256800000000000))*(cj18)))+(((IkReal(0.200000000000000))*(gconst74)*(py))));
evalcond[3]=((x1268)+(((IkReal(-1.00000000000000))*(x1267))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst85;
CheckValue<IkReal> x1269 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1269.valid ) {
    continue;
}
CheckValue<IkReal> x1270 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1270.valid ) {
    continue;
}
gconst85=IKsign(((IkReal(-160000.000000000))+(((IkReal(-103041.000000000))*(x1269.value)))+(((IkReal(-256800.000000000))*(cj18)))+(((IkReal(-103041.000000000))*(x1270.value)))));
CheckValue<IkReal> x1271 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1271.valid ) {
    continue;
}
CheckValue<IkReal> x1272 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1272.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-1.00000000000000))*(x1271.value)))+(((IkReal(-2.49221183800623))*(cj18)))+(((IkReal(-1.00000000000000))*(x1272.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(gconst74)*(py)))+(((IkReal(-10.0000000000000))*(gconst75)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1273=((gconst75)*(px));
IkReal x1274=((IkReal(10.0000000000000))*(cj18));
IkReal x1275=((gconst74)*(py));
dummyeval[0]=((IkReal(1.24610591900312))+(cj18)+(((IkReal(-1.00000000000000))*(x1273)*(x1274)))+(((IkReal(-1.00000000000000))*(x1274)*(x1275)))+(((IkReal(-12.4610591900312))*(x1275)))+(((IkReal(-12.4610591900312))*(x1273))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(x1275)))+(((IkReal(-10.0000000000000))*(x1273))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1276=((gconst75)*(px));
IkReal x1277=((gconst74)*(py));
IkReal x1278=((IkReal(321.000000000000))*(cj18));
CheckValue<IkReal> x1279 = IKPowWithIntegerCheck(((IkReal(40.0000000000000))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1276)*(x1278)))+(((IkReal(-1.00000000000000))*(x1277)*(x1278)))+(((IkReal(-400.000000000000))*(x1277)))+(((IkReal(-400.000000000000))*(x1276)))),-1.00000000000000);
if( !x1279.valid ) {
    continue;
}
CheckValue<IkReal> x1280 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1276)))+(((IkReal(-1.00000000000000))*(x1277)))),-1.00000000000000);
if( !x1280.valid ) {
    continue;
}
if( IKabs(((x1279.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1280.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1279.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))))+IKsqr(((x1280.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x1279.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))), ((x1280.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1281=IKsin(j16);
IkReal x1282=IKcos(j16);
IkReal x1283=((IkReal(0.321000000000000))*(sj18));
IkReal x1284=((IkReal(0.321000000000000))*(cj18));
IkReal x1285=((gconst75)*(px));
IkReal x1286=((gconst74)*(py));
IkReal x1287=((IkReal(1.00000000000000))*(x1286));
IkReal x1288=((IkReal(1.00000000000000))*(x1285));
IkReal x1289=((IkReal(0.800000000000000))*(x1282));
evalcond[0]=((((IkReal(0.400000000000000))*(x1281)))+(((x1281)*(x1284)))+(((IkReal(-1.00000000000000))*(x1282)*(x1283))));
evalcond[1]=((x1283)+(((IkReal(0.100000000000000))*(x1281)))+(((IkReal(-1.00000000000000))*(x1281)*(x1288)))+(((IkReal(-1.00000000000000))*(x1281)*(x1287))));
evalcond[2]=((IkReal(0.400000000000000))+(x1284)+(((IkReal(0.100000000000000))*(x1282)))+(((IkReal(-1.00000000000000))*(x1282)*(x1287)))+(((IkReal(-1.00000000000000))*(x1282)*(x1288))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1287)))+(((IkReal(-1.00000000000000))*(x1288)))+(((x1282)*(x1284)))+(((IkReal(0.400000000000000))*(x1282)))+(((x1281)*(x1283))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1285)*(x1289)))+(((IkReal(0.200000000000000))*(x1286)))+(((IkReal(0.200000000000000))*(x1285)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1286)*(x1289)))+(((IkReal(-0.0800000000000000))*(x1282))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1290=((gconst75)*(px));
IkReal x1291=((gconst74)*(py));
CheckValue<IkReal> x1292 = IKPowWithIntegerCheck(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1290)))+(((IkReal(-1000.00000000000))*(x1291)))),-1.00000000000000);
if( !x1292.valid ) {
    continue;
}
CheckValue<IkReal> x1293 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1290)))+(((IkReal(-1.00000000000000))*(x1291)))),-1.00000000000000);
if( !x1293.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1292.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1293.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1292.value)))+IKsqr(((x1293.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1292.value)), ((x1293.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1294=IKsin(j16);
IkReal x1295=IKcos(j16);
IkReal x1296=((IkReal(0.321000000000000))*(sj18));
IkReal x1297=((IkReal(0.321000000000000))*(cj18));
IkReal x1298=((gconst75)*(px));
IkReal x1299=((gconst74)*(py));
IkReal x1300=((IkReal(1.00000000000000))*(x1299));
IkReal x1301=((IkReal(1.00000000000000))*(x1298));
IkReal x1302=((IkReal(0.800000000000000))*(x1295));
evalcond[0]=((((x1294)*(x1297)))+(((IkReal(0.400000000000000))*(x1294)))+(((IkReal(-1.00000000000000))*(x1295)*(x1296))));
evalcond[1]=((x1296)+(((IkReal(-1.00000000000000))*(x1294)*(x1300)))+(((IkReal(-1.00000000000000))*(x1294)*(x1301)))+(((IkReal(0.100000000000000))*(x1294))));
evalcond[2]=((IkReal(0.400000000000000))+(x1297)+(((IkReal(0.100000000000000))*(x1295)))+(((IkReal(-1.00000000000000))*(x1295)*(x1301)))+(((IkReal(-1.00000000000000))*(x1295)*(x1300))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1295)*(x1297)))+(((x1294)*(x1296)))+(((IkReal(0.400000000000000))*(x1295)))+(((IkReal(-1.00000000000000))*(x1301)))+(((IkReal(-1.00000000000000))*(x1300))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1299)*(x1302)))+(((IkReal(-0.0800000000000000))*(x1295)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1298)))+(((IkReal(0.200000000000000))*(x1299)))+(((x1298)*(x1302))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1303=((gconst74)*(py));
IkReal x1304=((IkReal(321000.000000000))*(gconst75)*(px));
CheckValue<IkReal> x1305 = IKatan2WithCheck(((gconst85)*(((((IkReal(-1.00000000000000))*(sj18)*(x1304)))+(((IkReal(-321000.000000000))*(sj18)*(x1303)))+(((IkReal(32100.0000000000))*(sj18)))))),((gconst85)*(((IkReal(40000.0000000000))+(((IkReal(32100.0000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(cj18)*(x1304)))+(((IkReal(-400000.000000000))*(gconst75)*(px)))+(((IkReal(-400000.000000000))*(x1303)))+(((IkReal(-321000.000000000))*(cj18)*(x1303)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1305.valid ) {
    continue;
}
j16array[0]=x1305.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1306=IKsin(j16);
IkReal x1307=IKcos(j16);
IkReal x1308=((IkReal(0.321000000000000))*(sj18));
IkReal x1309=((IkReal(0.321000000000000))*(cj18));
IkReal x1310=((gconst75)*(px));
IkReal x1311=((gconst74)*(py));
IkReal x1312=((IkReal(1.00000000000000))*(x1311));
IkReal x1313=((IkReal(1.00000000000000))*(x1310));
IkReal x1314=((IkReal(0.800000000000000))*(x1307));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1307)*(x1308)))+(((x1306)*(x1309)))+(((IkReal(0.400000000000000))*(x1306))));
evalcond[1]=((x1308)+(((IkReal(-1.00000000000000))*(x1306)*(x1313)))+(((IkReal(-1.00000000000000))*(x1306)*(x1312)))+(((IkReal(0.100000000000000))*(x1306))));
evalcond[2]=((IkReal(0.400000000000000))+(x1309)+(((IkReal(-1.00000000000000))*(x1307)*(x1312)))+(((IkReal(-1.00000000000000))*(x1307)*(x1313)))+(((IkReal(0.100000000000000))*(x1307))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1306)*(x1308)))+(((IkReal(0.400000000000000))*(x1307)))+(((IkReal(-1.00000000000000))*(x1312)))+(((IkReal(-1.00000000000000))*(x1313)))+(((x1307)*(x1309))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1310)*(x1314)))+(((x1311)*(x1314)))+(((IkReal(0.200000000000000))*(x1311)))+(((IkReal(0.200000000000000))*(x1310)))+(((IkReal(-0.0800000000000000))*(x1307)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst76;
CheckValue<IkReal> x1316 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1316.valid ) {
    continue;
}
CheckValue<IkReal> x1317 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1317.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1316.value)))+(((IkReal(100.000000000000))*(x1317.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1315 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1316.value)))+(((IkReal(100.000000000000))*(x1317.value)))))),-1.00000000000000);
if( !x1315.valid ) {
    continue;
}
if( (x1315.value) < -1-IKFAST_SINCOS_THRESH || (x1315.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1318 = IKatan2WithCheck(((IkReal(-10.0000000000000))*(px)),((IkReal(-10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1318.valid ) {
    continue;
}
gconst76=((IkReal(3.14159265358979))+(IKasin(x1315.value))+(((IkReal(-1.00000000000000))*(x1318.value))));
IkReal gconst77;
gconst77=IKsin(gconst76);
IkReal gconst78;
gconst78=IKcos(gconst76);
IkReal x1319=((gconst78)*(py));
IkReal x1320=((gconst77)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst76)))+(j15))))), IkReal(6.28318530717959))));
evalcond[1]=((x1320)+(((IkReal(-1.00000000000000))*(x1319))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(gconst77)*(py)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(gconst78)*(px)))+(((IkReal(0.256800000000000))*(cj18))));
evalcond[3]=((x1319)+(((IkReal(-1.00000000000000))*(x1320))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst86;
CheckValue<IkReal> x1321 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1321.valid ) {
    continue;
}
CheckValue<IkReal> x1322 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1322.valid ) {
    continue;
}
gconst86=IKsign(((IkReal(-160000.000000000))+(((IkReal(-103041.000000000))*(x1321.value)))+(((IkReal(-256800.000000000))*(cj18)))+(((IkReal(-103041.000000000))*(x1322.value)))));
CheckValue<IkReal> x1323 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1323.valid ) {
    continue;
}
CheckValue<IkReal> x1324 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1324.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-1.00000000000000))*(x1323.value)))+(((IkReal(-2.49221183800623))*(cj18)))+(((IkReal(-1.00000000000000))*(x1324.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(gconst77)*(py)))+(((IkReal(-10.0000000000000))*(gconst78)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1325=((gconst77)*(py));
IkReal x1326=((IkReal(10.0000000000000))*(gconst78)*(px));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-12.4610591900312))*(x1325)))+(((IkReal(-10.0000000000000))*(cj18)*(x1325)))+(((IkReal(-1.00000000000000))*(cj18)*(x1326)))+(cj18)+(((IkReal(-12.4610591900312))*(gconst78)*(px))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x1326)))+(((IkReal(-10.0000000000000))*(x1325))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1327=((gconst77)*(py));
IkReal x1328=((IkReal(321.000000000000))*(cj18));
IkReal x1329=((gconst78)*(px));
CheckValue<IkReal> x1330 = IKPowWithIntegerCheck(((IkReal(40.0000000000000))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1327)*(x1328)))+(((IkReal(-1.00000000000000))*(x1328)*(x1329)))+(((IkReal(-400.000000000000))*(x1329)))+(((IkReal(-400.000000000000))*(x1327)))),-1.00000000000000);
if( !x1330.valid ) {
    continue;
}
CheckValue<IkReal> x1331 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1329)))+(((IkReal(-1.00000000000000))*(x1327)))),-1.00000000000000);
if( !x1331.valid ) {
    continue;
}
if( IKabs(((x1330.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1331.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1330.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))))+IKsqr(((x1331.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x1330.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))), ((x1331.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1332=IKsin(j16);
IkReal x1333=IKcos(j16);
IkReal x1334=((IkReal(0.321000000000000))*(sj18));
IkReal x1335=((gconst77)*(py));
IkReal x1336=((IkReal(0.321000000000000))*(cj18));
IkReal x1337=((gconst78)*(px));
IkReal x1338=((IkReal(1.00000000000000))*(x1333));
IkReal x1339=((IkReal(0.800000000000000))*(x1333));
IkReal x1340=((IkReal(1.00000000000000))*(x1332));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1333)*(x1334)))+(((IkReal(0.400000000000000))*(x1332)))+(((x1332)*(x1336))));
evalcond[1]=((x1334)+(((IkReal(0.100000000000000))*(x1332)))+(((IkReal(-1.00000000000000))*(x1335)*(x1340)))+(((IkReal(-1.00000000000000))*(x1337)*(x1340))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1335)*(x1338)))+(x1336)+(((IkReal(-1.00000000000000))*(x1337)*(x1338)))+(((IkReal(0.100000000000000))*(x1333))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1337)))+(((IkReal(-1.00000000000000))*(x1335)))+(((IkReal(0.400000000000000))*(x1333)))+(((x1333)*(x1336)))+(((x1332)*(x1334))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1337)*(x1339)))+(((x1335)*(x1339)))+(((IkReal(-0.0800000000000000))*(x1333)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1337)))+(((IkReal(0.200000000000000))*(x1335))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1341=((gconst77)*(py));
IkReal x1342=((gconst78)*(px));
CheckValue<IkReal> x1343 = IKPowWithIntegerCheck(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1342)))+(((IkReal(-1000.00000000000))*(x1341)))),-1.00000000000000);
if( !x1343.valid ) {
    continue;
}
CheckValue<IkReal> x1344 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1341)))+(((IkReal(-1.00000000000000))*(x1342)))),-1.00000000000000);
if( !x1344.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1343.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1344.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1343.value)))+IKsqr(((x1344.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1343.value)), ((x1344.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1345=IKsin(j16);
IkReal x1346=IKcos(j16);
IkReal x1347=((IkReal(0.321000000000000))*(sj18));
IkReal x1348=((gconst77)*(py));
IkReal x1349=((IkReal(0.321000000000000))*(cj18));
IkReal x1350=((gconst78)*(px));
IkReal x1351=((IkReal(1.00000000000000))*(x1346));
IkReal x1352=((IkReal(0.800000000000000))*(x1346));
IkReal x1353=((IkReal(1.00000000000000))*(x1345));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1346)*(x1347)))+(((x1345)*(x1349)))+(((IkReal(0.400000000000000))*(x1345))));
evalcond[1]=((x1347)+(((IkReal(-1.00000000000000))*(x1350)*(x1353)))+(((IkReal(-1.00000000000000))*(x1348)*(x1353)))+(((IkReal(0.100000000000000))*(x1345))));
evalcond[2]=((IkReal(0.400000000000000))+(x1349)+(((IkReal(-1.00000000000000))*(x1350)*(x1351)))+(((IkReal(-1.00000000000000))*(x1348)*(x1351)))+(((IkReal(0.100000000000000))*(x1346))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1350)))+(((x1345)*(x1347)))+(((x1346)*(x1349)))+(((IkReal(0.400000000000000))*(x1346)))+(((IkReal(-1.00000000000000))*(x1348))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1346)))+(((IkReal(0.200000000000000))*(x1348)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1348)*(x1352)))+(((IkReal(0.200000000000000))*(x1350)))+(((x1350)*(x1352))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1354=((gconst78)*(px));
IkReal x1355=((IkReal(321000.000000000))*(cj18));
IkReal x1356=((gconst77)*(py));
IkReal x1357=((IkReal(321000.000000000))*(sj18));
CheckValue<IkReal> x1358 = IKatan2WithCheck(((gconst86)*(((((IkReal(-1.00000000000000))*(x1354)*(x1357)))+(((IkReal(-1.00000000000000))*(x1356)*(x1357)))+(((IkReal(32100.0000000000))*(sj18)))))),((gconst86)*(((IkReal(40000.0000000000))+(((IkReal(32100.0000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1354)*(x1355)))+(((IkReal(-1.00000000000000))*(x1355)*(x1356)))+(((IkReal(-400000.000000000))*(x1356)))+(((IkReal(-400000.000000000))*(x1354)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1358.valid ) {
    continue;
}
j16array[0]=x1358.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1359=IKsin(j16);
IkReal x1360=IKcos(j16);
IkReal x1361=((IkReal(0.321000000000000))*(sj18));
IkReal x1362=((gconst77)*(py));
IkReal x1363=((IkReal(0.321000000000000))*(cj18));
IkReal x1364=((gconst78)*(px));
IkReal x1365=((IkReal(1.00000000000000))*(x1360));
IkReal x1366=((IkReal(0.800000000000000))*(x1360));
IkReal x1367=((IkReal(1.00000000000000))*(x1359));
evalcond[0]=((((x1359)*(x1363)))+(((IkReal(0.400000000000000))*(x1359)))+(((IkReal(-1.00000000000000))*(x1360)*(x1361))));
evalcond[1]=((x1361)+(((IkReal(-1.00000000000000))*(x1364)*(x1367)))+(((IkReal(0.100000000000000))*(x1359)))+(((IkReal(-1.00000000000000))*(x1362)*(x1367))));
evalcond[2]=((IkReal(0.400000000000000))+(x1363)+(((IkReal(-1.00000000000000))*(x1364)*(x1365)))+(((IkReal(0.100000000000000))*(x1360)))+(((IkReal(-1.00000000000000))*(x1362)*(x1365))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1364)))+(((IkReal(-1.00000000000000))*(x1362)))+(((x1360)*(x1363)))+(((x1359)*(x1361)))+(((IkReal(0.400000000000000))*(x1360))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1360)))+(((IkReal(0.200000000000000))*(x1364)))+(((IkReal(0.200000000000000))*(x1362)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1364)*(x1366)))+(((x1362)*(x1366))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst79;
CheckValue<IkReal> x1369 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1369.valid ) {
    continue;
}
CheckValue<IkReal> x1370 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1370.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1369.value)))+(((IkReal(100.000000000000))*(x1370.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1368 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1369.value)))+(((IkReal(100.000000000000))*(x1370.value)))))),-1.00000000000000);
if( !x1368.valid ) {
    continue;
}
if( (x1368.value) < -1-IKFAST_SINCOS_THRESH || (x1368.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1371 = IKatan2WithCheck(((IkReal(-10.0000000000000))*(px)),((IkReal(-10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1371.valid ) {
    continue;
}
gconst79=((((IkReal(-1.00000000000000))*(IKasin(x1368.value))))+(((IkReal(-1.00000000000000))*(x1371.value))));
IkReal gconst80;
gconst80=IKsin(gconst79);
IkReal gconst81;
gconst81=IKcos(gconst79);
IkReal x1372=((gconst80)*(px));
IkReal x1373=((gconst81)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst79)))+(j15))))), IkReal(6.28318530717959))));
evalcond[1]=((x1372)+(((IkReal(-1.00000000000000))*(x1373))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(gconst81)*(px)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(cj18)))+(((IkReal(0.200000000000000))*(gconst80)*(py))));
evalcond[3]=((x1373)+(((IkReal(-1.00000000000000))*(x1372))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst87;
CheckValue<IkReal> x1374 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1374.valid ) {
    continue;
}
CheckValue<IkReal> x1375 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1375.valid ) {
    continue;
}
gconst87=IKsign(((IkReal(-160000.000000000))+(((IkReal(-103041.000000000))*(x1374.value)))+(((IkReal(-256800.000000000))*(cj18)))+(((IkReal(-103041.000000000))*(x1375.value)))));
CheckValue<IkReal> x1376 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1376.valid ) {
    continue;
}
CheckValue<IkReal> x1377 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1377.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-1.00000000000000))*(x1376.value)))+(((IkReal(-2.49221183800623))*(cj18)))+(((IkReal(-1.00000000000000))*(x1377.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(gconst81)*(px)))+(((IkReal(-10.0000000000000))*(gconst80)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1378=((IkReal(10.0000000000000))*(cj18));
IkReal x1379=((gconst81)*(px));
IkReal x1380=((gconst80)*(py));
dummyeval[0]=((IkReal(1.24610591900312))+(cj18)+(((IkReal(-12.4610591900312))*(x1380)))+(((IkReal(-1.00000000000000))*(x1378)*(x1380)))+(((IkReal(-1.00000000000000))*(x1378)*(x1379)))+(((IkReal(-12.4610591900312))*(x1379))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(x1379)))+(((IkReal(-10.0000000000000))*(x1380))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1381=((gconst80)*(py));
IkReal x1382=((gconst81)*(px));
IkReal x1383=((IkReal(321.000000000000))*(cj18));
CheckValue<IkReal> x1384 = IKPowWithIntegerCheck(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x1382)))+(((IkReal(-400.000000000000))*(x1381)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1382)*(x1383)))+(((IkReal(-1.00000000000000))*(x1381)*(x1383)))),-1.00000000000000);
if( !x1384.valid ) {
    continue;
}
CheckValue<IkReal> x1385 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1381)))+(((IkReal(-1.00000000000000))*(x1382)))),-1.00000000000000);
if( !x1385.valid ) {
    continue;
}
if( IKabs(((x1384.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1385.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1384.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))))+IKsqr(((x1385.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x1384.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))), ((x1385.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1386=IKsin(j16);
IkReal x1387=IKcos(j16);
IkReal x1388=((gconst81)*(px));
IkReal x1389=((IkReal(0.321000000000000))*(sj18));
IkReal x1390=((IkReal(0.321000000000000))*(cj18));
IkReal x1391=((gconst80)*(py));
IkReal x1392=((IkReal(1.00000000000000))*(x1386));
IkReal x1393=((IkReal(0.800000000000000))*(x1387));
IkReal x1394=((IkReal(1.00000000000000))*(x1387));
evalcond[0]=((((IkReal(0.400000000000000))*(x1386)))+(((x1386)*(x1390)))+(((IkReal(-1.00000000000000))*(x1387)*(x1389))));
evalcond[1]=((x1389)+(((IkReal(-1.00000000000000))*(x1391)*(x1392)))+(((IkReal(0.100000000000000))*(x1386)))+(((IkReal(-1.00000000000000))*(x1388)*(x1392))));
evalcond[2]=((IkReal(0.400000000000000))+(x1390)+(((IkReal(-1.00000000000000))*(x1391)*(x1394)))+(((IkReal(0.100000000000000))*(x1387)))+(((IkReal(-1.00000000000000))*(x1388)*(x1394))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1387)))+(((x1387)*(x1390)))+(((IkReal(-1.00000000000000))*(x1388)))+(((x1386)*(x1389)))+(((IkReal(-1.00000000000000))*(x1391))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1388)*(x1393)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1391)))+(((IkReal(0.200000000000000))*(x1388)))+(((x1391)*(x1393)))+(((IkReal(-0.0800000000000000))*(x1387))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1395=((gconst81)*(px));
IkReal x1396=((gconst80)*(py));
CheckValue<IkReal> x1397 = IKPowWithIntegerCheck(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1396)))+(((IkReal(-1000.00000000000))*(x1395)))),-1.00000000000000);
if( !x1397.valid ) {
    continue;
}
CheckValue<IkReal> x1398 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1396)))+(((IkReal(-1.00000000000000))*(x1395)))),-1.00000000000000);
if( !x1398.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1397.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1398.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1397.value)))+IKsqr(((x1398.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1397.value)), ((x1398.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1399=IKsin(j16);
IkReal x1400=IKcos(j16);
IkReal x1401=((gconst81)*(px));
IkReal x1402=((IkReal(0.321000000000000))*(sj18));
IkReal x1403=((IkReal(0.321000000000000))*(cj18));
IkReal x1404=((gconst80)*(py));
IkReal x1405=((IkReal(1.00000000000000))*(x1399));
IkReal x1406=((IkReal(0.800000000000000))*(x1400));
IkReal x1407=((IkReal(1.00000000000000))*(x1400));
evalcond[0]=((((IkReal(0.400000000000000))*(x1399)))+(((x1399)*(x1403)))+(((IkReal(-1.00000000000000))*(x1400)*(x1402))));
evalcond[1]=((((IkReal(0.100000000000000))*(x1399)))+(((IkReal(-1.00000000000000))*(x1404)*(x1405)))+(x1402)+(((IkReal(-1.00000000000000))*(x1401)*(x1405))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1404)*(x1407)))+(x1403)+(((IkReal(-1.00000000000000))*(x1401)*(x1407)))+(((IkReal(0.100000000000000))*(x1400))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1400)))+(((IkReal(-1.00000000000000))*(x1404)))+(((IkReal(-1.00000000000000))*(x1401)))+(((x1399)*(x1402)))+(((x1400)*(x1403))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1404)))+(((IkReal(0.200000000000000))*(x1401)))+(((IkReal(-0.0800000000000000))*(x1400)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1404)*(x1406)))+(((x1401)*(x1406))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1408=((IkReal(321000.000000000))*(gconst81)*(px));
IkReal x1409=((IkReal(321000.000000000))*(gconst80)*(py));
CheckValue<IkReal> x1410 = IKatan2WithCheck(((gconst87)*(((((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(sj18)*(x1409)))+(((IkReal(-1.00000000000000))*(sj18)*(x1408)))))),((gconst87)*(((IkReal(40000.0000000000))+(((IkReal(-400000.000000000))*(gconst80)*(py)))+(((IkReal(32100.0000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(cj18)*(x1409)))+(((IkReal(-1.00000000000000))*(cj18)*(x1408)))+(((IkReal(-400000.000000000))*(gconst81)*(px)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1410.valid ) {
    continue;
}
j16array[0]=x1410.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1411=IKsin(j16);
IkReal x1412=IKcos(j16);
IkReal x1413=((gconst81)*(px));
IkReal x1414=((IkReal(0.321000000000000))*(sj18));
IkReal x1415=((IkReal(0.321000000000000))*(cj18));
IkReal x1416=((gconst80)*(py));
IkReal x1417=((IkReal(1.00000000000000))*(x1411));
IkReal x1418=((IkReal(0.800000000000000))*(x1412));
IkReal x1419=((IkReal(1.00000000000000))*(x1412));
evalcond[0]=((((IkReal(0.400000000000000))*(x1411)))+(((IkReal(-1.00000000000000))*(x1412)*(x1414)))+(((x1411)*(x1415))));
evalcond[1]=((((IkReal(0.100000000000000))*(x1411)))+(((IkReal(-1.00000000000000))*(x1413)*(x1417)))+(((IkReal(-1.00000000000000))*(x1416)*(x1417)))+(x1414));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x1412)))+(((IkReal(-1.00000000000000))*(x1413)*(x1419)))+(((IkReal(-1.00000000000000))*(x1416)*(x1419)))+(x1415));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1412)))+(((x1412)*(x1415)))+(((x1411)*(x1414)))+(((IkReal(-1.00000000000000))*(x1416)))+(((IkReal(-1.00000000000000))*(x1413))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1413)*(x1418)))+(((IkReal(-0.0800000000000000))*(x1412)))+(((x1416)*(x1418)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1416)))+(((IkReal(0.200000000000000))*(x1413))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst82;
CheckValue<IkReal> x1421 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1421.valid ) {
    continue;
}
CheckValue<IkReal> x1422 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1422.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1421.value)))+(((IkReal(100.000000000000))*(x1422.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1420 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1421.value)))+(((IkReal(100.000000000000))*(x1422.value)))))),-1.00000000000000);
if( !x1420.valid ) {
    continue;
}
if( (x1420.value) < -1-IKFAST_SINCOS_THRESH || (x1420.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1423 = IKatan2WithCheck(((IkReal(-10.0000000000000))*(px)),((IkReal(-10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1423.valid ) {
    continue;
}
gconst82=((IkReal(3.14159265358979))+(IKasin(x1420.value))+(((IkReal(-1.00000000000000))*(x1423.value))));
IkReal gconst83;
gconst83=IKsin(gconst82);
IkReal gconst84;
gconst84=IKcos(gconst82);
IkReal x1424=((gconst83)*(px));
IkReal x1425=((gconst84)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst82)))+(j15))))), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1425)))+(x1424));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(gconst83)*(py)))+(((IkReal(0.200000000000000))*(gconst84)*(px)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(cj18))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1424)))+(x1425));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst88;
CheckValue<IkReal> x1426 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1426.valid ) {
    continue;
}
CheckValue<IkReal> x1427 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1427.valid ) {
    continue;
}
gconst88=IKsign(((IkReal(-160000.000000000))+(((IkReal(-103041.000000000))*(x1426.value)))+(((IkReal(-256800.000000000))*(cj18)))+(((IkReal(-103041.000000000))*(x1427.value)))));
CheckValue<IkReal> x1428 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1428.valid ) {
    continue;
}
CheckValue<IkReal> x1429 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1429.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-1.00000000000000))*(x1428.value)))+(((IkReal(-2.49221183800623))*(cj18)))+(((IkReal(-1.00000000000000))*(x1429.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(gconst83)*(py)))+(((IkReal(-10.0000000000000))*(gconst84)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1430=((gconst84)*(px));
IkReal x1431=((IkReal(10.0000000000000))*(gconst83)*(py));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-10.0000000000000))*(cj18)*(x1430)))+(cj18)+(((IkReal(-12.4610591900312))*(x1430)))+(((IkReal(-1.00000000000000))*(cj18)*(x1431)))+(((IkReal(-12.4610591900312))*(gconst83)*(py))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x1431)))+(((IkReal(-10.0000000000000))*(x1430))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1432=((IkReal(321.000000000000))*(cj18));
IkReal x1433=((gconst84)*(px));
IkReal x1434=((gconst83)*(py));
CheckValue<IkReal> x1435 = IKPowWithIntegerCheck(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x1434)))+(((IkReal(-400.000000000000))*(x1433)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1432)*(x1434)))+(((IkReal(-1.00000000000000))*(x1432)*(x1433)))),-1.00000000000000);
if( !x1435.valid ) {
    continue;
}
CheckValue<IkReal> x1436 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1433)))+(((IkReal(-1.00000000000000))*(x1434)))),-1.00000000000000);
if( !x1436.valid ) {
    continue;
}
if( IKabs(((x1435.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1436.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1435.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))))+IKsqr(((x1436.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x1435.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))), ((x1436.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1437=IKsin(j16);
IkReal x1438=IKcos(j16);
IkReal x1439=((IkReal(0.321000000000000))*(sj18));
IkReal x1440=((IkReal(0.321000000000000))*(cj18));
IkReal x1441=((gconst83)*(py));
IkReal x1442=((gconst84)*(px));
IkReal x1443=((IkReal(1.00000000000000))*(x1442));
IkReal x1444=((IkReal(0.800000000000000))*(x1438));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1438)*(x1439)))+(((x1437)*(x1440)))+(((IkReal(0.400000000000000))*(x1437))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1437)*(x1443)))+(((IkReal(0.100000000000000))*(x1437)))+(x1439)+(((IkReal(-1.00000000000000))*(x1437)*(x1441))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1438)*(x1441)))+(((IkReal(-1.00000000000000))*(x1438)*(x1443)))+(((IkReal(0.100000000000000))*(x1438)))+(x1440));
evalcond[3]=((IkReal(0.100000000000000))+(((x1438)*(x1440)))+(((x1437)*(x1439)))+(((IkReal(-1.00000000000000))*(x1441)))+(((IkReal(-1.00000000000000))*(x1443)))+(((IkReal(0.400000000000000))*(x1438))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1442)*(x1444)))+(((x1441)*(x1444)))+(((IkReal(-0.0800000000000000))*(x1438)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1441)))+(((IkReal(0.200000000000000))*(x1442))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1445=((gconst84)*(px));
IkReal x1446=((gconst83)*(py));
CheckValue<IkReal> x1447 = IKPowWithIntegerCheck(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1445)))+(((IkReal(-1000.00000000000))*(x1446)))),-1.00000000000000);
if( !x1447.valid ) {
    continue;
}
CheckValue<IkReal> x1448 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1446)))+(((IkReal(-1.00000000000000))*(x1445)))),-1.00000000000000);
if( !x1448.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1447.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1448.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1447.value)))+IKsqr(((x1448.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1447.value)), ((x1448.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1449=IKsin(j16);
IkReal x1450=IKcos(j16);
IkReal x1451=((IkReal(0.321000000000000))*(sj18));
IkReal x1452=((IkReal(0.321000000000000))*(cj18));
IkReal x1453=((gconst83)*(py));
IkReal x1454=((gconst84)*(px));
IkReal x1455=((IkReal(1.00000000000000))*(x1454));
IkReal x1456=((IkReal(0.800000000000000))*(x1450));
evalcond[0]=((((IkReal(0.400000000000000))*(x1449)))+(((x1449)*(x1452)))+(((IkReal(-1.00000000000000))*(x1450)*(x1451))));
evalcond[1]=((((IkReal(0.100000000000000))*(x1449)))+(x1451)+(((IkReal(-1.00000000000000))*(x1449)*(x1453)))+(((IkReal(-1.00000000000000))*(x1449)*(x1455))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1450)*(x1453)))+(x1452)+(((IkReal(0.100000000000000))*(x1450)))+(((IkReal(-1.00000000000000))*(x1450)*(x1455))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1455)))+(((x1450)*(x1452)))+(((IkReal(-1.00000000000000))*(x1453)))+(((x1449)*(x1451)))+(((IkReal(0.400000000000000))*(x1450))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1454)*(x1456)))+(((IkReal(0.200000000000000))*(x1454)))+(((IkReal(0.200000000000000))*(x1453)))+(((IkReal(-0.0800000000000000))*(x1450)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1453)*(x1456))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1457=((gconst84)*(px));
IkReal x1458=((IkReal(321000.000000000))*(sj18));
IkReal x1459=((gconst83)*(py));
IkReal x1460=((IkReal(321000.000000000))*(cj18));
CheckValue<IkReal> x1461 = IKatan2WithCheck(((gconst88)*(((((IkReal(-1.00000000000000))*(x1457)*(x1458)))+(((IkReal(-1.00000000000000))*(x1458)*(x1459)))+(((IkReal(32100.0000000000))*(sj18)))))),((gconst88)*(((IkReal(40000.0000000000))+(((IkReal(32100.0000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1459)*(x1460)))+(((IkReal(-1.00000000000000))*(x1457)*(x1460)))+(((IkReal(-400000.000000000))*(x1459)))+(((IkReal(-400000.000000000))*(x1457)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1461.valid ) {
    continue;
}
j16array[0]=x1461.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1462=IKsin(j16);
IkReal x1463=IKcos(j16);
IkReal x1464=((IkReal(0.321000000000000))*(sj18));
IkReal x1465=((IkReal(0.321000000000000))*(cj18));
IkReal x1466=((gconst83)*(py));
IkReal x1467=((gconst84)*(px));
IkReal x1468=((IkReal(1.00000000000000))*(x1467));
IkReal x1469=((IkReal(0.800000000000000))*(x1463));
evalcond[0]=((((IkReal(0.400000000000000))*(x1462)))+(((IkReal(-1.00000000000000))*(x1463)*(x1464)))+(((x1462)*(x1465))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1462)*(x1468)))+(((IkReal(-1.00000000000000))*(x1462)*(x1466)))+(x1464)+(((IkReal(0.100000000000000))*(x1462))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1463)*(x1468)))+(((IkReal(-1.00000000000000))*(x1463)*(x1466)))+(x1465)+(((IkReal(0.100000000000000))*(x1463))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1463)*(x1465)))+(((IkReal(0.400000000000000))*(x1463)))+(((IkReal(-1.00000000000000))*(x1468)))+(((x1462)*(x1464)))+(((IkReal(-1.00000000000000))*(x1466))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1463)))+(((IkReal(0.200000000000000))*(x1466)))+(((IkReal(0.200000000000000))*(x1467)))+(((x1466)*(x1469)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1467)*(x1469))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1470=((py)*(sj15));
IkReal x1471=((IkReal(321.000000000000))*(cj18));
IkReal x1472=((cj15)*(px));
CheckValue<IkReal> x1473 = IKPowWithIntegerCheck(((IkReal(40.0000000000000))+(((IkReal(-1.00000000000000))*(x1471)*(x1472)))+(((IkReal(-1.00000000000000))*(x1470)*(x1471)))+(((IkReal(-400.000000000000))*(x1470)))+(((IkReal(-400.000000000000))*(x1472)))+(((IkReal(32.1000000000000))*(cj18)))),-1.00000000000000);
if( !x1473.valid ) {
    continue;
}
CheckValue<IkReal> x1474 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1472)))+(((IkReal(-1.00000000000000))*(x1470)))),-1.00000000000000);
if( !x1474.valid ) {
    continue;
}
if( IKabs(((x1473.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1474.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1473.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))))+IKsqr(((x1474.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x1473.value)*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))), ((x1474.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1475=IKsin(j16);
IkReal x1476=IKcos(j16);
IkReal x1477=((IkReal(0.321000000000000))*(sj18));
IkReal x1478=((cj15)*(px));
IkReal x1479=((IkReal(0.321000000000000))*(cj18));
IkReal x1480=((py)*(sj15));
IkReal x1481=((IkReal(0.800000000000000))*(x1476));
IkReal x1482=((IkReal(1.00000000000000))*(x1480));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1476)*(x1477)))+(((IkReal(0.400000000000000))*(x1475)))+(((x1475)*(x1479))));
evalcond[1]=((((IkReal(0.100000000000000))*(x1475)))+(((IkReal(-1.00000000000000))*(x1475)*(x1482)))+(x1477)+(((IkReal(-1.00000000000000))*(x1475)*(x1478))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x1476)))+(((IkReal(-1.00000000000000))*(x1476)*(x1478)))+(x1479)+(((IkReal(-1.00000000000000))*(x1476)*(x1482))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1482)))+(((IkReal(-1.00000000000000))*(x1478)))+(((x1476)*(x1479)))+(((IkReal(0.400000000000000))*(x1476)))+(((x1475)*(x1477))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1480)*(x1481)))+(((IkReal(-0.0800000000000000))*(x1476)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1478)*(x1481)))+(((IkReal(0.200000000000000))*(x1480)))+(((IkReal(0.200000000000000))*(x1478))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1483=((py)*(sj15));
IkReal x1484=((cj15)*(px));
CheckValue<IkReal> x1485 = IKPowWithIntegerCheck(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1483)))+(((IkReal(-1000.00000000000))*(x1484)))),-1.00000000000000);
if( !x1485.valid ) {
    continue;
}
CheckValue<IkReal> x1486 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1483)))+(((IkReal(-1.00000000000000))*(x1484)))),-1.00000000000000);
if( !x1486.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(x1485.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1486.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(x1485.value)))+IKsqr(((x1486.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(x1485.value)), ((x1486.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1487=IKsin(j16);
IkReal x1488=IKcos(j16);
IkReal x1489=((IkReal(0.321000000000000))*(sj18));
IkReal x1490=((cj15)*(px));
IkReal x1491=((IkReal(0.321000000000000))*(cj18));
IkReal x1492=((py)*(sj15));
IkReal x1493=((IkReal(0.800000000000000))*(x1488));
IkReal x1494=((IkReal(1.00000000000000))*(x1492));
evalcond[0]=((((x1487)*(x1491)))+(((IkReal(-1.00000000000000))*(x1488)*(x1489)))+(((IkReal(0.400000000000000))*(x1487))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1487)*(x1494)))+(((IkReal(-1.00000000000000))*(x1487)*(x1490)))+(((IkReal(0.100000000000000))*(x1487)))+(x1489));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x1488)))+(x1491)+(((IkReal(-1.00000000000000))*(x1488)*(x1494)))+(((IkReal(-1.00000000000000))*(x1488)*(x1490))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1494)))+(((x1487)*(x1489)))+(((IkReal(-1.00000000000000))*(x1490)))+(((IkReal(0.400000000000000))*(x1488)))+(((x1488)*(x1491))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1488)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1492)*(x1493)))+(((x1490)*(x1493)))+(((IkReal(0.200000000000000))*(x1492)))+(((IkReal(0.200000000000000))*(x1490))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1495=((IkReal(321000.000000000))*(py)*(sj15));
IkReal x1496=((IkReal(321000.000000000))*(cj15)*(px));
CheckValue<IkReal> x1497 = IKatan2WithCheck(((gconst72)*(((((IkReal(-1.00000000000000))*(sj18)*(x1496)))+(((IkReal(-1.00000000000000))*(sj18)*(x1495)))+(((IkReal(32100.0000000000))*(sj18)))))),((gconst72)*(((IkReal(40000.0000000000))+(((IkReal(32100.0000000000))*(cj18)))+(((IkReal(-400000.000000000))*(cj15)*(px)))+(((IkReal(-400000.000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(cj18)*(x1495)))+(((IkReal(-1.00000000000000))*(cj18)*(x1496)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1497.valid ) {
    continue;
}
j16array[0]=x1497.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1498=IKsin(j16);
IkReal x1499=IKcos(j16);
IkReal x1500=((IkReal(0.321000000000000))*(sj18));
IkReal x1501=((cj15)*(px));
IkReal x1502=((IkReal(0.321000000000000))*(cj18));
IkReal x1503=((py)*(sj15));
IkReal x1504=((IkReal(0.800000000000000))*(x1499));
IkReal x1505=((IkReal(1.00000000000000))*(x1503));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1499)*(x1500)))+(((x1498)*(x1502)))+(((IkReal(0.400000000000000))*(x1498))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1498)*(x1501)))+(((IkReal(-1.00000000000000))*(x1498)*(x1505)))+(x1500)+(((IkReal(0.100000000000000))*(x1498))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1499)*(x1505)))+(x1502)+(((IkReal(0.100000000000000))*(x1499)))+(((IkReal(-1.00000000000000))*(x1499)*(x1501))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1505)))+(((x1499)*(x1502)))+(((x1498)*(x1500)))+(((IkReal(-1.00000000000000))*(x1501)))+(((IkReal(0.400000000000000))*(x1499))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1501)*(x1504)))+(((IkReal(-0.0800000000000000))*(x1499)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1503)*(x1504)))+(((IkReal(0.200000000000000))*(x1503)))+(((IkReal(0.200000000000000))*(x1501))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1506 = IKPowWithIntegerCheck(sj17,-1.00000000000000);
if( !x1506.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1506.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1506.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1506.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
evalcond[0]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py)))+(((IkReal(0.321000000000000))*(sj17)*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(IKcos(j18)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst45;
IkReal x1507=((IkReal(321.000000000000))*(cj18));
IkReal x1508=((cj15)*(px));
IkReal x1509=((py)*(sj15));
gconst45=IKsign(((IkReal(-40.0000000000000))+(((IkReal(321.000000000000))*(cj17)*(pz)*(sj18)))+(((x1507)*(x1509)))+(((x1507)*(x1508)))+(((IkReal(-32.1000000000000))*(cj18)))+(((IkReal(400.000000000000))*(x1509)))+(((IkReal(400.000000000000))*(x1508)))));
IkReal x1510=((py)*(sj15));
IkReal x1511=((IkReal(10.0000000000000))*(cj18));
IkReal x1512=((cj15)*(px));
dummyeval[0]=((IkReal(-1.24610591900312))+(((x1510)*(x1511)))+(((IkReal(12.4610591900312))*(x1512)))+(((IkReal(12.4610591900312))*(x1510)))+(((IkReal(10.0000000000000))*(cj17)*(pz)*(sj18)))+(((IkReal(-1.00000000000000))*(cj18)))+(((x1511)*(x1512))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
CheckValue<IkReal> x1513 = IKPowWithIntegerCheck(cj17,2.00000000000000);
if( !x1513.valid ) {
    continue;
}
CheckValue<IkReal> x1514 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1514.valid ) {
    continue;
}
CheckValue<IkReal> x1515 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1515.valid ) {
    continue;
}
gconst46=IKsign(((IkReal(160000.000000000))+(((IkReal(103041.000000000))*(x1513.value)*(x1514.value)))+(((IkReal(256800.000000000))*(cj18)))+(((IkReal(103041.000000000))*(x1515.value)))));
CheckValue<IkReal> x1516 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1516.valid ) {
    continue;
}
CheckValue<IkReal> x1517 = IKPowWithIntegerCheck(cj17,2.00000000000000);
if( !x1517.valid ) {
    continue;
}
CheckValue<IkReal> x1518 = IKPowWithIntegerCheck(sj18,2.00000000000000);
if( !x1518.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(((IkReal(2.49221183800623))*(cj18)))+(x1516.value)+(((x1517.value)*(x1518.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1519=((cj15)*(px));
IkReal x1520=((py)*(sj15));
IkReal x1521=((IkReal(321000.000000000))*(cj18));
IkReal x1522=((IkReal(321000.000000000))*(cj17)*(sj18));
CheckValue<IkReal> x1523 = IKatan2WithCheck(((gconst46)*(((((IkReal(32100.0000000000))*(cj17)*(sj18)))+(((IkReal(-1.00000000000000))*(x1519)*(x1522)))+(((IkReal(-400000.000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x1521)))+(((IkReal(-1.00000000000000))*(x1520)*(x1522)))))),((gconst46)*(((IkReal(-40000.0000000000))+(((IkReal(400000.000000000))*(x1519)))+(((x1519)*(x1521)))+(((x1520)*(x1521)))+(((IkReal(-32100.0000000000))*(cj18)))+(((IkReal(400000.000000000))*(x1520)))+(((IkReal(-1.00000000000000))*(pz)*(x1522)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1523.valid ) {
    continue;
}
j16array[0]=x1523.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1524=IKsin(j16);
IkReal x1525=IKcos(j16);
IkReal x1526=((IkReal(0.321000000000000))*(sj18));
IkReal x1527=((cj15)*(px));
IkReal x1528=((py)*(sj15));
IkReal x1529=((px)*(sj15));
IkReal x1530=((IkReal(1.00000000000000))*(sj17));
IkReal x1531=((cj15)*(py));
IkReal x1532=((IkReal(0.321000000000000))*(cj18));
IkReal x1533=((pz)*(x1525));
IkReal x1534=((IkReal(1.00000000000000))*(x1527));
IkReal x1535=((IkReal(0.321000000000000))*(x1525));
IkReal x1536=((sj17)*(x1524));
IkReal x1537=((pz)*(x1524));
IkReal x1538=((IkReal(0.800000000000000))*(x1525));
IkReal x1539=((cj17)*(x1524));
evalcond[0]=((((x1524)*(x1532)))+(((IkReal(0.400000000000000))*(x1524)))+(((cj17)*(x1525)*(x1526)))+(pz));
evalcond[1]=((IkReal(0.100000000000000))+(((x1525)*(x1532)))+(((IkReal(0.400000000000000))*(x1525)))+(((IkReal(-1.00000000000000))*(x1534)))+(((IkReal(-1.00000000000000))*(x1526)*(x1539)))+(((IkReal(-1.00000000000000))*(x1528))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1525)*(x1528)))+(((IkReal(-1.00000000000000))*(x1525)*(x1534)))+(x1537)+(x1532)+(((IkReal(0.100000000000000))*(x1525))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x1528)*(x1538)))+(((IkReal(-0.800000000000000))*(x1537)))+(((x1527)*(x1538)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1525)))+(((IkReal(0.200000000000000))*(x1527)))+(((IkReal(0.200000000000000))*(x1528))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1524)*(x1528)*(x1530)))+(((IkReal(-1.00000000000000))*(x1530)*(x1533)))+(((IkReal(-1.00000000000000))*(cj17)*(x1531)))+(((IkReal(-1.00000000000000))*(x1524)*(x1527)*(x1530)))+(((IkReal(0.100000000000000))*(x1536)))+(((cj17)*(x1529))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1530)*(x1531)))+(((x1528)*(x1539)))+(((x1527)*(x1539)))+(x1526)+(((IkReal(-0.100000000000000))*(x1539)))+(((sj17)*(x1529)))+(((cj17)*(x1533))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1540=((cj17)*(sj18));
IkReal x1541=((IkReal(1000.00000000000))*(pz));
CheckValue<IkReal> x1543 = IKPowWithIntegerCheck(cj18,2.00000000000000);
if( !x1543.valid ) {
    continue;
}
CheckValue<IkReal> x1542 = IKatan2WithCheck(((gconst45)*(((((IkReal(-103.041000000000))*(cj18)*(x1540)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj15)*(x1541)))+(((IkReal(-128.400000000000))*(x1540)))+(((IkReal(-1.00000000000000))*(cj15)*(px)*(x1541)))))),((gconst45)*(((IkReal(160.000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x1541)))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(103.041000000000))*(x1543.value)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1542.valid ) {
    continue;
}
j16array[0]=x1542.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1544=IKsin(j16);
IkReal x1545=IKcos(j16);
IkReal x1546=((IkReal(0.321000000000000))*(sj18));
IkReal x1547=((cj15)*(px));
IkReal x1548=((py)*(sj15));
IkReal x1549=((px)*(sj15));
IkReal x1550=((IkReal(1.00000000000000))*(sj17));
IkReal x1551=((cj15)*(py));
IkReal x1552=((IkReal(0.321000000000000))*(cj18));
IkReal x1553=((pz)*(x1545));
IkReal x1554=((IkReal(1.00000000000000))*(x1547));
IkReal x1555=((IkReal(0.321000000000000))*(x1545));
IkReal x1556=((sj17)*(x1544));
IkReal x1557=((pz)*(x1544));
IkReal x1558=((IkReal(0.800000000000000))*(x1545));
IkReal x1559=((cj17)*(x1544));
evalcond[0]=((((x1544)*(x1552)))+(((IkReal(0.400000000000000))*(x1544)))+(pz)+(((cj17)*(x1545)*(x1546))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1548)))+(((IkReal(-1.00000000000000))*(x1546)*(x1559)))+(((IkReal(0.400000000000000))*(x1545)))+(((IkReal(-1.00000000000000))*(x1554)))+(((x1545)*(x1552))));
evalcond[2]=((IkReal(0.400000000000000))+(x1552)+(x1557)+(((IkReal(-1.00000000000000))*(x1545)*(x1554)))+(((IkReal(0.100000000000000))*(x1545)))+(((IkReal(-1.00000000000000))*(x1545)*(x1548))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x1547)*(x1558)))+(((IkReal(-0.800000000000000))*(x1557)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1545)))+(((x1548)*(x1558)))+(((IkReal(0.200000000000000))*(x1547)))+(((IkReal(0.200000000000000))*(x1548))));
evalcond[4]=((((IkReal(0.100000000000000))*(x1556)))+(((IkReal(-1.00000000000000))*(x1544)*(x1548)*(x1550)))+(((cj17)*(x1549)))+(((IkReal(-1.00000000000000))*(cj17)*(x1551)))+(((IkReal(-1.00000000000000))*(x1550)*(x1553)))+(((IkReal(-1.00000000000000))*(x1544)*(x1547)*(x1550))));
evalcond[5]=((((sj17)*(x1549)))+(((x1547)*(x1559)))+(((cj17)*(x1553)))+(x1546)+(((IkReal(-1.00000000000000))*(x1550)*(x1551)))+(((x1548)*(x1559)))+(((IkReal(-0.100000000000000))*(x1559))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1572 = IKPowWithIntegerCheck(cj15,2.00000000000000);
if( !x1572.valid ) {
    continue;
}
IkReal x1560=x1572.value;
CheckValue<IkReal> x1573 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1573.valid ) {
    continue;
}
IkReal x1561=x1573.value;
CheckValue<IkReal> x1574 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1574.valid ) {
    continue;
}
IkReal x1562=x1574.value;
CheckValue<IkReal> x1575 = IKPowWithIntegerCheck(sj15,2.00000000000000);
if( !x1575.valid ) {
    continue;
}
IkReal x1563=x1575.value;
IkReal x1564=((IkReal(5.00000000000000))*(pp));
IkReal x1565=((py)*(sj15));
IkReal x1566=((pz)*(sj17));
IkReal x1567=((IkReal(0.400000000000000))*(cj17));
IkReal x1568=((px)*(sj15));
IkReal x1569=((cj15)*(px)*(sj17));
IkReal x1570=((IkReal(4.00000000000000))*(cj17)*(py));
IkReal x1571=((IkReal(4.00000000000000))*(cj15)*(cj17)*(sj15));
CheckValue<IkReal> x1576 = IKatan2WithCheck(((gconst44)*(((((x1567)*(x1568)))+(((IkReal(0.334795000000000))*(x1566)))+(((IkReal(-1.00000000000000))*(cj15)*(px)*(x1566)))+(((IkReal(-1.00000000000000))*(cj15)*(py)*(x1567)))+(((px)*(x1560)*(x1570)))+(((x1562)*(x1571)))+(((IkReal(-1.00000000000000))*(x1565)*(x1566)))+(((IkReal(-1.00000000000000))*(px)*(x1563)*(x1570)))+(((x1564)*(x1566)))+(((IkReal(-1.00000000000000))*(x1561)*(x1571)))))),((gconst44)*(((((IkReal(-0.434795000000000))*(sj17)*(x1565)))+(((sj17)*(x1562)*(x1563)))+(((IkReal(0.500000000000000))*(pp)*(sj17)))+(((IkReal(-4.00000000000000))*(cj17)*(pz)*(x1568)))+(((cj15)*(pz)*(x1570)))+(((IkReal(2.00000000000000))*(x1565)*(x1569)))+(((IkReal(-1.00000000000000))*(x1564)*(x1569)))+(((IkReal(-0.434795000000000))*(x1569)))+(((IkReal(-1.00000000000000))*(sj17)*(x1564)*(x1565)))+(((sj17)*(x1560)*(x1561)))+(((IkReal(0.0334795000000000))*(sj17)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1576.valid ) {
    continue;
}
j16array[0]=x1576.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x1577=IKcos(j16);
IkReal x1578=IKsin(j16);
IkReal x1579=((IkReal(1.00000000000000))*(py));
IkReal x1580=((cj15)*(px));
IkReal x1581=((py)*(sj15));
IkReal x1582=((sj17)*(x1578));
IkReal x1583=((IkReal(0.800000000000000))*(x1577));
evalcond[0]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1577)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1580)*(x1583)))+(((IkReal(-0.800000000000000))*(pz)*(x1578)))+(((x1581)*(x1583)))+(((IkReal(0.200000000000000))*(x1580)))+(((IkReal(0.200000000000000))*(x1581))));
evalcond[1]=((((IkReal(-1.00000000000000))*(pz)*(sj17)*(x1577)))+(((IkReal(-1.00000000000000))*(x1580)*(x1582)))+(((IkReal(-1.00000000000000))*(sj15)*(x1579)*(x1582)))+(((cj17)*(px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(cj17)*(x1579)))+(((IkReal(0.100000000000000))*(x1582))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj16;
dummyeval[1]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1584=((IkReal(1.00000000000000))*(py));
IkReal x1585=((cj15)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j16))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1585))));
evalcond[2]=((((cj17)*(px)*(sj15)))+(((IkReal(0.100000000000000))*(sj17)))+(((IkReal(-1.00000000000000))*(sj15)*(sj17)*(x1584)))+(((IkReal(-1.00000000000000))*(cj15)*(cj17)*(x1584)))+(((IkReal(-1.00000000000000))*(sj17)*(x1585))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1586=((IkReal(3.11526479750779))*(cj15));
IkReal x1587=((IkReal(3.11526479750779))*(sj15));
if( IKabs(((((IkReal(-1.00000000000000))*(cj17)*(px)*(x1586)))+(((IkReal(0.311526479750779))*(cj17)))+(((IkReal(-1.00000000000000))*(px)*(sj17)*(x1587)))+(((IkReal(-1.00000000000000))*(cj17)*(py)*(x1587)))+(((py)*(sj17)*(x1586))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj17)*(px)*(x1586)))+(((IkReal(0.311526479750779))*(cj17)))+(((IkReal(-1.00000000000000))*(px)*(sj17)*(x1587)))+(((IkReal(-1.00000000000000))*(cj17)*(py)*(x1587)))+(((py)*(sj17)*(x1586)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj17)*(px)*(x1586)))+(((IkReal(0.311526479750779))*(cj17)))+(((IkReal(-1.00000000000000))*(px)*(sj17)*(x1587)))+(((IkReal(-1.00000000000000))*(cj17)*(py)*(x1587)))+(((py)*(sj17)*(x1586)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1588=IKsin(j18);
IkReal x1589=IKcos(j18);
IkReal x1590=((py)*(sj15));
IkReal x1591=((px)*(sj15));
IkReal x1592=((cj15)*(px));
IkReal x1593=((IkReal(0.321000000000000))*(x1588));
IkReal x1594=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x1589))));
evalcond[1]=((((sj17)*(x1593)))+(((IkReal(-1.00000000000000))*(x1594)))+(x1591));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(cj17)*(x1593)))+(((IkReal(-1.00000000000000))*(x1590)))+(((IkReal(-1.00000000000000))*(x1592))));
evalcond[3]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1589)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1590)))+(((IkReal(0.200000000000000))*(x1592))));
evalcond[4]=((((sj17)*(x1591)))+(((cj17)*(x1590)))+(((cj17)*(x1592)))+(((IkReal(-0.100000000000000))*(cj17)))+(x1593)+(((IkReal(-1.00000000000000))*(sj17)*(x1594))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1595=((cj15)*(px));
IkReal x1596=((py)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j16))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1595)))+(((IkReal(0.200000000000000))*(x1596))));
evalcond[2]=((((sj17)*(x1595)))+(((sj17)*(x1596)))+(((IkReal(-1.00000000000000))*(cj15)*(cj17)*(py)))+(((IkReal(-0.100000000000000))*(sj17)))+(((cj17)*(px)*(sj15))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1597=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j17))), IkReal(6.28318530717959))));
evalcond[1]=x1597;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x1597;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1598=IKcos(j18);
IkReal x1599=((cj15)*(px));
IkReal x1600=((py)*(sj15));
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1598)))+(pz));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1600)))+(((IkReal(-1.00000000000000))*(x1599)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1598)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1600)))+(((IkReal(0.200000000000000))*(x1599))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1601=((cj15)*(py));
IkReal x1602=((px)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j17))))), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1601)))+(x1602));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1602)))+(x1601));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1603=IKcos(j18);
IkReal x1604=((cj15)*(px));
IkReal x1605=((py)*(sj15));
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1603)))+(pz));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1605)))+(((IkReal(-1.00000000000000))*(x1604)))+(((IkReal(-0.321000000000000))*(IKsin(j18)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1603)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1604)))+(((IkReal(0.200000000000000))*(x1605))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1606=((cj15)*(px));
IkReal x1607=((py)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j17))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1607)))+(((IkReal(-1.00000000000000))*(x1606))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1607)))+(((IkReal(0.200000000000000))*(x1606))));
evalcond[3]=((IkReal(-0.100000000000000))+(x1607)+(x1606));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1608=IKcos(j18);
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1608)))+(pz));
evalcond[1]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1608)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1609=((py)*(sj15));
IkReal x1610=((cj15)*(px));
IkReal x1611=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1610)))+(((IkReal(-1.00000000000000))*(x1609))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j17))))), IkReal(6.28318530717959))));
evalcond[1]=x1611;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1610)))+(((IkReal(0.200000000000000))*(x1609))));
evalcond[3]=x1611;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1612=IKcos(j18);
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1612)))+(pz));
evalcond[1]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py)))+(((IkReal(-0.321000000000000))*(IKsin(j18)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1612)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1613 = IKPowWithIntegerCheck(sj17,-1.00000000000000);
if( !x1613.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1613.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1613.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1613.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1614=IKsin(j18);
IkReal x1615=IKcos(j18);
IkReal x1616=((py)*(sj15));
IkReal x1617=((IkReal(1.00000000000000))*(cj15));
IkReal x1618=((px)*(sj15));
IkReal x1619=((IkReal(0.321000000000000))*(x1614));
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1615)))+(pz));
evalcond[1]=((((sj17)*(x1619)))+(x1618)+(((IkReal(-1.00000000000000))*(py)*(x1617))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1616)))+(((IkReal(-1.00000000000000))*(px)*(x1617)))+(((cj17)*(x1619))));
evalcond[3]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1615)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1616))));
evalcond[4]=((((sj17)*(x1618)))+(x1619)+(((IkReal(-1.00000000000000))*(cj17)*(x1616)))+(((IkReal(-1.00000000000000))*(cj17)*(px)*(x1617)))+(((IkReal(-1.00000000000000))*(py)*(sj17)*(x1617)))+(((IkReal(0.100000000000000))*(cj17))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1620 = IKPowWithIntegerCheck(cj17,-1.00000000000000);
if( !x1620.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1620.value)*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(py)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1620.value)*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(py)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(px)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1620.value)*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(py)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(px)))))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1621=IKsin(j18);
IkReal x1622=IKcos(j18);
IkReal x1623=((py)*(sj15));
IkReal x1624=((IkReal(1.00000000000000))*(cj15));
IkReal x1625=((px)*(sj15));
IkReal x1626=((IkReal(0.321000000000000))*(x1621));
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1622)))+(pz));
evalcond[1]=((x1625)+(((sj17)*(x1626)))+(((IkReal(-1.00000000000000))*(py)*(x1624))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1623)))+(((IkReal(-1.00000000000000))*(px)*(x1624)))+(((cj17)*(x1626))));
evalcond[3]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1622)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1623))));
evalcond[4]=((x1626)+(((sj17)*(x1625)))+(((IkReal(-1.00000000000000))*(cj17)*(x1623)))+(((IkReal(-1.00000000000000))*(cj17)*(px)*(x1624)))+(((IkReal(-1.00000000000000))*(py)*(sj17)*(x1624)))+(((IkReal(0.100000000000000))*(cj17))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1627 = IKPowWithIntegerCheck(sj17,-1.00000000000000);
if( !x1627.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1627.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1627.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1627.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1628=IKsin(j18);
IkReal x1629=IKcos(j18);
IkReal x1630=((py)*(sj15));
IkReal x1631=((IkReal(1.00000000000000))*(cj15));
IkReal x1632=((px)*(sj15));
IkReal x1633=((IkReal(0.321000000000000))*(x1628));
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1629)))+(pz));
evalcond[1]=((((sj17)*(x1633)))+(x1632)+(((IkReal(-1.00000000000000))*(py)*(x1631))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(px)*(x1631)))+(((IkReal(-1.00000000000000))*(x1630)))+(((cj17)*(x1633))));
evalcond[3]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1629)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(x1630)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[4]=((((sj17)*(x1632)))+(((IkReal(-1.00000000000000))*(cj17)*(px)*(x1631)))+(x1633)+(((IkReal(-1.00000000000000))*(cj17)*(x1630)))+(((IkReal(-1.00000000000000))*(py)*(sj17)*(x1631)))+(((IkReal(0.100000000000000))*(cj17))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1634=((IkReal(1.00000000000000))*(sj16));
IkReal x1635=((cj15)*(px));
IkReal x1636=((py)*(sj15));
IkReal x1637=((IkReal(0.800000000000000))*(cj16));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j17))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((x1636)*(x1637)))+(((IkReal(0.200000000000000))*(x1636)))+(((IkReal(0.200000000000000))*(x1635)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16)))+(((x1635)*(x1637))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1634)*(x1636)))+(((IkReal(-1.00000000000000))*(x1634)*(x1635)))+(((IkReal(-1.00000000000000))*(cj16)*(pz)))+(((IkReal(0.100000000000000))*(sj16))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1638=IKcos(j18);
IkReal x1639=((py)*(sj15));
IkReal x1640=((IkReal(1.00000000000000))*(cj16));
IkReal x1641=((IkReal(1.00000000000000))*(cj15));
IkReal x1642=((cj15)*(px));
IkReal x1643=((IkReal(0.321000000000000))*(x1638));
evalcond[0]=((((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x1643))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x1641)))+(((px)*(sj15)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1639)))+(((IkReal(0.200000000000000))*(x1642)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1638))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(px)*(x1641)))+(((IkReal(-1.00000000000000))*(x1639)))+(((IkReal(0.400000000000000))*(cj16)))+(((cj16)*(x1643))));
evalcond[4]=((IkReal(0.400000000000000))+(x1643)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1639)*(x1640)))+(((IkReal(-1.00000000000000))*(x1640)*(x1642)))+(((IkReal(0.100000000000000))*(cj16))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1644=((cj15)*(px));
IkReal x1645=((IkReal(0.800000000000000))*(cj16));
IkReal x1646=((py)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j17))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((x1645)*(x1646)))+(((x1644)*(x1645)))+(((IkReal(0.200000000000000))*(x1644)))+(((IkReal(0.200000000000000))*(x1646)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16))));
evalcond[2]=((((IkReal(-0.100000000000000))*(sj16)))+(((cj16)*(pz)))+(((sj16)*(x1644)))+(((sj16)*(x1646))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1647=IKcos(j18);
IkReal x1648=((py)*(sj15));
IkReal x1649=((IkReal(1.00000000000000))*(cj16));
IkReal x1650=((IkReal(1.00000000000000))*(cj15));
IkReal x1651=((cj15)*(px));
IkReal x1652=((IkReal(0.321000000000000))*(x1647));
evalcond[0]=((((sj16)*(x1652)))+(((IkReal(0.400000000000000))*(sj16)))+(pz));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x1650)))+(((px)*(sj15)))+(((IkReal(-0.321000000000000))*(IKsin(j18)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1647)))+(((IkReal(0.200000000000000))*(x1651)))+(((IkReal(0.200000000000000))*(x1648)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(px)*(x1650)))+(((IkReal(-1.00000000000000))*(x1648)))+(((cj16)*(x1652)))+(((IkReal(0.400000000000000))*(cj16))));
evalcond[4]=((IkReal(0.400000000000000))+(x1652)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1648)*(x1649)))+(((IkReal(-1.00000000000000))*(x1649)*(x1651)))+(((IkReal(0.100000000000000))*(cj16))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1653=((py)*(sj15));
IkReal x1654=((IkReal(0.800000000000000))*(cj16));
IkReal x1655=((cj15)*(px));
IkReal x1656=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j17))), IkReal(6.28318530717959))));
evalcond[1]=x1656;
evalcond[2]=((IkReal(-0.0669590000000000))+(((x1654)*(x1655)))+(((IkReal(0.200000000000000))*(x1655)))+(((IkReal(0.200000000000000))*(x1653)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16)))+(((x1653)*(x1654))));
evalcond[3]=x1656;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst47;
CheckValue<IkReal> x1657 = IKPowWithIntegerCheck(cj16,2.00000000000000);
if( !x1657.valid ) {
    continue;
}
CheckValue<IkReal> x1658 = IKPowWithIntegerCheck(sj16,2.00000000000000);
if( !x1658.valid ) {
    continue;
}
gconst47=IKsign(((((IkReal(321.000000000000))*(x1657.value)))+(((IkReal(321.000000000000))*(x1658.value)))));
CheckValue<IkReal> x1659 = IKPowWithIntegerCheck(sj16,2.00000000000000);
if( !x1659.valid ) {
    continue;
}
CheckValue<IkReal> x1660 = IKPowWithIntegerCheck(cj16,2.00000000000000);
if( !x1660.valid ) {
    continue;
}
dummyeval[0]=((x1659.value)+(x1660.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1661=x1656;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j16))))), IkReal(6.28318530717959))));
evalcond[1]=x1661;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x1661;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1662=IKcos(j18);
IkReal x1663=((cj15)*(px));
IkReal x1664=((py)*(sj15));
evalcond[0]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x1662))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1664)))+(((IkReal(-1.00000000000000))*(x1663)))+(((IkReal(-0.321000000000000))*(IKsin(j18)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1663)))+(((IkReal(0.200000000000000))*(x1664)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1662))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1665=((cj16)*(sj16));
IkReal x1666=((py)*(sj15));
IkReal x1667=((IkReal(3.11526479750779))*(cj16));
IkReal x1668=((IkReal(1000.00000000000))*(pz));
IkReal x1669=((cj15)*(px));
CheckValue<IkReal> x1670 = IKPowWithIntegerCheck(cj16,-1.00000000000000);
if( !x1670.valid ) {
    continue;
}
CheckValue<IkReal> x1671 = IKPowWithIntegerCheck(sj16,2.00000000000000);
if( !x1671.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1670.value)*(((((IkReal(-1000.00000000000))*(x1665)*(x1666)))+(((IkReal(-1000.00000000000))*(x1665)*(x1669)))+(((IkReal(100.000000000000))*(x1665)))+(((x1668)*(x1671.value)))+(((IkReal(-1.00000000000000))*(x1668))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((x1667)*(x1669)))+(((x1666)*(x1667)))+(((IkReal(-0.311526479750779))*(cj16))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1670.value)*(((((IkReal(-1000.00000000000))*(x1665)*(x1666)))+(((IkReal(-1000.00000000000))*(x1665)*(x1669)))+(((IkReal(100.000000000000))*(x1665)))+(((x1668)*(x1671.value)))+(((IkReal(-1.00000000000000))*(x1668)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((x1667)*(x1669)))+(((x1666)*(x1667)))+(((IkReal(-0.311526479750779))*(cj16)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1670.value)*(((((IkReal(-1000.00000000000))*(x1665)*(x1666)))+(((IkReal(-1000.00000000000))*(x1665)*(x1669)))+(((IkReal(100.000000000000))*(x1665)))+(((x1668)*(x1671.value)))+(((IkReal(-1.00000000000000))*(x1668)))))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((x1667)*(x1669)))+(((x1666)*(x1667)))+(((IkReal(-0.311526479750779))*(cj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1672=IKcos(j18);
IkReal x1673=IKsin(j18);
IkReal x1674=((py)*(sj15));
IkReal x1675=((cj15)*(px));
IkReal x1676=((IkReal(1.00000000000000))*(cj16));
IkReal x1677=((IkReal(0.321000000000000))*(x1672));
IkReal x1678=((IkReal(0.321000000000000))*(x1673));
evalcond[0]=((((cj16)*(x1678)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x1677))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1674)))+(((IkReal(0.200000000000000))*(x1675)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1672))));
evalcond[2]=((((IkReal(-0.100000000000000))*(sj16)))+(x1678)+(((sj16)*(x1674)))+(((sj16)*(x1675)))+(((cj16)*(pz))));
evalcond[3]=((IkReal(0.400000000000000))+(x1677)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1674)*(x1676)))+(((IkReal(0.100000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x1675)*(x1676))));
evalcond[4]=((IkReal(0.100000000000000))+(((cj16)*(x1677)))+(((IkReal(-1.00000000000000))*(sj16)*(x1678)))+(((IkReal(0.400000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x1674)))+(((IkReal(-1.00000000000000))*(x1675))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1679=((IkReal(250.000000000000))*(sj16));
IkReal x1680=((py)*(sj15));
IkReal x1681=((cj15)*(px));
CheckValue<IkReal> x1682 = IKPowWithIntegerCheck(cj16,-1.00000000000000);
if( !x1682.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1682.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((x1679)*(x1681)))+(((x1679)*(x1680)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((IkReal(-83.6987500000000))*(sj16))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1681)))+(((IkReal(-0.778816199376947))*(x1680)))+(((IkReal(3.89408099688474))*(pp))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1682.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((x1679)*(x1681)))+(((x1679)*(x1680)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((IkReal(-83.6987500000000))*(sj16)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1681)))+(((IkReal(-0.778816199376947))*(x1680)))+(((IkReal(3.89408099688474))*(pp)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1682.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((x1679)*(x1681)))+(((x1679)*(x1680)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((IkReal(-83.6987500000000))*(sj16)))))), ((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1681)))+(((IkReal(-0.778816199376947))*(x1680)))+(((IkReal(3.89408099688474))*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1683=IKcos(j18);
IkReal x1684=IKsin(j18);
IkReal x1685=((py)*(sj15));
IkReal x1686=((cj15)*(px));
IkReal x1687=((IkReal(1.00000000000000))*(cj16));
IkReal x1688=((IkReal(0.321000000000000))*(x1683));
IkReal x1689=((IkReal(0.321000000000000))*(x1684));
evalcond[0]=((((IkReal(0.400000000000000))*(sj16)))+(((cj16)*(x1689)))+(pz)+(((sj16)*(x1688))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1683)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1685)))+(((IkReal(0.200000000000000))*(x1686))));
evalcond[2]=((((IkReal(-0.100000000000000))*(sj16)))+(x1689)+(((cj16)*(pz)))+(((sj16)*(x1686)))+(((sj16)*(x1685))));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1686)*(x1687)))+(((IkReal(-1.00000000000000))*(x1685)*(x1687)))+(x1688)+(((pz)*(sj16)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1686)))+(((IkReal(-1.00000000000000))*(x1685)))+(((cj16)*(x1688)))+(((IkReal(0.400000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(sj16)*(x1689))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1690=((IkReal(1000.00000000000))*(cj16));
IkReal x1691=((IkReal(1000.00000000000))*(sj16));
IkReal x1692=((py)*(sj15));
IkReal x1693=((cj15)*(px));
CheckValue<IkReal> x1695 = IKPowWithIntegerCheck(sj16,2.00000000000000);
if( !x1695.valid ) {
    continue;
}
CheckValue<IkReal> x1696 = IKPowWithIntegerCheck(cj16,2.00000000000000);
if( !x1696.valid ) {
    continue;
}
CheckValue<IkReal> x1694 = IKatan2WithCheck(((gconst47)*(((((IkReal(100.000000000000))*(sj16)))+(((IkReal(-1.00000000000000))*(pz)*(x1690)))+(((IkReal(-1.00000000000000))*(x1691)*(x1692)))+(((IkReal(-1.00000000000000))*(x1691)*(x1693)))))),((gconst47)*(((((x1690)*(x1693)))+(((x1690)*(x1692)))+(((IkReal(-1.00000000000000))*(pz)*(x1691)))+(((IkReal(-100.000000000000))*(cj16)))+(((IkReal(-400.000000000000))*(x1695.value)))+(((IkReal(-400.000000000000))*(x1696.value)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1694.valid ) {
    continue;
}
j18array[0]=x1694.value;
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1697=IKcos(j18);
IkReal x1698=IKsin(j18);
IkReal x1699=((py)*(sj15));
IkReal x1700=((cj15)*(px));
IkReal x1701=((IkReal(1.00000000000000))*(cj16));
IkReal x1702=((IkReal(0.321000000000000))*(x1697));
IkReal x1703=((IkReal(0.321000000000000))*(x1698));
evalcond[0]=((((cj16)*(x1703)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x1702))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1700)))+(((IkReal(0.200000000000000))*(x1699)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1697))));
evalcond[2]=((((sj16)*(x1699)))+(((IkReal(-0.100000000000000))*(sj16)))+(x1703)+(((sj16)*(x1700)))+(((cj16)*(pz))));
evalcond[3]=((IkReal(0.400000000000000))+(x1702)+(((IkReal(-1.00000000000000))*(x1699)*(x1701)))+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1700)*(x1701)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((cj16)*(x1702)))+(((IkReal(-1.00000000000000))*(x1700)))+(((IkReal(-1.00000000000000))*(x1699)))+(((IkReal(-1.00000000000000))*(sj16)*(x1703)))+(((IkReal(0.400000000000000))*(cj16))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1704=((py)*(sj15));
IkReal x1705=((cj15)*(py));
IkReal x1706=((IkReal(0.800000000000000))*(cj16));
IkReal x1707=((cj15)*(px));
IkReal x1708=((px)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j17))))), IkReal(6.28318530717959))));
evalcond[1]=((x1708)+(((IkReal(-1.00000000000000))*(x1705))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1707)))+(((IkReal(0.200000000000000))*(x1704)))+(((x1706)*(x1707)))+(((x1704)*(x1706)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16))));
evalcond[3]=((x1705)+(((IkReal(-1.00000000000000))*(x1708))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst48;
CheckValue<IkReal> x1709 = IKPowWithIntegerCheck(cj16,2.00000000000000);
if( !x1709.valid ) {
    continue;
}
CheckValue<IkReal> x1710 = IKPowWithIntegerCheck(sj16,2.00000000000000);
if( !x1710.valid ) {
    continue;
}
gconst48=IKsign(((((IkReal(321.000000000000))*(x1709.value)))+(((IkReal(321.000000000000))*(x1710.value)))));
CheckValue<IkReal> x1711 = IKPowWithIntegerCheck(sj16,2.00000000000000);
if( !x1711.valid ) {
    continue;
}
CheckValue<IkReal> x1712 = IKPowWithIntegerCheck(cj16,2.00000000000000);
if( !x1712.valid ) {
    continue;
}
dummyeval[0]=((x1711.value)+(x1712.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1713=((cj15)*(py));
IkReal x1714=((px)*(sj15));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j16))))), IkReal(6.28318530717959))));
evalcond[1]=((x1714)+(((IkReal(-1.00000000000000))*(x1713))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((x1713)+(((IkReal(-1.00000000000000))*(x1714))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1715=IKcos(j18);
IkReal x1716=((cj15)*(px));
IkReal x1717=((py)*(sj15));
evalcond[0]=((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(x1715)))+(pz));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1717)))+(((IkReal(-1.00000000000000))*(x1716)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1717)))+(((IkReal(0.200000000000000))*(x1716)))+(((IkReal(0.256800000000000))*(x1715)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1718=((cj16)*(sj16));
IkReal x1719=((py)*(sj15));
IkReal x1720=((IkReal(3.11526479750779))*(cj16));
IkReal x1721=((IkReal(1000.00000000000))*(pz));
IkReal x1722=((cj15)*(px));
CheckValue<IkReal> x1723 = IKPowWithIntegerCheck(cj16,-1.00000000000000);
if( !x1723.valid ) {
    continue;
}
CheckValue<IkReal> x1724 = IKPowWithIntegerCheck(sj16,2.00000000000000);
if( !x1724.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1723.value)*(((((IkReal(-100.000000000000))*(x1718)))+(x1721)+(((IkReal(-1.00000000000000))*(x1721)*(x1724.value)))+(((IkReal(1000.00000000000))*(x1718)*(x1719)))+(((IkReal(1000.00000000000))*(x1718)*(x1722))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((x1720)*(x1722)))+(((IkReal(-0.311526479750779))*(cj16)))+(((x1719)*(x1720))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1723.value)*(((((IkReal(-100.000000000000))*(x1718)))+(x1721)+(((IkReal(-1.00000000000000))*(x1721)*(x1724.value)))+(((IkReal(1000.00000000000))*(x1718)*(x1719)))+(((IkReal(1000.00000000000))*(x1718)*(x1722)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((x1720)*(x1722)))+(((IkReal(-0.311526479750779))*(cj16)))+(((x1719)*(x1720)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1723.value)*(((((IkReal(-100.000000000000))*(x1718)))+(x1721)+(((IkReal(-1.00000000000000))*(x1721)*(x1724.value)))+(((IkReal(1000.00000000000))*(x1718)*(x1719)))+(((IkReal(1000.00000000000))*(x1718)*(x1722)))))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((x1720)*(x1722)))+(((IkReal(-0.311526479750779))*(cj16)))+(((x1719)*(x1720)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1725=IKcos(j18);
IkReal x1726=IKsin(j18);
IkReal x1727=((IkReal(1.00000000000000))*(cj16));
IkReal x1728=((py)*(sj15));
IkReal x1729=((cj15)*(px));
IkReal x1730=((IkReal(0.321000000000000))*(x1725));
IkReal x1731=((IkReal(1.00000000000000))*(x1729));
IkReal x1732=((IkReal(0.321000000000000))*(x1726));
evalcond[0]=((((sj16)*(x1730)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((IkReal(-1.00000000000000))*(cj16)*(x1732))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1728)))+(((IkReal(0.200000000000000))*(x1729)))+(((IkReal(0.256800000000000))*(x1725))));
evalcond[2]=((IkReal(0.400000000000000))+(x1730)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1727)*(x1728)))+(((IkReal(-1.00000000000000))*(x1727)*(x1729)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[3]=((x1732)+(((IkReal(-1.00000000000000))*(pz)*(x1727)))+(((IkReal(0.100000000000000))*(sj16)))+(((IkReal(-1.00000000000000))*(sj16)*(x1728)))+(((IkReal(-1.00000000000000))*(sj16)*(x1731))));
evalcond[4]=((IkReal(0.100000000000000))+(((sj16)*(x1732)))+(((IkReal(0.400000000000000))*(cj16)))+(((cj16)*(x1730)))+(((IkReal(-1.00000000000000))*(x1728)))+(((IkReal(-1.00000000000000))*(x1731))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1733=((IkReal(250.000000000000))*(sj16));
IkReal x1734=((py)*(sj15));
IkReal x1735=((cj15)*(px));
CheckValue<IkReal> x1736 = IKPowWithIntegerCheck(cj16,-1.00000000000000);
if( !x1736.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1736.value)*(((((IkReal(-1.00000000000000))*(x1733)*(x1734)))+(((IkReal(-1.00000000000000))*(x1733)*(x1735)))+(((IkReal(83.6987500000000))*(sj16)))+(((IkReal(1250.00000000000))*(pp)*(sj16)))+(((IkReal(1000.00000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1734)))+(((IkReal(-0.778816199376947))*(x1735)))+(((IkReal(3.89408099688474))*(pp))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1736.value)*(((((IkReal(-1.00000000000000))*(x1733)*(x1734)))+(((IkReal(-1.00000000000000))*(x1733)*(x1735)))+(((IkReal(83.6987500000000))*(sj16)))+(((IkReal(1250.00000000000))*(pp)*(sj16)))+(((IkReal(1000.00000000000))*(pz)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1734)))+(((IkReal(-0.778816199376947))*(x1735)))+(((IkReal(3.89408099688474))*(pp)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1736.value)*(((((IkReal(-1.00000000000000))*(x1733)*(x1734)))+(((IkReal(-1.00000000000000))*(x1733)*(x1735)))+(((IkReal(83.6987500000000))*(sj16)))+(((IkReal(1250.00000000000))*(pp)*(sj16)))+(((IkReal(1000.00000000000))*(pz)))))), ((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1734)))+(((IkReal(-0.778816199376947))*(x1735)))+(((IkReal(3.89408099688474))*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1737=IKcos(j18);
IkReal x1738=IKsin(j18);
IkReal x1739=((IkReal(1.00000000000000))*(cj16));
IkReal x1740=((py)*(sj15));
IkReal x1741=((cj15)*(px));
IkReal x1742=((IkReal(0.321000000000000))*(x1737));
IkReal x1743=((IkReal(1.00000000000000))*(x1741));
IkReal x1744=((IkReal(0.321000000000000))*(x1738));
evalcond[0]=((((sj16)*(x1742)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((IkReal(-1.00000000000000))*(cj16)*(x1744))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1741)))+(((IkReal(0.200000000000000))*(x1740)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1737))));
evalcond[2]=((IkReal(0.400000000000000))+(x1742)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1739)*(x1740)))+(((IkReal(-1.00000000000000))*(x1739)*(x1741)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[3]=((x1744)+(((IkReal(-1.00000000000000))*(pz)*(x1739)))+(((IkReal(-1.00000000000000))*(sj16)*(x1743)))+(((IkReal(-1.00000000000000))*(sj16)*(x1740)))+(((IkReal(0.100000000000000))*(sj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((cj16)*(x1742)))+(((sj16)*(x1744)))+(((IkReal(-1.00000000000000))*(x1740)))+(((IkReal(0.400000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x1743))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1745=((IkReal(1000.00000000000))*(cj16));
IkReal x1746=((IkReal(1000.00000000000))*(sj16));
IkReal x1747=((py)*(sj15));
IkReal x1748=((cj15)*(px));
CheckValue<IkReal> x1750 = IKPowWithIntegerCheck(sj16,2.00000000000000);
if( !x1750.valid ) {
    continue;
}
CheckValue<IkReal> x1751 = IKPowWithIntegerCheck(cj16,2.00000000000000);
if( !x1751.valid ) {
    continue;
}
CheckValue<IkReal> x1749 = IKatan2WithCheck(((gconst48)*(((((pz)*(x1745)))+(((x1746)*(x1748)))+(((x1746)*(x1747)))+(((IkReal(-100.000000000000))*(sj16)))))),((gconst48)*(((((IkReal(-100.000000000000))*(cj16)))+(((x1745)*(x1748)))+(((x1745)*(x1747)))+(((IkReal(-400.000000000000))*(x1750.value)))+(((IkReal(-400.000000000000))*(x1751.value)))+(((IkReal(-1.00000000000000))*(pz)*(x1746)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1749.valid ) {
    continue;
}
j18array[0]=x1749.value;
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1752=IKcos(j18);
IkReal x1753=IKsin(j18);
IkReal x1754=((IkReal(1.00000000000000))*(cj16));
IkReal x1755=((py)*(sj15));
IkReal x1756=((cj15)*(px));
IkReal x1757=((IkReal(0.321000000000000))*(x1752));
IkReal x1758=((IkReal(1.00000000000000))*(x1756));
IkReal x1759=((IkReal(0.321000000000000))*(x1753));
evalcond[0]=((((sj16)*(x1757)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((IkReal(-1.00000000000000))*(cj16)*(x1759))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1755)))+(((IkReal(0.200000000000000))*(x1756)))+(((IkReal(0.256800000000000))*(x1752)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.400000000000000))+(x1757)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1754)*(x1755)))+(((IkReal(-1.00000000000000))*(x1754)*(x1756)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[3]=((x1759)+(((IkReal(-1.00000000000000))*(pz)*(x1754)))+(((IkReal(-1.00000000000000))*(sj16)*(x1758)))+(((IkReal(-1.00000000000000))*(sj16)*(x1755)))+(((IkReal(0.100000000000000))*(sj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((cj16)*(x1757)))+(((sj16)*(x1759)))+(((IkReal(-1.00000000000000))*(x1758)))+(((IkReal(0.400000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x1755))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1760=((IkReal(250.000000000000))*(sj16));
IkReal x1761=((py)*(sj15));
IkReal x1762=((cj15)*(px));
CheckValue<IkReal> x1763 = IKPowWithIntegerCheck(cj16,-1.00000000000000);
if( !x1763.valid ) {
    continue;
}
CheckValue<IkReal> x1764 = IKPowWithIntegerCheck(cj17,-1.00000000000000);
if( !x1764.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1763.value)*(x1764.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((IkReal(-83.6987500000000))*(sj16)))+(((x1760)*(x1762)))+(((x1760)*(x1761))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1761)))+(((IkReal(-0.778816199376947))*(x1762))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1763.value)*(x1764.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((IkReal(-83.6987500000000))*(sj16)))+(((x1760)*(x1762)))+(((x1760)*(x1761)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1761)))+(((IkReal(-0.778816199376947))*(x1762)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1763.value)*(x1764.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((IkReal(-83.6987500000000))*(sj16)))+(((x1760)*(x1762)))+(((x1760)*(x1761)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1761)))+(((IkReal(-0.778816199376947))*(x1762)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x1765=IKcos(j18);
IkReal x1766=IKsin(j18);
IkReal x1767=((cj17)*(sj16));
IkReal x1768=((cj16)*(cj17));
IkReal x1769=((cj15)*(px));
IkReal x1770=((IkReal(1.00000000000000))*(cj16));
IkReal x1771=((py)*(sj15));
IkReal x1772=((px)*(sj15));
IkReal x1773=((IkReal(0.321000000000000))*(x1766));
IkReal x1774=((IkReal(0.321000000000000))*(x1765));
IkReal x1775=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((x1772)+(((IkReal(-1.00000000000000))*(x1775)))+(((sj17)*(x1773))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1771)))+(((IkReal(0.200000000000000))*(x1769)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1765))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x1774)))+(((x1768)*(x1773))));
evalcond[3]=((IkReal(0.400000000000000))+(x1774)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1770)*(x1771)))+(((IkReal(-1.00000000000000))*(x1769)*(x1770)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1769)))+(((IkReal(-1.00000000000000))*(x1771)))+(((cj16)*(x1774)))+(((IkReal(-1.00000000000000))*(x1767)*(x1773)))+(((IkReal(0.400000000000000))*(cj16))));
evalcond[5]=((((x1767)*(x1771)))+(((IkReal(-1.00000000000000))*(sj17)*(x1775)))+(x1773)+(((IkReal(-0.100000000000000))*(x1767)))+(((pz)*(x1768)))+(((x1767)*(x1769)))+(((sj17)*(x1772))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1776=((IkReal(3.11526479750779))*(cj16));
CheckValue<IkReal> x1777 = IKPowWithIntegerCheck(sj17,-1.00000000000000);
if( !x1777.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1777.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((py)*(sj15)*(x1776)))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((cj15)*(px)*(x1776)))+(((IkReal(-0.311526479750779))*(cj16))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1777.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-1.24610591900312))+(((py)*(sj15)*(x1776)))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((cj15)*(px)*(x1776)))+(((IkReal(-0.311526479750779))*(cj16)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1777.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-1.24610591900312))+(((py)*(sj15)*(x1776)))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((cj15)*(px)*(x1776)))+(((IkReal(-0.311526479750779))*(cj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x1778=IKcos(j18);
IkReal x1779=IKsin(j18);
IkReal x1780=((cj17)*(sj16));
IkReal x1781=((cj16)*(cj17));
IkReal x1782=((cj15)*(px));
IkReal x1783=((IkReal(1.00000000000000))*(cj16));
IkReal x1784=((py)*(sj15));
IkReal x1785=((px)*(sj15));
IkReal x1786=((IkReal(0.321000000000000))*(x1779));
IkReal x1787=((IkReal(0.321000000000000))*(x1778));
IkReal x1788=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1788)))+(((sj17)*(x1786)))+(x1785));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1778)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1784)))+(((IkReal(0.200000000000000))*(x1782))));
evalcond[2]=((((sj16)*(x1787)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((x1781)*(x1786))));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1783)*(x1784)))+(x1787)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1782)*(x1783)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x1784)))+(((IkReal(-1.00000000000000))*(x1782)))+(((cj16)*(x1787)))+(((IkReal(-1.00000000000000))*(x1780)*(x1786))));
evalcond[5]=((((sj17)*(x1785)))+(x1786)+(((pz)*(x1781)))+(((IkReal(-0.100000000000000))*(x1780)))+(((IkReal(-1.00000000000000))*(sj17)*(x1788)))+(((x1780)*(x1784)))+(((x1780)*(x1782))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
CheckValue<IkReal> x1789 = IKPowWithIntegerCheck(sj17,-1.00000000000000);
if( !x1789.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1789.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1789.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1789.value)*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x1790=IKcos(j18);
IkReal x1791=IKsin(j18);
IkReal x1792=((cj17)*(sj16));
IkReal x1793=((cj16)*(cj17));
IkReal x1794=((cj15)*(px));
IkReal x1795=((IkReal(1.00000000000000))*(cj16));
IkReal x1796=((py)*(sj15));
IkReal x1797=((px)*(sj15));
IkReal x1798=((IkReal(0.321000000000000))*(x1791));
IkReal x1799=((IkReal(0.321000000000000))*(x1790));
IkReal x1800=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((((sj17)*(x1798)))+(x1797)+(((IkReal(-1.00000000000000))*(x1800))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1796)))+(((IkReal(0.200000000000000))*(x1794)))+(((IkReal(0.256800000000000))*(x1790))));
evalcond[2]=((((x1793)*(x1798)))+(((sj16)*(x1799)))+(((IkReal(0.400000000000000))*(sj16)))+(pz));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1795)*(x1796)))+(x1799)+(((pz)*(sj16)))+(((IkReal(0.100000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x1794)*(x1795))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1792)*(x1798)))+(((cj16)*(x1799)))+(((IkReal(0.400000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x1796)))+(((IkReal(-1.00000000000000))*(x1794))));
evalcond[5]=((((sj17)*(x1797)))+(x1798)+(((pz)*(x1793)))+(((IkReal(-1.00000000000000))*(sj17)*(x1800)))+(((IkReal(-0.100000000000000))*(x1792)))+(((x1792)*(x1796)))+(((x1792)*(x1794))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x155=((IkReal(1.00000000000000))*(cj17));
IkReal x156=((cj18)*(sj16));
IkReal x157=((cj16)*(sj17));
IkReal x158=((sj16)*(sj18));
IkReal x159=((sj16)*(sj17));
IkReal x160=((cj16)*(cj18));
IkReal x161=((sj17)*(sj18));
IkReal x162=((cj16)*(sj18));
IkReal x163=((cj18)*(sj15)*(sj17));
IkReal x164=((x158)+(((IkReal(-1.00000000000000))*(x155)*(x160))));
IkReal x165=((((sj15)*(x159)))+(((cj15)*(cj17))));
IkReal x166=((((cj15)*(x159)))+(((IkReal(-1.00000000000000))*(sj15)*(x155))));
IkReal x167=((x160)+(((IkReal(-1.00000000000000))*(x155)*(x158))));
IkReal x168=((cj15)*(x167));
IkReal x169=((((IkReal(-1.00000000000000))*(x162)))+(((IkReal(-1.00000000000000))*(x155)*(x156))));
IkReal x170=((((IkReal(-1.00000000000000))*(x156)))+(((IkReal(-1.00000000000000))*(x155)*(x162))));
IkReal x171=((cj15)*(x169));
IkReal x172=((((sj15)*(x167)))+(((cj15)*(x161))));
IkReal x173=((((IkReal(-1.00000000000000))*(sj15)*(x161)))+(x168));
IkReal x174=((((cj15)*(cj18)*(sj17)))+(((sj15)*(x169))));
IkReal x175=((x171)+(((IkReal(-1.00000000000000))*(x163))));
new_r00=((((r00)*(x175)))+(((r20)*(x164)))+(((r10)*(x174))));
new_r01=((((r01)*(x175)))+(((r21)*(x164)))+(((r11)*(x174))));
new_r02=((((r22)*(x164)))+(((r02)*(((x171)+(((IkReal(-1.00000000000000))*(x163)))))))+(((r12)*(x174))));
new_r10=((((r00)*(x166)))+(((r20)*(x157)))+(((r10)*(x165))));
new_r11=((((r01)*(x166)))+(((r21)*(x157)))+(((r11)*(x165))));
new_r12=((((r12)*(x165)))+(((r22)*(x157)))+(((r02)*(x166))));
new_r20=((((r20)*(x170)))+(((r10)*(x172)))+(((r00)*(((((IkReal(-1.00000000000000))*(sj15)*(x161)))+(x168))))));
new_r21=((((r01)*(x173)))+(((r21)*(x170)))+(((r11)*(x172))));
new_r22=((((r22)*(x170)))+(((r12)*(x172)))+(((r02)*(x173))));
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
cj20array[0]=new_r22;
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IkReal dummyeval[1];
IkReal gconst89;
gconst89=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst90;
gconst90=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst91;
gconst91=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x176=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j20))), IkReal(6.28318530717959))));
evalcond[1]=x176;
evalcond[2]=x176;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x176;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
IkReal j21mul = 1;
j21=0;
IkReal j19mul=IkReal(-1.00000000000000);
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].fmul = j19mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].fmul = j21mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x177=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=x177;
evalcond[2]=x177;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
CheckValue<IkReal> x179 = IKatan2WithCheck(new_r02,new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x179.valid ) {
    continue;
}
IkReal x178=x179.value;
j19array[0]=((IkReal(-1.00000000000000))*(x178));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x178))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j19))))+(((new_r12)*(IKcos(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst125;
CheckValue<IkReal> x180 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x180.valid ) {
    continue;
}
CheckValue<IkReal> x181 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x181.valid ) {
    continue;
}
gconst125=IKsign(((x180.value)+(x181.value)));
CheckValue<IkReal> x182 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x182.valid ) {
    continue;
}
CheckValue<IkReal> x183 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x183.valid ) {
    continue;
}
dummyeval[0]=((x182.value)+(x183.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst126;
CheckValue<IkReal> x184 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x184.valid ) {
    continue;
}
CheckValue<IkReal> x185 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x185.valid ) {
    continue;
}
gconst126=IKsign(((x184.value)+(x185.value)));
CheckValue<IkReal> x186 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x186.valid ) {
    continue;
}
CheckValue<IkReal> x187 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x187.valid ) {
    continue;
}
dummyeval[0]=((x186.value)+(x187.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x188=((IkReal(1.00000000000000))*(sj19));
CheckValue<IkReal> x189 = IKatan2WithCheck(((gconst126)*(((((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x188)))))),((gconst126)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x188)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x189.valid ) {
    continue;
}
j21array[0]=x189.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x190=IKsin(j21);
IkReal x191=IKcos(j21);
IkReal x192=((IkReal(1.00000000000000))*(cj19));
IkReal x193=((IkReal(1.00000000000000))*(sj19));
IkReal x194=((IkReal(1.00000000000000))*(x190));
IkReal x195=((sj19)*(x191));
IkReal x196=((sj19)*(x190));
IkReal x197=((x190)*(x192));
evalcond[0]=((x191)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x194)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[2]=((((cj19)*(x191)))+(x196)+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-1.00000000000000))*(new_r00)*(x193)))+(((cj19)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(new_r01)*(x193)))+(((cj19)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x197)))+(x195)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x197)))+(x195)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x191)*(x192)))+(((IkReal(-1.00000000000000))*(x190)*(x193)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x198=((IkReal(1.00000000000000))*(sj19));
CheckValue<IkReal> x199 = IKatan2WithCheck(((gconst125)*(((((IkReal(-1.00000000000000))*(new_r00)*(x198)))+(((cj19)*(new_r01)))))),((gconst125)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(x198)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x199.valid ) {
    continue;
}
j21array[0]=x199.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x200=IKsin(j21);
IkReal x201=IKcos(j21);
IkReal x202=((IkReal(1.00000000000000))*(cj19));
IkReal x203=((IkReal(1.00000000000000))*(sj19));
IkReal x204=((IkReal(1.00000000000000))*(x200));
IkReal x205=((sj19)*(x201));
IkReal x206=((sj19)*(x200));
IkReal x207=((x200)*(x202));
evalcond[0]=((x201)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x204)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[2]=((((cj19)*(x201)))+(x206)+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x203)))+(((IkReal(-1.00000000000000))*(x204)))+(((cj19)*(new_r10))));
evalcond[4]=((((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(x201)))+(((IkReal(-1.00000000000000))*(new_r01)*(x203))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x207)))+(x205)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x207)))+(x205)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x200)*(x203)))+(((IkReal(-1.00000000000000))*(x201)*(x202)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x208 = IKatan2WithCheck(((gconst91)*(new_r21)),((IkReal(-1.00000000000000))*(gconst91)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x208.valid ) {
    continue;
}
j21array[0]=x208.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
evalcond[0]=((((sj20)*(IKcos(j21))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj20)*(IKsin(j21))))+(new_r21));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst92;
gconst92=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst93;
gconst93=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x209=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j20))), IkReal(6.28318530717959))));
evalcond[1]=x209;
evalcond[2]=x209;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x209;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst94;
gconst94=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst95;
gconst95=IKsign(((((IkReal(-1.00000000000000))*(cj21)*(new_r02)))+(((new_r12)*(sj21)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj21)*(new_r02)))+(((new_r12)*(sj21))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal gconst96;
CheckValue<IkReal> x210 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x210.valid ) {
    continue;
}
gconst96=((IkReal(-1.00000000000000))*(x210.value));
IkReal gconst97;
gconst97=IKsin(gconst96);
IkReal gconst98;
gconst98=IKcos(gconst96);
IkReal x211=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst96)))+(j21))))), IkReal(6.28318530717959))));
evalcond[1]=x211;
evalcond[2]=x211;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x211;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst102;
gconst102=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst103;
gconst103=IKsign(((((IkReal(-1.00000000000000))*(gconst98)*(new_r02)))+(((gconst97)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(gconst98)*(new_r02)))+(((gconst97)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x212=((gconst103)*(new_r01));
CheckValue<IkReal> x213 = IKatan2WithCheck(((new_r02)*(x212)),((IkReal(-1.00000000000000))*(new_r12)*(x212)),IKFAST_ATAN2_MAGTHRESH);
if( !x213.valid ) {
    continue;
}
j19array[0]=x213.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x214=IKcos(j19);
IkReal x215=IKsin(j19);
IkReal x216=((IkReal(1.00000000000000))*(gconst98));
IkReal x217=((gconst97)*(x215));
IkReal x218=((IkReal(1.00000000000000))*(x215));
IkReal x219=((gconst97)*(x214));
IkReal x220=((x214)*(x216));
evalcond[0]=((((new_r02)*(x214)))+(((new_r12)*(x215))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x218)))+(((new_r12)*(x214))));
evalcond[2]=((gconst97)+(((new_r01)*(x214)))+(((new_r11)*(x215))));
evalcond[3]=((x219)+(new_r01)+(((gconst98)*(x215))));
evalcond[4]=((x217)+(new_r00)+(((IkReal(-1.00000000000000))*(x220))));
evalcond[5]=((x217)+(new_r11)+(((IkReal(-1.00000000000000))*(x220))));
evalcond[6]=((((new_r00)*(x214)))+(((IkReal(-1.00000000000000))*(x216)))+(((new_r10)*(x215))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x219)))+(new_r10)+(((IkReal(-1.00000000000000))*(x215)*(x216))));
evalcond[8]=((((IkReal(-1.00000000000000))*(gconst97)))+(((IkReal(-1.00000000000000))*(new_r00)*(x218)))+(((new_r10)*(x214))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x218)))+(((IkReal(-1.00000000000000))*(x216)))+(((new_r11)*(x214))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x221=((gconst102)*(gconst97));
CheckValue<IkReal> x222 = IKatan2WithCheck(((new_r02)*(x221)),((IkReal(-1.00000000000000))*(new_r12)*(x221)),IKFAST_ATAN2_MAGTHRESH);
if( !x222.valid ) {
    continue;
}
j19array[0]=x222.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x223=IKcos(j19);
IkReal x224=IKsin(j19);
IkReal x225=((IkReal(1.00000000000000))*(gconst98));
IkReal x226=((gconst97)*(x224));
IkReal x227=((IkReal(1.00000000000000))*(x224));
IkReal x228=((gconst97)*(x223));
IkReal x229=((x223)*(x225));
evalcond[0]=((((new_r02)*(x223)))+(((new_r12)*(x224))));
evalcond[1]=((((new_r12)*(x223)))+(((IkReal(-1.00000000000000))*(new_r02)*(x227))));
evalcond[2]=((((new_r01)*(x223)))+(gconst97)+(((new_r11)*(x224))));
evalcond[3]=((x228)+(new_r01)+(((gconst98)*(x224))));
evalcond[4]=((x226)+(new_r00)+(((IkReal(-1.00000000000000))*(x229))));
evalcond[5]=((x226)+(new_r11)+(((IkReal(-1.00000000000000))*(x229))));
evalcond[6]=((((new_r00)*(x223)))+(((new_r10)*(x224)))+(((IkReal(-1.00000000000000))*(x225))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x224)*(x225)))+(new_r10)+(((IkReal(-1.00000000000000))*(x228))));
evalcond[8]=((((IkReal(-1.00000000000000))*(gconst97)))+(((new_r10)*(x223)))+(((IkReal(-1.00000000000000))*(new_r00)*(x227))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x227)))+(((new_r11)*(x223)))+(((IkReal(-1.00000000000000))*(x225))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst99;
CheckValue<IkReal> x230 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x230.valid ) {
    continue;
}
gconst99=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x230.value))));
IkReal gconst100;
gconst100=IKsin(gconst99);
IkReal gconst101;
gconst101=IKcos(gconst99);
IkReal x231=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst99)))+(j21))))), IkReal(6.28318530717959))));
evalcond[1]=x231;
evalcond[2]=x231;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x231;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst104;
gconst104=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst105;
gconst105=IKsign(((((gconst100)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst101)*(new_r02)))));
dummyeval[0]=((((gconst100)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst101)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x232=((gconst105)*(new_r01));
CheckValue<IkReal> x233 = IKatan2WithCheck(((new_r02)*(x232)),((IkReal(-1.00000000000000))*(new_r12)*(x232)),IKFAST_ATAN2_MAGTHRESH);
if( !x233.valid ) {
    continue;
}
j19array[0]=x233.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x234=IKcos(j19);
IkReal x235=IKsin(j19);
IkReal x236=((IkReal(1.00000000000000))*(gconst101));
IkReal x237=((IkReal(1.00000000000000))*(gconst100));
IkReal x238=((gconst100)*(x235));
IkReal x239=((IkReal(1.00000000000000))*(x235));
IkReal x240=((x234)*(x236));
evalcond[0]=((((new_r02)*(x234)))+(((new_r12)*(x235))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x239)))+(((new_r12)*(x234))));
evalcond[2]=((((new_r11)*(x235)))+(((new_r01)*(x234)))+(gconst100));
evalcond[3]=((((gconst101)*(x235)))+(((gconst100)*(x234)))+(new_r01));
evalcond[4]=((x238)+(((IkReal(-1.00000000000000))*(x240)))+(new_r00));
evalcond[5]=((x238)+(((IkReal(-1.00000000000000))*(x240)))+(new_r11));
evalcond[6]=((((new_r10)*(x235)))+(((new_r00)*(x234)))+(((IkReal(-1.00000000000000))*(x236))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x235)*(x236)))+(new_r10)+(((IkReal(-1.00000000000000))*(x234)*(x237))));
evalcond[8]=((((new_r10)*(x234)))+(((IkReal(-1.00000000000000))*(x237)))+(((IkReal(-1.00000000000000))*(new_r00)*(x239))));
evalcond[9]=((((new_r11)*(x234)))+(((IkReal(-1.00000000000000))*(x236)))+(((IkReal(-1.00000000000000))*(new_r01)*(x239))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x241=((gconst100)*(gconst104));
CheckValue<IkReal> x242 = IKatan2WithCheck(((new_r02)*(x241)),((IkReal(-1.00000000000000))*(new_r12)*(x241)),IKFAST_ATAN2_MAGTHRESH);
if( !x242.valid ) {
    continue;
}
j19array[0]=x242.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x243=IKcos(j19);
IkReal x244=IKsin(j19);
IkReal x245=((IkReal(1.00000000000000))*(gconst101));
IkReal x246=((IkReal(1.00000000000000))*(gconst100));
IkReal x247=((gconst100)*(x244));
IkReal x248=((IkReal(1.00000000000000))*(x244));
IkReal x249=((x243)*(x245));
evalcond[0]=((((new_r12)*(x244)))+(((new_r02)*(x243))));
evalcond[1]=((((new_r12)*(x243)))+(((IkReal(-1.00000000000000))*(new_r02)*(x248))));
evalcond[2]=((((new_r01)*(x243)))+(gconst100)+(((new_r11)*(x244))));
evalcond[3]=((((gconst100)*(x243)))+(new_r01)+(((gconst101)*(x244))));
evalcond[4]=((x247)+(((IkReal(-1.00000000000000))*(x249)))+(new_r00));
evalcond[5]=((x247)+(((IkReal(-1.00000000000000))*(x249)))+(new_r11));
evalcond[6]=((((new_r00)*(x243)))+(((IkReal(-1.00000000000000))*(x245)))+(((new_r10)*(x244))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x243)*(x246)))+(new_r10)+(((IkReal(-1.00000000000000))*(x244)*(x245))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x248)))+(((IkReal(-1.00000000000000))*(x246)))+(((new_r10)*(x243))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x248)))+(((IkReal(-1.00000000000000))*(x245)))+(((new_r11)*(x243))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x250=((gconst95)*(new_r01));
CheckValue<IkReal> x251 = IKatan2WithCheck(((new_r02)*(x250)),((IkReal(-1.00000000000000))*(new_r12)*(x250)),IKFAST_ATAN2_MAGTHRESH);
if( !x251.valid ) {
    continue;
}
j19array[0]=x251.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x252=IKcos(j19);
IkReal x253=IKsin(j19);
IkReal x254=((IkReal(1.00000000000000))*(cj21));
IkReal x255=((sj21)*(x253));
IkReal x256=((IkReal(1.00000000000000))*(x252));
IkReal x257=((IkReal(1.00000000000000))*(x253));
IkReal x258=((x252)*(x254));
evalcond[0]=((((new_r02)*(x252)))+(((new_r12)*(x253))));
evalcond[1]=((((new_r12)*(x252)))+(((IkReal(-1.00000000000000))*(new_r02)*(x257))));
evalcond[2]=((((new_r01)*(x252)))+(sj21)+(((new_r11)*(x253))));
evalcond[3]=((((cj21)*(x253)))+(((sj21)*(x252)))+(new_r01));
evalcond[4]=((x255)+(new_r00)+(((IkReal(-1.00000000000000))*(x258))));
evalcond[5]=((x255)+(new_r11)+(((IkReal(-1.00000000000000))*(x258))));
evalcond[6]=((((new_r00)*(x252)))+(((new_r10)*(x253)))+(((IkReal(-1.00000000000000))*(x254))));
evalcond[7]=((((IkReal(-1.00000000000000))*(sj21)*(x256)))+(new_r10)+(((IkReal(-1.00000000000000))*(x253)*(x254))));
evalcond[8]=((((IkReal(-1.00000000000000))*(sj21)))+(((new_r10)*(x252)))+(((IkReal(-1.00000000000000))*(new_r00)*(x257))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x257)))+(((new_r11)*(x252)))+(((IkReal(-1.00000000000000))*(x254))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x259=((gconst94)*(sj21));
CheckValue<IkReal> x260 = IKatan2WithCheck(((new_r02)*(x259)),((IkReal(-1.00000000000000))*(new_r12)*(x259)),IKFAST_ATAN2_MAGTHRESH);
if( !x260.valid ) {
    continue;
}
j19array[0]=x260.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x261=IKcos(j19);
IkReal x262=IKsin(j19);
IkReal x263=((IkReal(1.00000000000000))*(cj21));
IkReal x264=((sj21)*(x262));
IkReal x265=((IkReal(1.00000000000000))*(x261));
IkReal x266=((IkReal(1.00000000000000))*(x262));
IkReal x267=((x261)*(x263));
evalcond[0]=((((new_r12)*(x262)))+(((new_r02)*(x261))));
evalcond[1]=((((new_r12)*(x261)))+(((IkReal(-1.00000000000000))*(new_r02)*(x266))));
evalcond[2]=((sj21)+(((new_r01)*(x261)))+(((new_r11)*(x262))));
evalcond[3]=((((cj21)*(x262)))+(new_r01)+(((sj21)*(x261))));
evalcond[4]=((x264)+(new_r00)+(((IkReal(-1.00000000000000))*(x267))));
evalcond[5]=((x264)+(new_r11)+(((IkReal(-1.00000000000000))*(x267))));
evalcond[6]=((((new_r00)*(x261)))+(((IkReal(-1.00000000000000))*(x263)))+(((new_r10)*(x262))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x262)*(x263)))+(new_r10)+(((IkReal(-1.00000000000000))*(sj21)*(x265))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x266)))+(((IkReal(-1.00000000000000))*(sj21)))+(((new_r10)*(x261))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x266)))+(((IkReal(-1.00000000000000))*(x263)))+(((new_r11)*(x261))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x268=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=x268;
evalcond[2]=x268;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst106;
gconst106=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst107;
gconst107=IKsign(((((cj21)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj21)))));
dummyeval[0]=((((cj21)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj21))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal gconst108;
CheckValue<IkReal> x269 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x269.valid ) {
    continue;
}
gconst108=((IkReal(-1.00000000000000))*(x269.value));
IkReal gconst109;
gconst109=IKsin(gconst108);
IkReal gconst110;
gconst110=IKcos(gconst108);
IkReal x270=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((j21)+(((IkReal(-1.00000000000000))*(gconst108))))))), IkReal(6.28318530717959))));
evalcond[1]=x270;
evalcond[2]=x270;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst114;
gconst114=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst115;
gconst115=IKsign(((((gconst110)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst109)*(new_r02)))));
dummyeval[0]=((((gconst110)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst109)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x271=((gconst115)*(new_r00));
CheckValue<IkReal> x272 = IKatan2WithCheck(((new_r02)*(x271)),((IkReal(-1.00000000000000))*(new_r12)*(x271)),IKFAST_ATAN2_MAGTHRESH);
if( !x272.valid ) {
    continue;
}
j19array[0]=x272.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x273=IKcos(j19);
IkReal x274=IKsin(j19);
IkReal x275=((IkReal(1.00000000000000))*(gconst109));
IkReal x276=((gconst110)*(x274));
IkReal x277=((IkReal(1.00000000000000))*(x274));
IkReal x278=((gconst110)*(x273));
IkReal x279=((x273)*(x275));
evalcond[0]=((((new_r02)*(x273)))+(((new_r12)*(x274))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x277)))+(((new_r12)*(x273))));
evalcond[2]=((((new_r00)*(x273)))+(gconst110)+(((new_r10)*(x274))));
evalcond[3]=((((gconst109)*(x274)))+(x278)+(new_r00));
evalcond[4]=((x276)+(((IkReal(-1.00000000000000))*(x279)))+(new_r01));
evalcond[5]=((x276)+(((IkReal(-1.00000000000000))*(x279)))+(new_r10));
evalcond[6]=((((new_r01)*(x273)))+(((IkReal(-1.00000000000000))*(x275)))+(((new_r11)*(x274))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x274)*(x275)))+(((IkReal(-1.00000000000000))*(x278)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x277)))+(((IkReal(-1.00000000000000))*(x275)))+(((new_r10)*(x273))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x277)))+(((IkReal(-1.00000000000000))*(gconst110)))+(((new_r11)*(x273))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x280=((gconst110)*(gconst114));
CheckValue<IkReal> x281 = IKatan2WithCheck(((new_r02)*(x280)),((IkReal(-1.00000000000000))*(new_r12)*(x280)),IKFAST_ATAN2_MAGTHRESH);
if( !x281.valid ) {
    continue;
}
j19array[0]=x281.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x282=IKcos(j19);
IkReal x283=IKsin(j19);
IkReal x284=((IkReal(1.00000000000000))*(gconst109));
IkReal x285=((gconst110)*(x283));
IkReal x286=((IkReal(1.00000000000000))*(x283));
IkReal x287=((gconst110)*(x282));
IkReal x288=((x282)*(x284));
evalcond[0]=((((new_r02)*(x282)))+(((new_r12)*(x283))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x286)))+(((new_r12)*(x282))));
evalcond[2]=((gconst110)+(((new_r00)*(x282)))+(((new_r10)*(x283))));
evalcond[3]=((((gconst109)*(x283)))+(x287)+(new_r00));
evalcond[4]=((x285)+(((IkReal(-1.00000000000000))*(x288)))+(new_r01));
evalcond[5]=((x285)+(((IkReal(-1.00000000000000))*(x288)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(x284)))+(((new_r11)*(x283)))+(((new_r01)*(x282))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x287)))+(new_r11)+(((IkReal(-1.00000000000000))*(x283)*(x284))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x286)))+(((IkReal(-1.00000000000000))*(x284)))+(((new_r10)*(x282))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x286)))+(((new_r11)*(x282)))+(((IkReal(-1.00000000000000))*(gconst110))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst111;
CheckValue<IkReal> x289 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x289.valid ) {
    continue;
}
gconst111=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x289.value))));
IkReal gconst112;
gconst112=IKsin(gconst111);
IkReal gconst113;
gconst113=IKcos(gconst111);
IkReal x290=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((j21)+(((IkReal(-1.00000000000000))*(gconst111))))))), IkReal(6.28318530717959))));
evalcond[1]=x290;
evalcond[2]=x290;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst116;
gconst116=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst117;
gconst117=IKsign(((((gconst113)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst112)*(new_r02)))));
dummyeval[0]=((((gconst113)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst112)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x291=((gconst117)*(new_r00));
CheckValue<IkReal> x292 = IKatan2WithCheck(((new_r02)*(x291)),((IkReal(-1.00000000000000))*(new_r12)*(x291)),IKFAST_ATAN2_MAGTHRESH);
if( !x292.valid ) {
    continue;
}
j19array[0]=x292.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x293=IKcos(j19);
IkReal x294=IKsin(j19);
IkReal x295=((IkReal(1.00000000000000))*(gconst112));
IkReal x296=((gconst113)*(x294));
IkReal x297=((IkReal(1.00000000000000))*(x294));
IkReal x298=((IkReal(1.00000000000000))*(x293));
IkReal x299=((x293)*(x295));
evalcond[0]=((((new_r02)*(x293)))+(((new_r12)*(x294))));
evalcond[1]=((((new_r12)*(x293)))+(((IkReal(-1.00000000000000))*(new_r02)*(x297))));
evalcond[2]=((((new_r10)*(x294)))+(((new_r00)*(x293)))+(gconst113));
evalcond[3]=((((gconst113)*(x293)))+(((gconst112)*(x294)))+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(x299)))+(x296)+(new_r01));
evalcond[5]=((((IkReal(-1.00000000000000))*(x299)))+(x296)+(new_r10));
evalcond[6]=((((new_r11)*(x294)))+(((IkReal(-1.00000000000000))*(x295)))+(((new_r01)*(x293))));
evalcond[7]=((((IkReal(-1.00000000000000))*(gconst113)*(x298)))+(new_r11)+(((IkReal(-1.00000000000000))*(x294)*(x295))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x295)))+(((new_r10)*(x293)))+(((IkReal(-1.00000000000000))*(new_r00)*(x297))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x297)))+(((new_r11)*(x293)))+(((IkReal(-1.00000000000000))*(gconst113))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x300=((gconst113)*(gconst116));
CheckValue<IkReal> x301 = IKatan2WithCheck(((new_r02)*(x300)),((IkReal(-1.00000000000000))*(new_r12)*(x300)),IKFAST_ATAN2_MAGTHRESH);
if( !x301.valid ) {
    continue;
}
j19array[0]=x301.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x302=IKcos(j19);
IkReal x303=IKsin(j19);
IkReal x304=((IkReal(1.00000000000000))*(gconst112));
IkReal x305=((gconst113)*(x303));
IkReal x306=((IkReal(1.00000000000000))*(x303));
IkReal x307=((IkReal(1.00000000000000))*(x302));
IkReal x308=((x302)*(x304));
evalcond[0]=((((new_r12)*(x303)))+(((new_r02)*(x302))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x306)))+(((new_r12)*(x302))));
evalcond[2]=((((new_r00)*(x302)))+(((new_r10)*(x303)))+(gconst113));
evalcond[3]=((((gconst113)*(x302)))+(((gconst112)*(x303)))+(new_r00));
evalcond[4]=((x305)+(new_r01)+(((IkReal(-1.00000000000000))*(x308))));
evalcond[5]=((x305)+(new_r10)+(((IkReal(-1.00000000000000))*(x308))));
evalcond[6]=((((new_r01)*(x302)))+(((new_r11)*(x303)))+(((IkReal(-1.00000000000000))*(x304))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x303)*(x304)))+(((IkReal(-1.00000000000000))*(gconst113)*(x307)))+(new_r11));
evalcond[8]=((((new_r10)*(x302)))+(((IkReal(-1.00000000000000))*(new_r00)*(x306)))+(((IkReal(-1.00000000000000))*(x304))));
evalcond[9]=((((new_r11)*(x302)))+(((IkReal(-1.00000000000000))*(new_r01)*(x306)))+(((IkReal(-1.00000000000000))*(gconst113))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x309=((gconst107)*(new_r00));
CheckValue<IkReal> x310 = IKatan2WithCheck(((new_r02)*(x309)),((IkReal(-1.00000000000000))*(new_r12)*(x309)),IKFAST_ATAN2_MAGTHRESH);
if( !x310.valid ) {
    continue;
}
j19array[0]=x310.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x311=IKcos(j19);
IkReal x312=IKsin(j19);
IkReal x313=((IkReal(1.00000000000000))*(sj21));
IkReal x314=((cj21)*(x312));
IkReal x315=((IkReal(1.00000000000000))*(x311));
IkReal x316=((IkReal(1.00000000000000))*(x312));
IkReal x317=((x311)*(x313));
evalcond[0]=((((new_r02)*(x311)))+(((new_r12)*(x312))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x316)))+(((new_r12)*(x311))));
evalcond[2]=((((new_r00)*(x311)))+(cj21)+(((new_r10)*(x312))));
evalcond[3]=((((cj21)*(x311)))+(new_r00)+(((sj21)*(x312))));
evalcond[4]=((x314)+(((IkReal(-1.00000000000000))*(x317)))+(new_r01));
evalcond[5]=((x314)+(((IkReal(-1.00000000000000))*(x317)))+(new_r10));
evalcond[6]=((((new_r01)*(x311)))+(((IkReal(-1.00000000000000))*(x313)))+(((new_r11)*(x312))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x312)*(x313)))+(((IkReal(-1.00000000000000))*(cj21)*(x315)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x316)))+(((IkReal(-1.00000000000000))*(x313)))+(((new_r10)*(x311))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj21)))+(((new_r11)*(x311)))+(((IkReal(-1.00000000000000))*(new_r01)*(x316))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x318=((cj21)*(gconst106));
CheckValue<IkReal> x319 = IKatan2WithCheck(((new_r02)*(x318)),((IkReal(-1.00000000000000))*(new_r12)*(x318)),IKFAST_ATAN2_MAGTHRESH);
if( !x319.valid ) {
    continue;
}
j19array[0]=x319.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x320=IKcos(j19);
IkReal x321=IKsin(j19);
IkReal x322=((IkReal(1.00000000000000))*(sj21));
IkReal x323=((cj21)*(x321));
IkReal x324=((IkReal(1.00000000000000))*(x320));
IkReal x325=((IkReal(1.00000000000000))*(x321));
IkReal x326=((x320)*(x322));
evalcond[0]=((((new_r12)*(x321)))+(((new_r02)*(x320))));
evalcond[1]=((((new_r12)*(x320)))+(((IkReal(-1.00000000000000))*(new_r02)*(x325))));
evalcond[2]=((((new_r00)*(x320)))+(cj21)+(((new_r10)*(x321))));
evalcond[3]=((((sj21)*(x321)))+(new_r00)+(((cj21)*(x320))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x326)))+(x323)+(new_r01));
evalcond[5]=((((IkReal(-1.00000000000000))*(x326)))+(x323)+(new_r10));
evalcond[6]=((((new_r01)*(x320)))+(((IkReal(-1.00000000000000))*(x322)))+(((new_r11)*(x321))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj21)*(x324)))+(((IkReal(-1.00000000000000))*(x321)*(x322)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(x322)))+(((IkReal(-1.00000000000000))*(new_r00)*(x325)))+(((new_r10)*(x320))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x325)))+(((IkReal(-1.00000000000000))*(cj21)))+(((new_r11)*(x320))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
CheckValue<IkReal> x327 = IKatan2WithCheck(((gconst93)*(new_r12)),((gconst93)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x327.valid ) {
    continue;
}
j19array[0]=x327.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[18];
IkReal x328=IKcos(j19);
IkReal x329=IKsin(j19);
IkReal x330=((IkReal(1.00000000000000))*(cj21));
IkReal x331=((IkReal(1.00000000000000))*(sj21));
IkReal x332=((IkReal(1.00000000000000))*(sj20));
IkReal x333=((new_r11)*(x329));
IkReal x334=((new_r00)*(x328));
IkReal x335=((cj20)*(x329));
IkReal x336=((sj20)*(x329));
IkReal x337=((new_r01)*(x328));
IkReal x338=((IkReal(1.00000000000000))*(x329));
IkReal x339=((new_r02)*(x328));
IkReal x340=((cj20)*(x328));
evalcond[0]=((((IkReal(-1.00000000000000))*(x328)*(x332)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x329)*(x332)))+(new_r12));
evalcond[2]=((((new_r12)*(x328)))+(((IkReal(-1.00000000000000))*(new_r02)*(x338))));
evalcond[3]=((((sj21)*(x340)))+(new_r01)+(((cj21)*(x329))));
evalcond[4]=((((new_r12)*(x329)))+(x339)+(((IkReal(-1.00000000000000))*(x332))));
evalcond[5]=((x333)+(x337)+(((cj20)*(sj21))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x330)*(x340)))+(((sj21)*(x329)))+(new_r00));
evalcond[7]=((((sj21)*(x335)))+(((IkReal(-1.00000000000000))*(x328)*(x330)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x338)))+(((IkReal(-1.00000000000000))*(x331)))+(((new_r10)*(x328))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x330)))+(((IkReal(-1.00000000000000))*(new_r01)*(x338)))+(((new_r11)*(x328))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj20)*(x330)))+(x334)+(((new_r10)*(x329))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x328)*(x331)))+(((IkReal(-1.00000000000000))*(x330)*(x335)))+(new_r10));
evalcond[12]=((((sj20)*(x334)))+(((new_r10)*(x336)))+(((cj20)*(new_r20))));
evalcond[13]=((((sj20)*(x333)))+(((sj20)*(x337)))+(((cj20)*(new_r21))));
evalcond[14]=((IkReal(-1.00000000000000))+(((new_r12)*(x336)))+(((sj20)*(x339)))+(((cj20)*(new_r22))));
evalcond[15]=((((IkReal(-1.00000000000000))*(new_r22)*(x332)))+(((cj20)*(x339)))+(((new_r12)*(x335))));
evalcond[16]=((((cj20)*(x337)))+(((cj20)*(x333)))+(((IkReal(-1.00000000000000))*(new_r21)*(x332)))+(sj21));
evalcond[17]=((((cj20)*(x334)))+(((IkReal(-1.00000000000000))*(new_r20)*(x332)))+(((new_r10)*(x335)))+(((IkReal(-1.00000000000000))*(x330))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
CheckValue<IkReal> x341 = IKatan2WithCheck(((gconst92)*(new_r12)),((gconst92)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x341.valid ) {
    continue;
}
j19array[0]=x341.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[18];
IkReal x342=IKcos(j19);
IkReal x343=IKsin(j19);
IkReal x344=((IkReal(1.00000000000000))*(cj21));
IkReal x345=((IkReal(1.00000000000000))*(sj21));
IkReal x346=((IkReal(1.00000000000000))*(sj20));
IkReal x347=((new_r11)*(x343));
IkReal x348=((new_r00)*(x342));
IkReal x349=((cj20)*(x343));
IkReal x350=((sj20)*(x343));
IkReal x351=((new_r01)*(x342));
IkReal x352=((IkReal(1.00000000000000))*(x343));
IkReal x353=((new_r02)*(x342));
IkReal x354=((cj20)*(x342));
evalcond[0]=((new_r02)+(((IkReal(-1.00000000000000))*(x342)*(x346))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x343)*(x346)))+(new_r12));
evalcond[2]=((((new_r12)*(x342)))+(((IkReal(-1.00000000000000))*(new_r02)*(x352))));
evalcond[3]=((((sj21)*(x354)))+(new_r01)+(((cj21)*(x343))));
evalcond[4]=((((new_r12)*(x343)))+(x353)+(((IkReal(-1.00000000000000))*(x346))));
evalcond[5]=((x351)+(x347)+(((cj20)*(sj21))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x344)*(x354)))+(((sj21)*(x343)))+(new_r00));
evalcond[7]=((((sj21)*(x349)))+(new_r11)+(((IkReal(-1.00000000000000))*(x342)*(x344))));
evalcond[8]=((((new_r10)*(x342)))+(((IkReal(-1.00000000000000))*(new_r00)*(x352)))+(((IkReal(-1.00000000000000))*(x345))));
evalcond[9]=((((new_r11)*(x342)))+(((IkReal(-1.00000000000000))*(new_r01)*(x352)))+(((IkReal(-1.00000000000000))*(x344))));
evalcond[10]=((((new_r10)*(x343)))+(x348)+(((IkReal(-1.00000000000000))*(cj20)*(x344))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x344)*(x349)))+(new_r10)+(((IkReal(-1.00000000000000))*(x342)*(x345))));
evalcond[12]=((((sj20)*(x348)))+(((cj20)*(new_r20)))+(((new_r10)*(x350))));
evalcond[13]=((((sj20)*(x351)))+(((sj20)*(x347)))+(((cj20)*(new_r21))));
evalcond[14]=((IkReal(-1.00000000000000))+(((sj20)*(x353)))+(((cj20)*(new_r22)))+(((new_r12)*(x350))));
evalcond[15]=((((new_r12)*(x349)))+(((cj20)*(x353)))+(((IkReal(-1.00000000000000))*(new_r22)*(x346))));
evalcond[16]=((((cj20)*(x347)))+(sj21)+(((cj20)*(x351)))+(((IkReal(-1.00000000000000))*(new_r21)*(x346))));
evalcond[17]=((((cj20)*(x348)))+(((new_r10)*(x349)))+(((IkReal(-1.00000000000000))*(new_r20)*(x346)))+(((IkReal(-1.00000000000000))*(x344))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
CheckValue<IkReal> x355 = IKatan2WithCheck(((gconst90)*(new_r12)),((gconst90)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x355.valid ) {
    continue;
}
j19array[0]=x355.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x356=IKcos(j19);
IkReal x357=IKsin(j19);
IkReal x358=((IkReal(1.00000000000000))*(sj20));
IkReal x359=((new_r02)*(x356));
IkReal x360=((new_r12)*(x357));
IkReal x361=((sj20)*(x356));
IkReal x362=((sj20)*(x357));
evalcond[0]=((((IkReal(-1.00000000000000))*(x356)*(x358)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x357)*(x358)))+(new_r12));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r02)*(x357)))+(((new_r12)*(x356))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x358)))+(x359)+(x360));
evalcond[4]=((((new_r00)*(x361)))+(((cj20)*(new_r20)))+(((new_r10)*(x362))));
evalcond[5]=((((new_r01)*(x361)))+(((cj20)*(new_r21)))+(((new_r11)*(x362))));
evalcond[6]=((IkReal(-1.00000000000000))+(((sj20)*(x359)))+(((cj20)*(new_r22)))+(((sj20)*(x360))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r22)*(x358)))+(((cj20)*(x359)))+(((cj20)*(x360))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst118;
gconst118=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj19;
dummyeval[1]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj19;
dummyeval[1]=cj20;
dummyeval[2]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
bool bgotonextstatement = true;
do
{
IkReal x363=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x364=((((IkReal(-1.00000000000000))*(sj20)))+(new_r12));
IkReal x365=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j19))))), IkReal(6.28318530717959))));
evalcond[1]=x363;
evalcond[2]=x363;
evalcond[3]=new_r02;
evalcond[4]=x364;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x364;
evalcond[7]=((((new_r10)*(sj20)))+(((cj20)*(new_r20))));
evalcond[8]=((((new_r11)*(sj20)))+(((cj20)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((new_r12)*(sj20)))+(((cj20)*(new_r22))));
evalcond[10]=((((cj20)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x365))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst119;
gconst119=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj20;
dummyeval[1]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
bool bgotonextstatement = true;
do
{
IkReal x366=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x366;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x366;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r10;
evalcond[12]=new_r11;
evalcond[13]=x366;
evalcond[14]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x367=IKcos(j21);
IkReal x368=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x367)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x368)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x368)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x367)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x369=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x369;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x369;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[14]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x370=IKsin(j21);
IkReal x371=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x370)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x371)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x370)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x371)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x372=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j20))), IkReal(6.28318530717959))));
evalcond[1]=x372;
evalcond[2]=x372;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x372;
evalcond[14]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x373=IKsin(j21);
IkReal x374=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x373)+(new_r11));
evalcond[1]=((((IkReal(-1.00000000000000))*(x374)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x373)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x375=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=x375;
evalcond[2]=x375;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r12));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x376=IKcos(j21);
IkReal x377=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x376)+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x377)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x377)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x376)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x378 = IKPowWithIntegerCheck(cj20,-1.00000000000000);
if( !x378.valid ) {
    continue;
}
CheckValue<IkReal> x379 = IKPowWithIntegerCheck(sj20,-1.00000000000000);
if( !x379.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(x378.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x379.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(x378.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x379.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(x378.value)), ((IkReal(-1.00000000000000))*(new_r20)*(x379.value)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x380=IKsin(j21);
IkReal x381=IKcos(j21);
IkReal x382=((IkReal(1.00000000000000))*(sj20));
IkReal x383=((IkReal(1.00000000000000))*(x381));
IkReal x384=((IkReal(1.00000000000000))*(x380));
evalcond[0]=((((sj20)*(x381)))+(new_r20));
evalcond[1]=((((cj20)*(x380)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x380)*(x382)))+(new_r21));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj20)*(x383)))+(new_r10));
evalcond[4]=((((IkReal(-1.00000000000000))*(x384)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x383)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((cj20)*(new_r11)))+(x380)+(((IkReal(-1.00000000000000))*(new_r21)*(x382))));
evalcond[7]=((((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x382)))+(((IkReal(-1.00000000000000))*(x383))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x385 = IKatan2WithCheck(((gconst119)*(new_r21)),((IkReal(-1.00000000000000))*(gconst119)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x385.valid ) {
    continue;
}
j21array[0]=x385.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x386=IKsin(j21);
IkReal x387=IKcos(j21);
IkReal x388=((IkReal(1.00000000000000))*(sj20));
IkReal x389=((IkReal(1.00000000000000))*(x387));
IkReal x390=((IkReal(1.00000000000000))*(x386));
evalcond[0]=((((sj20)*(x387)))+(new_r20));
evalcond[1]=((((cj20)*(x386)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x386)*(x388)))+(new_r21));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj20)*(x389)))+(new_r10));
evalcond[4]=((((IkReal(-1.00000000000000))*(x390)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x389)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((cj20)*(new_r11)))+(x386)+(((IkReal(-1.00000000000000))*(new_r21)*(x388))));
evalcond[7]=((((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x388)))+(((IkReal(-1.00000000000000))*(x389))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x391=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x392=((IkReal(1.00000000000000))*(new_r12));
IkReal x393=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j19))))), IkReal(6.28318530717959))));
evalcond[1]=x391;
evalcond[2]=x391;
evalcond[3]=new_r02;
evalcond[4]=((sj20)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x392)))+(((IkReal(-1.00000000000000))*(x393))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x393)))+(((cj20)*(new_r20))));
evalcond[9]=((((cj20)*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r11)*(x393))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(sj20)*(x392)))+(((cj20)*(new_r22))));
evalcond[11]=((((IkReal(-1.00000000000000))*(cj20)*(x392)))+(((IkReal(-1.00000000000000))*(new_r22)*(x393))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r00, new_r01);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x394=IKcos(j21);
IkReal x395=IKsin(j21);
IkReal x396=((IkReal(1.00000000000000))*(new_r11));
IkReal x397=((IkReal(1.00000000000000))*(sj20));
IkReal x398=((IkReal(1.00000000000000))*(new_r10));
IkReal x399=((IkReal(1.00000000000000))*(x394));
IkReal x400=((IkReal(1.00000000000000))*(x395));
evalcond[0]=((new_r20)+(((sj20)*(x394))));
evalcond[1]=((new_r00)+(((IkReal(-1.00000000000000))*(x400))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x399)))+(new_r01));
evalcond[3]=((((IkReal(-1.00000000000000))*(x395)*(x397)))+(new_r21));
evalcond[4]=((((IkReal(-1.00000000000000))*(x396)))+(((cj20)*(x395))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x399)))+(((IkReal(-1.00000000000000))*(x398))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x396)))+(((IkReal(-1.00000000000000))*(new_r21)*(x397)))+(x395));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj20)*(x398)))+(((IkReal(-1.00000000000000))*(x399)))+(((IkReal(-1.00000000000000))*(new_r20)*(x397))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x401=((IkReal(1.00000000000000))*(sj19));
IkReal x402=((((cj19)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(x401))));
IkReal x403=((((new_r10)*(sj19)))+(((cj19)*(new_r00))));
IkReal x404=((((cj19)*(new_r01)))+(((new_r11)*(sj19))));
IkReal x405=((IkReal(-1.00000000000000))+(((cj19)*(new_r02)))+(((new_r12)*(sj19))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((((IkReal(-1.00000000000000))*(cj19)))+(new_r02));
evalcond[4]=((new_r12)+(((IkReal(-1.00000000000000))*(x401))));
evalcond[5]=x402;
evalcond[6]=x402;
evalcond[7]=x405;
evalcond[8]=x404;
evalcond[9]=x403;
evalcond[10]=x403;
evalcond[11]=x404;
evalcond[12]=x405;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x406=IKcos(j21);
IkReal x407=IKsin(j21);
IkReal x408=((IkReal(1.00000000000000))*(cj19));
IkReal x409=((IkReal(1.00000000000000))*(sj19));
IkReal x410=((IkReal(1.00000000000000))*(x407));
evalcond[0]=((x406)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x410))));
evalcond[2]=((((sj19)*(x406)))+(new_r01));
evalcond[3]=((((sj19)*(x407)))+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(x406)*(x408)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(x407)*(x408)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r00)*(x409)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(x410))));
evalcond[7]=((((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x409)))+(((IkReal(-1.00000000000000))*(x406))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x411=((new_r12)*(sj19));
IkReal x412=((IkReal(1.00000000000000))*(sj19));
IkReal x413=((cj19)*(new_r00));
IkReal x414=((IkReal(1.00000000000000))*(cj19));
IkReal x415=((((cj19)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(x412))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((cj19)+(new_r02));
evalcond[4]=((sj19)+(new_r12));
evalcond[5]=x415;
evalcond[6]=x415;
evalcond[7]=((IkReal(1.00000000000000))+(x411)+(((cj19)*(new_r02))));
evalcond[8]=((((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[9]=((x413)+(((new_r10)*(sj19))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r10)*(x412)))+(((IkReal(-1.00000000000000))*(x413))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r11)*(x412)))+(((IkReal(-1.00000000000000))*(new_r01)*(x414))));
evalcond[12]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x414)))+(((IkReal(-1.00000000000000))*(x411))));
evalcond[13]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x416=IKcos(j21);
IkReal x417=IKsin(j21);
IkReal x418=((IkReal(1.00000000000000))*(cj19));
IkReal x419=((IkReal(1.00000000000000))*(sj19));
IkReal x420=((IkReal(1.00000000000000))*(x416));
evalcond[0]=((x417)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x420)))+(new_r20));
evalcond[2]=((new_r01)+(((sj19)*(x416))));
evalcond[3]=((new_r00)+(((sj19)*(x417))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x416)*(x418)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(x417)*(x418)))+(new_r10));
evalcond[6]=((((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x419)))+(((IkReal(-1.00000000000000))*(x417))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x420)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x419))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x421=((IkReal(-1.00000000000000))+(new_r22));
IkReal x422=((((IkReal(-1.00000000000000))*(new_r02)*(sj19)))+(((cj19)*(new_r12))));
IkReal x423=((((cj19)*(new_r02)))+(((new_r12)*(sj19))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j20))), IkReal(6.28318530717959))));
evalcond[1]=x421;
evalcond[2]=x421;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x422;
evalcond[10]=x422;
evalcond[11]=x423;
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x421;
evalcond[15]=x423;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst120;
CheckValue<IkReal> x424 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x424.valid ) {
    continue;
}
CheckValue<IkReal> x425 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x425.valid ) {
    continue;
}
gconst120=IKsign(((((IkReal(-1.00000000000000))*(x424.value)))+(((IkReal(-1.00000000000000))*(x425.value)))));
CheckValue<IkReal> x426 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x426.valid ) {
    continue;
}
CheckValue<IkReal> x427 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x427.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x426.value)))+(((IkReal(-1.00000000000000))*(x427.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst121;
CheckValue<IkReal> x428 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x428.valid ) {
    continue;
}
CheckValue<IkReal> x429 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x429.valid ) {
    continue;
}
gconst121=IKsign(((((IkReal(-1.00000000000000))*(x428.value)))+(((IkReal(-1.00000000000000))*(x429.value)))));
CheckValue<IkReal> x430 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x430.valid ) {
    continue;
}
CheckValue<IkReal> x431 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x431.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x430.value)))+(((IkReal(-1.00000000000000))*(x431.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x432 = IKatan2WithCheck(((gconst121)*(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))))),((gconst121)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r11)))+(((new_r01)*(sj19)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x432.valid ) {
    continue;
}
j21array[0]=x432.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x433=IKsin(j21);
IkReal x434=IKcos(j21);
IkReal x435=((IkReal(1.00000000000000))*(sj19));
IkReal x436=((IkReal(1.00000000000000))*(x434));
IkReal x437=((sj19)*(x433));
IkReal x438=((IkReal(1.00000000000000))*(x433));
IkReal x439=((cj19)*(x436));
evalcond[0]=((x433)+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[1]=((((cj19)*(x433)))+(((sj19)*(x434)))+(new_r01));
evalcond[2]=((((IkReal(-1.00000000000000))*(x436)))+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x435)))+(((IkReal(-1.00000000000000))*(x438)))+(((cj19)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x436)))+(((IkReal(-1.00000000000000))*(new_r01)*(x435)))+(((cj19)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x439)))+(x437)+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x439)))+(x437)+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x434)*(x435)))+(((IkReal(-1.00000000000000))*(cj19)*(x438)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x440 = IKatan2WithCheck(((gconst120)*(((((new_r00)*(sj19)))+(((cj19)*(new_r01)))))),((gconst120)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((new_r01)*(sj19)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x440.valid ) {
    continue;
}
j21array[0]=x440.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x441=IKsin(j21);
IkReal x442=IKcos(j21);
IkReal x443=((IkReal(1.00000000000000))*(sj19));
IkReal x444=((IkReal(1.00000000000000))*(x442));
IkReal x445=((sj19)*(x441));
IkReal x446=((IkReal(1.00000000000000))*(x441));
IkReal x447=((cj19)*(x444));
evalcond[0]=((x441)+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[1]=((((sj19)*(x442)))+(((cj19)*(x441)))+(new_r01));
evalcond[2]=((((IkReal(-1.00000000000000))*(x444)))+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x446)))+(((IkReal(-1.00000000000000))*(new_r00)*(x443)))+(((cj19)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x444)))+(((IkReal(-1.00000000000000))*(new_r01)*(x443)))+(((cj19)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x447)))+(x445)+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x447)))+(x445)+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj19)*(x446)))+(new_r10)+(((IkReal(-1.00000000000000))*(x442)*(x443))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x448=((IkReal(1.00000000000000))+(new_r22));
IkReal x449=((new_r12)*(sj19));
IkReal x450=((IkReal(1.00000000000000))*(new_r02));
IkReal x451=((((cj19)*(new_r12)))+(((IkReal(-1.00000000000000))*(sj19)*(x450))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=x448;
evalcond[2]=x448;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x451;
evalcond[10]=x451;
evalcond[11]=((x449)+(((cj19)*(new_r02))));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[15]=((((IkReal(-1.00000000000000))*(x449)))+(((IkReal(-1.00000000000000))*(cj19)*(x450))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst122;
CheckValue<IkReal> x452 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x452.valid ) {
    continue;
}
CheckValue<IkReal> x453 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x453.valid ) {
    continue;
}
gconst122=IKsign(((x452.value)+(x453.value)));
CheckValue<IkReal> x454 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x454.valid ) {
    continue;
}
CheckValue<IkReal> x455 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x455.valid ) {
    continue;
}
dummyeval[0]=((x454.value)+(x455.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst123;
CheckValue<IkReal> x456 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x456.valid ) {
    continue;
}
CheckValue<IkReal> x457 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x457.valid ) {
    continue;
}
gconst123=IKsign(((x456.value)+(x457.value)));
CheckValue<IkReal> x458 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x458.valid ) {
    continue;
}
CheckValue<IkReal> x459 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x459.valid ) {
    continue;
}
dummyeval[0]=((x458.value)+(x459.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x460=((IkReal(1.00000000000000))*(sj19));
CheckValue<IkReal> x461 = IKatan2WithCheck(((gconst123)*(((((IkReal(-1.00000000000000))*(new_r00)*(x460)))+(((cj19)*(new_r10)))))),((gconst123)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x460)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x461.valid ) {
    continue;
}
j21array[0]=x461.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x462=IKsin(j21);
IkReal x463=IKcos(j21);
IkReal x464=((IkReal(1.00000000000000))*(cj19));
IkReal x465=((IkReal(1.00000000000000))*(sj19));
IkReal x466=((IkReal(1.00000000000000))*(x462));
IkReal x467=((sj19)*(x463));
IkReal x468=((sj19)*(x462));
IkReal x469=((x462)*(x464));
evalcond[0]=((x463)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x466)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[2]=((((cj19)*(x463)))+(x468)+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x466)))+(((IkReal(-1.00000000000000))*(new_r00)*(x465)))+(((cj19)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x463)))+(((IkReal(-1.00000000000000))*(new_r01)*(x465)))+(((cj19)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x469)))+(x467)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x469)))+(x467)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x462)*(x465)))+(((IkReal(-1.00000000000000))*(x463)*(x464)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x470=((IkReal(1.00000000000000))*(sj19));
CheckValue<IkReal> x471 = IKatan2WithCheck(((gconst122)*(((((IkReal(-1.00000000000000))*(new_r00)*(x470)))+(((cj19)*(new_r01)))))),((gconst122)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(x470)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x471.valid ) {
    continue;
}
j21array[0]=x471.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x472=IKsin(j21);
IkReal x473=IKcos(j21);
IkReal x474=((IkReal(1.00000000000000))*(cj19));
IkReal x475=((IkReal(1.00000000000000))*(sj19));
IkReal x476=((IkReal(1.00000000000000))*(x472));
IkReal x477=((sj19)*(x473));
IkReal x478=((sj19)*(x472));
IkReal x479=((x472)*(x474));
evalcond[0]=((x473)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x476)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[2]=((((cj19)*(x473)))+(x478)+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x475)))+(((IkReal(-1.00000000000000))*(x476)))+(((cj19)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x475)))+(((IkReal(-1.00000000000000))*(x473)))+(((cj19)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x479)))+(x477)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x479)))+(x477)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x472)*(x475)))+(((IkReal(-1.00000000000000))*(x473)*(x474)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x480=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x481=((((IkReal(-1.00000000000000))*(sj20)))+(new_r02));
IkReal x482=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j19))), IkReal(6.28318530717959))));
evalcond[1]=x480;
evalcond[2]=x480;
evalcond[3]=x481;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x481;
evalcond[8]=((((new_r00)*(sj20)))+(((cj20)*(new_r20))));
evalcond[9]=((((new_r01)*(sj20)))+(((cj20)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((cj20)*(new_r22)))+(((new_r02)*(sj20))));
evalcond[11]=((((cj20)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r22)*(x482))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r10, new_r11);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x483=IKcos(j21);
IkReal x484=IKsin(j21);
IkReal x485=((IkReal(1.00000000000000))*(sj20));
IkReal x486=((IkReal(1.00000000000000))*(x483));
IkReal x487=((IkReal(1.00000000000000))*(x484));
evalcond[0]=((((sj20)*(x483)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x487)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x486)))+(new_r11));
evalcond[3]=((((cj20)*(x484)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x484)*(x485)))+(new_r21));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x486)))+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x485)))+(((cj20)*(new_r01)))+(x484));
evalcond[7]=((((IkReal(-1.00000000000000))*(x486)))+(((cj20)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r20)*(x485))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x488=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x489=((IkReal(1.00000000000000))*(sj20));
IkReal x490=((IkReal(1.00000000000000))*(cj20));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j19))))), IkReal(6.28318530717959))));
evalcond[1]=x488;
evalcond[2]=x488;
evalcond[3]=((sj20)+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((((IkReal(-1.00000000000000))*(x489)))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r00)*(x489)))+(((cj20)*(new_r20))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r01)*(x489)))+(((cj20)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x489)))+(((cj20)*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r02)*(x490)))+(((IkReal(-1.00000000000000))*(new_r22)*(x489))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst124;
gconst124=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[14];
bool bgotonextstatement = true;
do
{
IkReal x491=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j20))), IkReal(6.28318530717959))));
evalcond[1]=x491;
evalcond[2]=x491;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x491;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x492=IKsin(j21);
IkReal x493=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x492)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x492)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x494=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=x494;
evalcond[2]=x494;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x495=IKcos(j21);
IkReal x496=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x495)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x496)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x495)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x496)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x497 = IKPowWithIntegerCheck(sj20,-1.00000000000000);
if( !x497.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x497.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x497.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), ((IkReal(-1.00000000000000))*(new_r20)*(x497.value)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x498=IKsin(j21);
IkReal x499=IKcos(j21);
IkReal x500=((IkReal(1.00000000000000))*(sj20));
IkReal x501=((IkReal(1.00000000000000))*(new_r00));
IkReal x502=((IkReal(1.00000000000000))*(new_r01));
IkReal x503=((IkReal(1.00000000000000))*(x499));
IkReal x504=((IkReal(1.00000000000000))*(x498));
evalcond[0]=((((sj20)*(x499)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x498)*(x500))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x504)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x503)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x502)))+(((cj20)*(x498))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x501)))+(((IkReal(-1.00000000000000))*(cj20)*(x503))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x500)))+(x498)+(((IkReal(-1.00000000000000))*(cj20)*(x502))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x500)))+(((IkReal(-1.00000000000000))*(x503)))+(((IkReal(-1.00000000000000))*(cj20)*(x501))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x505 = IKPowWithIntegerCheck(sj20,-1.00000000000000);
if( !x505.valid ) {
    continue;
}
if( IKabs(((new_r21)*(x505.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(x505.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((new_r21)*(x505.value)), ((IkReal(-1.00000000000000))*(new_r11)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x506=IKsin(j21);
IkReal x507=IKcos(j21);
IkReal x508=((IkReal(1.00000000000000))*(sj20));
IkReal x509=((IkReal(1.00000000000000))*(new_r00));
IkReal x510=((IkReal(1.00000000000000))*(new_r01));
IkReal x511=((IkReal(1.00000000000000))*(x507));
IkReal x512=((IkReal(1.00000000000000))*(x506));
evalcond[0]=((new_r20)+(((sj20)*(x507))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x506)*(x508)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x512))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x511))));
evalcond[4]=((((cj20)*(x506)))+(((IkReal(-1.00000000000000))*(x510))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x511)))+(((IkReal(-1.00000000000000))*(x509))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x508)))+(((IkReal(-1.00000000000000))*(cj20)*(x510)))+(x506));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x508)))+(((IkReal(-1.00000000000000))*(cj20)*(x509)))+(((IkReal(-1.00000000000000))*(x511))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x513 = IKatan2WithCheck(((gconst124)*(new_r21)),((IkReal(-1.00000000000000))*(gconst124)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x513.valid ) {
    continue;
}
j21array[0]=x513.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x514=IKsin(j21);
IkReal x515=IKcos(j21);
IkReal x516=((IkReal(1.00000000000000))*(sj20));
IkReal x517=((IkReal(1.00000000000000))*(new_r00));
IkReal x518=((IkReal(1.00000000000000))*(new_r01));
IkReal x519=((IkReal(1.00000000000000))*(x515));
IkReal x520=((IkReal(1.00000000000000))*(x514));
evalcond[0]=((((sj20)*(x515)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x514)*(x516)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x520)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x519))));
evalcond[4]=((((cj20)*(x514)))+(((IkReal(-1.00000000000000))*(x518))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x519)))+(((IkReal(-1.00000000000000))*(x517))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x518)))+(x514)+(((IkReal(-1.00000000000000))*(new_r21)*(x516))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj20)*(x517)))+(((IkReal(-1.00000000000000))*(new_r20)*(x516)))+(((IkReal(-1.00000000000000))*(x519))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x521=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j19))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j20))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x521;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x521;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r00;
evalcond[13]=new_r01;
evalcond[14]=x521;
evalcond[15]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x522=IKcos(j21);
IkReal x523=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x522)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x523)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x523)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x522)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j19))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j20))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x524=IKcos(j21);
IkReal x525=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x524)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x525)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x525)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x524)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x526=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j20))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j19))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x526;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x526;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[15]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x527=IKsin(j21);
IkReal x528=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x527)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x528)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x527)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x528)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j20))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j19))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x529=IKsin(j21);
IkReal x530=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x529)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x530)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x529)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x530)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x531=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j20))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j19))), IkReal(6.28318530717959)))))));
evalcond[1]=x531;
evalcond[2]=x531;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x531;
evalcond[15]=new_r02;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x532=IKsin(j21);
IkReal x533=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x532)+(new_r01));
evalcond[1]=((((IkReal(-1.00000000000000))*(x532)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x533)))+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x533)))+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x534=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j20))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j19))), IkReal(6.28318530717959)))))));
evalcond[1]=x534;
evalcond[2]=x534;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[15]=((IkReal(-1.00000000000000))*(new_r02));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x535=IKcos(j21);
IkReal x536=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x535)+(new_r00));
evalcond[1]=((((IkReal(-1.00000000000000))*(x536)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x535)))+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x536)))+(new_r01));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x538 = IKPowWithIntegerCheck(sj20,-1.00000000000000);
if( !x538.valid ) {
    continue;
}
IkReal x537=x538.value;
CheckValue<IkReal> x539 = IKPowWithIntegerCheck(cj19,-1.00000000000000);
if( !x539.valid ) {
    continue;
}
CheckValue<IkReal> x540 = IKPowWithIntegerCheck(cj20,-1.00000000000000);
if( !x540.valid ) {
    continue;
}
if( IKabs(((x537)*(x539.value)*(x540.value)*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x537))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x537)*(x539.value)*(x540.value)*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x537)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((x537)*(x539.value)*(x540.value)*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x537)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x541=IKsin(j21);
IkReal x542=IKcos(j21);
IkReal x543=((cj20)*(sj19));
IkReal x544=((cj19)*(new_r01));
IkReal x545=((IkReal(1.00000000000000))*(sj20));
IkReal x546=((cj19)*(new_r00));
IkReal x547=((IkReal(1.00000000000000))*(sj19));
IkReal x548=((IkReal(1.00000000000000))*(x542));
IkReal x549=((cj20)*(x541));
IkReal x550=((IkReal(1.00000000000000))*(x541));
IkReal x551=((cj19)*(x548));
evalcond[0]=((((sj20)*(x542)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x541)*(x545)))+(new_r21));
evalcond[2]=((x544)+(x549)+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x547)))+(((IkReal(-1.00000000000000))*(x550)))+(((cj19)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x547)))+(((IkReal(-1.00000000000000))*(x548)))+(((cj19)*(new_r11))));
evalcond[5]=((((cj19)*(x549)))+(((sj19)*(x542)))+(new_r01));
evalcond[6]=((x546)+(((IkReal(-1.00000000000000))*(cj20)*(x548)))+(((new_r10)*(sj19))));
evalcond[7]=((((sj19)*(x541)))+(new_r00)+(((IkReal(-1.00000000000000))*(cj20)*(x551))));
evalcond[8]=((((x541)*(x543)))+(((IkReal(-1.00000000000000))*(x551)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj19)*(x550)))+(new_r10)+(((IkReal(-1.00000000000000))*(x543)*(x548))));
evalcond[10]=((((new_r11)*(x543)))+(((IkReal(-1.00000000000000))*(new_r21)*(x545)))+(x541)+(((cj20)*(x544))));
evalcond[11]=((((new_r10)*(x543)))+(((IkReal(-1.00000000000000))*(new_r20)*(x545)))+(((IkReal(-1.00000000000000))*(x548)))+(((cj20)*(x546))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x553 = IKPowWithIntegerCheck(sj20,-1.00000000000000);
if( !x553.valid ) {
    continue;
}
IkReal x552=x553.value;
CheckValue<IkReal> x554 = IKPowWithIntegerCheck(sj19,-1.00000000000000);
if( !x554.valid ) {
    continue;
}
if( IKabs(((x552)*(x554.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x552))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x552)*(x554.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x552)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((x552)*(x554.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x552)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x555=IKsin(j21);
IkReal x556=IKcos(j21);
IkReal x557=((cj20)*(sj19));
IkReal x558=((cj19)*(new_r01));
IkReal x559=((IkReal(1.00000000000000))*(sj20));
IkReal x560=((cj19)*(new_r00));
IkReal x561=((IkReal(1.00000000000000))*(sj19));
IkReal x562=((IkReal(1.00000000000000))*(x556));
IkReal x563=((cj20)*(x555));
IkReal x564=((IkReal(1.00000000000000))*(x555));
IkReal x565=((cj19)*(x562));
evalcond[0]=((((sj20)*(x556)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x555)*(x559)))+(new_r21));
evalcond[2]=((x558)+(x563)+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x561)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(x564))));
evalcond[4]=((((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(x562)))+(((IkReal(-1.00000000000000))*(new_r01)*(x561))));
evalcond[5]=((((cj19)*(x563)))+(new_r01)+(((sj19)*(x556))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x562)))+(x560)+(((new_r10)*(sj19))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj20)*(x565)))+(new_r00)+(((sj19)*(x555))));
evalcond[8]=((((x555)*(x557)))+(new_r11)+(((IkReal(-1.00000000000000))*(x565))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x557)*(x562)))+(((IkReal(-1.00000000000000))*(cj19)*(x564)))+(new_r10));
evalcond[10]=((((cj20)*(x558)))+(((new_r11)*(x557)))+(((IkReal(-1.00000000000000))*(new_r21)*(x559)))+(x555));
evalcond[11]=((((new_r10)*(x557)))+(((IkReal(-1.00000000000000))*(new_r20)*(x559)))+(((cj20)*(x560)))+(((IkReal(-1.00000000000000))*(x562))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x566 = IKatan2WithCheck(((gconst118)*(new_r21)),((IkReal(-1.00000000000000))*(gconst118)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x566.valid ) {
    continue;
}
j21array[0]=x566.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x567=IKsin(j21);
IkReal x568=IKcos(j21);
IkReal x569=((cj20)*(sj19));
IkReal x570=((cj19)*(new_r01));
IkReal x571=((IkReal(1.00000000000000))*(sj20));
IkReal x572=((cj19)*(new_r00));
IkReal x573=((IkReal(1.00000000000000))*(sj19));
IkReal x574=((IkReal(1.00000000000000))*(x568));
IkReal x575=((cj20)*(x567));
IkReal x576=((IkReal(1.00000000000000))*(x567));
IkReal x577=((cj19)*(x574));
evalcond[0]=((new_r20)+(((sj20)*(x568))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x567)*(x571)))+(new_r21));
evalcond[2]=((x575)+(x570)+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x576)))+(((IkReal(-1.00000000000000))*(new_r00)*(x573)))+(((cj19)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x574)))+(((IkReal(-1.00000000000000))*(new_r01)*(x573)))+(((cj19)*(new_r11))));
evalcond[5]=((((sj19)*(x568)))+(((cj19)*(x575)))+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x574)))+(x572)+(((new_r10)*(sj19))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj20)*(x577)))+(((sj19)*(x567)))+(new_r00));
evalcond[8]=((((x567)*(x569)))+(((IkReal(-1.00000000000000))*(x577)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x569)*(x574)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj19)*(x576))));
evalcond[10]=((((cj20)*(x570)))+(x567)+(((new_r11)*(x569)))+(((IkReal(-1.00000000000000))*(new_r21)*(x571))));
evalcond[11]=((((cj20)*(x572)))+(((IkReal(-1.00000000000000))*(x574)))+(((IkReal(-1.00000000000000))*(new_r20)*(x571)))+(((new_r10)*(x569))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
CheckValue<IkReal> x578 = IKatan2WithCheck(((gconst89)*(new_r12)),((gconst89)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x578.valid ) {
    continue;
}
j19array[0]=x578.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x579=IKcos(j19);
IkReal x580=IKsin(j19);
IkReal x581=((IkReal(1.00000000000000))*(sj20));
IkReal x582=((new_r02)*(x579));
IkReal x583=((new_r12)*(x580));
IkReal x584=((sj20)*(x579));
IkReal x585=((sj20)*(x580));
evalcond[0]=((((IkReal(-1.00000000000000))*(x579)*(x581)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x580)*(x581)))+(new_r12));
evalcond[2]=((((new_r12)*(x579)))+(((IkReal(-1.00000000000000))*(new_r02)*(x580))));
evalcond[3]=((x582)+(x583)+(((IkReal(-1.00000000000000))*(x581))));
evalcond[4]=((((new_r00)*(x584)))+(((cj20)*(new_r20)))+(((new_r10)*(x585))));
evalcond[5]=((((new_r01)*(x584)))+(((cj20)*(new_r21)))+(((new_r11)*(x585))));
evalcond[6]=((IkReal(-1.00000000000000))+(((sj20)*(x582)))+(((sj20)*(x583)))+(((cj20)*(new_r22))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r22)*(x581)))+(((cj20)*(x583)))+(((cj20)*(x582))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst118;
gconst118=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj19;
dummyeval[1]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj19;
dummyeval[1]=cj20;
dummyeval[2]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
bool bgotonextstatement = true;
do
{
IkReal x586=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x587=((((IkReal(-1.00000000000000))*(sj20)))+(new_r12));
IkReal x588=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j19))))), IkReal(6.28318530717959))));
evalcond[1]=x586;
evalcond[2]=x586;
evalcond[3]=new_r02;
evalcond[4]=x587;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x587;
evalcond[7]=((((new_r10)*(sj20)))+(((cj20)*(new_r20))));
evalcond[8]=((((new_r11)*(sj20)))+(((cj20)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((new_r12)*(sj20)))+(((cj20)*(new_r22))));
evalcond[10]=((((cj20)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x588))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst119;
gconst119=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj20;
dummyeval[1]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
bool bgotonextstatement = true;
do
{
IkReal x589=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x589;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x589;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r10;
evalcond[12]=new_r11;
evalcond[13]=x589;
evalcond[14]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x590=IKcos(j21);
IkReal x591=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x590)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x591)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x591)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x590)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x592=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x592;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x592;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[14]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x593=IKsin(j21);
IkReal x594=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x593)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x594)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x593)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x594)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x595=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j20))), IkReal(6.28318530717959))));
evalcond[1]=x595;
evalcond[2]=x595;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x595;
evalcond[14]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x596=IKsin(j21);
IkReal x597=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x596)+(new_r11));
evalcond[1]=((((IkReal(-1.00000000000000))*(x597)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x596)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x597)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x598=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=x598;
evalcond[2]=x598;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r12));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x599=IKcos(j21);
IkReal x600=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x599)+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x600)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x600)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x599)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x601 = IKPowWithIntegerCheck(cj20,-1.00000000000000);
if( !x601.valid ) {
    continue;
}
CheckValue<IkReal> x602 = IKPowWithIntegerCheck(sj20,-1.00000000000000);
if( !x602.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(x601.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x602.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(x601.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x602.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(x601.value)), ((IkReal(-1.00000000000000))*(new_r20)*(x602.value)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x603=IKsin(j21);
IkReal x604=IKcos(j21);
IkReal x605=((IkReal(1.00000000000000))*(sj20));
IkReal x606=((IkReal(1.00000000000000))*(x604));
IkReal x607=((IkReal(1.00000000000000))*(x603));
evalcond[0]=((((sj20)*(x604)))+(new_r20));
evalcond[1]=((((cj20)*(x603)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x603)*(x605)))+(new_r21));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj20)*(x606)))+(new_r10));
evalcond[4]=((((IkReal(-1.00000000000000))*(x607)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x606)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((cj20)*(new_r11)))+(x603)+(((IkReal(-1.00000000000000))*(new_r21)*(x605))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x605)))+(((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(x606))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x608 = IKatan2WithCheck(((gconst119)*(new_r21)),((IkReal(-1.00000000000000))*(gconst119)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x608.valid ) {
    continue;
}
j21array[0]=x608.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x609=IKsin(j21);
IkReal x610=IKcos(j21);
IkReal x611=((IkReal(1.00000000000000))*(sj20));
IkReal x612=((IkReal(1.00000000000000))*(x610));
IkReal x613=((IkReal(1.00000000000000))*(x609));
evalcond[0]=((((sj20)*(x610)))+(new_r20));
evalcond[1]=((((cj20)*(x609)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x609)*(x611)))+(new_r21));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj20)*(x612)))+(new_r10));
evalcond[4]=((((IkReal(-1.00000000000000))*(x613)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x612)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x611)))+(((cj20)*(new_r11)))+(x609));
evalcond[7]=((((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(x612)))+(((IkReal(-1.00000000000000))*(new_r20)*(x611))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x614=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x615=((IkReal(1.00000000000000))*(new_r12));
IkReal x616=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j19))))), IkReal(6.28318530717959))));
evalcond[1]=x614;
evalcond[2]=x614;
evalcond[3]=new_r02;
evalcond[4]=((sj20)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x616)))+(((IkReal(-1.00000000000000))*(x615))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x616)))+(((cj20)*(new_r20))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x616)))+(((cj20)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((cj20)*(new_r22)))+(((IkReal(-1.00000000000000))*(sj20)*(x615))));
evalcond[11]=((((IkReal(-1.00000000000000))*(cj20)*(x615)))+(((IkReal(-1.00000000000000))*(new_r22)*(x616))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r00, new_r01);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x617=IKcos(j21);
IkReal x618=IKsin(j21);
IkReal x619=((IkReal(1.00000000000000))*(new_r11));
IkReal x620=((IkReal(1.00000000000000))*(sj20));
IkReal x621=((IkReal(1.00000000000000))*(new_r10));
IkReal x622=((IkReal(1.00000000000000))*(x617));
IkReal x623=((IkReal(1.00000000000000))*(x618));
evalcond[0]=((((sj20)*(x617)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x623)))+(new_r00));
evalcond[2]=((((IkReal(-1.00000000000000))*(x622)))+(new_r01));
evalcond[3]=((((IkReal(-1.00000000000000))*(x618)*(x620)))+(new_r21));
evalcond[4]=((((cj20)*(x618)))+(((IkReal(-1.00000000000000))*(x619))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x622)))+(((IkReal(-1.00000000000000))*(x621))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x619)))+(((IkReal(-1.00000000000000))*(new_r21)*(x620)))+(x618));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj20)*(x621)))+(((IkReal(-1.00000000000000))*(x622)))+(((IkReal(-1.00000000000000))*(new_r20)*(x620))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x624=((IkReal(1.00000000000000))*(sj19));
IkReal x625=((((IkReal(-1.00000000000000))*(new_r02)*(x624)))+(((cj19)*(new_r12))));
IkReal x626=((((new_r10)*(sj19)))+(((cj19)*(new_r00))));
IkReal x627=((((cj19)*(new_r01)))+(((new_r11)*(sj19))));
IkReal x628=((IkReal(-1.00000000000000))+(((cj19)*(new_r02)))+(((new_r12)*(sj19))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((((IkReal(-1.00000000000000))*(cj19)))+(new_r02));
evalcond[4]=((((IkReal(-1.00000000000000))*(x624)))+(new_r12));
evalcond[5]=x625;
evalcond[6]=x625;
evalcond[7]=x628;
evalcond[8]=x627;
evalcond[9]=x626;
evalcond[10]=x626;
evalcond[11]=x627;
evalcond[12]=x628;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x629=IKcos(j21);
IkReal x630=IKsin(j21);
IkReal x631=((IkReal(1.00000000000000))*(cj19));
IkReal x632=((IkReal(1.00000000000000))*(sj19));
IkReal x633=((IkReal(1.00000000000000))*(x630));
evalcond[0]=((x629)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x633)))+(new_r21));
evalcond[2]=((((sj19)*(x629)))+(new_r01));
evalcond[3]=((((sj19)*(x630)))+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(x629)*(x631)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(x630)*(x631)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r00)*(x632)))+(((IkReal(-1.00000000000000))*(x633)))+(((cj19)*(new_r10))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r01)*(x632)))+(((IkReal(-1.00000000000000))*(x629)))+(((cj19)*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x634=((new_r12)*(sj19));
IkReal x635=((IkReal(1.00000000000000))*(sj19));
IkReal x636=((cj19)*(new_r00));
IkReal x637=((IkReal(1.00000000000000))*(cj19));
IkReal x638=((((IkReal(-1.00000000000000))*(new_r02)*(x635)))+(((cj19)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((cj19)+(new_r02));
evalcond[4]=((sj19)+(new_r12));
evalcond[5]=x638;
evalcond[6]=x638;
evalcond[7]=((IkReal(1.00000000000000))+(x634)+(((cj19)*(new_r02))));
evalcond[8]=((((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[9]=((x636)+(((new_r10)*(sj19))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x636)))+(((IkReal(-1.00000000000000))*(new_r10)*(x635))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r01)*(x637)))+(((IkReal(-1.00000000000000))*(new_r11)*(x635))));
evalcond[12]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x637)))+(((IkReal(-1.00000000000000))*(x634))));
evalcond[13]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x639=IKcos(j21);
IkReal x640=IKsin(j21);
IkReal x641=((IkReal(1.00000000000000))*(cj19));
IkReal x642=((IkReal(1.00000000000000))*(sj19));
IkReal x643=((IkReal(1.00000000000000))*(x639));
evalcond[0]=((x640)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x643)))+(new_r20));
evalcond[2]=((((sj19)*(x639)))+(new_r01));
evalcond[3]=((new_r00)+(((sj19)*(x640))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x639)*(x641)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(x640)*(x641)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(x640)))+(((IkReal(-1.00000000000000))*(new_r00)*(x642)))+(((cj19)*(new_r10))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x643)))+(((IkReal(-1.00000000000000))*(new_r01)*(x642)))+(((cj19)*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x644=((IkReal(-1.00000000000000))+(new_r22));
IkReal x645=((((IkReal(-1.00000000000000))*(new_r02)*(sj19)))+(((cj19)*(new_r12))));
IkReal x646=((((cj19)*(new_r02)))+(((new_r12)*(sj19))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j20))), IkReal(6.28318530717959))));
evalcond[1]=x644;
evalcond[2]=x644;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x645;
evalcond[10]=x645;
evalcond[11]=x646;
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x644;
evalcond[15]=x646;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst120;
CheckValue<IkReal> x647 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x647.valid ) {
    continue;
}
CheckValue<IkReal> x648 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x648.valid ) {
    continue;
}
gconst120=IKsign(((((IkReal(-1.00000000000000))*(x647.value)))+(((IkReal(-1.00000000000000))*(x648.value)))));
CheckValue<IkReal> x649 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x649.valid ) {
    continue;
}
CheckValue<IkReal> x650 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x650.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x649.value)))+(((IkReal(-1.00000000000000))*(x650.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst121;
CheckValue<IkReal> x651 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x651.valid ) {
    continue;
}
CheckValue<IkReal> x652 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x652.valid ) {
    continue;
}
gconst121=IKsign(((((IkReal(-1.00000000000000))*(x651.value)))+(((IkReal(-1.00000000000000))*(x652.value)))));
CheckValue<IkReal> x653 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x653.valid ) {
    continue;
}
CheckValue<IkReal> x654 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x654.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x653.value)))+(((IkReal(-1.00000000000000))*(x654.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x655 = IKatan2WithCheck(((gconst121)*(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))))),((gconst121)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r11)))+(((new_r01)*(sj19)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x655.valid ) {
    continue;
}
j21array[0]=x655.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x656=IKsin(j21);
IkReal x657=IKcos(j21);
IkReal x658=((IkReal(1.00000000000000))*(sj19));
IkReal x659=((IkReal(1.00000000000000))*(x657));
IkReal x660=((sj19)*(x656));
IkReal x661=((IkReal(1.00000000000000))*(x656));
IkReal x662=((cj19)*(x659));
evalcond[0]=((x656)+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[1]=((((cj19)*(x656)))+(new_r01)+(((sj19)*(x657))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x659)))+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x658)))+(((IkReal(-1.00000000000000))*(x661)))+(((cj19)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(new_r01)*(x658)))+(((cj19)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x662)))+(x660)+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x662)))+(x660)+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj19)*(x661)))+(((IkReal(-1.00000000000000))*(x657)*(x658)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x663 = IKatan2WithCheck(((gconst120)*(((((new_r00)*(sj19)))+(((cj19)*(new_r01)))))),((gconst120)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((new_r01)*(sj19)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x663.valid ) {
    continue;
}
j21array[0]=x663.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x664=IKsin(j21);
IkReal x665=IKcos(j21);
IkReal x666=((IkReal(1.00000000000000))*(sj19));
IkReal x667=((IkReal(1.00000000000000))*(x665));
IkReal x668=((sj19)*(x664));
IkReal x669=((IkReal(1.00000000000000))*(x664));
IkReal x670=((cj19)*(x667));
evalcond[0]=((x664)+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[1]=((((sj19)*(x665)))+(((cj19)*(x664)))+(new_r01));
evalcond[2]=((((IkReal(-1.00000000000000))*(x667)))+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x669)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x666))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x667)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x666))));
evalcond[5]=((x668)+(new_r00)+(((IkReal(-1.00000000000000))*(x670))));
evalcond[6]=((x668)+(new_r11)+(((IkReal(-1.00000000000000))*(x670))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x665)*(x666)))+(((IkReal(-1.00000000000000))*(cj19)*(x669)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x671=((IkReal(1.00000000000000))+(new_r22));
IkReal x672=((new_r12)*(sj19));
IkReal x673=((IkReal(1.00000000000000))*(new_r02));
IkReal x674=((((IkReal(-1.00000000000000))*(sj19)*(x673)))+(((cj19)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=x671;
evalcond[2]=x671;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x674;
evalcond[10]=x674;
evalcond[11]=((x672)+(((cj19)*(new_r02))));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[15]=((((IkReal(-1.00000000000000))*(cj19)*(x673)))+(((IkReal(-1.00000000000000))*(x672))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst122;
CheckValue<IkReal> x675 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x675.valid ) {
    continue;
}
CheckValue<IkReal> x676 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x676.valid ) {
    continue;
}
gconst122=IKsign(((x675.value)+(x676.value)));
CheckValue<IkReal> x677 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x677.valid ) {
    continue;
}
CheckValue<IkReal> x678 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x678.valid ) {
    continue;
}
dummyeval[0]=((x677.value)+(x678.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst123;
CheckValue<IkReal> x679 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x679.valid ) {
    continue;
}
CheckValue<IkReal> x680 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x680.valid ) {
    continue;
}
gconst123=IKsign(((x679.value)+(x680.value)));
CheckValue<IkReal> x681 = IKPowWithIntegerCheck(sj19,2.00000000000000);
if( !x681.valid ) {
    continue;
}
CheckValue<IkReal> x682 = IKPowWithIntegerCheck(cj19,2.00000000000000);
if( !x682.valid ) {
    continue;
}
dummyeval[0]=((x681.value)+(x682.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x683=((IkReal(1.00000000000000))*(sj19));
CheckValue<IkReal> x684 = IKatan2WithCheck(((gconst123)*(((((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x683)))))),((gconst123)*(((((IkReal(-1.00000000000000))*(new_r10)*(x683)))+(((IkReal(-1.00000000000000))*(cj19)*(new_r00)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x684.valid ) {
    continue;
}
j21array[0]=x684.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x685=IKsin(j21);
IkReal x686=IKcos(j21);
IkReal x687=((IkReal(1.00000000000000))*(cj19));
IkReal x688=((IkReal(1.00000000000000))*(sj19));
IkReal x689=((IkReal(1.00000000000000))*(x685));
IkReal x690=((sj19)*(x686));
IkReal x691=((sj19)*(x685));
IkReal x692=((x685)*(x687));
evalcond[0]=((x686)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x689)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[2]=((((cj19)*(x686)))+(x691)+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x689)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x688))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x688)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(x686))));
evalcond[5]=((x690)+(((IkReal(-1.00000000000000))*(x692)))+(new_r01));
evalcond[6]=((x690)+(((IkReal(-1.00000000000000))*(x692)))+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x685)*(x688)))+(((IkReal(-1.00000000000000))*(x686)*(x687)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x693=((IkReal(1.00000000000000))*(sj19));
CheckValue<IkReal> x694 = IKatan2WithCheck(((gconst122)*(((((IkReal(-1.00000000000000))*(new_r00)*(x693)))+(((cj19)*(new_r01)))))),((gconst122)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(x693)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x694.valid ) {
    continue;
}
j21array[0]=x694.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x695=IKsin(j21);
IkReal x696=IKcos(j21);
IkReal x697=((IkReal(1.00000000000000))*(cj19));
IkReal x698=((IkReal(1.00000000000000))*(sj19));
IkReal x699=((IkReal(1.00000000000000))*(x695));
IkReal x700=((sj19)*(x696));
IkReal x701=((sj19)*(x695));
IkReal x702=((x695)*(x697));
evalcond[0]=((x696)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x699)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[2]=((((cj19)*(x696)))+(x701)+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x698)))+(((IkReal(-1.00000000000000))*(x699)))+(((cj19)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x698)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(x696))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x702)))+(x700)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x702)))+(x700)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x696)*(x697)))+(((IkReal(-1.00000000000000))*(x695)*(x698)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x703=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x704=((((IkReal(-1.00000000000000))*(sj20)))+(new_r02));
IkReal x705=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j19))), IkReal(6.28318530717959))));
evalcond[1]=x703;
evalcond[2]=x703;
evalcond[3]=x704;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x704;
evalcond[8]=((((new_r00)*(sj20)))+(((cj20)*(new_r20))));
evalcond[9]=((((new_r01)*(sj20)))+(((cj20)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((cj20)*(new_r22)))+(((new_r02)*(sj20))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r22)*(x705)))+(((cj20)*(new_r02))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r10, new_r11);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x706=IKcos(j21);
IkReal x707=IKsin(j21);
IkReal x708=((IkReal(1.00000000000000))*(sj20));
IkReal x709=((IkReal(1.00000000000000))*(x706));
IkReal x710=((IkReal(1.00000000000000))*(x707));
evalcond[0]=((new_r20)+(((sj20)*(x706))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x710)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x709)))+(new_r11));
evalcond[3]=((((cj20)*(x707)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x707)*(x708)))+(new_r21));
evalcond[5]=((new_r00)+(((IkReal(-1.00000000000000))*(cj20)*(x709))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x708)))+(((cj20)*(new_r01)))+(x707));
evalcond[7]=((((cj20)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r20)*(x708)))+(((IkReal(-1.00000000000000))*(x709))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x711=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x712=((IkReal(1.00000000000000))*(sj20));
IkReal x713=((IkReal(1.00000000000000))*(cj20));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j19))))), IkReal(6.28318530717959))));
evalcond[1]=x711;
evalcond[2]=x711;
evalcond[3]=((sj20)+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((((IkReal(-1.00000000000000))*(x712)))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((((cj20)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r00)*(x712))));
evalcond[8]=((((cj20)*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r01)*(x712))));
evalcond[9]=((IkReal(-1.00000000000000))+(((cj20)*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r02)*(x712))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r22)*(x712)))+(((IkReal(-1.00000000000000))*(new_r02)*(x713))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst124;
gconst124=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[14];
bool bgotonextstatement = true;
do
{
IkReal x714=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j20))), IkReal(6.28318530717959))));
evalcond[1]=x714;
evalcond[2]=x714;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x714;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x715=IKsin(j21);
IkReal x716=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r01)))+(x715));
evalcond[1]=((((IkReal(-1.00000000000000))*(x715)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x716)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x716)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x717=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j20))))), IkReal(6.28318530717959))));
evalcond[1]=x717;
evalcond[2]=x717;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x718=IKcos(j21);
IkReal x719=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)))+(x718));
evalcond[1]=((((IkReal(-1.00000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x718)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x720 = IKPowWithIntegerCheck(sj20,-1.00000000000000);
if( !x720.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x720.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x720.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), ((IkReal(-1.00000000000000))*(new_r20)*(x720.value)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x721=IKsin(j21);
IkReal x722=IKcos(j21);
IkReal x723=((IkReal(1.00000000000000))*(sj20));
IkReal x724=((IkReal(1.00000000000000))*(new_r00));
IkReal x725=((IkReal(1.00000000000000))*(new_r01));
IkReal x726=((IkReal(1.00000000000000))*(x722));
IkReal x727=((IkReal(1.00000000000000))*(x721));
evalcond[0]=((new_r20)+(((sj20)*(x722))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x721)*(x723)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x727)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj20)*(x721)))+(((IkReal(-1.00000000000000))*(x725))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x724)))+(((IkReal(-1.00000000000000))*(cj20)*(x726))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x723)))+(((IkReal(-1.00000000000000))*(cj20)*(x725)))+(x721));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x723)))+(((IkReal(-1.00000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(cj20)*(x724))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x728 = IKPowWithIntegerCheck(sj20,-1.00000000000000);
if( !x728.valid ) {
    continue;
}
if( IKabs(((new_r21)*(x728.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(x728.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((new_r21)*(x728.value)), ((IkReal(-1.00000000000000))*(new_r11)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x729=IKsin(j21);
IkReal x730=IKcos(j21);
IkReal x731=((IkReal(1.00000000000000))*(sj20));
IkReal x732=((IkReal(1.00000000000000))*(new_r00));
IkReal x733=((IkReal(1.00000000000000))*(new_r01));
IkReal x734=((IkReal(1.00000000000000))*(x730));
IkReal x735=((IkReal(1.00000000000000))*(x729));
evalcond[0]=((new_r20)+(((sj20)*(x730))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x729)*(x731))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x735)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj20)*(x729)))+(((IkReal(-1.00000000000000))*(x733))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x732)))+(((IkReal(-1.00000000000000))*(cj20)*(x734))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x731)))+(((IkReal(-1.00000000000000))*(cj20)*(x733)))+(x729));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x731)))+(((IkReal(-1.00000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(cj20)*(x732))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x736 = IKatan2WithCheck(((gconst124)*(new_r21)),((IkReal(-1.00000000000000))*(gconst124)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x736.valid ) {
    continue;
}
j21array[0]=x736.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x737=IKsin(j21);
IkReal x738=IKcos(j21);
IkReal x739=((IkReal(1.00000000000000))*(sj20));
IkReal x740=((IkReal(1.00000000000000))*(new_r00));
IkReal x741=((IkReal(1.00000000000000))*(new_r01));
IkReal x742=((IkReal(1.00000000000000))*(x738));
IkReal x743=((IkReal(1.00000000000000))*(x737));
evalcond[0]=((new_r20)+(((sj20)*(x738))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x737)*(x739)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x743))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x742))));
evalcond[4]=((((cj20)*(x737)))+(((IkReal(-1.00000000000000))*(x741))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x740)))+(((IkReal(-1.00000000000000))*(cj20)*(x742))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x739)))+(x737)+(((IkReal(-1.00000000000000))*(cj20)*(x741))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x739)))+(((IkReal(-1.00000000000000))*(x742)))+(((IkReal(-1.00000000000000))*(cj20)*(x740))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x744=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j19))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j20))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x744;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x744;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r00;
evalcond[13]=new_r01;
evalcond[14]=x744;
evalcond[15]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x745=IKcos(j21);
IkReal x746=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x745)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x746))));
evalcond[2]=((new_r10)+(((IkReal(-1.00000000000000))*(x746))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x745)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j19))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j20))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x747=IKcos(j21);
IkReal x748=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x747)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x748))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x748))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x747))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x749=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j20))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j19))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x749;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x749;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[15]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x750=IKsin(j21);
IkReal x751=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x750)+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x751))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x750)))+(new_r10));
evalcond[3]=((new_r11)+(((IkReal(-1.00000000000000))*(x751))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j20))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j19))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x752=IKsin(j21);
IkReal x753=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x752)+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x753))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x752)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x753))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x754=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j20))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j19))), IkReal(6.28318530717959)))))));
evalcond[1]=x754;
evalcond[2]=x754;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x754;
evalcond[15]=new_r02;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x755=IKsin(j21);
IkReal x756=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((x755)+(new_r01));
evalcond[1]=((((IkReal(-1.00000000000000))*(x755)))+(new_r10));
evalcond[2]=((new_r11)+(((IkReal(-1.00000000000000))*(x756))));
evalcond[3]=((new_r00)+(((IkReal(-1.00000000000000))*(x756))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x757=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j20))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j19))), IkReal(6.28318530717959)))))));
evalcond[1]=x757;
evalcond[2]=x757;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[15]=((IkReal(-1.00000000000000))*(new_r02));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x758=IKcos(j21);
IkReal x759=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x758)+(new_r00));
evalcond[1]=((new_r10)+(((IkReal(-1.00000000000000))*(x759))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x758)))+(new_r11));
evalcond[3]=((new_r01)+(((IkReal(-1.00000000000000))*(x759))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x761 = IKPowWithIntegerCheck(sj20,-1.00000000000000);
if( !x761.valid ) {
    continue;
}
IkReal x760=x761.value;
CheckValue<IkReal> x762 = IKPowWithIntegerCheck(cj19,-1.00000000000000);
if( !x762.valid ) {
    continue;
}
CheckValue<IkReal> x763 = IKPowWithIntegerCheck(cj20,-1.00000000000000);
if( !x763.valid ) {
    continue;
}
if( IKabs(((x760)*(x762.value)*(x763.value)*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x760))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x760)*(x762.value)*(x763.value)*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x760)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((x760)*(x762.value)*(x763.value)*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x760)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x764=IKsin(j21);
IkReal x765=IKcos(j21);
IkReal x766=((cj20)*(sj19));
IkReal x767=((cj19)*(new_r01));
IkReal x768=((IkReal(1.00000000000000))*(sj20));
IkReal x769=((cj19)*(new_r00));
IkReal x770=((IkReal(1.00000000000000))*(sj19));
IkReal x771=((IkReal(1.00000000000000))*(x765));
IkReal x772=((cj20)*(x764));
IkReal x773=((IkReal(1.00000000000000))*(x764));
IkReal x774=((cj19)*(x771));
evalcond[0]=((((sj20)*(x765)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x764)*(x768)))+(new_r21));
evalcond[2]=((x772)+(x767)+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x770)))+(((IkReal(-1.00000000000000))*(x773)))+(((cj19)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x770)))+(((IkReal(-1.00000000000000))*(x771)))+(((cj19)*(new_r11))));
evalcond[5]=((((sj19)*(x765)))+(new_r01)+(((cj19)*(x772))));
evalcond[6]=((x769)+(((new_r10)*(sj19)))+(((IkReal(-1.00000000000000))*(cj20)*(x771))));
evalcond[7]=((((sj19)*(x764)))+(new_r00)+(((IkReal(-1.00000000000000))*(cj20)*(x774))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x774)))+(new_r11)+(((x764)*(x766))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x766)*(x771)))+(((IkReal(-1.00000000000000))*(cj19)*(x773)))+(new_r10));
evalcond[10]=((((new_r11)*(x766)))+(((cj20)*(x767)))+(x764)+(((IkReal(-1.00000000000000))*(new_r21)*(x768))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x768)))+(((new_r10)*(x766)))+(((cj20)*(x769)))+(((IkReal(-1.00000000000000))*(x771))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x776 = IKPowWithIntegerCheck(sj20,-1.00000000000000);
if( !x776.valid ) {
    continue;
}
IkReal x775=x776.value;
CheckValue<IkReal> x777 = IKPowWithIntegerCheck(sj19,-1.00000000000000);
if( !x777.valid ) {
    continue;
}
if( IKabs(((x775)*(x777.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x775))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x775)*(x777.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x775)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((x775)*(x777.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x775)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x778=IKsin(j21);
IkReal x779=IKcos(j21);
IkReal x780=((cj20)*(sj19));
IkReal x781=((cj19)*(new_r01));
IkReal x782=((IkReal(1.00000000000000))*(sj20));
IkReal x783=((cj19)*(new_r00));
IkReal x784=((IkReal(1.00000000000000))*(sj19));
IkReal x785=((IkReal(1.00000000000000))*(x779));
IkReal x786=((cj20)*(x778));
IkReal x787=((IkReal(1.00000000000000))*(x778));
IkReal x788=((cj19)*(x785));
evalcond[0]=((((sj20)*(x779)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x778)*(x782))));
evalcond[2]=((x781)+(x786)+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x787)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x784))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x784)))+(((IkReal(-1.00000000000000))*(x785)))+(((cj19)*(new_r11))));
evalcond[5]=((((sj19)*(x779)))+(((cj19)*(x786)))+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x785)))+(x783)+(((new_r10)*(sj19))));
evalcond[7]=((((sj19)*(x778)))+(((IkReal(-1.00000000000000))*(cj20)*(x788)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x788)))+(((x778)*(x780)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj19)*(x787)))+(new_r10)+(((IkReal(-1.00000000000000))*(x780)*(x785))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x782)))+(((cj20)*(x781)))+(((new_r11)*(x780)))+(x778));
evalcond[11]=((((cj20)*(x783)))+(((new_r10)*(x780)))+(((IkReal(-1.00000000000000))*(x785)))+(((IkReal(-1.00000000000000))*(new_r20)*(x782))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
CheckValue<IkReal> x789 = IKatan2WithCheck(((gconst118)*(new_r21)),((IkReal(-1.00000000000000))*(gconst118)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x789.valid ) {
    continue;
}
j21array[0]=x789.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x790=IKsin(j21);
IkReal x791=IKcos(j21);
IkReal x792=((cj20)*(sj19));
IkReal x793=((cj19)*(new_r01));
IkReal x794=((IkReal(1.00000000000000))*(sj20));
IkReal x795=((cj19)*(new_r00));
IkReal x796=((IkReal(1.00000000000000))*(sj19));
IkReal x797=((IkReal(1.00000000000000))*(x791));
IkReal x798=((cj20)*(x790));
IkReal x799=((IkReal(1.00000000000000))*(x790));
IkReal x800=((cj19)*(x797));
evalcond[0]=((((sj20)*(x791)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x790)*(x794)))+(new_r21));
evalcond[2]=((x793)+(x798)+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x799)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x796))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x796)))+(((IkReal(-1.00000000000000))*(x797)))+(((cj19)*(new_r11))));
evalcond[5]=((((cj19)*(x798)))+(((sj19)*(x791)))+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x797)))+(x795)+(((new_r10)*(sj19))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj20)*(x800)))+(((sj19)*(x790)))+(new_r00));
evalcond[8]=((((x790)*(x792)))+(new_r11)+(((IkReal(-1.00000000000000))*(x800))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x792)*(x797)))+(((IkReal(-1.00000000000000))*(cj19)*(x799)))+(new_r10));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x794)))+(((cj20)*(x793)))+(((new_r11)*(x792)))+(x790));
evalcond[11]=((((IkReal(-1.00000000000000))*(x797)))+(((new_r10)*(x792)))+(((cj20)*(x795)))+(((IkReal(-1.00000000000000))*(new_r20)*(x794))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c45a6ca7742b52feb0b51dbc6c01064f"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
