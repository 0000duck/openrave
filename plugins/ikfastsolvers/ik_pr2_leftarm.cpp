#define IKFAST_NAMESPACE ik_pr2_leftarm
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 63 generated on 2013-07-09 02:04:43.745425
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==63);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct Atan2Value
{
    T value;
    bool valid;
};

template <typename T>
inline Atan2Value<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    Atan2Value<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKcos(j[3]);
x8=IKcos(j[1]);
x9=IKsin(j[3]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((IkReal(1.00000000000000))*(x12));
x15=((IkReal(0.180000000000000))*(x7));
x16=((IkReal(0.180000000000000))*(x5));
x17=((IkReal(0.321000000000000))*(x3));
x18=((IkReal(1.00000000000000))*(x1));
x19=((IkReal(0.180000000000000))*(x9));
x20=((IkReal(1.00000000000000))*(x13));
x21=((IkReal(1.00000000000000))*(x9));
x22=((IkReal(0.180000000000000))*(x6));
x23=((IkReal(1.00000000000000))*(x3));
x24=((x8)*(x9));
x25=((x0)*(x8));
x26=((x0)*(x3));
x27=((x0)*(x2));
x28=((x4)*(x7));
x29=((IkReal(-1.00000000000000))*(x7));
x30=((x1)*(x4));
x31=((x1)*(x8));
x32=((x2)*(x8));
x33=((x31)*(x7));
x34=((x21)*(x25));
x35=((x18)*(x24));
x36=((x23)*(x7)*(x8));
x37=((((x27)*(x4)))+(((IkReal(-1.00000000000000))*(x18)*(x3))));
x38=((x27)+(((IkReal(-1.00000000000000))*(x18)*(x3)*(x4))));
x39=((((x2)*(x30)))+(x26));
x40=((((IkReal(-1.00000000000000))*(x36)))+(((x4)*(x9))));
x41=((((IkReal(-1.00000000000000))*(x18)*(x2)))+(((IkReal(-1.00000000000000))*(x0)*(x23)*(x4))));
x42=((x37)*(x5));
x43=((x38)*(x7));
x44=((x39)*(x5));
x45=((((x21)*(x3)*(x8)))+(((IkReal(1.00000000000000))*(x28))));
x46=((x38)*(x9));
x47=((x41)*(x7));
x48=((x41)*(x9));
x49=((((x32)*(x5)))+(((x40)*(x6))));
x50=((((IkReal(-1.00000000000000))*(x1)*(x24)))+(x43));
x51=((((x32)*(x6)))+(((x5)*(((((IkReal(-1.00000000000000))*(x21)*(x4)))+(x36))))));
x52=((((IkReal(-1.00000000000000))*(x18)*(x7)*(x8)))+(((IkReal(-1.00000000000000))*(x21)*(x38))));
x53=((x13)*(x49));
x54=((((IkReal(-1.00000000000000))*(x0)*(x24)))+(x47));
x55=((x50)*(x6));
x56=((((IkReal(-1.00000000000000))*(x48)))+(((x25)*(x29))));
x57=((x54)*(x6));
x58=((x44)+(x55));
x59=((((x6)*(((((IkReal(-1.00000000000000))*(x34)))+(x47)))))+(x42));
x60=((((x5)*(((((x29)*(x38)))+(x35)))))+(((x39)*(x6))));
x61=((((x5)*(((((x29)*(x41)))+(x34)))))+(((x37)*(x6))));
x62=((x13)*(x59));
eerot[0]=((((x11)*(x61)))+(((x10)*(((((x12)*(x56)))+(x62))))));
eerot[1]=((((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x59)))+(((IkReal(-1.00000000000000))*(x14)*(x56)))))))+(((x10)*(x61))));
eerot[2]=((((x13)*(((x48)+(((x25)*(x7)))))))+(((x12)*(((x42)+(x57))))));
eetrans[0]=((((x9)*(((((IkReal(-1.00000000000000))*(x0)*(x17)*(x4)))+(((IkReal(-0.321000000000000))*(x1)*(x2)))))))+(((IkReal(0.100000000000000))*(x0)))+(((IkReal(0.321000000000000))*(x25)*(x7)))+(((IkReal(0.400000000000000))*(x25)))+(((x12)*(((((x16)*(x37)))+(((x22)*(x54)))))))+(((x13)*(((((x19)*(x41)))+(((x15)*(x25))))))));
eerot[3]=((((x11)*(x60)))+(((x10)*(((((x13)*(x58)))+(((x12)*(x52))))))));
eerot[4]=((((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x58)))+(((IkReal(-1.00000000000000))*(x14)*(x52)))))))+(((x10)*(x60))));
eerot[5]=((((x13)*(((x33)+(x46)))))+(((x12)*(((((x6)*(((((IkReal(-1.00000000000000))*(x35)))+(x43)))))+(x44))))));
eetrans[1]=((IkReal(0.188000000000000))+(((IkReal(0.100000000000000))*(x1)))+(((x13)*(((((x19)*(x38)))+(((x15)*(x31)))))))+(((IkReal(0.321000000000000))*(x33)))+(((IkReal(0.400000000000000))*(x31)))+(((x9)*(((((IkReal(-1.00000000000000))*(x17)*(x30)))+(((IkReal(0.321000000000000))*(x27)))))))+(((x12)*(((((x16)*(x39)))+(((x22)*(x50))))))));
eerot[6]=((((x11)*(x51)))+(((x10)*(((x53)+(((x12)*(x45))))))));
eerot[7]=((((x10)*(x51)))+(((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x49)))+(((IkReal(-1.00000000000000))*(x14)*(x45))))))));
eerot[8]=((((x12)*(x49)))+(((IkReal(-1.00000000000000))*(x13)*(x45))));
eetrans[2]=((((x13)*(((((IkReal(-1.00000000000000))*(x19)*(x3)*(x8)))+(((IkReal(-1.00000000000000))*(x15)*(x4)))))))+(((x12)*(((((x16)*(x32)))+(((x22)*(x40)))))))+(((IkReal(-1.00000000000000))*(x17)*(x24)))+(((IkReal(-0.400000000000000))*(x4)))+(((IkReal(-0.321000000000000))*(x28))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j15,cj15,sj15,htj15,j16,cj16,sj16,htj16,j18,cj18,sj18,htj18,j19,cj19,sj19,htj19,j20,cj20,sj20,htj20,j21,cj21,sj21,htj21,j17,cj17,sj17,htj17,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij15[2], _nj15,_ij16[2], _nj16,_ij18[2], _nj18,_ij19[2], _nj19,_ij20[2], _nj20,_ij21[2], _nj21,_ij17[2], _nj17;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j18=numeric_limits<IkReal>::quiet_NaN(); _ij18[0] = -1; _ij18[1] = -1; _nj18 = -1; j19=numeric_limits<IkReal>::quiet_NaN(); _ij19[0] = -1; _ij19[1] = -1; _nj19 = -1; j20=numeric_limits<IkReal>::quiet_NaN(); _ij20[0] = -1; _ij20[1] = -1; _nj20 = -1; j21=numeric_limits<IkReal>::quiet_NaN(); _ij21[0] = -1; _ij21[1] = -1; _nj21 = -1;  _ij17[0] = -1; _ij17[1] = -1; _nj17 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j17=pfree[0]; cj17=cos(pfree[0]); sj17=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((IkReal(-0.180000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(-0.188000000000000))+(((IkReal(-0.180000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((pz)+(((IkReal(-0.180000000000000))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=((IkReal(-1.00000000000000))*(py));
IkReal gconst1;
gconst1=((IkReal(0.642000000000000))*(sj17));
IkReal gconst2;
gconst2=((IkReal(-1.00000000000000))*(py));
IkReal gconst3;
gconst3=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst4;
gconst4=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst5;
gconst5=((IkReal(-1.00000000000000))*(py));
IkReal gconst6;
gconst6=((IkReal(0.642000000000000))*(sj17));
IkReal gconst7;
gconst7=((IkReal(-1.00000000000000))*(py));
IkReal gconst8;
gconst8=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst9;
gconst9=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst10;
gconst10=((IkReal(2.00000000000000))*(px));
IkReal gconst11;
gconst11=((IkReal(2.00000000000000))*(px));
IkReal gconst12;
gconst12=((IkReal(0.400000000000000))*(py));
IkReal gconst13;
gconst13=((IkReal(0.400000000000000))*(py));
IkReal gconst14;
gconst14=((IkReal(2.00000000000000))*(px));
IkReal gconst15;
gconst15=((IkReal(2.00000000000000))*(px));
IkReal gconst16;
gconst16=((IkReal(0.400000000000000))*(py));
IkReal gconst17;
gconst17=((IkReal(0.400000000000000))*(py));
IkReal gconst18;
gconst18=py;
IkReal gconst19;
gconst19=((IkReal(0.642000000000000))*(sj17));
IkReal gconst20;
gconst20=py;
IkReal gconst21;
gconst21=((IkReal(0.509841000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst22;
gconst22=((IkReal(-0.00375900000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst23;
gconst23=py;
IkReal gconst24;
gconst24=((IkReal(0.642000000000000))*(sj17));
IkReal gconst25;
gconst25=py;
IkReal gconst26;
gconst26=((IkReal(0.509841000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst27;
gconst27=((IkReal(-0.00375900000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal x63=((gconst20)*(gconst21));
IkReal x64=((gconst23)*(gconst27));
IkReal x65=((gconst25)*(gconst26));
IkReal x66=((gconst18)*(gconst22));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x64)*(x66)))+(((IkReal(-1.00000000000000))*(x63)*(x65)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst22)*(gconst24)*(gconst26)))+(((x63)*(x64)))+(((x65)*(x66))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x67=((IkReal(1.00000000000000))*(gconst8));
IkReal x68=((gconst3)*(gconst7));
IkReal x69=((gconst0)*(gconst8));
IkReal x70=((gconst13)*(gconst15));
IkReal x71=((IkReal(1.00000000000000))*(gconst22));
IkReal x72=((gconst19)*(gconst24));
IkReal x73=((gconst0)*(gconst9));
IkReal x74=((gconst1)*(gconst6));
IkReal x75=((gconst27)*(gconst5));
IkReal x76=((gconst2)*(gconst3));
IkReal x77=((IkReal(1.00000000000000))*(gconst4));
IkReal x78=((gconst17)*(gconst5));
IkReal x79=((gconst12)*(gconst14));
IkReal x80=((gconst2)*(gconst9));
IkReal x81=((IkReal(1.00000000000000))*(gconst16));
IkReal x82=((gconst18)*(gconst25));
IkReal x83=((gconst12)*(gconst7));
IkReal x84=((gconst18)*(gconst9));
IkReal x85=((gconst20)*(gconst27));
IkReal x86=((gconst26)*(gconst4));
IkReal x87=((gconst1)*(gconst24));
IkReal x88=((gconst11)*(gconst3));
IkReal x89=((IkReal(1.00000000000000))*(gconst26));
IkReal x90=((gconst20)*(gconst21));
IkReal x91=((gconst13)*(gconst16));
IkReal x92=((gconst18)*(gconst23));
IkReal x93=((gconst21)*(gconst25));
IkReal x94=((gconst2)*(gconst21));
IkReal x95=((gconst12)*(gconst2));
IkReal x96=((gconst5)*(gconst9));
IkReal x97=((gconst20)*(gconst3));
IkReal x98=((gconst4)*(gconst7));
IkReal x99=((gconst11)*(gconst12));
IkReal x100=((gconst14)*(gconst17));
IkReal x101=((gconst15)*(gconst4));
IkReal x102=((IkReal(1.00000000000000))*(gconst13));
IkReal x103=((gconst10)*(gconst8));
IkReal x104=((gconst0)*(gconst16));
IkReal x105=((gconst23)*(gconst27));
IkReal x106=((gconst22)*(gconst25));
IkReal x107=((gconst10)*(gconst16));
IkReal x108=((gconst19)*(gconst6));
IkReal x109=((gconst22)*(gconst7));
IkReal x110=((gconst0)*(gconst7));
IkReal x111=((gconst17)*(gconst23));
IkReal x112=((gconst10)*(gconst14));
IkReal x113=((gconst11)*(gconst21));
IkReal x114=((gconst12)*(gconst20));
IkReal x115=((gconst18)*(gconst26));
IkReal x116=((gconst14)*(gconst9));
IkReal x117=((gconst13)*(gconst7));
IkReal x118=((gconst16)*(gconst22));
IkReal x119=((gconst23)*(x90));
IkReal x120=((gconst10)*(gconst25)*(gconst26));
IkReal x121=((gconst15)*(gconst22)*(gconst26));
IkReal x122=((gconst14)*(gconst18)*(gconst27));
op[0]=((((IkReal(-1.00000000000000))*(gconst26)*(x71)*(x72)))+(((IkReal(-1.00000000000000))*(gconst25)*(x89)*(x90)))+(((gconst22)*(gconst26)*(x82)))+(((IkReal(-1.00000000000000))*(gconst27)*(x71)*(x92)))+(((gconst21)*(gconst23)*(x85))));
op[1]=((((IkReal(-1.00000000000000))*(x122)*(x71)))+(((IkReal(-1.00000000000000))*(gconst25)*(x81)*(x90)))+(((gconst13)*(gconst26)*(x82)))+(((gconst10)*(gconst26)*(x106)))+(((IkReal(-1.00000000000000))*(gconst11)*(x89)*(x93)))+(((gconst14)*(gconst21)*(x85)))+(((IkReal(-1.00000000000000))*(gconst17)*(x71)*(x92)))+(((IkReal(-1.00000000000000))*(gconst27)*(x102)*(x92)))+(((IkReal(-1.00000000000000))*(gconst25)*(x114)*(x89)))+(((IkReal(-1.00000000000000))*(gconst16)*(x71)*(x72)))+(((IkReal(-1.00000000000000))*(gconst13)*(x72)*(x89)))+(((x111)*(x90)))+(((gconst15)*(gconst22)*(x115)))+(((x118)*(x82)))+(((x105)*(x113)))+(((IkReal(-1.00000000000000))*(gconst10)*(x105)*(x71)))+(((IkReal(-1.00000000000000))*(gconst15)*(x89)*(x90)))+(((gconst12)*(gconst23)*(x85))));
op[2]=((((IkReal(-1.00000000000000))*(gconst15)*(x81)*(x90)))+(((IkReal(-1.00000000000000))*(gconst27)*(x112)*(x71)))+(((gconst15)*(gconst18)*(x118)))+(((x79)*(x85)))+(((x100)*(x90)))+(((x82)*(x91)))+(((x106)*(x107)))+(((x111)*(x114)))+(((x111)*(x113)))+(((x82)*(x86)))+(((gconst23)*(gconst3)*(x85)))+(((gconst14)*(gconst27)*(x113)))+(((IkReal(-1.00000000000000))*(gconst22)*(x67)*(x72)))+(((IkReal(-1.00000000000000))*(gconst17)*(x102)*(x92)))+(((x115)*(x70)))+(((IkReal(-1.00000000000000))*(gconst25)*(x89)*(x99)))+(((IkReal(-1.00000000000000))*(gconst25)*(x89)*(x97)))+(((IkReal(-1.00000000000000))*(gconst25)*(x67)*(x90)))+(((x109)*(x115)))+(((gconst9)*(x119)))+(((IkReal(-1.00000000000000))*(gconst25)*(x114)*(x81)))+(((IkReal(-1.00000000000000))*(gconst26)*(x71)*(x87)))+(((IkReal(-1.00000000000000))*(gconst11)*(x81)*(x93)))+(((gconst22)*(gconst8)*(x82)))+(((x75)*(x90)))+(((gconst13)*(x120)))+(((gconst0)*(gconst26)*(x106)))+(((IkReal(-1.00000000000000))*(gconst18)*(x71)*(x75)))+(((IkReal(-1.00000000000000))*(gconst13)*(x72)*(x81)))+(((IkReal(-1.00000000000000))*(gconst10)*(x102)*(x105)))+(((IkReal(-1.00000000000000))*(gconst23)*(x71)*(x84)))+(((gconst10)*(x121)))+(((IkReal(-1.00000000000000))*(gconst7)*(x89)*(x90)))+(((IkReal(-1.00000000000000))*(gconst2)*(x89)*(x93)))+(((IkReal(-1.00000000000000))*(gconst0)*(x105)*(x71)))+(((IkReal(-1.00000000000000))*(gconst15)*(x113)*(x89)))+(((IkReal(-1.00000000000000))*(gconst10)*(x111)*(x71)))+(((IkReal(-1.00000000000000))*(x102)*(x122)))+(((x105)*(x99)))+(((x105)*(x94)))+(((IkReal(-1.00000000000000))*(gconst26)*(x72)*(x77)))+(((IkReal(-1.00000000000000))*(gconst26)*(x108)*(x71)))+(((IkReal(-1.00000000000000))*(gconst27)*(x77)*(x92)))+(((IkReal(-1.00000000000000))*(gconst18)*(x100)*(x71)))+(((IkReal(-1.00000000000000))*(gconst15)*(x114)*(x89))));
op[3]=((((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst23)*(gconst4)))+(((gconst16)*(gconst18)*(gconst25)*(gconst4)))+(((gconst15)*(gconst18)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst22)*(gconst6)))+(((gconst11)*(gconst12)*(gconst14)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst21)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst27)))+(((gconst0)*(gconst16)*(gconst22)*(gconst25)))+(((gconst0)*(gconst15)*(gconst22)*(gconst26)))+(((gconst14)*(gconst2)*(gconst21)*(gconst27)))+(((gconst10)*(gconst13)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst21)*(gconst25)))+(((gconst11)*(gconst23)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst17)*(gconst23)))+(((gconst11)*(gconst14)*(gconst17)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst26)*(gconst3)))+(((gconst12)*(gconst14)*(gconst17)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst22)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst25)*(gconst3)))+(((gconst11)*(gconst21)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst26)*(gconst7)))+(((gconst14)*(gconst20)*(gconst21)*(gconst9)))+(((gconst16)*(gconst18)*(gconst22)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst22)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst21)*(gconst26)))+(((gconst12)*(gconst20)*(gconst23)*(gconst9)))+(((gconst13)*(gconst18)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst20)))+(((gconst10)*(gconst25)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst27)*(gconst5)))+(((gconst14)*(gconst20)*(gconst27)*(gconst3)))+(((gconst15)*(gconst18)*(gconst26)*(gconst4)))+(((gconst13)*(gconst15)*(gconst16)*(gconst18)))+(((gconst10)*(gconst22)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst22)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst21)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst17)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst24)*(gconst8)))+(((gconst11)*(gconst12)*(gconst17)*(gconst23)))+(((gconst12)*(gconst2)*(gconst23)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((gconst17)*(gconst20)*(gconst23)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst26)*(gconst6)))+(((gconst17)*(gconst20)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst25)*(gconst26)))+(((gconst10)*(gconst15)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst22)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst23)*(gconst27)))+(((gconst11)*(gconst21)*(gconst27)*(gconst5)))+(((gconst13)*(gconst18)*(gconst26)*(gconst7)))+(((gconst17)*(gconst2)*(gconst21)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst23)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst22)*(gconst27)))+(((gconst0)*(gconst13)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst24)*(gconst26)))+(((gconst10)*(gconst22)*(gconst26)*(gconst7)))+(((gconst12)*(gconst20)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst24)*(gconst4)))+(((gconst10)*(gconst13)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst25)*(gconst8))));
op[4]=((((gconst12)*(gconst14)*(gconst2)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst23)*(gconst4)))+(((gconst10)*(gconst15)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst5)))+(((gconst2)*(gconst23)*(gconst27)*(gconst3)))+(((gconst18)*(gconst22)*(gconst7)*(gconst8)))+(((gconst14)*(gconst17)*(gconst2)*(gconst21)))+(((gconst20)*(gconst27)*(gconst3)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst21)*(gconst25)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst27)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst21)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst2)*(gconst26)))+(((gconst10)*(gconst16)*(gconst22)*(gconst7)))+(((gconst13)*(gconst15)*(gconst18)*(gconst8)))+(((gconst12)*(gconst17)*(gconst2)*(gconst23)))+(((gconst10)*(gconst13)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst16)*(gconst24)))+(((gconst11)*(gconst14)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst14)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst24)*(gconst8)))+(((gconst18)*(gconst25)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst20)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst9)))+(((gconst0)*(gconst13)*(gconst16)*(gconst25)))+(((gconst13)*(gconst16)*(gconst18)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst26)*(gconst3)*(gconst7)))+(((gconst11)*(gconst12)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst17)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst25)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst20)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst26)*(gconst4)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst2)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst22)*(gconst9)))+(((gconst10)*(gconst13)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst5)*(gconst9)))+(((gconst10)*(gconst13)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((gconst0)*(gconst13)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst2)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst21)*(gconst7)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst25)*(gconst26)*(gconst3)))+(((gconst2)*(gconst21)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst4)))+(((gconst2)*(gconst21)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst19)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst8)))+(((gconst12)*(gconst14)*(gconst20)*(gconst9)))+(((gconst18)*(gconst26)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst23)*(gconst27)*(gconst4)))+(((gconst20)*(gconst21)*(gconst5)*(gconst9)))+(((gconst11)*(gconst12)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst22)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst26)*(gconst6)))+(((gconst10)*(gconst15)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst23)*(gconst9)))+(((gconst11)*(gconst17)*(gconst23)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst22)*(gconst5)))+(((gconst0)*(gconst15)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst21)*(gconst7)))+(((gconst0)*(gconst25)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst24)*(gconst4)*(gconst8)))+(((gconst0)*(gconst22)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst23)*(gconst4)*(gconst9)))+(((gconst11)*(gconst14)*(gconst21)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst25)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst21)*(gconst8)))+(((gconst14)*(gconst17)*(gconst20)*(gconst3)))+(((gconst12)*(gconst17)*(gconst20)*(gconst5)))+(((gconst11)*(gconst17)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst22)*(gconst6)*(gconst8)))+(((gconst15)*(gconst16)*(gconst18)*(gconst4)))+(((gconst0)*(gconst22)*(gconst26)*(gconst7)))+(((gconst20)*(gconst23)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst24)*(gconst26)*(gconst4)))+(((gconst10)*(gconst16)*(gconst25)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst17)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst20)*(gconst3))));
op[5]=((((gconst0)*(gconst13)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst25)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst4)*(gconst6)))+(((gconst17)*(gconst20)*(gconst3)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst27)*(gconst4)))+(((gconst10)*(gconst15)*(gconst16)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst23)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst3)*(gconst7)))+(((gconst12)*(gconst20)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst22)*(gconst9)))+(((gconst11)*(gconst14)*(gconst17)*(gconst3)))+(((gconst0)*(gconst15)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst21)*(gconst8)))+(((gconst10)*(gconst25)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst22)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst26)*(gconst3)*(gconst7)))+(((gconst17)*(gconst2)*(gconst23)*(gconst3)))+(((gconst0)*(gconst16)*(gconst25)*(gconst4)))+(((gconst10)*(gconst26)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst8)))+(((gconst14)*(gconst2)*(gconst21)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst27)*(gconst5)))+(((gconst17)*(gconst2)*(gconst21)*(gconst5)))+(((gconst12)*(gconst14)*(gconst17)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst21)*(gconst7)))+(((gconst11)*(gconst23)*(gconst3)*(gconst9)))+(((gconst10)*(gconst13)*(gconst16)*(gconst7)))+(((gconst11)*(gconst12)*(gconst17)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst25)*(gconst8)))+(((gconst12)*(gconst2)*(gconst27)*(gconst5)))+(((gconst11)*(gconst21)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst6)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst23)*(gconst4)*(gconst9)))+(((gconst0)*(gconst13)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst24)*(gconst4)))+(((gconst14)*(gconst20)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst3)))+(((gconst16)*(gconst18)*(gconst4)*(gconst7)))+(((gconst12)*(gconst2)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst26)*(gconst7)))+(((gconst10)*(gconst22)*(gconst7)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst24)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst7)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst17)*(gconst4)))+(((gconst13)*(gconst18)*(gconst7)*(gconst8)))+(((gconst10)*(gconst13)*(gconst15)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst7)*(gconst8)))+(((gconst14)*(gconst2)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst26)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst27)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst4)*(gconst9)))+(((gconst0)*(gconst15)*(gconst26)*(gconst4)))+(((gconst15)*(gconst18)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst17)*(gconst5)))+(((gconst0)*(gconst13)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst22)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst7)))+(((gconst11)*(gconst27)*(gconst3)*(gconst5)))+(((gconst0)*(gconst16)*(gconst22)*(gconst7))));
op[6]=((((IkReal(-1.00000000000000))*(gconst26)*(x74)*(x77)))+(((x110)*(x86)))+(((x96)*(x97)))+(((x96)*(x99)))+(((x79)*(x80)))+(((IkReal(-1.00000000000000))*(gconst2)*(x81)*(x83)))+(((IkReal(-1.00000000000000))*(gconst13)*(x74)*(x81)))+(((x107)*(x98)))+(((x78)*(x88)))+(((gconst23)*(gconst9)*(x76)))+(((x100)*(x76)))+(((IkReal(-1.00000000000000))*(gconst23)*(x73)*(x77)))+(((IkReal(-1.00000000000000))*(gconst25)*(x67)*(x76)))+(((IkReal(-1.00000000000000))*(gconst22)*(x67)*(x74)))+(((IkReal(-1.00000000000000))*(gconst15)*(x76)*(x81)))+(((x78)*(x95)))+(((IkReal(-1.00000000000000))*(gconst9)*(x112)*(x77)))+(((IkReal(-1.00000000000000))*(gconst14)*(x102)*(x73)))+(((IkReal(-1.00000000000000))*(gconst4)*(x108)*(x67)))+(((gconst18)*(gconst8)*(x98)))+(((x103)*(x117)))+(((x69)*(x70)))+(((IkReal(-1.00000000000000))*(gconst5)*(x71)*(x73)))+(((IkReal(-1.00000000000000))*(gconst10)*(x102)*(x96)))+(((IkReal(-1.00000000000000))*(gconst20)*(x67)*(x68)))+(((x75)*(x76)))+(((IkReal(-1.00000000000000))*(gconst2)*(x68)*(x89)))+(((IkReal(-1.00000000000000))*(gconst10)*(x77)*(x78)))+(((IkReal(-1.00000000000000))*(gconst0)*(x102)*(x78)))+(((gconst21)*(gconst5)*(x80)))+(((x109)*(x69)))+(((IkReal(-1.00000000000000))*(gconst11)*(x68)*(x81)))+(((x116)*(x88)))+(((IkReal(-1.00000000000000))*(gconst4)*(x67)*(x87)))+(((IkReal(-1.00000000000000))*(gconst11)*(x67)*(x83)))+(((IkReal(-1.00000000000000))*(gconst5)*(x77)*(x84)))+(((IkReal(-1.00000000000000))*(gconst0)*(x75)*(x77)))+(((IkReal(-1.00000000000000))*(gconst0)*(x100)*(x77)))+(((gconst25)*(gconst4)*(x69)))+(((x101)*(x103)))+(((x101)*(x104)))+(((IkReal(-1.00000000000000))*(gconst15)*(x67)*(x88)))+(((IkReal(-1.00000000000000))*(gconst7)*(x67)*(x94)))+(((x110)*(x91)))+(((IkReal(-1.00000000000000))*(gconst15)*(x67)*(x95))));
op[7]=((((x101)*(x69)))+(((IkReal(-1.00000000000000))*(gconst0)*(x77)*(x78)))+(((x103)*(x98)))+(((x116)*(x76)))+(((IkReal(-1.00000000000000))*(gconst13)*(x67)*(x74)))+(((gconst12)*(gconst5)*(x80)))+(((IkReal(-1.00000000000000))*(gconst2)*(x68)*(x81)))+(((IkReal(-1.00000000000000))*(gconst11)*(x67)*(x68)))+(((x88)*(x96)))+(((IkReal(-1.00000000000000))*(gconst16)*(x74)*(x77)))+(((IkReal(-1.00000000000000))*(gconst14)*(x73)*(x77)))+(((IkReal(-1.00000000000000))*(gconst2)*(x67)*(x83)))+(((x76)*(x78)))+(((IkReal(-1.00000000000000))*(gconst15)*(x67)*(x76)))+(((IkReal(-1.00000000000000))*(gconst10)*(x77)*(x96)))+(((x117)*(x69)))+(((x104)*(x98)))+(((IkReal(-1.00000000000000))*(gconst5)*(x102)*(x73))));
op[8]=((((IkReal(-1.00000000000000))*(gconst5)*(x73)*(x77)))+(((IkReal(-1.00000000000000))*(gconst2)*(x67)*(x68)))+(((x69)*(x98)))+(((x76)*(x96)))+(((IkReal(-1.00000000000000))*(gconst4)*(x67)*(x74))));
polyroots8(op,zeror,numroots);
IkReal j15array[8], cj15array[8], sj15array[8], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((IkReal(2.00000000000000))*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[8]={true,true,true,true,true,true,true,true};
_nj15 = 8;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst44;
IkReal x123=((IkReal(4.00000000000000))*(sj17));
IkReal x124=((IkReal(0.800000000000000))*(sj17));
IkReal x125=((py)*(sj15));
IkReal x126=((cj15)*(px));
gconst44=IKsign(((((IkReal(-8.00000000000000))*(sj17)*(x125)*(x126)))+(((IkReal(-1.00000000000000))*(x123)*((x126)*(x126))))+(((IkReal(-1.00000000000000))*(x123)*((pz)*(pz))))+(((IkReal(-1.00000000000000))*(x123)*((x125)*(x125))))+(((x124)*(x125)))+(((x124)*(x126)))+(((IkReal(-0.0400000000000000))*(sj17)))));
IkReal x127=((IkReal(20.0000000000000))*(sj17));
IkReal x128=((cj15)*(px));
IkReal x129=((py)*(sj15));
IkReal x130=((IkReal(100.000000000000))*(sj17));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x130)*((pz)*(pz))))+(((IkReal(-200.000000000000))*(sj17)*(x128)*(x129)))+(((IkReal(-1.00000000000000))*(x130)*((x129)*(x129))))+(((IkReal(-1.00000000000000))*(sj17)))+(((IkReal(-1.00000000000000))*(x130)*((x128)*(x128))))+(((x127)*(x129)))+(((x127)*(x128))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x131=((IkReal(-1.00000000000000))*(cj15)*(py));
evalcond[0]=((((IkReal(2.00000000000000))*(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))))))))+(IKabs(px)));
evalcond[1]=x131;
evalcond[2]=x131;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x132=((py)*(sj15));
gconst47=IKsign(((IkReal(40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x132)))+(((IkReal(-321.000000000000))*(cj18)*(x132)))));
IkReal x133=((py)*(sj15));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-12.4610591900312))*(x133)))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(cj18)+(((IkReal(-10.0000000000000))*(cj18)*(x133))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj18)*(pz)))+(sj18)+(((IkReal(-10.0000000000000))*(py)*(sj15)*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x134=x131;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=x134;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x134;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x135=IKcos(j16);
IkReal x136=IKsin(j16);
IkReal x137=((py)*(sj15));
evalcond[0]=((IkReal(0.721000000000000))*(x136));
evalcond[1]=((IkReal(0.721000000000000))+(((IkReal(0.100000000000000))*(x135)))+(((IkReal(-1.00000000000000))*(x135)*(x137))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x135)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x137)))+(((IkReal(0.800000000000000))*(x135)*(x137))));
evalcond[3]=((((x136)*(x137)))+(((IkReal(-0.100000000000000))*(x136))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x712=x131;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=x712;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x712;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x713=IKcos(j16);
IkReal x714=IKsin(j16);
IkReal x715=((py)*(sj15));
evalcond[0]=((IkReal(0.0790000000000000))*(x714));
evalcond[1]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x713)))+(((IkReal(-1.00000000000000))*(x713)*(x715))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x713)*(x715)))+(((IkReal(0.200000000000000))*(x715)))+(((IkReal(-0.0800000000000000))*(x713))));
evalcond[3]=((((IkReal(-0.100000000000000))*(x714)))+(((x714)*(x715))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x716=((cj18)*(pz));
IkReal x717=((py)*(sj15)*(sj18));
if( IKabs(((((IKabs(((((IkReal(321000.000000000))*(x716)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x717))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x716)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x717)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(x717)))+(((IkReal(321.000000000000))*(x716)))+(((IkReal(400.000000000000))*(pz))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(x717)))+(((IkReal(321.000000000000))*(x716)))+(((IkReal(400.000000000000))*(pz)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(321000.000000000))*(x716)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x717))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x716)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x717)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(x717)))+(((IkReal(321.000000000000))*(x716)))+(((IkReal(400.000000000000))*(pz))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(x717)))+(((IkReal(321.000000000000))*(x716)))+(((IkReal(400.000000000000))*(pz)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(321000.000000000))*(x716)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x717))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x716)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x717)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(x717)))+(((IkReal(321.000000000000))*(x716)))+(((IkReal(400.000000000000))*(pz))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(x717)))+(((IkReal(321.000000000000))*(x716)))+(((IkReal(400.000000000000))*(pz)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x718=IKsin(j16);
IkReal x719=IKcos(j16);
IkReal x720=((IkReal(0.321000000000000))*(sj18));
IkReal x721=((py)*(sj15));
IkReal x722=((IkReal(0.321000000000000))*(cj18));
IkReal x723=((pz)*(x718));
evalcond[0]=((((IkReal(0.400000000000000))*(x718)))+(pz)+(((x718)*(x722)))+(((x719)*(x720))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x719)))+(x722)+(x723)+(((IkReal(-1.00000000000000))*(x719)*(x721))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(x721)))+(((x719)*(x722)))+(((IkReal(-1.00000000000000))*(x718)*(x720))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(x723)))+(((IkReal(0.800000000000000))*(x719)*(x721)))+(((IkReal(0.200000000000000))*(x721)))+(((IkReal(-0.0800000000000000))*(x719))));
evalcond[4]=((((IkReal(-0.100000000000000))*(x718)))+(((x718)*(x721)))+(x720)+(((pz)*(x719))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
Atan2Value<IkReal> x724 = IKatan2WithCheck(((gconst47)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))),((gconst47)*(((IkReal(-160.000000000000))+(((IkReal(-256.800000000000))*(cj18)))+(((IkReal(1000.00000000000))*((pz)*(pz))))+(((IkReal(-103.041000000000))*((cj18)*(cj18))))))),IKFAST_ATAN2_MAGTHRESH);
if( !x724.valid ) {
    continue;
}
j16array[0]=x724.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x725=IKsin(j16);
IkReal x726=IKcos(j16);
IkReal x727=((IkReal(0.321000000000000))*(sj18));
IkReal x728=((py)*(sj15));
IkReal x729=((IkReal(0.321000000000000))*(cj18));
IkReal x730=((pz)*(x725));
evalcond[0]=((((x726)*(x727)))+(pz)+(((x725)*(x729)))+(((IkReal(0.400000000000000))*(x725))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x726)))+(x730)+(x729)+(((IkReal(-1.00000000000000))*(x726)*(x728))));
evalcond[2]=((IkReal(0.100000000000000))+(((x726)*(x729)))+(((IkReal(-1.00000000000000))*(x725)*(x727)))+(((IkReal(-1.00000000000000))*(x728)))+(((IkReal(0.400000000000000))*(x726))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(x730)))+(((IkReal(0.800000000000000))*(x726)*(x728)))+(((IkReal(0.200000000000000))*(x728))));
evalcond[4]=((((IkReal(-0.100000000000000))*(x725)))+(((x725)*(x728)))+(x727)+(((pz)*(x726))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x731=((IkReal(-1.00000000000000))*(cj15)*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(px))))));
evalcond[1]=x731;
evalcond[2]=x731;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst48;
IkReal x732=((py)*(sj15));
gconst48=IKsign(((IkReal(40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x732)))+(((IkReal(-321.000000000000))*(cj18)*(x732)))));
IkReal x733=((py)*(sj15));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(-12.4610591900312))*(x733)))+(cj18)+(((IkReal(-10.0000000000000))*(cj18)*(x733))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj18)*(pz)))+(sj18)+(((IkReal(-10.0000000000000))*(py)*(sj15)*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x734=x731;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=x734;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x734;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x735=IKcos(j16);
IkReal x736=IKsin(j16);
IkReal x737=((py)*(sj15));
evalcond[0]=((IkReal(0.721000000000000))*(x736));
evalcond[1]=((IkReal(0.721000000000000))+(((IkReal(-1.00000000000000))*(x735)*(x737)))+(((IkReal(0.100000000000000))*(x735))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x735)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x735)*(x737)))+(((IkReal(0.200000000000000))*(x737))));
evalcond[3]=((((IkReal(-0.100000000000000))*(x736)))+(((x736)*(x737))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x738=x731;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=x738;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x738;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x739=IKcos(j16);
IkReal x740=IKsin(j16);
IkReal x741=((py)*(sj15));
evalcond[0]=((IkReal(0.0790000000000000))*(x740));
evalcond[1]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x739)))+(((IkReal(-1.00000000000000))*(x739)*(x741))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x739)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x741)))+(((IkReal(0.800000000000000))*(x739)*(x741))));
evalcond[3]=((((x740)*(x741)))+(((IkReal(-0.100000000000000))*(x740))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x742=((cj18)*(pz));
IkReal x743=((py)*(sj15)*(sj18));
if( IKabs(((((IKabs(((((IkReal(321000.000000000))*(x742)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x743))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x742)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x743)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-321.000000000000))*(x743)))+(((IkReal(321.000000000000))*(x742))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-321.000000000000))*(x743)))+(((IkReal(321.000000000000))*(x742)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(321000.000000000))*(x742)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x743))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x742)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x743)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-321.000000000000))*(x743)))+(((IkReal(321.000000000000))*(x742))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-321.000000000000))*(x743)))+(((IkReal(321.000000000000))*(x742)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(321000.000000000))*(x742)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x743))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x742)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-321000.000000000))*(x743)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-321.000000000000))*(x743)))+(((IkReal(321.000000000000))*(x742))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-321.000000000000))*(x743)))+(((IkReal(321.000000000000))*(x742)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x744=IKsin(j16);
IkReal x745=IKcos(j16);
IkReal x746=((IkReal(0.321000000000000))*(sj18));
IkReal x747=((py)*(sj15));
IkReal x748=((IkReal(0.321000000000000))*(cj18));
IkReal x749=((pz)*(x744));
evalcond[0]=((((x745)*(x746)))+(((x744)*(x748)))+(pz)+(((IkReal(0.400000000000000))*(x744))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x745)*(x747)))+(((IkReal(0.100000000000000))*(x745)))+(x748)+(x749));
evalcond[2]=((IkReal(0.100000000000000))+(((x745)*(x748)))+(((IkReal(-1.00000000000000))*(x744)*(x746)))+(((IkReal(-1.00000000000000))*(x747)))+(((IkReal(0.400000000000000))*(x745))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x745)*(x747)))+(((IkReal(-0.0800000000000000))*(x745)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x747)))+(((IkReal(-0.800000000000000))*(x749))));
evalcond[4]=((((x744)*(x747)))+(x746)+(((IkReal(-0.100000000000000))*(x744)))+(((pz)*(x745))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
Atan2Value<IkReal> x750 = IKatan2WithCheck(((gconst48)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))),((gconst48)*(((IkReal(-160.000000000000))+(((IkReal(-256.800000000000))*(cj18)))+(((IkReal(1000.00000000000))*((pz)*(pz))))+(((IkReal(-103.041000000000))*((cj18)*(cj18))))))),IKFAST_ATAN2_MAGTHRESH);
if( !x750.valid ) {
    continue;
}
j16array[0]=x750.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x751=IKsin(j16);
IkReal x752=IKcos(j16);
IkReal x753=((IkReal(0.321000000000000))*(sj18));
IkReal x754=((py)*(sj15));
IkReal x755=((IkReal(0.321000000000000))*(cj18));
IkReal x756=((pz)*(x751));
evalcond[0]=((((x752)*(x753)))+(((x751)*(x755)))+(pz)+(((IkReal(0.400000000000000))*(x751))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x752)*(x754)))+(((IkReal(0.100000000000000))*(x752)))+(x755)+(x756));
evalcond[2]=((IkReal(0.100000000000000))+(((x752)*(x755)))+(((IkReal(-1.00000000000000))*(x751)*(x753)))+(((IkReal(-1.00000000000000))*(x754)))+(((IkReal(0.400000000000000))*(x752))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x752)*(x754)))+(((IkReal(-0.0800000000000000))*(x752)))+(((IkReal(0.200000000000000))*(x754)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(x756))));
evalcond[4]=((((pz)*(x752)))+(((x751)*(x754)))+(((IkReal(-0.100000000000000))*(x751)))+(x753));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x757=((px)*(sj15));
evalcond[0]=((((IkReal(2.00000000000000))*(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))))))))+(IKabs(py)));
evalcond[1]=x757;
evalcond[2]=x757;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x758=((cj15)*(px));
gconst49=IKsign(((IkReal(40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(-321.000000000000))*(cj18)*(x758)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x758)))));
IkReal x759=((cj15)*(px));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(-10.0000000000000))*(cj18)*(x759)))+(((IkReal(-12.4610591900312))*(x759)))+(cj18));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj18)*(pz)))+(sj18)+(((IkReal(-10.0000000000000))*(cj15)*(px)*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x760=((px)*(sj15));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=x760;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x760;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x761=IKcos(j16);
IkReal x762=IKsin(j16);
IkReal x763=((cj15)*(px));
evalcond[0]=((IkReal(0.721000000000000))*(x762));
evalcond[1]=((IkReal(0.721000000000000))+(((IkReal(-1.00000000000000))*(x761)*(x763)))+(((IkReal(0.100000000000000))*(x761))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x761)))+(((IkReal(0.800000000000000))*(x761)*(x763)))+(((IkReal(0.200000000000000))*(x763)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((((IkReal(-0.100000000000000))*(x762)))+(((x762)*(x763))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x764=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=x764;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x764;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x765=IKcos(j16);
IkReal x766=IKsin(j16);
IkReal x767=((cj15)*(px));
evalcond[0]=((IkReal(0.0790000000000000))*(x766));
evalcond[1]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x765)))+(((IkReal(-1.00000000000000))*(x765)*(x767))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x765)))+(((IkReal(0.200000000000000))*(x767)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x765)*(x767))));
evalcond[3]=((((IkReal(-0.100000000000000))*(x766)))+(((x766)*(x767))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x768=((cj15)*(px));
IkReal x769=((cj18)*(pz));
if( IKabs(((((IKabs(((((IkReal(-321000.000000000))*(sj18)*(x768)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(321000.000000000))*(x769))))) != 0)?((IkReal)1/(((((IkReal(-321000.000000000))*(sj18)*(x768)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(321000.000000000))*(x769)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x769)))+(((IkReal(-321.000000000000))*(sj18)*(x768))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x769)))+(((IkReal(-321.000000000000))*(sj18)*(x768)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x768)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-321000.000000000))*(sj18)*(x768)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(321000.000000000))*(x769))))) != 0)?((IkReal)1/(((((IkReal(-321000.000000000))*(sj18)*(x768)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(321000.000000000))*(x769)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x769)))+(((IkReal(-321.000000000000))*(sj18)*(x768))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x769)))+(((IkReal(-321.000000000000))*(sj18)*(x768)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x768)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(-321000.000000000))*(sj18)*(x768)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(321000.000000000))*(x769))))) != 0)?((IkReal)1/(((((IkReal(-321000.000000000))*(sj18)*(x768)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(321000.000000000))*(x769)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x769)))+(((IkReal(-321.000000000000))*(sj18)*(x768))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x769)))+(((IkReal(-321.000000000000))*(sj18)*(x768)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x768)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x770=IKsin(j16);
IkReal x771=IKcos(j16);
IkReal x772=((cj15)*(px));
IkReal x773=((IkReal(0.321000000000000))*(sj18));
IkReal x774=((IkReal(0.321000000000000))*(cj18));
IkReal x775=((pz)*(x770));
evalcond[0]=((((x771)*(x773)))+(((x770)*(x774)))+(pz)+(((IkReal(0.400000000000000))*(x770))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x771)*(x772)))+(((IkReal(0.100000000000000))*(x771)))+(x775)+(x774));
evalcond[2]=((IkReal(0.100000000000000))+(((x771)*(x774)))+(((IkReal(0.400000000000000))*(x771)))+(((IkReal(-1.00000000000000))*(x772)))+(((IkReal(-1.00000000000000))*(x770)*(x773))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x771)))+(((IkReal(0.800000000000000))*(x771)*(x772)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x772)))+(((IkReal(-0.800000000000000))*(x775))));
evalcond[4]=((((pz)*(x771)))+(((x770)*(x772)))+(x773)+(((IkReal(-0.100000000000000))*(x770))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
Atan2Value<IkReal> x776 = IKatan2WithCheck(((gconst49)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(cj15)*(px)*(pz)))))),((gconst49)*(((IkReal(-160.000000000000))+(((IkReal(-256.800000000000))*(cj18)))+(((IkReal(1000.00000000000))*((pz)*(pz))))+(((IkReal(-103.041000000000))*((cj18)*(cj18))))))),IKFAST_ATAN2_MAGTHRESH);
if( !x776.valid ) {
    continue;
}
j16array[0]=x776.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x777=IKsin(j16);
IkReal x778=IKcos(j16);
IkReal x779=((cj15)*(px));
IkReal x780=((IkReal(0.321000000000000))*(sj18));
IkReal x781=((IkReal(0.321000000000000))*(cj18));
IkReal x782=((pz)*(x777));
evalcond[0]=((((x778)*(x780)))+(pz)+(((IkReal(0.400000000000000))*(x777)))+(((x777)*(x781))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x778)))+(((IkReal(-1.00000000000000))*(x778)*(x779)))+(x782)+(x781));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x777)*(x780)))+(((x778)*(x781)))+(((IkReal(0.400000000000000))*(x778)))+(((IkReal(-1.00000000000000))*(x779))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x782)))+(((IkReal(-0.0800000000000000))*(x778)))+(((IkReal(0.800000000000000))*(x778)*(x779)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x779))));
evalcond[4]=((((pz)*(x778)))+(((x777)*(x779)))+(x780)+(((IkReal(-0.100000000000000))*(x777))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x783=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(py))))));
evalcond[1]=x783;
evalcond[2]=x783;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst50;
IkReal x784=((cj15)*(px));
gconst50=IKsign(((IkReal(40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x784)))+(((IkReal(-321.000000000000))*(cj18)*(x784)))));
IkReal x785=((cj15)*(px));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-12.4610591900312))*(x785)))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(cj18)+(((IkReal(-10.0000000000000))*(cj18)*(x785))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj18)*(pz)))+(sj18)+(((IkReal(-10.0000000000000))*(cj15)*(px)*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x786=((px)*(sj15));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=x786;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x786;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x787=IKcos(j16);
IkReal x788=IKsin(j16);
IkReal x789=((cj15)*(px));
evalcond[0]=((IkReal(0.721000000000000))*(x788));
evalcond[1]=((IkReal(0.721000000000000))+(((IkReal(0.100000000000000))*(x787)))+(((IkReal(-1.00000000000000))*(x787)*(x789))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x787)*(x789)))+(((IkReal(-0.0800000000000000))*(x787)))+(((IkReal(0.200000000000000))*(x789)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((((x788)*(x789)))+(((IkReal(-0.100000000000000))*(x788))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x790=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=x790;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x790;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x791=IKcos(j16);
IkReal x792=IKsin(j16);
IkReal x793=((cj15)*(px));
evalcond[0]=((IkReal(0.0790000000000000))*(x792));
evalcond[1]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x791)))+(((IkReal(-1.00000000000000))*(x791)*(x793))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x791)))+(((IkReal(0.800000000000000))*(x791)*(x793)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x793))));
evalcond[3]=((((IkReal(-0.100000000000000))*(x792)))+(((x792)*(x793))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x794=((cj15)*(px));
IkReal x795=((cj18)*(pz));
if( IKabs(((((IKabs(((((IkReal(-321000.000000000))*(sj18)*(x794)))+(((IkReal(321000.000000000))*(x795)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(-321000.000000000))*(sj18)*(x794)))+(((IkReal(321000.000000000))*(x795)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(sj18)*(x794)))+(((IkReal(321.000000000000))*(x795)))+(((IkReal(400.000000000000))*(pz))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(sj18)*(x794)))+(((IkReal(321.000000000000))*(x795)))+(((IkReal(400.000000000000))*(pz)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x794))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-321000.000000000))*(sj18)*(x794)))+(((IkReal(321000.000000000))*(x795)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(-321000.000000000))*(sj18)*(x794)))+(((IkReal(321000.000000000))*(x795)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(sj18)*(x794)))+(((IkReal(321.000000000000))*(x795)))+(((IkReal(400.000000000000))*(pz))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(sj18)*(x794)))+(((IkReal(321.000000000000))*(x795)))+(((IkReal(400.000000000000))*(pz)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x794)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(-321000.000000000))*(sj18)*(x794)))+(((IkReal(321000.000000000))*(x795)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(-321000.000000000))*(sj18)*(x794)))+(((IkReal(321000.000000000))*(x795)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(sj18)*(x794)))+(((IkReal(321.000000000000))*(x795)))+(((IkReal(400.000000000000))*(pz))))) != 0)?((IkReal)1/(((((IkReal(32.1000000000000))*(sj18)))+(((IkReal(-321.000000000000))*(sj18)*(x794)))+(((IkReal(321.000000000000))*(x795)))+(((IkReal(400.000000000000))*(pz)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x794)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x796=IKsin(j16);
IkReal x797=IKcos(j16);
IkReal x798=((cj15)*(px));
IkReal x799=((IkReal(0.321000000000000))*(sj18));
IkReal x800=((IkReal(0.321000000000000))*(cj18));
IkReal x801=((pz)*(x796));
evalcond[0]=((pz)+(((IkReal(0.400000000000000))*(x796)))+(((x797)*(x799)))+(((x796)*(x800))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x797)))+(((IkReal(-1.00000000000000))*(x797)*(x798)))+(x801)+(x800));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x796)*(x799)))+(((x797)*(x800)))+(((IkReal(-1.00000000000000))*(x798)))+(((IkReal(0.400000000000000))*(x797))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x797)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x798)))+(((IkReal(0.800000000000000))*(x797)*(x798)))+(((IkReal(-0.800000000000000))*(x801))));
evalcond[4]=((((x796)*(x798)))+(((pz)*(x797)))+(((IkReal(-0.100000000000000))*(x796)))+(x799));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
Atan2Value<IkReal> x802 = IKatan2WithCheck(((gconst50)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(cj15)*(px)*(pz)))))),((gconst50)*(((IkReal(-160.000000000000))+(((IkReal(-256.800000000000))*(cj18)))+(((IkReal(1000.00000000000))*((pz)*(pz))))+(((IkReal(-103.041000000000))*((cj18)*(cj18))))))),IKFAST_ATAN2_MAGTHRESH);
if( !x802.valid ) {
    continue;
}
j16array[0]=x802.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x803=IKsin(j16);
IkReal x804=IKcos(j16);
IkReal x805=((cj15)*(px));
IkReal x806=((IkReal(0.321000000000000))*(sj18));
IkReal x807=((IkReal(0.321000000000000))*(cj18));
IkReal x808=((pz)*(x803));
evalcond[0]=((((x804)*(x806)))+(((x803)*(x807)))+(pz)+(((IkReal(0.400000000000000))*(x803))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x804)))+(((IkReal(-1.00000000000000))*(x804)*(x805)))+(x808)+(x807));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x805)))+(((x804)*(x807)))+(((IkReal(-1.00000000000000))*(x803)*(x806)))+(((IkReal(0.400000000000000))*(x804))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x805)))+(((IkReal(-0.0800000000000000))*(x804)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x804)*(x805)))+(((IkReal(-0.800000000000000))*(x808))));
evalcond[4]=((((IkReal(-0.100000000000000))*(x803)))+(((x803)*(x805)))+(((pz)*(x804)))+(x806));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x809=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((((IkReal(2.00000000000000))*(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))))))))+(IKabs(pz)));
evalcond[1]=x809;
evalcond[2]=x809;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign(((IkReal(160000.000000000))+(((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(256800.000000000))*(cj18)))+(((IkReal(103041.000000000))*((cj18)*(cj18))))));
dummyeval[0]=((IkReal(1.55277996137460))+(((IkReal(2.49221183800623))*(cj18)))+((sj18)*(sj18))+((cj18)*(cj18)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(py)*(sj15)))+(((IkReal(10.0000000000000))*(cj15)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(py)*(sj15)))+(((IkReal(10.0000000000000))*(cj15)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x810=((py)*(sj15));
IkReal x811=((cj15)*(px));
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x811)))+(((IkReal(1000.00000000000))*(x810))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x811)))+(((IkReal(1000.00000000000))*(x810)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x810)))+(((IkReal(-1.00000000000000))*(x811))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x810)))+(((IkReal(-1.00000000000000))*(x811)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x811)))+(((IkReal(1000.00000000000))*(x810))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x811)))+(((IkReal(1000.00000000000))*(x810)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x810)))+(((IkReal(-1.00000000000000))*(x811))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x810)))+(((IkReal(-1.00000000000000))*(x811)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x811)))+(((IkReal(1000.00000000000))*(x810))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x811)))+(((IkReal(1000.00000000000))*(x810)))))):(IkReal)1.0e30))), ((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x810)))+(((IkReal(-1.00000000000000))*(x811))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x810)))+(((IkReal(-1.00000000000000))*(x811)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x812=IKsin(j16);
IkReal x813=IKcos(j16);
IkReal x814=((IkReal(0.321000000000000))*(sj18));
IkReal x815=((cj15)*(px));
IkReal x816=((IkReal(0.321000000000000))*(cj18));
IkReal x817=((py)*(sj15));
IkReal x818=((IkReal(0.800000000000000))*(x813));
IkReal x819=((IkReal(1.00000000000000))*(x813));
evalcond[0]=((((x812)*(x816)))+(((x813)*(x814)))+(((IkReal(0.400000000000000))*(x812))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x817)*(x819)))+(((IkReal(-1.00000000000000))*(x815)*(x819)))+(x816)+(((IkReal(0.100000000000000))*(x813))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x812)*(x814)))+(((x813)*(x816)))+(((IkReal(0.400000000000000))*(x813)))+(((IkReal(-1.00000000000000))*(x817)))+(((IkReal(-1.00000000000000))*(x815))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x815)*(x818)))+(((IkReal(-1.00000000000000))*(pp)))+(((x817)*(x818)))+(((IkReal(0.200000000000000))*(x817)))+(((IkReal(0.200000000000000))*(x815)))+(((IkReal(-0.0800000000000000))*(x813))));
evalcond[4]=((((x812)*(x817)))+(((x812)*(x815)))+(x814)+(((IkReal(-0.100000000000000))*(x812))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x820=((py)*(sj15));
IkReal x821=((cj15)*(px));
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x820)))+(((IkReal(1000.00000000000))*(x821))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x820)))+(((IkReal(1000.00000000000))*(x821)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((IkReal(-0.100000000000000))+(x821)+(x820))) != 0)?((IkReal)1/(((IkReal(-0.100000000000000))+(x821)+(x820)))):(IkReal)1.0e30))*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x820)))+(((IkReal(1000.00000000000))*(x821))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x820)))+(((IkReal(1000.00000000000))*(x821)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((IkReal(-0.100000000000000))+(x821)+(x820))) != 0)?((IkReal)1/(((IkReal(-0.100000000000000))+(x821)+(x820)))):(IkReal)1.0e30))*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x820)))+(((IkReal(1000.00000000000))*(x821))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x820)))+(((IkReal(1000.00000000000))*(x821)))))):(IkReal)1.0e30))), ((((IKabs(((IkReal(-0.100000000000000))+(x821)+(x820))) != 0)?((IkReal)1/(((IkReal(-0.100000000000000))+(x821)+(x820)))):(IkReal)1.0e30))*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x822=IKsin(j16);
IkReal x823=IKcos(j16);
IkReal x824=((IkReal(0.321000000000000))*(sj18));
IkReal x825=((cj15)*(px));
IkReal x826=((IkReal(0.321000000000000))*(cj18));
IkReal x827=((py)*(sj15));
IkReal x828=((IkReal(0.800000000000000))*(x823));
IkReal x829=((IkReal(1.00000000000000))*(x823));
evalcond[0]=((((IkReal(0.400000000000000))*(x822)))+(((x822)*(x826)))+(((x823)*(x824))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x823)))+(((IkReal(-1.00000000000000))*(x827)*(x829)))+(x826)+(((IkReal(-1.00000000000000))*(x825)*(x829))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x822)*(x824)))+(((IkReal(0.400000000000000))*(x823)))+(((IkReal(-1.00000000000000))*(x825)))+(((IkReal(-1.00000000000000))*(x827)))+(((x823)*(x826))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x823)))+(((x825)*(x828)))+(((IkReal(-1.00000000000000))*(pp)))+(((x827)*(x828)))+(((IkReal(0.200000000000000))*(x827)))+(((IkReal(0.200000000000000))*(x825))));
evalcond[4]=((((IkReal(-0.100000000000000))*(x822)))+(((x822)*(x827)))+(((x822)*(x825)))+(x824));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x830=((IkReal(321000.000000000))*(py)*(sj15));
IkReal x831=((IkReal(321000.000000000))*(cj15)*(px));
Atan2Value<IkReal> x832 = IKatan2WithCheck(((gconst51)*(((((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(sj18)*(x831)))+(((IkReal(-1.00000000000000))*(sj18)*(x830)))))),((gconst51)*(((IkReal(-40000.0000000000))+(((cj18)*(x831)))+(((cj18)*(x830)))+(((IkReal(-32100.0000000000))*(cj18)))+(((IkReal(400000.000000000))*(cj15)*(px)))+(((IkReal(400000.000000000))*(py)*(sj15)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x832.valid ) {
    continue;
}
j16array[0]=x832.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x833=IKsin(j16);
IkReal x834=IKcos(j16);
IkReal x835=((IkReal(0.321000000000000))*(sj18));
IkReal x836=((cj15)*(px));
IkReal x837=((IkReal(0.321000000000000))*(cj18));
IkReal x838=((py)*(sj15));
IkReal x839=((IkReal(0.800000000000000))*(x834));
IkReal x840=((IkReal(1.00000000000000))*(x834));
evalcond[0]=((((IkReal(0.400000000000000))*(x833)))+(((x833)*(x837)))+(((x834)*(x835))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x836)*(x840)))+(((IkReal(0.100000000000000))*(x834)))+(((IkReal(-1.00000000000000))*(x838)*(x840)))+(x837));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x834)))+(((IkReal(-1.00000000000000))*(x833)*(x835)))+(((x834)*(x837)))+(((IkReal(-1.00000000000000))*(x836)))+(((IkReal(-1.00000000000000))*(x838))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x838)*(x839)))+(((IkReal(-0.0800000000000000))*(x834)))+(((x836)*(x839)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x838)))+(((IkReal(0.200000000000000))*(x836))));
evalcond[4]=((((x833)*(x836)))+(((x833)*(x838)))+(((IkReal(-0.100000000000000))*(x833)))+(x835));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x841=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(pz)))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=x841;
evalcond[2]=x841;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((IkReal(160000.000000000))+(((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(256800.000000000))*(cj18)))+(((IkReal(103041.000000000))*((cj18)*(cj18))))));
dummyeval[0]=((IkReal(1.55277996137460))+(((IkReal(2.49221183800623))*(cj18)))+((sj18)*(sj18))+((cj18)*(cj18)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(py)*(sj15)))+(((IkReal(10.0000000000000))*(cj15)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(py)*(sj15)))+(((IkReal(10.0000000000000))*(cj15)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x842=((py)*(sj15));
IkReal x843=((cj15)*(px));
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x842)))+(((IkReal(1000.00000000000))*(x843))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x842)))+(((IkReal(1000.00000000000))*(x843)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x842)))+(((IkReal(-1.00000000000000))*(x843))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x842)))+(((IkReal(-1.00000000000000))*(x843)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x842)))+(((IkReal(1000.00000000000))*(x843))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x842)))+(((IkReal(1000.00000000000))*(x843)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x842)))+(((IkReal(-1.00000000000000))*(x843))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x842)))+(((IkReal(-1.00000000000000))*(x843)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x842)))+(((IkReal(1000.00000000000))*(x843))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x842)))+(((IkReal(1000.00000000000))*(x843)))))):(IkReal)1.0e30))), ((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x842)))+(((IkReal(-1.00000000000000))*(x843))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x842)))+(((IkReal(-1.00000000000000))*(x843)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x844=IKsin(j16);
IkReal x845=IKcos(j16);
IkReal x846=((IkReal(0.321000000000000))*(sj18));
IkReal x847=((cj15)*(px));
IkReal x848=((IkReal(0.321000000000000))*(cj18));
IkReal x849=((py)*(sj15));
IkReal x850=((IkReal(0.800000000000000))*(x845));
IkReal x851=((IkReal(1.00000000000000))*(x845));
evalcond[0]=((((IkReal(0.400000000000000))*(x844)))+(((x845)*(x846)))+(((x844)*(x848))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x849)*(x851)))+(((IkReal(-1.00000000000000))*(x847)*(x851)))+(((IkReal(0.100000000000000))*(x845)))+(x848));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x845)))+(((IkReal(-1.00000000000000))*(x844)*(x846)))+(((x845)*(x848)))+(((IkReal(-1.00000000000000))*(x849)))+(((IkReal(-1.00000000000000))*(x847))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x845)))+(((x847)*(x850)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x847)))+(((IkReal(0.200000000000000))*(x849)))+(((x849)*(x850))));
evalcond[4]=((((IkReal(-0.100000000000000))*(x844)))+(x846)+(((x844)*(x849)))+(((x844)*(x847))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x852=((py)*(sj15));
IkReal x853=((cj15)*(px));
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x853)))+(((IkReal(1000.00000000000))*(x852))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x853)))+(((IkReal(1000.00000000000))*(x852)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((IkReal(-0.100000000000000))+(x852)+(x853))) != 0)?((IkReal)1/(((IkReal(-0.100000000000000))+(x852)+(x853)))):(IkReal)1.0e30))*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x853)))+(((IkReal(1000.00000000000))*(x852))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x853)))+(((IkReal(1000.00000000000))*(x852)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((IkReal(-0.100000000000000))+(x852)+(x853))) != 0)?((IkReal)1/(((IkReal(-0.100000000000000))+(x852)+(x853)))):(IkReal)1.0e30))*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x853)))+(((IkReal(1000.00000000000))*(x852))))) != 0)?((IkReal)1/(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x853)))+(((IkReal(1000.00000000000))*(x852)))))):(IkReal)1.0e30))), ((((IKabs(((IkReal(-0.100000000000000))+(x852)+(x853))) != 0)?((IkReal)1/(((IkReal(-0.100000000000000))+(x852)+(x853)))):(IkReal)1.0e30))*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x854=IKsin(j16);
IkReal x855=IKcos(j16);
IkReal x856=((IkReal(0.321000000000000))*(sj18));
IkReal x857=((cj15)*(px));
IkReal x858=((IkReal(0.321000000000000))*(cj18));
IkReal x859=((py)*(sj15));
IkReal x860=((IkReal(0.800000000000000))*(x855));
IkReal x861=((IkReal(1.00000000000000))*(x855));
evalcond[0]=((((x855)*(x856)))+(((x854)*(x858)))+(((IkReal(0.400000000000000))*(x854))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x855)))+(((IkReal(-1.00000000000000))*(x859)*(x861)))+(x858)+(((IkReal(-1.00000000000000))*(x857)*(x861))));
evalcond[2]=((IkReal(0.100000000000000))+(((x855)*(x858)))+(((IkReal(-1.00000000000000))*(x857)))+(((IkReal(-1.00000000000000))*(x859)))+(((IkReal(0.400000000000000))*(x855)))+(((IkReal(-1.00000000000000))*(x854)*(x856))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x859)*(x860)))+(((IkReal(-0.0800000000000000))*(x855)))+(((x857)*(x860)))+(((IkReal(0.200000000000000))*(x857)))+(((IkReal(0.200000000000000))*(x859))));
evalcond[4]=((((IkReal(-0.100000000000000))*(x854)))+(((x854)*(x857)))+(((x854)*(x859)))+(x856));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x862=((IkReal(321000.000000000))*(py)*(sj15));
IkReal x863=((IkReal(321000.000000000))*(cj15)*(px));
Atan2Value<IkReal> x864 = IKatan2WithCheck(((gconst52)*(((((IkReal(-1.00000000000000))*(sj18)*(x863)))+(((IkReal(-1.00000000000000))*(sj18)*(x862)))+(((IkReal(32100.0000000000))*(sj18)))))),((gconst52)*(((IkReal(-40000.0000000000))+(((IkReal(-32100.0000000000))*(cj18)))+(((IkReal(400000.000000000))*(cj15)*(px)))+(((IkReal(400000.000000000))*(py)*(sj15)))+(((cj18)*(x862)))+(((cj18)*(x863)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x864.valid ) {
    continue;
}
j16array[0]=x864.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x865=IKsin(j16);
IkReal x866=IKcos(j16);
IkReal x867=((IkReal(0.321000000000000))*(sj18));
IkReal x868=((cj15)*(px));
IkReal x869=((IkReal(0.321000000000000))*(cj18));
IkReal x870=((py)*(sj15));
IkReal x871=((IkReal(0.800000000000000))*(x866));
IkReal x872=((IkReal(1.00000000000000))*(x866));
evalcond[0]=((((x866)*(x867)))+(((IkReal(0.400000000000000))*(x865)))+(((x865)*(x869))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x868)*(x872)))+(((IkReal(0.100000000000000))*(x866)))+(((IkReal(-1.00000000000000))*(x870)*(x872)))+(x869));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x865)*(x867)))+(((IkReal(-1.00000000000000))*(x868)))+(((IkReal(-1.00000000000000))*(x870)))+(((x866)*(x869)))+(((IkReal(0.400000000000000))*(x866))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x870)))+(((x868)*(x871)))+(((x870)*(x871)))+(((IkReal(0.200000000000000))*(x868)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x866))));
evalcond[4]=((((IkReal(-0.100000000000000))*(x865)))+(x867)+(((x865)*(x868)))+(((x865)*(x870))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x873=((cj15)*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-1.00000000000000))*(x873));
evalcond[2]=x873;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst53;
IkReal x874=((py)*(sj15));
gconst53=IKsign(((IkReal(-40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(321.000000000000))*(cj18)*(x874)))+(((IkReal(-32.1000000000000))*(cj18)))+(((IkReal(400.000000000000))*(x874)))));
IkReal x875=((py)*(sj15));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(12.4610591900312))*(x875)))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(10.0000000000000))*(cj18)*(x875)))+(((IkReal(-1.00000000000000))*(cj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj18)*(pz)))+(((IkReal(-1.00000000000000))*(sj18)))+(((IkReal(10.0000000000000))*(py)*(sj15)*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x876=((cj15)*(py));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-1.00000000000000))*(x876));
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x876;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x877=IKcos(j16);
IkReal x878=IKsin(j16);
IkReal x879=((py)*(sj15));
IkReal x880=((IkReal(1.00000000000000))*(x879));
evalcond[0]=((IkReal(0.721000000000000))*(x878));
evalcond[1]=((IkReal(0.721000000000000))+(((IkReal(0.100000000000000))*(x877)))+(((IkReal(-1.00000000000000))*(x877)*(x880))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x877)*(x879)))+(((IkReal(0.200000000000000))*(x879)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x877))));
evalcond[3]=((((IkReal(0.100000000000000))*(x878)))+(((IkReal(-1.00000000000000))*(x878)*(x880))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x881=((cj15)*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(-1.00000000000000))*(x881));
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x881;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x882=IKcos(j16);
IkReal x883=IKsin(j16);
IkReal x884=((py)*(sj15));
IkReal x885=((IkReal(1.00000000000000))*(x884));
evalcond[0]=((IkReal(0.0790000000000000))*(x883));
evalcond[1]=((IkReal(0.0790000000000000))+(((IkReal(-1.00000000000000))*(x882)*(x885)))+(((IkReal(0.100000000000000))*(x882))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x882)*(x884)))+(((IkReal(0.200000000000000))*(x884)))+(((IkReal(-0.0800000000000000))*(x882))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x883)*(x885)))+(((IkReal(0.100000000000000))*(x883))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x886=((cj18)*(pz));
IkReal x887=((py)*(sj15)*(sj18));
if( IKabs(((((IKabs(((((IkReal(321000.000000000))*(x886)))+(((IkReal(321000.000000000))*(x887)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x886)))+(((IkReal(321000.000000000))*(x887)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x887)))+(((IkReal(321.000000000000))*(x886))))) != 0)?((IkReal)1/(((((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x887)))+(((IkReal(321.000000000000))*(x886)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(321000.000000000))*(x886)))+(((IkReal(321000.000000000))*(x887)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x886)))+(((IkReal(321000.000000000))*(x887)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x887)))+(((IkReal(321.000000000000))*(x886))))) != 0)?((IkReal)1/(((((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x887)))+(((IkReal(321.000000000000))*(x886)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(321000.000000000))*(x886)))+(((IkReal(321000.000000000))*(x887)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x886)))+(((IkReal(321000.000000000))*(x887)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x887)))+(((IkReal(321.000000000000))*(x886))))) != 0)?((IkReal)1/(((((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(x887)))+(((IkReal(321.000000000000))*(x886)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x888=IKsin(j16);
IkReal x889=IKcos(j16);
IkReal x890=((IkReal(0.321000000000000))*(sj18));
IkReal x891=((IkReal(0.321000000000000))*(cj18));
IkReal x892=((py)*(sj15));
IkReal x893=((IkReal(1.00000000000000))*(x892));
IkReal x894=((pz)*(x888));
evalcond[0]=((((IkReal(0.400000000000000))*(x888)))+(((IkReal(-1.00000000000000))*(x889)*(x890)))+(pz)+(((x888)*(x891))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x889)*(x893)))+(x894)+(x891)+(((IkReal(0.100000000000000))*(x889))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x893)))+(((IkReal(0.400000000000000))*(x889)))+(((x889)*(x891)))+(((x888)*(x890))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x894)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x892)))+(((IkReal(0.800000000000000))*(x889)*(x892)))+(((IkReal(-0.0800000000000000))*(x889))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x888)*(x893)))+(((IkReal(-1.00000000000000))*(pz)*(x889)))+(x890)+(((IkReal(0.100000000000000))*(x888))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
Atan2Value<IkReal> x895 = IKatan2WithCheck(((gconst53)*(((((IkReal(100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(-1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))),((gconst53)*(((IkReal(160.000000000000))+(((IkReal(-1000.00000000000))*((pz)*(pz))))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(103.041000000000))*((cj18)*(cj18))))))),IKFAST_ATAN2_MAGTHRESH);
if( !x895.valid ) {
    continue;
}
j16array[0]=x895.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x896=IKsin(j16);
IkReal x897=IKcos(j16);
IkReal x898=((IkReal(0.321000000000000))*(sj18));
IkReal x899=((IkReal(0.321000000000000))*(cj18));
IkReal x900=((py)*(sj15));
IkReal x901=((IkReal(1.00000000000000))*(x900));
IkReal x902=((pz)*(x896));
evalcond[0]=((((x896)*(x899)))+(((IkReal(0.400000000000000))*(x896)))+(pz)+(((IkReal(-1.00000000000000))*(x897)*(x898))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x897)*(x901)))+(x899)+(x902)+(((IkReal(0.100000000000000))*(x897))));
evalcond[2]=((IkReal(0.100000000000000))+(((x896)*(x898)))+(((IkReal(-1.00000000000000))*(x901)))+(((IkReal(0.400000000000000))*(x897)))+(((x897)*(x899))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x900)))+(((IkReal(0.800000000000000))*(x897)*(x900)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(x902)))+(((IkReal(-0.0800000000000000))*(x897))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x896)*(x901)))+(((IkReal(-1.00000000000000))*(pz)*(x897)))+(x898)+(((IkReal(0.100000000000000))*(x896))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x903=((cj15)*(py));
IkReal x904=IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959)))));
evalcond[0]=((IKabs(((IKabs(px))+(x904))))+(x904));
evalcond[1]=((IkReal(-1.00000000000000))*(x903));
evalcond[2]=x903;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst54;
IkReal x905=((py)*(sj15));
gconst54=IKsign(((IkReal(-40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(-32.1000000000000))*(cj18)))+(((IkReal(400.000000000000))*(x905)))+(((IkReal(321.000000000000))*(cj18)*(x905)))));
IkReal x906=((py)*(sj15));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(10.0000000000000))*(cj18)*(x906)))+(((IkReal(12.4610591900312))*(x906)))+(((IkReal(-1.00000000000000))*(cj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj18)*(pz)))+(((IkReal(-1.00000000000000))*(sj18)))+(((IkReal(10.0000000000000))*(py)*(sj15)*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x907=((cj15)*(py));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-1.00000000000000))*(x907));
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x907;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x908=IKcos(j16);
IkReal x909=IKsin(j16);
IkReal x910=((py)*(sj15));
IkReal x911=((IkReal(1.00000000000000))*(x910));
evalcond[0]=((IkReal(0.721000000000000))*(x909));
evalcond[1]=((IkReal(0.721000000000000))+(((IkReal(-1.00000000000000))*(x908)*(x911)))+(((IkReal(0.100000000000000))*(x908))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x910)))+(((IkReal(-0.0800000000000000))*(x908)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x908)*(x910))));
evalcond[3]=((((IkReal(0.100000000000000))*(x909)))+(((IkReal(-1.00000000000000))*(x909)*(x911))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x912=((cj15)*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=((IkReal(-1.00000000000000))*(x912));
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x912;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(py)*(sj15))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x913=IKcos(j16);
IkReal x914=IKsin(j16);
IkReal x915=((py)*(sj15));
IkReal x916=((IkReal(1.00000000000000))*(x915));
evalcond[0]=((IkReal(0.0790000000000000))*(x914));
evalcond[1]=((IkReal(0.0790000000000000))+(((IkReal(-1.00000000000000))*(x913)*(x916)))+(((IkReal(0.100000000000000))*(x913))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x915)))+(((IkReal(-0.0800000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x913)*(x915))));
evalcond[3]=((((IkReal(0.100000000000000))*(x914)))+(((IkReal(-1.00000000000000))*(x914)*(x916))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x917=((cj18)*(pz));
IkReal x918=((py)*(sj15)*(sj18));
if( IKabs(((((IKabs(((((IkReal(321000.000000000))*(x918)))+(((IkReal(321000.000000000))*(x917)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x918)))+(((IkReal(321000.000000000))*(x917)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(321.000000000000))*(x918)))+(((IkReal(321.000000000000))*(x917)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x918)))+(((IkReal(321.000000000000))*(x917)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(321000.000000000))*(x918)))+(((IkReal(321000.000000000))*(x917)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x918)))+(((IkReal(321000.000000000))*(x917)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(321.000000000000))*(x918)))+(((IkReal(321.000000000000))*(x917)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x918)))+(((IkReal(321.000000000000))*(x917)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(321000.000000000))*(x918)))+(((IkReal(321000.000000000))*(x917)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321000.000000000))*(x918)))+(((IkReal(321000.000000000))*(x917)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(321.000000000000))*(x918)))+(((IkReal(321.000000000000))*(x917)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x918)))+(((IkReal(321.000000000000))*(x917)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x919=IKsin(j16);
IkReal x920=IKcos(j16);
IkReal x921=((IkReal(0.321000000000000))*(sj18));
IkReal x922=((IkReal(0.321000000000000))*(cj18));
IkReal x923=((py)*(sj15));
IkReal x924=((IkReal(1.00000000000000))*(x923));
IkReal x925=((pz)*(x919));
evalcond[0]=((((x919)*(x922)))+(((IkReal(-1.00000000000000))*(x920)*(x921)))+(pz)+(((IkReal(0.400000000000000))*(x919))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x920)))+(((IkReal(-1.00000000000000))*(x920)*(x924)))+(x925)+(x922));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x924)))+(((x919)*(x921)))+(((x920)*(x922)))+(((IkReal(0.400000000000000))*(x920))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x920)))+(((IkReal(0.200000000000000))*(x923)))+(((IkReal(-0.800000000000000))*(x925)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x920)*(x923))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x919)*(x924)))+(((IkReal(0.100000000000000))*(x919)))+(((IkReal(-1.00000000000000))*(pz)*(x920)))+(x921));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
Atan2Value<IkReal> x926 = IKatan2WithCheck(((gconst54)*(((((IkReal(100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(-1000.00000000000))*(py)*(pz)*(sj15)))+(((IkReal(128.400000000000))*(sj18)))))),((gconst54)*(((IkReal(160.000000000000))+(((IkReal(-1000.00000000000))*((pz)*(pz))))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(103.041000000000))*((cj18)*(cj18))))))),IKFAST_ATAN2_MAGTHRESH);
if( !x926.valid ) {
    continue;
}
j16array[0]=x926.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x927=IKsin(j16);
IkReal x928=IKcos(j16);
IkReal x929=((IkReal(0.321000000000000))*(sj18));
IkReal x930=((IkReal(0.321000000000000))*(cj18));
IkReal x931=((py)*(sj15));
IkReal x932=((IkReal(1.00000000000000))*(x931));
IkReal x933=((pz)*(x927));
evalcond[0]=((((x927)*(x930)))+(((IkReal(-1.00000000000000))*(x928)*(x929)))+(pz)+(((IkReal(0.400000000000000))*(x927))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x928)))+(((IkReal(-1.00000000000000))*(x928)*(x932)))+(x930)+(x933));
evalcond[2]=((IkReal(0.100000000000000))+(((x927)*(x929)))+(((x928)*(x930)))+(((IkReal(0.400000000000000))*(x928)))+(((IkReal(-1.00000000000000))*(x932))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x928)))+(((IkReal(0.200000000000000))*(x931)))+(((IkReal(-0.800000000000000))*(x933)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x928)*(x931))));
evalcond[4]=((((IkReal(0.100000000000000))*(x927)))+(((IkReal(-1.00000000000000))*(x927)*(x932)))+(((IkReal(-1.00000000000000))*(pz)*(x928)))+(x929));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x934=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=x934;
evalcond[2]=((IkReal(-1.00000000000000))*(x934));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst55;
IkReal x935=((cj15)*(px));
gconst55=IKsign(((IkReal(-40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(400.000000000000))*(x935)))+(((IkReal(-32.1000000000000))*(cj18)))+(((IkReal(321.000000000000))*(cj18)*(x935)))));
IkReal x936=((cj15)*(px));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(12.4610591900312))*(x936)))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(10.0000000000000))*(cj18)*(x936)))+(((IkReal(-1.00000000000000))*(cj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj15)*(px)*(sj18)))+(((IkReal(10.0000000000000))*(cj18)*(pz)))+(((IkReal(-1.00000000000000))*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x937=((px)*(sj15));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=x937;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(-1.00000000000000))*(x937));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x938=IKcos(j16);
IkReal x939=IKsin(j16);
IkReal x940=((cj15)*(px));
IkReal x941=((IkReal(1.00000000000000))*(x940));
evalcond[0]=((IkReal(0.721000000000000))*(x939));
evalcond[1]=((IkReal(0.721000000000000))+(((IkReal(0.100000000000000))*(x938)))+(((IkReal(-1.00000000000000))*(x938)*(x941))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x938)))+(((IkReal(0.800000000000000))*(x938)*(x940)))+(((IkReal(0.200000000000000))*(x940)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((((IkReal(0.100000000000000))*(x939)))+(((IkReal(-1.00000000000000))*(x939)*(x941))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x942=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=x942;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(-1.00000000000000))*(x942));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x943=IKcos(j16);
IkReal x944=IKsin(j16);
IkReal x945=((cj15)*(px));
IkReal x946=((IkReal(1.00000000000000))*(x945));
evalcond[0]=((IkReal(0.0790000000000000))*(x944));
evalcond[1]=((IkReal(0.0790000000000000))+(((IkReal(-1.00000000000000))*(x943)*(x946)))+(((IkReal(0.100000000000000))*(x943))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x943)))+(((IkReal(0.200000000000000))*(x945)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x943)*(x945))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x944)*(x946)))+(((IkReal(0.100000000000000))*(x944))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x947=((cj15)*(px));
IkReal x948=((cj18)*(pz));
if( IKabs(((((IKabs(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x948)))+(((IkReal(321000.000000000))*(sj18)*(x947)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x948)))+(((IkReal(321000.000000000))*(sj18)*(x947)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(321.000000000000))*(x948)))+(((IkReal(321.000000000000))*(sj18)*(x947)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x948)))+(((IkReal(321.000000000000))*(sj18)*(x947)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x947))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x948)))+(((IkReal(321000.000000000))*(sj18)*(x947)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x948)))+(((IkReal(321000.000000000))*(sj18)*(x947)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(321.000000000000))*(x948)))+(((IkReal(321.000000000000))*(sj18)*(x947)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x948)))+(((IkReal(321.000000000000))*(sj18)*(x947)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x947)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x948)))+(((IkReal(321000.000000000))*(sj18)*(x947)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x948)))+(((IkReal(321000.000000000))*(sj18)*(x947)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(321.000000000000))*(x948)))+(((IkReal(321.000000000000))*(sj18)*(x947)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x948)))+(((IkReal(321.000000000000))*(sj18)*(x947)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x947)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x949=IKsin(j16);
IkReal x950=IKcos(j16);
IkReal x951=((cj15)*(px));
IkReal x952=((IkReal(0.321000000000000))*(sj18));
IkReal x953=((IkReal(0.321000000000000))*(cj18));
IkReal x954=((IkReal(1.00000000000000))*(x950));
IkReal x955=((pz)*(x949));
evalcond[0]=((((x949)*(x953)))+(pz)+(((IkReal(-1.00000000000000))*(x950)*(x952)))+(((IkReal(0.400000000000000))*(x949))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x950)))+(((IkReal(-1.00000000000000))*(x951)*(x954)))+(x955)+(x953));
evalcond[2]=((IkReal(0.100000000000000))+(((x949)*(x952)))+(((IkReal(-1.00000000000000))*(x951)))+(((IkReal(0.400000000000000))*(x950)))+(((x950)*(x953))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x955)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x951)))+(((IkReal(0.800000000000000))*(x950)*(x951)))+(((IkReal(-0.0800000000000000))*(x950))));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x954)))+(((IkReal(-1.00000000000000))*(x949)*(x951)))+(x952)+(((IkReal(0.100000000000000))*(x949))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
Atan2Value<IkReal> x956 = IKatan2WithCheck(((gconst55)*(((((IkReal(100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))+(((IkReal(-1000.00000000000))*(cj15)*(px)*(pz)))))),((gconst55)*(((IkReal(160.000000000000))+(((IkReal(-1000.00000000000))*((pz)*(pz))))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(103.041000000000))*((cj18)*(cj18))))))),IKFAST_ATAN2_MAGTHRESH);
if( !x956.valid ) {
    continue;
}
j16array[0]=x956.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x957=IKsin(j16);
IkReal x958=IKcos(j16);
IkReal x959=((cj15)*(px));
IkReal x960=((IkReal(0.321000000000000))*(sj18));
IkReal x961=((IkReal(0.321000000000000))*(cj18));
IkReal x962=((IkReal(1.00000000000000))*(x958));
IkReal x963=((pz)*(x957));
evalcond[0]=((((IkReal(-1.00000000000000))*(x958)*(x960)))+(((x957)*(x961)))+(pz)+(((IkReal(0.400000000000000))*(x957))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x958)))+(((IkReal(-1.00000000000000))*(x959)*(x962)))+(x963)+(x961));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x959)))+(((x957)*(x960)))+(((x958)*(x961)))+(((IkReal(0.400000000000000))*(x958))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x958)*(x959)))+(((IkReal(-0.800000000000000))*(x963)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x959)))+(((IkReal(-0.0800000000000000))*(x958))));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x962)))+(((IkReal(0.100000000000000))*(x957)))+(((IkReal(-1.00000000000000))*(x957)*(x959)))+(x960));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x964=((px)*(sj15));
IkReal x965=IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959)))));
evalcond[0]=((x965)+(IKabs(((IKabs(py))+(x965)))));
evalcond[1]=x964;
evalcond[2]=((IkReal(-1.00000000000000))*(x964));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst56;
IkReal x966=((cj15)*(px));
gconst56=IKsign(((IkReal(-40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj18)))+(((IkReal(400.000000000000))*(x966)))+(((IkReal(-32.1000000000000))*(cj18)))+(((IkReal(321.000000000000))*(cj18)*(x966)))));
IkReal x967=((cj15)*(px));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(12.4610591900312))*(x967)))+(((IkReal(-10.0000000000000))*(pz)*(sj18)))+(((IkReal(10.0000000000000))*(cj18)*(x967)))+(((IkReal(-1.00000000000000))*(cj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(10.0000000000000))*(cj15)*(px)*(sj18)))+(((IkReal(10.0000000000000))*(cj18)*(pz)))+(((IkReal(-1.00000000000000))*(sj18)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x968=((px)*(sj15));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j18)), IkReal(6.28318530717959)))))));
evalcond[1]=x968;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(-1.00000000000000))*(x968));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x969=IKcos(j16);
IkReal x970=IKsin(j16);
IkReal x971=((cj15)*(px));
IkReal x972=((IkReal(1.00000000000000))*(x971));
evalcond[0]=((IkReal(0.721000000000000))*(x970));
evalcond[1]=((IkReal(0.721000000000000))+(((IkReal(-1.00000000000000))*(x969)*(x972)))+(((IkReal(0.100000000000000))*(x969))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x969)*(x971)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x971)))+(((IkReal(-0.0800000000000000))*(x969))));
evalcond[3]=((((IkReal(0.100000000000000))*(x970)))+(((IkReal(-1.00000000000000))*(x970)*(x972))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x973=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j18, IkReal(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=x973;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(-1.00000000000000))*(x973));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(cj15)*(px))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x974=IKcos(j16);
IkReal x975=IKsin(j16);
IkReal x976=((cj15)*(px));
IkReal x977=((IkReal(1.00000000000000))*(x976));
evalcond[0]=((IkReal(0.0790000000000000))*(x975));
evalcond[1]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x974)))+(((IkReal(-1.00000000000000))*(x974)*(x977))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x976)))+(((IkReal(0.800000000000000))*(x974)*(x976)))+(((IkReal(-0.0800000000000000))*(x974))));
evalcond[3]=((((IkReal(0.100000000000000))*(x975)))+(((IkReal(-1.00000000000000))*(x975)*(x977))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x978=((cj15)*(px));
IkReal x979=((cj18)*(pz));
if( IKabs(((((IKabs(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x979)))+(((IkReal(321000.000000000))*(sj18)*(x978)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x979)))+(((IkReal(321000.000000000))*(sj18)*(x978)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(321.000000000000))*(x979)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(sj18)*(x978))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x979)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(sj18)*(x978)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x978)))+(((IkReal(128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x979)))+(((IkReal(321000.000000000))*(sj18)*(x978)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x979)))+(((IkReal(321000.000000000))*(sj18)*(x978)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(321.000000000000))*(x979)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(sj18)*(x978))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x979)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(sj18)*(x978)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x978)))+(((IkReal(128.400000000000))*(sj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x979)))+(((IkReal(321000.000000000))*(sj18)*(x978)))+(((IkReal(-32100.0000000000))*(sj18))))) != 0)?((IkReal)1/(((((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x979)))+(((IkReal(321000.000000000))*(sj18)*(x978)))+(((IkReal(-32100.0000000000))*(sj18)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj18)*(sj18))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(321.000000000000))*(x979)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(sj18)*(x978))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x979)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(-32.1000000000000))*(sj18)))+(((IkReal(321.000000000000))*(sj18)*(x978)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(1000.00000000000))*(pz)*(x978)))+(((IkReal(128.400000000000))*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x980=IKsin(j16);
IkReal x981=IKcos(j16);
IkReal x982=((cj15)*(px));
IkReal x983=((IkReal(0.321000000000000))*(sj18));
IkReal x984=((IkReal(0.321000000000000))*(cj18));
IkReal x985=((IkReal(1.00000000000000))*(x981));
IkReal x986=((pz)*(x980));
evalcond[0]=((((IkReal(0.400000000000000))*(x980)))+(pz)+(((IkReal(-1.00000000000000))*(x981)*(x983)))+(((x980)*(x984))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x981)))+(((IkReal(-1.00000000000000))*(x982)*(x985)))+(x984)+(x986));
evalcond[2]=((IkReal(0.100000000000000))+(((x981)*(x984)))+(((IkReal(0.400000000000000))*(x981)))+(((IkReal(-1.00000000000000))*(x982)))+(((x980)*(x983))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x986)))+(((IkReal(0.800000000000000))*(x981)*(x982)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x982)))+(((IkReal(-0.0800000000000000))*(x981))));
evalcond[4]=((((IkReal(0.100000000000000))*(x980)))+(((IkReal(-1.00000000000000))*(pz)*(x985)))+(((IkReal(-1.00000000000000))*(x980)*(x982)))+(x983));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
Atan2Value<IkReal> x987 = IKatan2WithCheck(((gconst56)*(((((IkReal(100.000000000000))*(pz)))+(((IkReal(103.041000000000))*(cj18)*(sj18)))+(((IkReal(128.400000000000))*(sj18)))+(((IkReal(-1000.00000000000))*(cj15)*(px)*(pz)))))),((gconst56)*(((IkReal(160.000000000000))+(((IkReal(-1000.00000000000))*((pz)*(pz))))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(103.041000000000))*((cj18)*(cj18))))))),IKFAST_ATAN2_MAGTHRESH);
if( !x987.valid ) {
    continue;
}
j16array[0]=x987.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x988=IKsin(j16);
IkReal x989=IKcos(j16);
IkReal x990=((cj15)*(px));
IkReal x991=((IkReal(0.321000000000000))*(sj18));
IkReal x992=((IkReal(0.321000000000000))*(cj18));
IkReal x993=((IkReal(1.00000000000000))*(x989));
IkReal x994=((pz)*(x988));
evalcond[0]=((((IkReal(0.400000000000000))*(x988)))+(((x988)*(x992)))+(pz)+(((IkReal(-1.00000000000000))*(x989)*(x991))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x989)))+(((IkReal(-1.00000000000000))*(x990)*(x993)))+(x992)+(x994));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x990)))+(((IkReal(0.400000000000000))*(x989)))+(((x989)*(x992)))+(((x988)*(x991))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x994)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x989)))+(((IkReal(0.800000000000000))*(x989)*(x990)))+(((IkReal(0.200000000000000))*(x990))));
evalcond[4]=((((IkReal(0.100000000000000))*(x988)))+(((IkReal(-1.00000000000000))*(x988)*(x990)))+(((IkReal(-1.00000000000000))*(pz)*(x993)))+(x991));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x995=((cj15)*(py));
IkReal x996=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x995)))+(x996));
evalcond[2]=((((IkReal(-1.00000000000000))*(x996)))+(x995));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((IkReal(-160000.000000000))+(((IkReal(-103041.000000000))*((sj18)*(sj18))))+(((IkReal(-256800.000000000))*(cj18)))+(((IkReal(-103041.000000000))*((cj18)*(cj18))))));
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-1.00000000000000))*((cj18)*(cj18))))+(((IkReal(-2.49221183800623))*(cj18)))+(((IkReal(-1.00000000000000))*((sj18)*(sj18)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(cj15)*(px)))+(((IkReal(-10.0000000000000))*(py)*(sj15))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x997=((cj15)*(px));
IkReal x998=((py)*(sj15));
IkReal x999=((IkReal(10.0000000000000))*(cj18));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-12.4610591900312))*(x998)))+(((IkReal(-12.4610591900312))*(x997)))+(((IkReal(-1.00000000000000))*(x997)*(x999)))+(cj18)+(((IkReal(-1.00000000000000))*(x998)*(x999))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(x998)))+(((IkReal(-10.0000000000000))*(x997))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1000=((py)*(sj15));
IkReal x1001=((IkReal(321.000000000000))*(cj18));
IkReal x1002=((cj15)*(px));
if( IKabs(((((IKabs(((IkReal(40.0000000000000))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x1000)))+(((IkReal(-400.000000000000))*(x1002)))+(((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((IkReal(-1.00000000000000))*(x1000)*(x1001))))) != 0)?((IkReal)1/(((IkReal(40.0000000000000))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x1000)))+(((IkReal(-400.000000000000))*(x1002)))+(((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((IkReal(-1.00000000000000))*(x1000)*(x1001)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x1002))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x1002)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((IkReal(40.0000000000000))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x1000)))+(((IkReal(-400.000000000000))*(x1002)))+(((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((IkReal(-1.00000000000000))*(x1000)*(x1001))))) != 0)?((IkReal)1/(((IkReal(40.0000000000000))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x1000)))+(((IkReal(-400.000000000000))*(x1002)))+(((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((IkReal(-1.00000000000000))*(x1000)*(x1001)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))))+IKsqr(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x1002))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x1002)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((IkReal(40.0000000000000))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x1000)))+(((IkReal(-400.000000000000))*(x1002)))+(((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((IkReal(-1.00000000000000))*(x1000)*(x1001))))) != 0)?((IkReal)1/(((IkReal(40.0000000000000))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-400.000000000000))*(x1000)))+(((IkReal(-400.000000000000))*(x1002)))+(((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((IkReal(-1.00000000000000))*(x1000)*(x1001)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))), ((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x1002))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x1002)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1003=IKsin(j16);
IkReal x1004=IKcos(j16);
IkReal x1005=((IkReal(0.321000000000000))*(sj18));
IkReal x1006=((cj15)*(px));
IkReal x1007=((IkReal(0.321000000000000))*(cj18));
IkReal x1008=((py)*(sj15));
IkReal x1009=((IkReal(0.800000000000000))*(x1004));
IkReal x1010=((IkReal(1.00000000000000))*(x1004));
IkReal x1011=((IkReal(1.00000000000000))*(x1003));
evalcond[0]=((((IkReal(0.400000000000000))*(x1003)))+(((IkReal(-1.00000000000000))*(x1004)*(x1005)))+(((x1003)*(x1007))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x1004)))+(x1007)+(((IkReal(-1.00000000000000))*(x1006)*(x1010)))+(((IkReal(-1.00000000000000))*(x1008)*(x1010))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1008)))+(((IkReal(-1.00000000000000))*(x1006)))+(((IkReal(0.400000000000000))*(x1004)))+(((x1004)*(x1007)))+(((x1003)*(x1005))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1008)))+(((IkReal(0.200000000000000))*(x1006)))+(((x1008)*(x1009)))+(((IkReal(-0.0800000000000000))*(x1004)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1006)*(x1009))));
evalcond[4]=((((IkReal(0.100000000000000))*(x1003)))+(x1005)+(((IkReal(-1.00000000000000))*(x1006)*(x1011)))+(((IkReal(-1.00000000000000))*(x1008)*(x1011))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1012=((py)*(sj15));
IkReal x1013=((cj15)*(px));
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1013)))+(((IkReal(-1000.00000000000))*(x1012))))) != 0)?((IkReal)1/(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1013)))+(((IkReal(-1000.00000000000))*(x1012)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1012)))+(((IkReal(-1.00000000000000))*(x1013))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1012)))+(((IkReal(-1.00000000000000))*(x1013)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1013)))+(((IkReal(-1000.00000000000))*(x1012))))) != 0)?((IkReal)1/(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1013)))+(((IkReal(-1000.00000000000))*(x1012)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1012)))+(((IkReal(-1.00000000000000))*(x1013))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1012)))+(((IkReal(-1.00000000000000))*(x1013)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1013)))+(((IkReal(-1000.00000000000))*(x1012))))) != 0)?((IkReal)1/(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1013)))+(((IkReal(-1000.00000000000))*(x1012)))))):(IkReal)1.0e30))), ((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1012)))+(((IkReal(-1.00000000000000))*(x1013))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1012)))+(((IkReal(-1.00000000000000))*(x1013)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1014=IKsin(j16);
IkReal x1015=IKcos(j16);
IkReal x1016=((IkReal(0.321000000000000))*(sj18));
IkReal x1017=((cj15)*(px));
IkReal x1018=((IkReal(0.321000000000000))*(cj18));
IkReal x1019=((py)*(sj15));
IkReal x1020=((IkReal(0.800000000000000))*(x1015));
IkReal x1021=((IkReal(1.00000000000000))*(x1015));
IkReal x1022=((IkReal(1.00000000000000))*(x1014));
evalcond[0]=((((x1014)*(x1018)))+(((IkReal(0.400000000000000))*(x1014)))+(((IkReal(-1.00000000000000))*(x1015)*(x1016))));
evalcond[1]=((IkReal(0.400000000000000))+(x1018)+(((IkReal(-1.00000000000000))*(x1019)*(x1021)))+(((IkReal(-1.00000000000000))*(x1017)*(x1021)))+(((IkReal(0.100000000000000))*(x1015))));
evalcond[2]=((IkReal(0.100000000000000))+(((x1014)*(x1016)))+(((IkReal(0.400000000000000))*(x1015)))+(((x1015)*(x1018)))+(((IkReal(-1.00000000000000))*(x1017)))+(((IkReal(-1.00000000000000))*(x1019))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x1017)*(x1020)))+(((IkReal(-0.0800000000000000))*(x1015)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1019)*(x1020)))+(((IkReal(0.200000000000000))*(x1019)))+(((IkReal(0.200000000000000))*(x1017))));
evalcond[4]=((x1016)+(((IkReal(-1.00000000000000))*(x1019)*(x1022)))+(((IkReal(-1.00000000000000))*(x1017)*(x1022)))+(((IkReal(0.100000000000000))*(x1014))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1023=((IkReal(321000.000000000))*(py)*(sj15));
IkReal x1024=((IkReal(321000.000000000))*(cj15)*(px));
Atan2Value<IkReal> x1025 = IKatan2WithCheck(((gconst57)*(((((IkReal(-1.00000000000000))*(sj18)*(x1024)))+(((IkReal(-1.00000000000000))*(sj18)*(x1023)))+(((IkReal(32100.0000000000))*(sj18)))))),((gconst57)*(((IkReal(40000.0000000000))+(((IkReal(32100.0000000000))*(cj18)))+(((IkReal(-400000.000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(cj18)*(x1024)))+(((IkReal(-1.00000000000000))*(cj18)*(x1023)))+(((IkReal(-400000.000000000))*(py)*(sj15)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1025.valid ) {
    continue;
}
j16array[0]=x1025.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1026=IKsin(j16);
IkReal x1027=IKcos(j16);
IkReal x1028=((IkReal(0.321000000000000))*(sj18));
IkReal x1029=((cj15)*(px));
IkReal x1030=((IkReal(0.321000000000000))*(cj18));
IkReal x1031=((py)*(sj15));
IkReal x1032=((IkReal(0.800000000000000))*(x1027));
IkReal x1033=((IkReal(1.00000000000000))*(x1027));
IkReal x1034=((IkReal(1.00000000000000))*(x1026));
evalcond[0]=((((IkReal(0.400000000000000))*(x1026)))+(((x1026)*(x1030)))+(((IkReal(-1.00000000000000))*(x1027)*(x1028))));
evalcond[1]=((IkReal(0.400000000000000))+(x1030)+(((IkReal(-1.00000000000000))*(x1029)*(x1033)))+(((IkReal(-1.00000000000000))*(x1031)*(x1033)))+(((IkReal(0.100000000000000))*(x1027))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1027)))+(((IkReal(-1.00000000000000))*(x1031)))+(((IkReal(-1.00000000000000))*(x1029)))+(((x1026)*(x1028)))+(((x1027)*(x1030))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x1031)*(x1032)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1029)*(x1032)))+(((IkReal(-0.0800000000000000))*(x1027)))+(((IkReal(0.200000000000000))*(x1029)))+(((IkReal(0.200000000000000))*(x1031))));
evalcond[4]=((x1028)+(((IkReal(-1.00000000000000))*(x1029)*(x1034)))+(((IkReal(-1.00000000000000))*(x1031)*(x1034)))+(((IkReal(0.100000000000000))*(x1026))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x1035=((cj15)*(py));
IkReal x1036=((px)*(sj15));
IkReal x1037=IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959)))));
evalcond[0]=((x1037)+(IKabs(((x1037)+(IKabs(pz))))));
evalcond[1]=((x1036)+(((IkReal(-1.00000000000000))*(x1035))));
evalcond[2]=((x1035)+(((IkReal(-1.00000000000000))*(x1036))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
_nj18 = 2;
cj18array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))));
if( cj18array[0] >= -1-IKFAST_SINCOS_THRESH && cj18array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 2; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IkReal dummyeval[1];
IkReal gconst58;
gconst58=IKsign(((IkReal(-160000.000000000))+(((IkReal(-103041.000000000))*((sj18)*(sj18))))+(((IkReal(-256800.000000000))*(cj18)))+(((IkReal(-103041.000000000))*((cj18)*(cj18))))));
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-1.00000000000000))*((cj18)*(cj18))))+(((IkReal(-2.49221183800623))*(cj18)))+(((IkReal(-1.00000000000000))*((sj18)*(sj18)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(cj15)*(px)))+(((IkReal(-10.0000000000000))*(py)*(sj15))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1038=((cj15)*(px));
IkReal x1039=((py)*(sj15));
IkReal x1040=((IkReal(10.0000000000000))*(cj18));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-1.00000000000000))*(x1038)*(x1040)))+(((IkReal(-12.4610591900312))*(x1039)))+(((IkReal(-12.4610591900312))*(x1038)))+(((IkReal(-1.00000000000000))*(x1039)*(x1040)))+(cj18));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(x1039)))+(((IkReal(-10.0000000000000))*(x1038))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1041=((py)*(sj15));
IkReal x1042=((IkReal(321.000000000000))*(cj18));
IkReal x1043=((cj15)*(px));
if( IKabs(((((IKabs(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x1041)))+(((IkReal(-400.000000000000))*(x1043)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1042)*(x1043))))) != 0)?((IkReal)1/(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x1041)))+(((IkReal(-400.000000000000))*(x1043)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1042)*(x1043)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1043)))+(((IkReal(-1.00000000000000))*(x1041))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1043)))+(((IkReal(-1.00000000000000))*(x1041)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x1041)))+(((IkReal(-400.000000000000))*(x1043)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1042)*(x1043))))) != 0)?((IkReal)1/(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x1041)))+(((IkReal(-400.000000000000))*(x1043)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1042)*(x1043)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))))+IKsqr(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1043)))+(((IkReal(-1.00000000000000))*(x1041))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1043)))+(((IkReal(-1.00000000000000))*(x1041)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x1041)))+(((IkReal(-400.000000000000))*(x1043)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1042)*(x1043))))) != 0)?((IkReal)1/(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x1041)))+(((IkReal(-400.000000000000))*(x1043)))+(((IkReal(32.1000000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1042)*(x1043)))))):(IkReal)1.0e30))*(((((IkReal(-103.041000000000))*(cj18)*(sj18)))+(((IkReal(-128.400000000000))*(sj18)))))), ((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1043)))+(((IkReal(-1.00000000000000))*(x1041))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1043)))+(((IkReal(-1.00000000000000))*(x1041)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1044=IKsin(j16);
IkReal x1045=IKcos(j16);
IkReal x1046=((IkReal(0.321000000000000))*(sj18));
IkReal x1047=((cj15)*(px));
IkReal x1048=((IkReal(0.321000000000000))*(cj18));
IkReal x1049=((py)*(sj15));
IkReal x1050=((IkReal(0.800000000000000))*(x1045));
IkReal x1051=((IkReal(1.00000000000000))*(x1045));
IkReal x1052=((IkReal(1.00000000000000))*(x1044));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1045)*(x1046)))+(((IkReal(0.400000000000000))*(x1044)))+(((x1044)*(x1048))));
evalcond[1]=((IkReal(0.400000000000000))+(x1048)+(((IkReal(0.100000000000000))*(x1045)))+(((IkReal(-1.00000000000000))*(x1049)*(x1051)))+(((IkReal(-1.00000000000000))*(x1047)*(x1051))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1045)))+(((IkReal(-1.00000000000000))*(x1049)))+(((IkReal(-1.00000000000000))*(x1047)))+(((x1045)*(x1048)))+(((x1044)*(x1046))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1047)))+(((IkReal(0.200000000000000))*(x1049)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1049)*(x1050)))+(((x1047)*(x1050)))+(((IkReal(-0.0800000000000000))*(x1045))));
evalcond[4]=((x1046)+(((IkReal(0.100000000000000))*(x1044)))+(((IkReal(-1.00000000000000))*(x1049)*(x1052)))+(((IkReal(-1.00000000000000))*(x1047)*(x1052))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1053=((py)*(sj15));
IkReal x1054=((cj15)*(px));
if( IKabs(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1053)))+(((IkReal(-1000.00000000000))*(x1054))))) != 0)?((IkReal)1/(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1053)))+(((IkReal(-1000.00000000000))*(x1054)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(-1.00000000000000))*(x1053))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(-1.00000000000000))*(x1053)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1053)))+(((IkReal(-1000.00000000000))*(x1054))))) != 0)?((IkReal)1/(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1053)))+(((IkReal(-1000.00000000000))*(x1054)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(-1.00000000000000))*(x1053))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(-1.00000000000000))*(x1053)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-321.000000000000))*(sj18)*(((IKabs(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1053)))+(((IkReal(-1000.00000000000))*(x1054))))) != 0)?((IkReal)1/(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1053)))+(((IkReal(-1000.00000000000))*(x1054)))))):(IkReal)1.0e30))), ((((IKabs(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(-1.00000000000000))*(x1053))))) != 0)?((IkReal)1/(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(-1.00000000000000))*(x1053)))))):(IkReal)1.0e30))*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1055=IKsin(j16);
IkReal x1056=IKcos(j16);
IkReal x1057=((IkReal(0.321000000000000))*(sj18));
IkReal x1058=((cj15)*(px));
IkReal x1059=((IkReal(0.321000000000000))*(cj18));
IkReal x1060=((py)*(sj15));
IkReal x1061=((IkReal(0.800000000000000))*(x1056));
IkReal x1062=((IkReal(1.00000000000000))*(x1056));
IkReal x1063=((IkReal(1.00000000000000))*(x1055));
evalcond[0]=((((x1055)*(x1059)))+(((IkReal(0.400000000000000))*(x1055)))+(((IkReal(-1.00000000000000))*(x1056)*(x1057))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1060)*(x1062)))+(x1059)+(((IkReal(0.100000000000000))*(x1056)))+(((IkReal(-1.00000000000000))*(x1058)*(x1062))));
evalcond[2]=((IkReal(0.100000000000000))+(((x1055)*(x1057)))+(((x1056)*(x1059)))+(((IkReal(0.400000000000000))*(x1056)))+(((IkReal(-1.00000000000000))*(x1058)))+(((IkReal(-1.00000000000000))*(x1060))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1056)))+(((x1060)*(x1061)))+(((IkReal(0.200000000000000))*(x1058)))+(((IkReal(0.200000000000000))*(x1060)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1058)*(x1061))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1060)*(x1063)))+(x1057)+(((IkReal(0.100000000000000))*(x1055)))+(((IkReal(-1.00000000000000))*(x1058)*(x1063))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1064=((py)*(sj15));
IkReal x1065=((IkReal(321000.000000000))*(cj18));
IkReal x1066=((cj15)*(px));
IkReal x1067=((IkReal(321000.000000000))*(sj18));
Atan2Value<IkReal> x1068 = IKatan2WithCheck(((gconst58)*(((((IkReal(-1.00000000000000))*(x1066)*(x1067)))+(((IkReal(32100.0000000000))*(sj18)))+(((IkReal(-1.00000000000000))*(x1064)*(x1067)))))),((gconst58)*(((IkReal(40000.0000000000))+(((IkReal(32100.0000000000))*(cj18)))+(((IkReal(-400000.000000000))*(x1066)))+(((IkReal(-400000.000000000))*(x1064)))+(((IkReal(-1.00000000000000))*(x1064)*(x1065)))+(((IkReal(-1.00000000000000))*(x1065)*(x1066)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1068.valid ) {
    continue;
}
j16array[0]=x1068.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[5];
IkReal x1069=IKsin(j16);
IkReal x1070=IKcos(j16);
IkReal x1071=((IkReal(0.321000000000000))*(sj18));
IkReal x1072=((cj15)*(px));
IkReal x1073=((IkReal(0.321000000000000))*(cj18));
IkReal x1074=((py)*(sj15));
IkReal x1075=((IkReal(0.800000000000000))*(x1070));
IkReal x1076=((IkReal(1.00000000000000))*(x1070));
IkReal x1077=((IkReal(1.00000000000000))*(x1069));
evalcond[0]=((((x1069)*(x1073)))+(((IkReal(-1.00000000000000))*(x1070)*(x1071)))+(((IkReal(0.400000000000000))*(x1069))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1074)*(x1076)))+(x1073)+(((IkReal(0.100000000000000))*(x1070)))+(((IkReal(-1.00000000000000))*(x1072)*(x1076))));
evalcond[2]=((IkReal(0.100000000000000))+(((x1069)*(x1071)))+(((x1070)*(x1073)))+(((IkReal(0.400000000000000))*(x1070)))+(((IkReal(-1.00000000000000))*(x1072)))+(((IkReal(-1.00000000000000))*(x1074))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x1074)*(x1075)))+(((IkReal(-0.0800000000000000))*(x1070)))+(((IkReal(0.200000000000000))*(x1072)))+(((IkReal(0.200000000000000))*(x1074)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1072)*(x1075))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1074)*(x1077)))+(x1071)+(((IkReal(0.100000000000000))*(x1069)))+(((IkReal(-1.00000000000000))*(x1072)*(x1077))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[2];
evalcond[0]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py)))+(((IkReal(0.321000000000000))*(sj17)*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(IKcos(j18)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst45;
IkReal x1078=((IkReal(321.000000000000))*(cj18));
IkReal x1079=((cj15)*(px));
IkReal x1080=((py)*(sj15));
gconst45=IKsign(((IkReal(-40.0000000000000))+(((IkReal(400.000000000000))*(x1079)))+(((IkReal(321.000000000000))*(cj17)*(pz)*(sj18)))+(((x1078)*(x1080)))+(((x1078)*(x1079)))+(((IkReal(-32.1000000000000))*(cj18)))+(((IkReal(400.000000000000))*(x1080)))));
IkReal x1081=((py)*(sj15));
IkReal x1082=((IkReal(10.0000000000000))*(cj18));
IkReal x1083=((cj15)*(px));
dummyeval[0]=((IkReal(-1.24610591900312))+(((x1082)*(x1083)))+(((x1081)*(x1082)))+(((IkReal(10.0000000000000))*(cj17)*(pz)*(sj18)))+(((IkReal(-1.00000000000000))*(cj18)))+(((IkReal(12.4610591900312))*(x1081)))+(((IkReal(12.4610591900312))*(x1083))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((IkReal(160000.000000000))+(((IkReal(103041.000000000))*((cj17)*(cj17))*((sj18)*(sj18))))+(((IkReal(256800.000000000))*(cj18)))+(((IkReal(103041.000000000))*((cj18)*(cj18))))));
dummyeval[0]=((IkReal(1.55277996137460))+(((IkReal(2.49221183800623))*(cj18)))+((cj18)*(cj18))+((((cj17)*(cj17))*((sj18)*(sj18)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1084=((cj15)*(px));
IkReal x1085=((py)*(sj15));
IkReal x1086=((IkReal(321000.000000000))*(cj18));
IkReal x1087=((IkReal(321000.000000000))*(cj17)*(sj18));
Atan2Value<IkReal> x1088 = IKatan2WithCheck(((gconst46)*(((((IkReal(32100.0000000000))*(cj17)*(sj18)))+(((IkReal(-1.00000000000000))*(pz)*(x1086)))+(((IkReal(-400000.000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1085)*(x1087)))+(((IkReal(-1.00000000000000))*(x1084)*(x1087)))))),((gconst46)*(((IkReal(-40000.0000000000))+(((IkReal(-1.00000000000000))*(pz)*(x1087)))+(((IkReal(400000.000000000))*(x1084)))+(((IkReal(400000.000000000))*(x1085)))+(((IkReal(-32100.0000000000))*(cj18)))+(((x1085)*(x1086)))+(((x1084)*(x1086)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1088.valid ) {
    continue;
}
j16array[0]=x1088.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1089=IKsin(j16);
IkReal x1090=IKcos(j16);
IkReal x1091=((IkReal(0.321000000000000))*(sj18));
IkReal x1092=((cj15)*(px));
IkReal x1093=((py)*(sj15));
IkReal x1094=((px)*(sj15));
IkReal x1095=((IkReal(1.00000000000000))*(sj17));
IkReal x1096=((cj15)*(py));
IkReal x1097=((IkReal(0.321000000000000))*(cj18));
IkReal x1098=((pz)*(x1090));
IkReal x1099=((IkReal(1.00000000000000))*(x1092));
IkReal x1100=((IkReal(0.321000000000000))*(x1090));
IkReal x1101=((sj17)*(x1089));
IkReal x1102=((pz)*(x1089));
IkReal x1103=((IkReal(0.800000000000000))*(x1090));
IkReal x1104=((cj17)*(x1089));
evalcond[0]=((((x1089)*(x1097)))+(pz)+(((IkReal(0.400000000000000))*(x1089)))+(((cj17)*(x1090)*(x1091))));
evalcond[1]=((IkReal(0.400000000000000))+(x1102)+(x1097)+(((IkReal(-1.00000000000000))*(x1090)*(x1093)))+(((IkReal(-1.00000000000000))*(x1090)*(x1099)))+(((IkReal(0.100000000000000))*(x1090))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1091)*(x1104)))+(((IkReal(-1.00000000000000))*(x1099)))+(((IkReal(-1.00000000000000))*(x1093)))+(((IkReal(0.400000000000000))*(x1090)))+(((x1090)*(x1097))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x1093)*(x1103)))+(((x1092)*(x1103)))+(((IkReal(-0.800000000000000))*(x1102)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1090)))+(((IkReal(0.200000000000000))*(x1093)))+(((IkReal(0.200000000000000))*(x1092))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1089)*(x1092)*(x1095)))+(((IkReal(-1.00000000000000))*(x1089)*(x1093)*(x1095)))+(((IkReal(-1.00000000000000))*(x1095)*(x1098)))+(((IkReal(-1.00000000000000))*(cj17)*(x1096)))+(((IkReal(0.100000000000000))*(x1101)))+(((cj17)*(x1094))));
evalcond[5]=((((x1093)*(x1104)))+(((x1092)*(x1104)))+(x1091)+(((sj17)*(x1094)))+(((IkReal(-1.00000000000000))*(x1095)*(x1096)))+(((cj17)*(x1098)))+(((IkReal(-0.100000000000000))*(x1104))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1105=((cj17)*(sj18));
IkReal x1106=((IkReal(1000.00000000000))*(pz));
Atan2Value<IkReal> x1107 = IKatan2WithCheck(((gconst45)*(((((IkReal(-1.00000000000000))*(cj15)*(px)*(x1106)))+(((IkReal(-103.041000000000))*(cj18)*(x1105)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(-128.400000000000))*(x1105)))+(((IkReal(-1.00000000000000))*(py)*(sj15)*(x1106)))))),((gconst45)*(((IkReal(160.000000000000))+(((IkReal(256.800000000000))*(cj18)))+(((IkReal(-1.00000000000000))*(pz)*(x1106)))+(((IkReal(103.041000000000))*((cj18)*(cj18))))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1107.valid ) {
    continue;
}
j16array[0]=x1107.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1108=IKsin(j16);
IkReal x1109=IKcos(j16);
IkReal x1110=((IkReal(0.321000000000000))*(sj18));
IkReal x1111=((cj15)*(px));
IkReal x1112=((py)*(sj15));
IkReal x1113=((px)*(sj15));
IkReal x1114=((IkReal(1.00000000000000))*(sj17));
IkReal x1115=((cj15)*(py));
IkReal x1116=((IkReal(0.321000000000000))*(cj18));
IkReal x1117=((pz)*(x1109));
IkReal x1118=((IkReal(1.00000000000000))*(x1111));
IkReal x1119=((IkReal(0.321000000000000))*(x1109));
IkReal x1120=((sj17)*(x1108));
IkReal x1121=((pz)*(x1108));
IkReal x1122=((IkReal(0.800000000000000))*(x1109));
IkReal x1123=((cj17)*(x1108));
evalcond[0]=((((x1108)*(x1116)))+(((cj17)*(x1109)*(x1110)))+(pz)+(((IkReal(0.400000000000000))*(x1108))));
evalcond[1]=((IkReal(0.400000000000000))+(x1116)+(x1121)+(((IkReal(-1.00000000000000))*(x1109)*(x1118)))+(((IkReal(0.100000000000000))*(x1109)))+(((IkReal(-1.00000000000000))*(x1109)*(x1112))));
evalcond[2]=((IkReal(0.100000000000000))+(((x1109)*(x1116)))+(((IkReal(-1.00000000000000))*(x1112)))+(((IkReal(0.400000000000000))*(x1109)))+(((IkReal(-1.00000000000000))*(x1110)*(x1123)))+(((IkReal(-1.00000000000000))*(x1118))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x1111)*(x1122)))+(((x1112)*(x1122)))+(((IkReal(-0.0800000000000000))*(x1109)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(x1121)))+(((IkReal(0.200000000000000))*(x1111)))+(((IkReal(0.200000000000000))*(x1112))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1114)*(x1117)))+(((IkReal(-1.00000000000000))*(x1108)*(x1111)*(x1114)))+(((cj17)*(x1113)))+(((IkReal(0.100000000000000))*(x1120)))+(((IkReal(-1.00000000000000))*(x1108)*(x1112)*(x1114)))+(((IkReal(-1.00000000000000))*(cj17)*(x1115))));
evalcond[5]=((x1110)+(((IkReal(-1.00000000000000))*(x1114)*(x1115)))+(((IkReal(-0.100000000000000))*(x1123)))+(((x1111)*(x1123)))+(((x1112)*(x1123)))+(((cj17)*(x1117)))+(((sj17)*(x1113))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1124=(cj15)*(cj15);
IkReal x1125=(px)*(px);
IkReal x1126=(py)*(py);
IkReal x1127=(sj15)*(sj15);
IkReal x1128=((IkReal(5.00000000000000))*(pp));
IkReal x1129=((py)*(sj15));
IkReal x1130=((pz)*(sj17));
IkReal x1131=((IkReal(0.400000000000000))*(cj17));
IkReal x1132=((px)*(sj15));
IkReal x1133=((cj15)*(px)*(sj17));
IkReal x1134=((IkReal(4.00000000000000))*(cj17)*(py));
IkReal x1135=((IkReal(4.00000000000000))*(cj15)*(cj17)*(sj15));
Atan2Value<IkReal> x1136 = IKatan2WithCheck(((gconst44)*(((((IkReal(-1.00000000000000))*(x1129)*(x1130)))+(((x1126)*(x1135)))+(((x1131)*(x1132)))+(((IkReal(0.334795000000000))*(x1130)))+(((x1128)*(x1130)))+(((px)*(x1124)*(x1134)))+(((IkReal(-1.00000000000000))*(px)*(x1127)*(x1134)))+(((IkReal(-1.00000000000000))*(cj15)*(px)*(x1130)))+(((IkReal(-1.00000000000000))*(x1125)*(x1135)))+(((IkReal(-1.00000000000000))*(cj15)*(py)*(x1131)))))),((gconst44)*(((((IkReal(-1.00000000000000))*(sj17)*(x1128)*(x1129)))+(((sj17)*(x1126)*(x1127)))+(((IkReal(0.500000000000000))*(pp)*(sj17)))+(((sj17)*(x1124)*(x1125)))+(((IkReal(2.00000000000000))*(x1129)*(x1133)))+(((IkReal(-4.00000000000000))*(cj17)*(pz)*(x1132)))+(((IkReal(-0.434795000000000))*(sj17)*(x1129)))+(((IkReal(-1.00000000000000))*(x1128)*(x1133)))+(((cj15)*(pz)*(x1134)))+(((IkReal(0.0334795000000000))*(sj17)))+(((IkReal(-0.434795000000000))*(x1133)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1136.valid ) {
    continue;
}
j16array[0]=x1136.value;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x1137=IKcos(j16);
IkReal x1138=IKsin(j16);
IkReal x1139=((IkReal(1.00000000000000))*(py));
IkReal x1140=((cj15)*(px));
IkReal x1141=((py)*(sj15));
IkReal x1142=((sj17)*(x1138));
IkReal x1143=((IkReal(0.800000000000000))*(x1137));
evalcond[0]=((IkReal(-0.0669590000000000))+(((x1140)*(x1143)))+(((x1141)*(x1143)))+(((IkReal(-0.800000000000000))*(pz)*(x1138)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1137)))+(((IkReal(0.200000000000000))*(x1140)))+(((IkReal(0.200000000000000))*(x1141))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj15)*(cj17)*(x1139)))+(((IkReal(-1.00000000000000))*(pz)*(sj17)*(x1137)))+(((cj17)*(px)*(sj15)))+(((IkReal(-1.00000000000000))*(sj15)*(x1139)*(x1142)))+(((IkReal(0.100000000000000))*(x1142)))+(((IkReal(-1.00000000000000))*(x1140)*(x1142))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj16;
dummyeval[1]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1144=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j16)), IkReal(6.28318530717959)))))));
evalcond[1]=x1144;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x1144;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1145=IKcos(j18);
IkReal x1146=((py)*(sj15));
IkReal x1147=((cj15)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1147)))+(((IkReal(0.200000000000000))*(x1146)))+(((IkReal(0.256800000000000))*(x1145))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(x1145)))+(pz));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1147)))+(((IkReal(-1.00000000000000))*(x1146)))+(((IkReal(-0.321000000000000))*(IKsin(j18)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1148=((cj15)*(py));
IkReal x1149=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j16)), IkReal(6.28318530717959)))))));
evalcond[1]=((x1149)+(((IkReal(-1.00000000000000))*(x1148))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((x1148)+(((IkReal(-1.00000000000000))*(x1149))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1150=IKcos(j18);
IkReal x1151=((py)*(sj15));
IkReal x1152=((cj15)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1152)))+(((IkReal(0.200000000000000))*(x1151)))+(((IkReal(0.256800000000000))*(x1150)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(x1150)))+(pz));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1152)))+(((IkReal(-1.00000000000000))*(x1151)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1153=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j16)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=x1153;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x1153;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(py)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1154=IKcos(j18);
IkReal x1155=((py)*(sj15));
IkReal x1156=((cj15)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1155)))+(((IkReal(0.200000000000000))*(x1156)))+(((IkReal(0.256800000000000))*(x1154)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1154)))+(pz));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1155)))+(((IkReal(-1.00000000000000))*(x1156)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1157=((cj15)*(py));
IkReal x1158=((px)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j16)), IkReal(6.28318530717959)))))));
evalcond[1]=((x1158)+(((IkReal(-1.00000000000000))*(x1157))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(0.200000000000000))*(py)*(sj15)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((x1157)+(((IkReal(-1.00000000000000))*(x1158))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(py)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(px)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[3];
IkReal x1159=IKcos(j18);
IkReal x1160=((py)*(sj15));
IkReal x1161=((cj15)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1159)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1161)))+(((IkReal(0.200000000000000))*(x1160))));
evalcond[1]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1159)))+(pz));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-0.321000000000000))*(IKsin(j18))))+(((IkReal(-1.00000000000000))*(x1160)))+(((IkReal(-1.00000000000000))*(x1161))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1162=((py)*(sj15));
IkReal x1163=((cj15)*(px));
IkReal x1164=((IkReal(2.00000000000000))*(atan(htj16)));
IkReal x1165=IKcos(x1164);
IkReal x1166=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(py))));
IkReal x1167=((IkReal(0.800000000000000))*(x1165));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j16)+(((IkReal(-1.00000000000000))*(x1164)))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=x1166;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1165)))+(((IkReal(-0.800000000000000))*(pz)*(IKsin(x1164))))+(((x1163)*(x1167)))+(((x1162)*(x1167)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1163)))+(((IkReal(0.200000000000000))*(x1162))));
evalcond[3]=x1166;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1168=((py)*(sj15));
IkReal x1169=((cj15)*(px));
IkReal x1170=((IkReal(2.00000000000000))*(atan(htj16)));
IkReal x1171=IKsin(x1170);
IkReal x1172=((IkReal(3.11526479750779))*(x1171));
if( IKabs(((((IkReal(-1.00000000000000))*(x1168)*(x1172)))+(((IkReal(0.311526479750779))*(x1171)))+(((IkReal(-3.11526479750779))*(pz)*(IKcos(x1170))))+(((IkReal(-1.00000000000000))*(x1169)*(x1172))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1168)))+(((IkReal(-0.778816199376947))*(x1169))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(x1168)*(x1172)))+(((IkReal(0.311526479750779))*(x1171)))+(((IkReal(-3.11526479750779))*(pz)*(IKcos(x1170))))+(((IkReal(-1.00000000000000))*(x1169)*(x1172)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1168)))+(((IkReal(-0.778816199376947))*(x1169)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(-1.00000000000000))*(x1168)*(x1172)))+(((IkReal(0.311526479750779))*(x1171)))+(((IkReal(-3.11526479750779))*(pz)*(IKcos(x1170))))+(((IkReal(-1.00000000000000))*(x1169)*(x1172)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1168)))+(((IkReal(-0.778816199376947))*(x1169)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1173=IKcos(j18);
IkReal x1174=IKsin(j18);
IkReal x1175=((cj15)*(px));
IkReal x1176=((py)*(sj15));
IkReal x1177=((IkReal(2.00000000000000))*(atan(htj16)));
IkReal x1178=((IkReal(0.321000000000000))*(x1174));
IkReal x1179=((IkReal(0.321000000000000))*(x1173));
IkReal x1180=IKsin(x1177);
IkReal x1181=IKcos(x1177);
IkReal x1182=((IkReal(1.00000000000000))*(x1181));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1173)))+(((IkReal(0.200000000000000))*(x1175)))+(((IkReal(0.200000000000000))*(x1176)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((((x1178)*(x1181)))+(((x1179)*(x1180)))+(((IkReal(0.400000000000000))*(x1180)))+(pz));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1175)*(x1182)))+(((IkReal(-1.00000000000000))*(x1176)*(x1182)))+(x1179)+(((pz)*(x1180)))+(((IkReal(0.100000000000000))*(x1181))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1179)*(x1181)))+(((IkReal(-1.00000000000000))*(x1178)*(x1180)))+(((IkReal(0.400000000000000))*(x1181)))+(((IkReal(-1.00000000000000))*(x1176)))+(((IkReal(-1.00000000000000))*(x1175))));
evalcond[4]=((x1178)+(((pz)*(x1181)))+(((IkReal(-0.100000000000000))*(x1180)))+(((x1175)*(x1180)))+(((x1176)*(x1180))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1183=((py)*(sj15));
IkReal x1184=((px)*(sj15));
IkReal x1185=((cj15)*(px));
IkReal x1186=((cj15)*(py));
IkReal x1187=((IkReal(2.00000000000000))*(atan(htj16)));
IkReal x1188=IKcos(x1187);
IkReal x1189=((IkReal(0.800000000000000))*(x1188));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j16)+(((IkReal(-1.00000000000000))*(x1187)))), IkReal(6.28318530717959)))))));
evalcond[1]=((x1184)+(((IkReal(-1.00000000000000))*(x1186))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((x1183)*(x1189)))+(((IkReal(-0.800000000000000))*(pz)*(IKsin(x1187))))+(((x1185)*(x1189)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1185)))+(((IkReal(0.200000000000000))*(x1183)))+(((IkReal(-0.0800000000000000))*(x1188))));
evalcond[3]=((x1186)+(((IkReal(-1.00000000000000))*(x1184))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1190=((cj15)*(px));
IkReal x1191=((py)*(sj15));
IkReal x1192=((IkReal(2.00000000000000))*(atan(htj16)));
IkReal x1193=IKsin(x1192);
IkReal x1194=((IkReal(3.11526479750779))*(x1193));
if( IKabs(((((IkReal(3.11526479750779))*(pz)*(IKcos(x1192))))+(((IkReal(-0.311526479750779))*(x1193)))+(((x1191)*(x1194)))+(((x1190)*(x1194))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1191)))+(((IkReal(-0.778816199376947))*(x1190))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(pz)*(IKcos(x1192))))+(((IkReal(-0.311526479750779))*(x1193)))+(((x1191)*(x1194)))+(((x1190)*(x1194)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1191)))+(((IkReal(-0.778816199376947))*(x1190)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(3.11526479750779))*(pz)*(IKcos(x1192))))+(((IkReal(-0.311526479750779))*(x1193)))+(((x1191)*(x1194)))+(((x1190)*(x1194)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1191)))+(((IkReal(-0.778816199376947))*(x1190)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1195=IKcos(j18);
IkReal x1196=IKsin(j18);
IkReal x1197=((py)*(sj15));
IkReal x1198=((IkReal(2.00000000000000))*(atan(htj16)));
IkReal x1199=((IkReal(0.321000000000000))*(x1196));
IkReal x1200=((IkReal(1.00000000000000))*(cj15)*(px));
IkReal x1201=((IkReal(0.321000000000000))*(x1195));
IkReal x1202=IKsin(x1198);
IkReal x1203=IKcos(x1198);
IkReal x1204=((IkReal(1.00000000000000))*(x1203));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(cj15)*(px)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1197)))+(((IkReal(0.256800000000000))*(x1195))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1199)*(x1203)))+(((IkReal(0.400000000000000))*(x1202)))+(pz)+(((x1201)*(x1202))));
evalcond[2]=((IkReal(0.400000000000000))+(x1201)+(((IkReal(0.100000000000000))*(x1203)))+(((IkReal(-1.00000000000000))*(x1200)*(x1203)))+(((pz)*(x1202)))+(((IkReal(-1.00000000000000))*(x1197)*(x1204))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1203)))+(((x1199)*(x1202)))+(((x1201)*(x1203)))+(((IkReal(-1.00000000000000))*(x1200)))+(((IkReal(-1.00000000000000))*(x1197))));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x1204)))+(x1199)+(((IkReal(-1.00000000000000))*(x1197)*(x1202)))+(((IkReal(0.100000000000000))*(x1202)))+(((IkReal(-1.00000000000000))*(x1200)*(x1202))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1205=((IkReal(1.00000000000000))*(sj16));
IkReal x1206=((cj15)*(px));
IkReal x1207=((py)*(sj15));
IkReal x1208=((IkReal(0.800000000000000))*(cj16));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j17)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16)))+(((x1206)*(x1208)))+(((IkReal(0.200000000000000))*(x1207)))+(((IkReal(0.200000000000000))*(x1206)))+(((x1207)*(x1208))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1205)*(x1207)))+(((IkReal(-1.00000000000000))*(x1205)*(x1206)))+(((IkReal(-1.00000000000000))*(cj16)*(pz)))+(((IkReal(0.100000000000000))*(sj16))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1209=IKcos(j18);
IkReal x1210=((py)*(sj15));
IkReal x1211=((IkReal(1.00000000000000))*(cj16));
IkReal x1212=((IkReal(1.00000000000000))*(cj15));
IkReal x1213=((cj15)*(px));
IkReal x1214=((IkReal(0.321000000000000))*(x1209));
evalcond[0]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(py)*(x1212)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1213)))+(((IkReal(0.200000000000000))*(x1210)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1209))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x1214))));
evalcond[3]=((IkReal(0.400000000000000))+(x1214)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1210)*(x1211)))+(((IkReal(-1.00000000000000))*(x1211)*(x1213)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((cj16)*(x1214)))+(((IkReal(-1.00000000000000))*(px)*(x1212)))+(((IkReal(0.400000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x1210))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1215=((IkReal(1.00000000000000))*(sj16));
IkReal x1216=((cj15)*(px));
IkReal x1217=((py)*(sj15));
IkReal x1218=((IkReal(0.800000000000000))*(cj16));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1217)))+(((IkReal(0.200000000000000))*(x1216)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16)))+(((x1216)*(x1218)))+(((x1217)*(x1218))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1215)*(x1216)))+(((IkReal(-1.00000000000000))*(x1215)*(x1217)))+(((IkReal(-1.00000000000000))*(cj16)*(pz)))+(((IkReal(0.100000000000000))*(sj16))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(-3.11526479750779))*(px)*(sj15)))+(((IkReal(3.11526479750779))*(cj15)*(py)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1219=IKcos(j18);
IkReal x1220=((py)*(sj15));
IkReal x1221=((IkReal(1.00000000000000))*(cj16));
IkReal x1222=((IkReal(1.00000000000000))*(cj15));
IkReal x1223=((cj15)*(px));
IkReal x1224=((IkReal(0.321000000000000))*(x1219));
evalcond[0]=((((px)*(sj15)))+(((IkReal(-1.00000000000000))*(py)*(x1222)))+(((IkReal(0.321000000000000))*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1219)))+(((IkReal(0.200000000000000))*(x1220)))+(((IkReal(0.200000000000000))*(x1223)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x1224))));
evalcond[3]=((IkReal(0.400000000000000))+(x1224)+(((IkReal(-1.00000000000000))*(x1220)*(x1221)))+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1221)*(x1223)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(px)*(x1222)))+(((IkReal(-1.00000000000000))*(x1220)))+(((cj16)*(x1224)))+(((IkReal(0.400000000000000))*(cj16))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1225=((cj15)*(px));
IkReal x1226=((IkReal(0.800000000000000))*(cj16));
IkReal x1227=((py)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j17)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((x1225)*(x1226)))+(((IkReal(0.200000000000000))*(x1227)))+(((IkReal(0.200000000000000))*(x1225)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16)))+(((x1226)*(x1227))));
evalcond[2]=((((IkReal(-0.100000000000000))*(sj16)))+(((sj16)*(x1225)))+(((sj16)*(x1227)))+(((cj16)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1228=IKcos(j18);
IkReal x1229=((py)*(sj15));
IkReal x1230=((IkReal(1.00000000000000))*(cj16));
IkReal x1231=((IkReal(1.00000000000000))*(cj15));
IkReal x1232=((cj15)*(px));
IkReal x1233=((IkReal(0.321000000000000))*(x1228));
evalcond[0]=((((px)*(sj15)))+(((IkReal(-0.321000000000000))*(IKsin(j18))))+(((IkReal(-1.00000000000000))*(py)*(x1231))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1228)))+(((IkReal(0.200000000000000))*(x1229)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1232))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj16)))+(((sj16)*(x1233)))+(pz));
evalcond[3]=((IkReal(0.400000000000000))+(x1233)+(((IkReal(-1.00000000000000))*(x1230)*(x1232)))+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1229)*(x1230)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1229)))+(((IkReal(-1.00000000000000))*(px)*(x1231)))+(((cj16)*(x1233)))+(((IkReal(0.400000000000000))*(cj16))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1234=((cj15)*(px));
IkReal x1235=((IkReal(0.800000000000000))*(cj16));
IkReal x1236=((py)*(sj15));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j17, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j17)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((x1234)*(x1235)))+(((x1235)*(x1236)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1234)))+(((IkReal(0.200000000000000))*(x1236)))+(((IkReal(-0.800000000000000))*(pz)*(sj16)))+(((IkReal(-0.0800000000000000))*(cj16))));
evalcond[2]=((((IkReal(-0.100000000000000))*(sj16)))+(((sj16)*(x1236)))+(((sj16)*(x1234)))+(((cj16)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((((IkReal(3.11526479750779))*(px)*(sj15)))+(((IkReal(-3.11526479750779))*(cj15)*(py)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[5];
IkReal x1237=IKcos(j18);
IkReal x1238=((py)*(sj15));
IkReal x1239=((IkReal(1.00000000000000))*(cj16));
IkReal x1240=((IkReal(1.00000000000000))*(cj15));
IkReal x1241=((cj15)*(px));
IkReal x1242=((IkReal(0.321000000000000))*(x1237));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x1240)))+(((px)*(sj15)))+(((IkReal(-0.321000000000000))*(IKsin(j18)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1241)))+(((IkReal(0.256800000000000))*(x1237)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1238))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj16)))+(((sj16)*(x1242)))+(pz));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1239)*(x1241)))+(x1242)+(((IkReal(-1.00000000000000))*(x1238)*(x1239)))+(((pz)*(sj16)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(px)*(x1240)))+(((cj16)*(x1242)))+(((IkReal(-1.00000000000000))*(x1238)))+(((IkReal(0.400000000000000))*(cj16))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1243=((IkReal(250.000000000000))*(sj16));
IkReal x1244=((py)*(sj15));
IkReal x1245=((cj15)*(px));
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((x1243)*(x1245)))+(((x1243)*(x1244)))+(((IkReal(-83.6987500000000))*(sj16))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1245)))+(((IkReal(-0.778816199376947))*(x1244)))+(((IkReal(3.89408099688474))*(pp))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((x1243)*(x1245)))+(((x1243)*(x1244)))+(((IkReal(-83.6987500000000))*(sj16)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1245)))+(((IkReal(-0.778816199376947))*(x1244)))+(((IkReal(3.89408099688474))*(pp)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj16) != 0)?((IkReal)1/(cj16)):(IkReal)1.0e30))*(((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-1250.00000000000))*(pp)*(sj16)))+(((x1243)*(x1245)))+(((x1243)*(x1244)))+(((IkReal(-83.6987500000000))*(sj16)))))), ((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1245)))+(((IkReal(-0.778816199376947))*(x1244)))+(((IkReal(3.89408099688474))*(pp)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x1246=IKcos(j18);
IkReal x1247=IKsin(j18);
IkReal x1248=((cj17)*(sj16));
IkReal x1249=((cj16)*(cj17));
IkReal x1250=((cj15)*(px));
IkReal x1251=((IkReal(1.00000000000000))*(cj16));
IkReal x1252=((py)*(sj15));
IkReal x1253=((px)*(sj15));
IkReal x1254=((IkReal(0.321000000000000))*(x1247));
IkReal x1255=((IkReal(0.321000000000000))*(x1246));
IkReal x1256=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((((sj17)*(x1254)))+(((IkReal(-1.00000000000000))*(x1256)))+(x1253));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1246)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1252)))+(((IkReal(0.200000000000000))*(x1250))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x1255)))+(((x1249)*(x1254))));
evalcond[3]=((IkReal(0.400000000000000))+(x1255)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1251)*(x1252)))+(((IkReal(-1.00000000000000))*(x1250)*(x1251)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1248)*(x1254)))+(((IkReal(0.400000000000000))*(cj16)))+(((cj16)*(x1255)))+(((IkReal(-1.00000000000000))*(x1252)))+(((IkReal(-1.00000000000000))*(x1250))));
evalcond[5]=((((sj17)*(x1253)))+(x1254)+(((IkReal(-1.00000000000000))*(sj17)*(x1256)))+(((pz)*(x1249)))+(((IkReal(-0.100000000000000))*(x1248)))+(((x1248)*(x1252)))+(((x1248)*(x1250))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
IkReal x1257=((IkReal(3.11526479750779))*(cj16));
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((cj15)*(px)*(x1257)))+(((py)*(sj15)*(x1257)))+(((IkReal(-0.311526479750779))*(cj16))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((cj15)*(px)*(x1257)))+(((py)*(sj15)*(x1257)))+(((IkReal(-0.311526479750779))*(cj16)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)*(sj16)))+(((cj15)*(px)*(x1257)))+(((py)*(sj15)*(x1257)))+(((IkReal(-0.311526479750779))*(cj16)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x1258=IKcos(j18);
IkReal x1259=IKsin(j18);
IkReal x1260=((cj17)*(sj16));
IkReal x1261=((cj16)*(cj17));
IkReal x1262=((cj15)*(px));
IkReal x1263=((IkReal(1.00000000000000))*(cj16));
IkReal x1264=((py)*(sj15));
IkReal x1265=((px)*(sj15));
IkReal x1266=((IkReal(0.321000000000000))*(x1259));
IkReal x1267=((IkReal(0.321000000000000))*(x1258));
IkReal x1268=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((((sj17)*(x1266)))+(x1265)+(((IkReal(-1.00000000000000))*(x1268))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1258)))+(((IkReal(0.200000000000000))*(x1262)))+(((IkReal(0.200000000000000))*(x1264))));
evalcond[2]=((((x1261)*(x1266)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x1267))));
evalcond[3]=((IkReal(0.400000000000000))+(x1267)+(((IkReal(-1.00000000000000))*(x1263)*(x1264)))+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1262)*(x1263)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1260)*(x1266)))+(((IkReal(0.400000000000000))*(cj16)))+(((cj16)*(x1267)))+(((IkReal(-1.00000000000000))*(x1264)))+(((IkReal(-1.00000000000000))*(x1262))));
evalcond[5]=((((sj17)*(x1265)))+(x1266)+(((IkReal(-1.00000000000000))*(sj17)*(x1268)))+(((x1260)*(x1264)))+(((x1260)*(x1262)))+(((IkReal(-0.100000000000000))*(x1260)))+(((pz)*(x1261))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
_nj18 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j18array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj17) != 0)?((IkReal)1/(sj17)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(px)*(sj15)))+(((IkReal(1000.00000000000))*(cj15)*(py)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj15)*(px)))+(((IkReal(-0.778816199376947))*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
_ij18[0] = ij18; _ij18[1] = -1;
for(int iij18 = ij18+1; iij18 < 1; ++iij18)
{
if( j18valid[iij18] && IKabs(cj18array[ij18]-cj18array[iij18]) < IKFAST_SOLUTION_THRESH && IKabs(sj18array[ij18]-sj18array[iij18]) < IKFAST_SOLUTION_THRESH )
{
    j18valid[iij18]=false; _ij18[1] = iij18; break; 
}
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];
{
IkReal evalcond[6];
IkReal x1269=IKcos(j18);
IkReal x1270=IKsin(j18);
IkReal x1271=((cj17)*(sj16));
IkReal x1272=((cj16)*(cj17));
IkReal x1273=((cj15)*(px));
IkReal x1274=((IkReal(1.00000000000000))*(cj16));
IkReal x1275=((py)*(sj15));
IkReal x1276=((px)*(sj15));
IkReal x1277=((IkReal(0.321000000000000))*(x1270));
IkReal x1278=((IkReal(0.321000000000000))*(x1269));
IkReal x1279=((IkReal(1.00000000000000))*(cj15)*(py));
evalcond[0]=((x1276)+(((IkReal(-1.00000000000000))*(x1279)))+(((sj17)*(x1277))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1275)))+(((IkReal(0.200000000000000))*(x1273)))+(((IkReal(0.256800000000000))*(x1269))));
evalcond[2]=((((x1272)*(x1277)))+(((IkReal(0.400000000000000))*(sj16)))+(pz)+(((sj16)*(x1278))));
evalcond[3]=((IkReal(0.400000000000000))+(x1278)+(((pz)*(sj16)))+(((IkReal(-1.00000000000000))*(x1273)*(x1274)))+(((IkReal(-1.00000000000000))*(x1274)*(x1275)))+(((IkReal(0.100000000000000))*(cj16))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1271)*(x1277)))+(((cj16)*(x1278)))+(((IkReal(0.400000000000000))*(cj16)))+(((IkReal(-1.00000000000000))*(x1275)))+(((IkReal(-1.00000000000000))*(x1273))));
evalcond[5]=((((pz)*(x1272)))+(x1277)+(((IkReal(-1.00000000000000))*(sj17)*(x1279)))+(((x1271)*(x1275)))+(((x1271)*(x1273)))+(((IkReal(-0.100000000000000))*(x1271)))+(((sj17)*(x1276))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x138=((IkReal(1.00000000000000))*(cj17));
IkReal x139=((cj18)*(sj16));
IkReal x140=((cj16)*(sj17));
IkReal x141=((sj16)*(sj18));
IkReal x142=((sj16)*(sj17));
IkReal x143=((cj16)*(cj18));
IkReal x144=((sj17)*(sj18));
IkReal x145=((cj16)*(sj18));
IkReal x146=((cj18)*(sj15)*(sj17));
IkReal x147=((((IkReal(-1.00000000000000))*(x138)*(x143)))+(x141));
IkReal x148=((((sj15)*(x142)))+(((cj15)*(cj17))));
IkReal x149=((((IkReal(-1.00000000000000))*(sj15)*(x138)))+(((cj15)*(x142))));
IkReal x150=((((IkReal(-1.00000000000000))*(x138)*(x141)))+(x143));
IkReal x151=((cj15)*(x150));
IkReal x152=((((IkReal(-1.00000000000000))*(x138)*(x139)))+(((IkReal(-1.00000000000000))*(x145))));
IkReal x153=((((IkReal(-1.00000000000000))*(x138)*(x145)))+(((IkReal(-1.00000000000000))*(x139))));
IkReal x154=((cj15)*(x152));
IkReal x155=((((sj15)*(x150)))+(((cj15)*(x144))));
IkReal x156=((((IkReal(-1.00000000000000))*(sj15)*(x144)))+(x151));
IkReal x157=((((cj15)*(cj18)*(sj17)))+(((sj15)*(x152))));
IkReal x158=((x154)+(((IkReal(-1.00000000000000))*(x146))));
new_r00=((((r20)*(x147)))+(((r00)*(x158)))+(((r10)*(x157))));
new_r01=((((r01)*(x158)))+(((r21)*(x147)))+(((r11)*(x157))));
new_r02=((((r02)*(((x154)+(((IkReal(-1.00000000000000))*(x146)))))))+(((r22)*(x147)))+(((r12)*(x157))));
new_r10=((((r20)*(x140)))+(((r00)*(x149)))+(((r10)*(x148))));
new_r11=((((r01)*(x149)))+(((r21)*(x140)))+(((r11)*(x148))));
new_r12=((((r02)*(x149)))+(((r22)*(x140)))+(((r12)*(x148))));
new_r20=((((r00)*(((((IkReal(-1.00000000000000))*(sj15)*(x144)))+(x151)))))+(((r20)*(x153)))+(((r10)*(x155))));
new_r21=((((r01)*(x156)))+(((r21)*(x153)))+(((r11)*(x155))));
new_r22=((((r22)*(x153)))+(((r02)*(x156)))+(((r12)*(x155))));
{
IkReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
_nj20 = 2;
cj20array[0]=new_r22;
if( cj20array[0] >= -1-IKFAST_SINCOS_THRESH && cj20array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
_ij20[0] = ij20; _ij20[1] = -1;
for(int iij20 = ij20+1; iij20 < 2; ++iij20)
{
if( j20valid[iij20] && IKabs(cj20array[ij20]-cj20array[iij20]) < IKFAST_SOLUTION_THRESH && IKabs(sj20array[ij20]-sj20array[iij20]) < IKFAST_SOLUTION_THRESH )
{
    j20valid[iij20]=false; _ij20[1] = iij20; break; 
}
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x159=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x159;
evalcond[2]=x159;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x159;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
IkReal j21mul = 1;
j21=0;
IkReal j19mul=IkReal(-1.00000000000000);
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j19=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].fmul = j19mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].fmul = j21mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

} else
{
IkReal x160=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=x160;
evalcond[2]=x160;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
_nj19 = 2;
Atan2Value<IkReal> x162 = IKatan2WithCheck(new_r02,new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x162.valid ) {
    continue;
}
IkReal x161=x162.value;
j19array[0]=((IkReal(-1.00000000000000))*(x161));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x161))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 2; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j19))))+(((new_r12)*(IKcos(j19)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst79;
gconst79=IKsign((((sj19)*(sj19))+((cj19)*(cj19))));
dummyeval[0]=(((sj19)*(sj19))+((cj19)*(cj19)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst80;
gconst80=IKsign((((sj19)*(sj19))+((cj19)*(cj19))));
dummyeval[0]=(((sj19)*(sj19))+((cj19)*(cj19)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x163=((IkReal(1.00000000000000))*(sj19));
Atan2Value<IkReal> x164 = IKatan2WithCheck(((gconst80)*(((((IkReal(-1.00000000000000))*(new_r00)*(x163)))+(((cj19)*(new_r10)))))),((gconst80)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x163)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x164.valid ) {
    continue;
}
j21array[0]=x164.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x165=IKcos(j21);
IkReal x166=IKsin(j21);
IkReal x167=((IkReal(1.00000000000000))*(cj19));
IkReal x168=((IkReal(1.00000000000000))*(sj19));
IkReal x169=((IkReal(1.00000000000000))*(x166));
IkReal x170=((sj19)*(x165));
IkReal x171=((x166)*(x167));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x168)))+(((IkReal(-1.00000000000000))*(x169)))+(((cj19)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x165)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x168))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x169)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x171)))+(x170)+(new_r01));
evalcond[4]=((x165)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[5]=((((cj19)*(x165)))+(((sj19)*(x166)))+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x166)*(x168)))+(new_r11)+(((IkReal(-1.00000000000000))*(x165)*(x167))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x171)))+(x170)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x172=((IkReal(1.00000000000000))*(sj19));
Atan2Value<IkReal> x173 = IKatan2WithCheck(((gconst79)*(((((cj19)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r00)*(x172)))))),((gconst79)*(((((IkReal(-1.00000000000000))*(cj19)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(x172)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x173.valid ) {
    continue;
}
j21array[0]=x173.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x174=IKcos(j21);
IkReal x175=IKsin(j21);
IkReal x176=((IkReal(1.00000000000000))*(cj19));
IkReal x177=((IkReal(1.00000000000000))*(sj19));
IkReal x178=((IkReal(1.00000000000000))*(x175));
IkReal x179=((sj19)*(x174));
IkReal x180=((x175)*(x176));
evalcond[0]=((((IkReal(-1.00000000000000))*(x178)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x177))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x174)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x177))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x178)))+(((cj19)*(new_r01)))+(((new_r11)*(sj19))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x180)))+(x179)+(new_r01));
evalcond[4]=((x174)+(((new_r10)*(sj19)))+(((cj19)*(new_r00))));
evalcond[5]=((((cj19)*(x174)))+(((sj19)*(x175)))+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x175)*(x177)))+(((IkReal(-1.00000000000000))*(x174)*(x176)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x180)))+(x179)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
Atan2Value<IkReal> x181 = IKatan2WithCheck(((gconst61)*(new_r21)),((IkReal(-1.00000000000000))*(gconst61)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x181.valid ) {
    continue;
}
j21array[0]=x181.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[2];
evalcond[0]=((((sj20)*(IKcos(j21))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj20)*(IKsin(j21))))+(new_r21));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst62;
gconst62=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x182=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x182;
evalcond[2]=x182;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x182;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((IkReal(-1.00000000000000))*(cj21)*(new_r02)))+(((new_r12)*(sj21)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj21)*(new_r02)))+(((new_r12)*(sj21))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x183=((IkReal(-1.00000000000000))+(new_r22));
Atan2Value<IkReal> x184 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x184.valid ) {
    continue;
}
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j21)+(x184.value)), IkReal(6.28318530717959))));
evalcond[1]=x183;
evalcond[2]=x183;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x183;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign(((((new_r10)*(new_r12)))+(((new_r00)*(new_r02)))));
dummyeval[0]=((((new_r10)*(new_r12)))+(((new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst67;
gconst67=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x187 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x187.valid ) {
    continue;
}
IkReal x185=IKsin(x187.value);
IkReal x186=((gconst67)*(x185));
Atan2Value<IkReal> x188 = IKatan2WithCheck(((new_r12)*(x186)),((new_r02)*(x186)),IKFAST_ATAN2_MAGTHRESH);
if( !x188.valid ) {
    continue;
}
j19array[0]=x188.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x189=IKcos(j19);
IkReal x190=IKsin(j19);
IkReal x191=((IkReal(1.00000000000000))*(x190));
Atan2Value<IkReal> x199 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x199.valid ) {
    continue;
}
IkReal x192=x199.value;
IkReal x193=IKsin(x192);
IkReal x194=IKcos(x192);
IkReal x195=((IkReal(1.00000000000000))*(x194));
IkReal x196=((IkReal(1.00000000000000))*(x193));
IkReal x197=((x190)*(x194));
IkReal x198=((((x189)*(x195)))+(((x191)*(x193))));
evalcond[0]=((((new_r12)*(x189)))+(((IkReal(-1.00000000000000))*(new_r02)*(x191))));
evalcond[1]=((((new_r02)*(x189)))+(((new_r12)*(x190))));
evalcond[2]=((((new_r10)*(x189)))+(x193)+(((IkReal(-1.00000000000000))*(new_r00)*(x191))));
evalcond[3]=((((new_r11)*(x189)))+(((IkReal(-1.00000000000000))*(x195)))+(((IkReal(-1.00000000000000))*(new_r01)*(x191))));
evalcond[4]=((((new_r11)*(x190)))+(((new_r01)*(x189)))+(((IkReal(-1.00000000000000))*(x196))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x189)*(x196)))+(x197)+(new_r01));
evalcond[6]=((((new_r10)*(x190)))+(((new_r00)*(x189)))+(((IkReal(-1.00000000000000))*(x195))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x198)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x198)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x191)*(x194)))+(((x189)*(x193)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x202 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x202.valid ) {
    continue;
}
IkReal x200=IKsin(x202.value);
IkReal x201=((gconst66)*(x200));
Atan2Value<IkReal> x203 = IKatan2WithCheck(((new_r02)*(x201)),((IkReal(-1.00000000000000))*(new_r12)*(x201)),IKFAST_ATAN2_MAGTHRESH);
if( !x203.valid ) {
    continue;
}
j19array[0]=x203.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x204=IKcos(j19);
IkReal x205=IKsin(j19);
IkReal x206=((IkReal(1.00000000000000))*(x205));
Atan2Value<IkReal> x214 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x214.valid ) {
    continue;
}
IkReal x207=x214.value;
IkReal x208=IKsin(x207);
IkReal x209=IKcos(x207);
IkReal x210=((IkReal(1.00000000000000))*(x209));
IkReal x211=((IkReal(1.00000000000000))*(x208));
IkReal x212=((x205)*(x209));
IkReal x213=((((x204)*(x210)))+(((x206)*(x208))));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x206)))+(((new_r12)*(x204))));
evalcond[1]=((((new_r02)*(x204)))+(((new_r12)*(x205))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x206)))+(((new_r10)*(x204)))+(x208));
evalcond[3]=((((new_r11)*(x204)))+(((IkReal(-1.00000000000000))*(x210)))+(((IkReal(-1.00000000000000))*(new_r01)*(x206))));
evalcond[4]=((((new_r11)*(x205)))+(((new_r01)*(x204)))+(((IkReal(-1.00000000000000))*(x211))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x204)*(x211)))+(x212)+(new_r01));
evalcond[6]=((((new_r10)*(x205)))+(((new_r00)*(x204)))+(((IkReal(-1.00000000000000))*(x210))));
evalcond[7]=((new_r00)+(((IkReal(-1.00000000000000))*(x213))));
evalcond[8]=((new_r11)+(((IkReal(-1.00000000000000))*(x213))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x206)*(x209)))+(((x204)*(x208)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x215=((IkReal(-1.00000000000000))+(new_r22));
Atan2Value<IkReal> x216 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x216.valid ) {
    continue;
}
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((j21)+(x216.value)), IkReal(6.28318530717959))));
evalcond[1]=x215;
evalcond[2]=x215;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x215;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst68;
gconst68=IKsign(((((new_r10)*(new_r12)))+(((new_r00)*(new_r02)))));
dummyeval[0]=((((new_r10)*(new_r12)))+(((new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst69;
gconst69=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x219 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x219.valid ) {
    continue;
}
IkReal x217=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x219.value)))));
IkReal x218=((IkReal(-1.00000000000000))*(gconst69)*(x217));
Atan2Value<IkReal> x220 = IKatan2WithCheck(((new_r12)*(x218)),((new_r02)*(x218)),IKFAST_ATAN2_MAGTHRESH);
if( !x220.valid ) {
    continue;
}
j19array[0]=x220.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x221=IKcos(j19);
IkReal x222=IKsin(j19);
IkReal x223=((IkReal(1.00000000000000))*(x222));
IkReal x224=((IkReal(1.00000000000000))*(x221));
Atan2Value<IkReal> x232 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x232.valid ) {
    continue;
}
IkReal x225=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x232.value))));
IkReal x226=IKsin(x225);
IkReal x227=IKcos(x225);
IkReal x228=((IkReal(1.00000000000000))*(x227));
IkReal x229=((IkReal(1.00000000000000))*(x226));
IkReal x230=((x223)*(x226));
IkReal x231=((x224)*(x227));
evalcond[0]=((((new_r12)*(x221)))+(((IkReal(-1.00000000000000))*(new_r02)*(x223))));
evalcond[1]=((((new_r02)*(x221)))+(((new_r12)*(x222))));
evalcond[2]=((((new_r10)*(x221)))+(((IkReal(-1.00000000000000))*(x226)))+(((IkReal(-1.00000000000000))*(new_r00)*(x223))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x223)))+(((new_r11)*(x221)))+(((IkReal(-1.00000000000000))*(x228))));
evalcond[4]=((((new_r01)*(x221)))+(x229)+(((new_r11)*(x222))));
evalcond[5]=((((x224)*(x226)))+(((x222)*(x227)))+(new_r01));
evalcond[6]=((((new_r00)*(x221)))+(((new_r10)*(x222)))+(((IkReal(-1.00000000000000))*(x228))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x231)))+(x230)+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x231)))+(x230)+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x223)*(x227)))+(((IkReal(-1.00000000000000))*(x221)*(x226)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x235 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x235.valid ) {
    continue;
}
IkReal x233=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x235.value)))));
IkReal x234=((gconst68)*(x233));
Atan2Value<IkReal> x236 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)*(x234)),((IkReal(1.00000000000000))*(new_r12)*(x234)),IKFAST_ATAN2_MAGTHRESH);
if( !x236.valid ) {
    continue;
}
j19array[0]=x236.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x237=IKcos(j19);
IkReal x238=IKsin(j19);
IkReal x239=((IkReal(1.00000000000000))*(x238));
IkReal x240=((IkReal(1.00000000000000))*(x237));
Atan2Value<IkReal> x248 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x248.valid ) {
    continue;
}
IkReal x241=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x248.value))));
IkReal x242=IKsin(x241);
IkReal x243=IKcos(x241);
IkReal x244=((IkReal(1.00000000000000))*(x243));
IkReal x245=((IkReal(1.00000000000000))*(x242));
IkReal x246=((x239)*(x242));
IkReal x247=((x240)*(x243));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x239)))+(((new_r12)*(x237))));
evalcond[1]=((((new_r02)*(x237)))+(((new_r12)*(x238))));
evalcond[2]=((((new_r10)*(x237)))+(((IkReal(-1.00000000000000))*(x242)))+(((IkReal(-1.00000000000000))*(new_r00)*(x239))));
evalcond[3]=((((new_r11)*(x237)))+(((IkReal(-1.00000000000000))*(x244)))+(((IkReal(-1.00000000000000))*(new_r01)*(x239))));
evalcond[4]=((((new_r11)*(x238)))+(((new_r01)*(x237)))+(x245));
evalcond[5]=((((x240)*(x242)))+(((x238)*(x243)))+(new_r01));
evalcond[6]=((((new_r10)*(x238)))+(((new_r00)*(x237)))+(((IkReal(-1.00000000000000))*(x244))));
evalcond[7]=((x246)+(((IkReal(-1.00000000000000))*(x247)))+(new_r00));
evalcond[8]=((x246)+(((IkReal(-1.00000000000000))*(x247)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x237)*(x242)))+(new_r10)+(((IkReal(-1.00000000000000))*(x239)*(x243))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x249=((gconst65)*(new_r01));
Atan2Value<IkReal> x250 = IKatan2WithCheck(((new_r02)*(x249)),((IkReal(-1.00000000000000))*(new_r12)*(x249)),IKFAST_ATAN2_MAGTHRESH);
if( !x250.valid ) {
    continue;
}
j19array[0]=x250.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x251=IKcos(j19);
IkReal x252=IKsin(j19);
IkReal x253=((IkReal(1.00000000000000))*(cj21));
IkReal x254=((sj21)*(x252));
IkReal x255=((IkReal(1.00000000000000))*(x251));
IkReal x256=((IkReal(1.00000000000000))*(x252));
IkReal x257=((x251)*(x253));
evalcond[0]=((((new_r12)*(x251)))+(((IkReal(-1.00000000000000))*(new_r02)*(x256))));
evalcond[1]=((((new_r02)*(x251)))+(((new_r12)*(x252))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj21)))+(((new_r10)*(x251)))+(((IkReal(-1.00000000000000))*(new_r00)*(x256))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x256)))+(((new_r11)*(x251)))+(((IkReal(-1.00000000000000))*(x253))));
evalcond[4]=((((new_r01)*(x251)))+(sj21)+(((new_r11)*(x252))));
evalcond[5]=((((cj21)*(x252)))+(((sj21)*(x251)))+(new_r01));
evalcond[6]=((((new_r00)*(x251)))+(((new_r10)*(x252)))+(((IkReal(-1.00000000000000))*(x253))));
evalcond[7]=((x254)+(new_r00)+(((IkReal(-1.00000000000000))*(x257))));
evalcond[8]=((x254)+(new_r11)+(((IkReal(-1.00000000000000))*(x257))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x252)*(x253)))+(((IkReal(-1.00000000000000))*(sj21)*(x255)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x258=((gconst64)*(sj21));
Atan2Value<IkReal> x259 = IKatan2WithCheck(((new_r02)*(x258)),((IkReal(-1.00000000000000))*(new_r12)*(x258)),IKFAST_ATAN2_MAGTHRESH);
if( !x259.valid ) {
    continue;
}
j19array[0]=x259.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x260=IKcos(j19);
IkReal x261=IKsin(j19);
IkReal x262=((IkReal(1.00000000000000))*(cj21));
IkReal x263=((sj21)*(x261));
IkReal x264=((IkReal(1.00000000000000))*(x260));
IkReal x265=((IkReal(1.00000000000000))*(x261));
IkReal x266=((x260)*(x262));
evalcond[0]=((((new_r12)*(x260)))+(((IkReal(-1.00000000000000))*(new_r02)*(x265))));
evalcond[1]=((((new_r12)*(x261)))+(((new_r02)*(x260))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x265)))+(((IkReal(-1.00000000000000))*(sj21)))+(((new_r10)*(x260))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x265)))+(((IkReal(-1.00000000000000))*(x262)))+(((new_r11)*(x260))));
evalcond[4]=((sj21)+(((new_r01)*(x260)))+(((new_r11)*(x261))));
evalcond[5]=((((cj21)*(x261)))+(new_r01)+(((sj21)*(x260))));
evalcond[6]=((((new_r00)*(x260)))+(((IkReal(-1.00000000000000))*(x262)))+(((new_r10)*(x261))));
evalcond[7]=((x263)+(new_r00)+(((IkReal(-1.00000000000000))*(x266))));
evalcond[8]=((x263)+(new_r11)+(((IkReal(-1.00000000000000))*(x266))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x261)*(x262)))+(new_r10)+(((IkReal(-1.00000000000000))*(sj21)*(x264))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x267=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=x267;
evalcond[2]=x267;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst70;
gconst70=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst71;
gconst71=IKsign(((((cj21)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj21)))));
dummyeval[0]=((((cj21)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj21))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x268=((IkReal(1.00000000000000))+(new_r22));
Atan2Value<IkReal> x269 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x269.valid ) {
    continue;
}
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x269.value)+(j21)), IkReal(6.28318530717959))));
evalcond[1]=x268;
evalcond[2]=x268;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst72;
gconst72=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst73;
gconst73=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x272 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x272.valid ) {
    continue;
}
IkReal x270=IKcos(x272.value);
IkReal x271=((gconst73)*(x270));
Atan2Value<IkReal> x273 = IKatan2WithCheck(((new_r02)*(x271)),((IkReal(-1.00000000000000))*(new_r12)*(x271)),IKFAST_ATAN2_MAGTHRESH);
if( !x273.valid ) {
    continue;
}
j19array[0]=x273.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x274=IKcos(j19);
IkReal x275=IKsin(j19);
IkReal x276=((IkReal(1.00000000000000))*(x275));
Atan2Value<IkReal> x284 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x284.valid ) {
    continue;
}
IkReal x277=x284.value;
IkReal x278=IKsin(x277);
IkReal x279=IKcos(x277);
IkReal x280=((IkReal(1.00000000000000))*(x279));
IkReal x281=((x275)*(x279));
IkReal x282=((x274)*(x278));
IkReal x283=((x282)+(x281));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x276)))+(((new_r12)*(x274))));
evalcond[1]=((((new_r02)*(x274)))+(((new_r12)*(x275))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x276)))+(x278)+(((new_r10)*(x274))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x276)))+(((IkReal(-1.00000000000000))*(x280)))+(((new_r11)*(x274))));
evalcond[4]=((x278)+(((new_r01)*(x274)))+(((new_r11)*(x275))));
evalcond[5]=((x283)+(new_r01));
evalcond[6]=((x279)+(((new_r00)*(x274)))+(((new_r10)*(x275))));
evalcond[7]=((((x274)*(x279)))+(new_r00)+(((IkReal(-1.00000000000000))*(x276)*(x278))));
evalcond[8]=((((x275)*(x278)))+(new_r11)+(((IkReal(-1.00000000000000))*(x274)*(x280))));
evalcond[9]=((x283)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x287 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x287.valid ) {
    continue;
}
IkReal x285=IKsin(x287.value);
IkReal x286=((gconst72)*(x285));
Atan2Value<IkReal> x288 = IKatan2WithCheck(((new_r02)*(x286)),((IkReal(-1.00000000000000))*(new_r12)*(x286)),IKFAST_ATAN2_MAGTHRESH);
if( !x288.valid ) {
    continue;
}
j19array[0]=x288.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x289=IKcos(j19);
IkReal x290=IKsin(j19);
IkReal x291=((IkReal(1.00000000000000))*(x290));
Atan2Value<IkReal> x299 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x299.valid ) {
    continue;
}
IkReal x292=x299.value;
IkReal x293=IKsin(x292);
IkReal x294=IKcos(x292);
IkReal x295=((IkReal(1.00000000000000))*(x294));
IkReal x296=((x290)*(x294));
IkReal x297=((x289)*(x293));
IkReal x298=((x296)+(x297));
evalcond[0]=((((new_r12)*(x289)))+(((IkReal(-1.00000000000000))*(new_r02)*(x291))));
evalcond[1]=((((new_r12)*(x290)))+(((new_r02)*(x289))));
evalcond[2]=((x293)+(((IkReal(-1.00000000000000))*(new_r00)*(x291)))+(((new_r10)*(x289))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x291)))+(((IkReal(-1.00000000000000))*(x295)))+(((new_r11)*(x289))));
evalcond[4]=((((new_r11)*(x290)))+(x293)+(((new_r01)*(x289))));
evalcond[5]=((x298)+(new_r01));
evalcond[6]=((((new_r10)*(x290)))+(x294)+(((new_r00)*(x289))));
evalcond[7]=((((x289)*(x294)))+(((IkReal(-1.00000000000000))*(x291)*(x293)))+(new_r00));
evalcond[8]=((((x290)*(x293)))+(((IkReal(-1.00000000000000))*(x289)*(x295)))+(new_r11));
evalcond[9]=((x298)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x300=((IkReal(1.00000000000000))+(new_r22));
Atan2Value<IkReal> x301 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x301.valid ) {
    continue;
}
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((x301.value)+(j21)), IkReal(6.28318530717959))));
evalcond[1]=x300;
evalcond[2]=x300;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst74;
gconst74=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst75;
gconst75=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x304 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x304.valid ) {
    continue;
}
IkReal x302=IKcos(((IkReal(-3.14159265000000))+(x304.value)));
IkReal x303=((gconst75)*(x302));
Atan2Value<IkReal> x305 = IKatan2WithCheck(((new_r02)*(x303)),((IkReal(-1.00000000000000))*(new_r12)*(x303)),IKFAST_ATAN2_MAGTHRESH);
if( !x305.valid ) {
    continue;
}
j19array[0]=x305.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x306=IKcos(j19);
IkReal x307=IKsin(j19);
IkReal x308=((IkReal(1.00000000000000))*(x307));
Atan2Value<IkReal> x316 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x316.valid ) {
    continue;
}
IkReal x309=((IkReal(-3.14159265000000))+(x316.value));
IkReal x310=IKsin(x309);
IkReal x311=IKcos(x309);
IkReal x312=((IkReal(1.00000000000000))*(x311));
IkReal x313=((x306)*(x310));
IkReal x314=((x307)*(x311));
IkReal x315=((x314)+(x313));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x308)))+(((new_r12)*(x306))));
evalcond[1]=((((new_r12)*(x307)))+(((new_r02)*(x306))));
evalcond[2]=((((new_r10)*(x306)))+(x310)+(((IkReal(-1.00000000000000))*(new_r00)*(x308))));
evalcond[3]=((((new_r11)*(x306)))+(((IkReal(-1.00000000000000))*(x312)))+(((IkReal(-1.00000000000000))*(new_r01)*(x308))));
evalcond[4]=((((new_r01)*(x306)))+(((new_r11)*(x307)))+(x310));
evalcond[5]=((x315)+(new_r01));
evalcond[6]=((((new_r00)*(x306)))+(((new_r10)*(x307)))+(x311));
evalcond[7]=((((IkReal(-1.00000000000000))*(x308)*(x310)))+(((x306)*(x311)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x306)*(x312)))+(((x307)*(x310)))+(new_r11));
evalcond[9]=((x315)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x319 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x319.valid ) {
    continue;
}
IkReal x317=IKsin(((IkReal(-3.14159265000000))+(x319.value)));
IkReal x318=((gconst74)*(x317));
Atan2Value<IkReal> x320 = IKatan2WithCheck(((new_r02)*(x318)),((IkReal(-1.00000000000000))*(new_r12)*(x318)),IKFAST_ATAN2_MAGTHRESH);
if( !x320.valid ) {
    continue;
}
j19array[0]=x320.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x321=IKcos(j19);
IkReal x322=IKsin(j19);
IkReal x323=((IkReal(1.00000000000000))*(x322));
Atan2Value<IkReal> x331 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x331.valid ) {
    continue;
}
IkReal x324=((IkReal(-3.14159265000000))+(x331.value));
IkReal x325=IKsin(x324);
IkReal x326=IKcos(x324);
IkReal x327=((IkReal(1.00000000000000))*(x326));
IkReal x328=((x321)*(x325));
IkReal x329=((x322)*(x326));
IkReal x330=((x328)+(x329));
evalcond[0]=((((new_r12)*(x321)))+(((IkReal(-1.00000000000000))*(new_r02)*(x323))));
evalcond[1]=((((new_r12)*(x322)))+(((new_r02)*(x321))));
evalcond[2]=((x325)+(((IkReal(-1.00000000000000))*(new_r00)*(x323)))+(((new_r10)*(x321))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x327)))+(((IkReal(-1.00000000000000))*(new_r01)*(x323)))+(((new_r11)*(x321))));
evalcond[4]=((((new_r01)*(x321)))+(x325)+(((new_r11)*(x322))));
evalcond[5]=((x330)+(new_r01));
evalcond[6]=((((new_r00)*(x321)))+(x326)+(((new_r10)*(x322))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x323)*(x325)))+(new_r00)+(((x321)*(x326))));
evalcond[8]=((((x322)*(x325)))+(((IkReal(-1.00000000000000))*(x321)*(x327)))+(new_r11));
evalcond[9]=((x330)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x332=((gconst71)*(new_r00));
Atan2Value<IkReal> x333 = IKatan2WithCheck(((new_r02)*(x332)),((IkReal(-1.00000000000000))*(new_r12)*(x332)),IKFAST_ATAN2_MAGTHRESH);
if( !x333.valid ) {
    continue;
}
j19array[0]=x333.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x334=IKcos(j19);
IkReal x335=IKsin(j19);
IkReal x336=((IkReal(1.00000000000000))*(sj21));
IkReal x337=((cj21)*(x335));
IkReal x338=((IkReal(1.00000000000000))*(x334));
IkReal x339=((IkReal(1.00000000000000))*(x335));
IkReal x340=((x334)*(x336));
evalcond[0]=((((new_r12)*(x334)))+(((IkReal(-1.00000000000000))*(new_r02)*(x339))));
evalcond[1]=((((new_r12)*(x335)))+(((new_r02)*(x334))));
evalcond[2]=((((new_r10)*(x334)))+(((IkReal(-1.00000000000000))*(new_r00)*(x339)))+(((IkReal(-1.00000000000000))*(x336))));
evalcond[3]=((((new_r11)*(x334)))+(((IkReal(-1.00000000000000))*(cj21)))+(((IkReal(-1.00000000000000))*(new_r01)*(x339))));
evalcond[4]=((((new_r01)*(x334)))+(((new_r11)*(x335)))+(((IkReal(-1.00000000000000))*(x336))));
evalcond[5]=((x337)+(new_r01)+(((IkReal(-1.00000000000000))*(x340))));
evalcond[6]=((((new_r00)*(x334)))+(((new_r10)*(x335)))+(cj21));
evalcond[7]=((((cj21)*(x334)))+(((sj21)*(x335)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj21)*(x338)))+(new_r11)+(((IkReal(-1.00000000000000))*(x335)*(x336))));
evalcond[9]=((x337)+(new_r10)+(((IkReal(-1.00000000000000))*(x340))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
IkReal x341=((cj21)*(gconst70));
Atan2Value<IkReal> x342 = IKatan2WithCheck(((new_r02)*(x341)),((IkReal(-1.00000000000000))*(new_r12)*(x341)),IKFAST_ATAN2_MAGTHRESH);
if( !x342.valid ) {
    continue;
}
j19array[0]=x342.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[10];
IkReal x343=IKcos(j19);
IkReal x344=IKsin(j19);
IkReal x345=((IkReal(1.00000000000000))*(sj21));
IkReal x346=((cj21)*(x344));
IkReal x347=((IkReal(1.00000000000000))*(x343));
IkReal x348=((IkReal(1.00000000000000))*(x344));
IkReal x349=((x343)*(x345));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x348)))+(((new_r12)*(x343))));
evalcond[1]=((((new_r02)*(x343)))+(((new_r12)*(x344))));
evalcond[2]=((((new_r10)*(x343)))+(((IkReal(-1.00000000000000))*(new_r00)*(x348)))+(((IkReal(-1.00000000000000))*(x345))));
evalcond[3]=((((new_r11)*(x343)))+(((IkReal(-1.00000000000000))*(cj21)))+(((IkReal(-1.00000000000000))*(new_r01)*(x348))));
evalcond[4]=((((new_r11)*(x344)))+(((new_r01)*(x343)))+(((IkReal(-1.00000000000000))*(x345))));
evalcond[5]=((x346)+(new_r01)+(((IkReal(-1.00000000000000))*(x349))));
evalcond[6]=((((new_r00)*(x343)))+(((new_r10)*(x344)))+(cj21));
evalcond[7]=((((sj21)*(x344)))+(new_r00)+(((cj21)*(x343))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x344)*(x345)))+(((IkReal(-1.00000000000000))*(cj21)*(x347)))+(new_r11));
evalcond[9]=((x346)+(new_r10)+(((IkReal(-1.00000000000000))*(x349))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x350 = IKatan2WithCheck(((gconst63)*(new_r12)),((gconst63)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x350.valid ) {
    continue;
}
j19array[0]=x350.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[18];
IkReal x351=IKcos(j19);
IkReal x352=IKsin(j19);
IkReal x353=((IkReal(1.00000000000000))*(cj21));
IkReal x354=((IkReal(1.00000000000000))*(sj21));
IkReal x355=((IkReal(1.00000000000000))*(sj20));
IkReal x356=((new_r11)*(x352));
IkReal x357=((new_r00)*(x351));
IkReal x358=((cj20)*(x352));
IkReal x359=((sj20)*(x352));
IkReal x360=((new_r01)*(x351));
IkReal x361=((IkReal(1.00000000000000))*(x352));
IkReal x362=((new_r02)*(x351));
IkReal x363=((cj20)*(x351));
evalcond[0]=((((IkReal(-1.00000000000000))*(x351)*(x355)))+(new_r02));
evalcond[1]=((new_r12)+(((IkReal(-1.00000000000000))*(x352)*(x355))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r02)*(x361)))+(((new_r12)*(x351))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x355)))+(x362)+(((new_r12)*(x352))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r00)*(x361)))+(((IkReal(-1.00000000000000))*(x354)))+(((new_r10)*(x351))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x353)))+(((new_r11)*(x351)))+(((IkReal(-1.00000000000000))*(new_r01)*(x361))));
evalcond[6]=((x356)+(x360)+(((cj20)*(sj21))));
evalcond[7]=((new_r01)+(((sj21)*(x363)))+(((cj21)*(x352))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj20)*(x353)))+(x357)+(((new_r10)*(x352))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x353)*(x363)))+(((sj21)*(x352)))+(new_r00));
evalcond[10]=((((sj21)*(x358)))+(((IkReal(-1.00000000000000))*(x351)*(x353)))+(new_r11));
evalcond[11]=((((IkReal(-1.00000000000000))*(x353)*(x358)))+(((IkReal(-1.00000000000000))*(x351)*(x354)))+(new_r10));
evalcond[12]=((((sj20)*(x357)))+(((cj20)*(new_r20)))+(((new_r10)*(x359))));
evalcond[13]=((((sj20)*(x356)))+(((cj20)*(new_r21)))+(((sj20)*(x360))));
evalcond[14]=((IkReal(-1.00000000000000))+(((cj20)*(new_r22)))+(((sj20)*(x362)))+(((new_r12)*(x359))));
evalcond[15]=((((IkReal(-1.00000000000000))*(new_r22)*(x355)))+(((cj20)*(x362)))+(((new_r12)*(x358))));
evalcond[16]=((sj21)+(((cj20)*(x356)))+(((cj20)*(x360)))+(((IkReal(-1.00000000000000))*(new_r21)*(x355))));
evalcond[17]=((((IkReal(-1.00000000000000))*(x353)))+(((cj20)*(x357)))+(((new_r10)*(x358)))+(((IkReal(-1.00000000000000))*(new_r20)*(x355))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x364 = IKatan2WithCheck(((gconst62)*(new_r12)),((gconst62)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x364.valid ) {
    continue;
}
j19array[0]=x364.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[18];
IkReal x365=IKcos(j19);
IkReal x366=IKsin(j19);
IkReal x367=((IkReal(1.00000000000000))*(cj21));
IkReal x368=((IkReal(1.00000000000000))*(sj21));
IkReal x369=((IkReal(1.00000000000000))*(sj20));
IkReal x370=((new_r11)*(x366));
IkReal x371=((new_r00)*(x365));
IkReal x372=((cj20)*(x366));
IkReal x373=((sj20)*(x366));
IkReal x374=((new_r01)*(x365));
IkReal x375=((IkReal(1.00000000000000))*(x366));
IkReal x376=((new_r02)*(x365));
IkReal x377=((cj20)*(x365));
evalcond[0]=((new_r02)+(((IkReal(-1.00000000000000))*(x365)*(x369))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x366)*(x369)))+(new_r12));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r02)*(x375)))+(((new_r12)*(x365))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x369)))+(x376)+(((new_r12)*(x366))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r00)*(x375)))+(((IkReal(-1.00000000000000))*(x368)))+(((new_r10)*(x365))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x367)))+(((IkReal(-1.00000000000000))*(new_r01)*(x375)))+(((new_r11)*(x365))));
evalcond[6]=((x374)+(x370)+(((cj20)*(sj21))));
evalcond[7]=((((cj21)*(x366)))+(new_r01)+(((sj21)*(x377))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj20)*(x367)))+(x371)+(((new_r10)*(x366))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x367)*(x377)))+(new_r00)+(((sj21)*(x366))));
evalcond[10]=((new_r11)+(((sj21)*(x372)))+(((IkReal(-1.00000000000000))*(x365)*(x367))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x367)*(x372)))+(new_r10)+(((IkReal(-1.00000000000000))*(x365)*(x368))));
evalcond[12]=((((sj20)*(x371)))+(((cj20)*(new_r20)))+(((new_r10)*(x373))));
evalcond[13]=((((sj20)*(x374)))+(((sj20)*(x370)))+(((cj20)*(new_r21))));
evalcond[14]=((IkReal(-1.00000000000000))+(((new_r12)*(x373)))+(((sj20)*(x376)))+(((cj20)*(new_r22))));
evalcond[15]=((((new_r12)*(x372)))+(((IkReal(-1.00000000000000))*(new_r22)*(x369)))+(((cj20)*(x376))));
evalcond[16]=((sj21)+(((cj20)*(x370)))+(((cj20)*(x374)))+(((IkReal(-1.00000000000000))*(new_r21)*(x369))));
evalcond[17]=((((IkReal(-1.00000000000000))*(new_r20)*(x369)))+(((IkReal(-1.00000000000000))*(x367)))+(((cj20)*(x371)))+(((new_r10)*(x372))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x378 = IKatan2WithCheck(((gconst60)*(new_r12)),((gconst60)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x378.valid ) {
    continue;
}
j19array[0]=x378.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x379=IKcos(j19);
IkReal x380=IKsin(j19);
IkReal x381=((IkReal(1.00000000000000))*(sj20));
IkReal x382=((new_r02)*(x379));
IkReal x383=((new_r12)*(x380));
IkReal x384=((sj20)*(x379));
IkReal x385=((sj20)*(x380));
evalcond[0]=((((IkReal(-1.00000000000000))*(x379)*(x381)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x380)*(x381)))+(new_r12));
evalcond[2]=((((new_r12)*(x379)))+(((IkReal(-1.00000000000000))*(new_r02)*(x380))));
evalcond[3]=((x382)+(x383)+(((IkReal(-1.00000000000000))*(x381))));
evalcond[4]=((((new_r00)*(x384)))+(((new_r10)*(x385)))+(((cj20)*(new_r20))));
evalcond[5]=((((new_r01)*(x384)))+(((new_r11)*(x385)))+(((cj20)*(new_r21))));
evalcond[6]=((IkReal(-1.00000000000000))+(((sj20)*(x382)))+(((sj20)*(x383)))+(((cj20)*(new_r22))));
evalcond[7]=((((cj20)*(x383)))+(((cj20)*(x382)))+(((IkReal(-1.00000000000000))*(new_r22)*(x381))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst76;
gconst76=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj19;
dummyeval[1]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj19;
dummyeval[1]=cj20;
dummyeval[2]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
IkReal x386=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x387=((((IkReal(-1.00000000000000))*(sj20)))+(new_r12));
IkReal x388=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j19)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x386;
evalcond[2]=x386;
evalcond[3]=new_r02;
evalcond[4]=x387;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x387;
evalcond[7]=((((new_r10)*(sj20)))+(((cj20)*(new_r20))));
evalcond[8]=((((new_r11)*(sj20)))+(((cj20)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((new_r12)*(sj20)))+(((cj20)*(new_r22))));
evalcond[10]=((((cj20)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x388))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst77;
gconst77=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj20;
dummyeval[1]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x389=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x389;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x389;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r10;
evalcond[12]=new_r11;
evalcond[13]=x389;
evalcond[14]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x390=IKcos(j21);
IkReal x391=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x390)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x391)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x391)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x390)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x392=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x392;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x392;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[14]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x393=IKsin(j21);
IkReal x394=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x394)))+(new_r20));
evalcond[1]=((x393)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x393)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x394)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x395=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x395;
evalcond[2]=x395;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x395;
evalcond[14]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x396=IKsin(j21);
IkReal x397=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x396)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x397)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x396)+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x397)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x398=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=x398;
evalcond[2]=x398;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r12));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x399=IKcos(j21);
IkReal x400=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x400))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x399)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((new_r11)+(((IkReal(-1.00000000000000))*(x400))));
evalcond[3]=((x399)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x401=IKsin(j21);
IkReal x402=IKcos(j21);
IkReal x403=((IkReal(1.00000000000000))*(sj20));
IkReal x404=((IkReal(1.00000000000000))*(x402));
IkReal x405=((IkReal(1.00000000000000))*(x401));
evalcond[0]=((((sj20)*(x402)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x401)*(x403)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x405))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x404))));
evalcond[4]=((((cj20)*(x401)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x404)))+(new_r10));
evalcond[6]=((((cj20)*(new_r11)))+(x401)+(((IkReal(-1.00000000000000))*(new_r21)*(x403))));
evalcond[7]=((((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x403)))+(((IkReal(-1.00000000000000))*(x404))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
Atan2Value<IkReal> x406 = IKatan2WithCheck(((gconst77)*(new_r21)),((IkReal(-1.00000000000000))*(gconst77)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x406.valid ) {
    continue;
}
j21array[0]=x406.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x407=IKsin(j21);
IkReal x408=IKcos(j21);
IkReal x409=((IkReal(1.00000000000000))*(sj20));
IkReal x410=((IkReal(1.00000000000000))*(x408));
IkReal x411=((IkReal(1.00000000000000))*(x407));
evalcond[0]=((((sj20)*(x408)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x407)*(x409)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x411))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x410))));
evalcond[4]=((((cj20)*(x407)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x410)))+(new_r10));
evalcond[6]=((((cj20)*(new_r11)))+(x407)+(((IkReal(-1.00000000000000))*(new_r21)*(x409))));
evalcond[7]=((((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x409)))+(((IkReal(-1.00000000000000))*(x410))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x412=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x413=((((IkReal(-1.00000000000000))*(sj20)))+(new_r12));
IkReal x414=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j19)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959)))))));
evalcond[1]=x412;
evalcond[2]=x412;
evalcond[3]=new_r02;
evalcond[4]=x413;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x413;
evalcond[7]=((((new_r10)*(sj20)))+(((cj20)*(new_r20))));
evalcond[8]=((((new_r11)*(sj20)))+(((cj20)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((new_r12)*(sj20)))+(((cj20)*(new_r22))));
evalcond[10]=((((cj20)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x414))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst78;
gconst78=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj20;
dummyeval[1]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x415=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x415;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x415;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r10;
evalcond[12]=new_r11;
evalcond[13]=x415;
evalcond[14]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x416=IKcos(j21);
IkReal x417=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x416)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x417))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x417))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x416))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x418=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x418;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x418;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[14]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x419=IKsin(j21);
IkReal x420=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x420)))+(new_r20));
evalcond[1]=((x419)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x419))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x420)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x421=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x421;
evalcond[2]=x421;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x421;
evalcond[14]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x422=IKsin(j21);
IkReal x423=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x422)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x423)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x422)+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x423)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x424=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=x424;
evalcond[2]=x424;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r12));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x425=IKcos(j21);
IkReal x426=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x426)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x425)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x426)))+(new_r11));
evalcond[3]=((x425)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x427=IKsin(j21);
IkReal x428=IKcos(j21);
IkReal x429=((IkReal(1.00000000000000))*(sj20));
IkReal x430=((IkReal(1.00000000000000))*(x428));
IkReal x431=((IkReal(1.00000000000000))*(x427));
evalcond[0]=((((sj20)*(x428)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x427)*(x429)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x431)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x430)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((new_r11)+(((cj20)*(x427))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x430)))+(new_r10));
evalcond[6]=((((cj20)*(new_r11)))+(x427)+(((IkReal(-1.00000000000000))*(new_r21)*(x429))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x430)))+(((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x429))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
Atan2Value<IkReal> x432 = IKatan2WithCheck(((gconst78)*(new_r21)),((IkReal(-1.00000000000000))*(gconst78)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x432.valid ) {
    continue;
}
j21array[0]=x432.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x433=IKsin(j21);
IkReal x434=IKcos(j21);
IkReal x435=((IkReal(1.00000000000000))*(sj20));
IkReal x436=((IkReal(1.00000000000000))*(x434));
IkReal x437=((IkReal(1.00000000000000))*(x433));
evalcond[0]=((((sj20)*(x434)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x433)*(x435)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x437)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x436)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((new_r11)+(((cj20)*(x433))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x436)))+(new_r10));
evalcond[6]=((((cj20)*(new_r11)))+(x433)+(((IkReal(-1.00000000000000))*(new_r21)*(x435))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x436)))+(((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x435))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x438=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x439=((IkReal(1.00000000000000))*(new_r12));
IkReal x440=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j19)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x438;
evalcond[2]=x438;
evalcond[3]=new_r02;
evalcond[4]=((sj20)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x440)))+(((IkReal(-1.00000000000000))*(x439))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x440)))+(((cj20)*(new_r20))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x440)))+(((cj20)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(sj20)*(x439)))+(((cj20)*(new_r22))));
evalcond[11]=((((IkReal(-1.00000000000000))*(cj20)*(x439)))+(((IkReal(-1.00000000000000))*(new_r22)*(x440))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r00, new_r01);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x441=IKsin(j21);
IkReal x442=IKcos(j21);
IkReal x443=((IkReal(1.00000000000000))*(new_r11));
IkReal x444=((IkReal(1.00000000000000))*(sj20));
IkReal x445=((IkReal(1.00000000000000))*(new_r10));
IkReal x446=((IkReal(1.00000000000000))*(x442));
IkReal x447=((IkReal(1.00000000000000))*(x441));
evalcond[0]=((((sj20)*(x442)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x441)*(x444))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x447)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x446)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x443)))+(((cj20)*(x441))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(cj20)*(x446))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x443)))+(x441)+(((IkReal(-1.00000000000000))*(new_r21)*(x444))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x446)))+(((IkReal(-1.00000000000000))*(cj20)*(x445)))+(((IkReal(-1.00000000000000))*(new_r20)*(x444))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x448=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x449=((IkReal(1.00000000000000))*(new_r12));
IkReal x450=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x448;
evalcond[2]=x448;
evalcond[3]=new_r02;
evalcond[4]=((sj20)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x449)))+(((IkReal(-1.00000000000000))*(x450))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x450)))+(((cj20)*(new_r20))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x450)))+(((cj20)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(sj20)*(x449)))+(((cj20)*(new_r22))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r22)*(x450)))+(((IkReal(-1.00000000000000))*(cj20)*(x449))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r00, new_r01);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x451=IKsin(j21);
IkReal x452=IKcos(j21);
IkReal x453=((IkReal(1.00000000000000))*(new_r11));
IkReal x454=((IkReal(1.00000000000000))*(sj20));
IkReal x455=((IkReal(1.00000000000000))*(new_r10));
IkReal x456=((IkReal(1.00000000000000))*(x452));
IkReal x457=((IkReal(1.00000000000000))*(x451));
evalcond[0]=((((sj20)*(x452)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x451)*(x454)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x457)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x456)))+(new_r01));
evalcond[4]=((((cj20)*(x451)))+(((IkReal(-1.00000000000000))*(x453))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x455)))+(((IkReal(-1.00000000000000))*(cj20)*(x456))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x454)))+(x451)+(((IkReal(-1.00000000000000))*(cj20)*(x453))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x454)))+(((IkReal(-1.00000000000000))*(x456)))+(((IkReal(-1.00000000000000))*(cj20)*(x455))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x458=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x458;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x458;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r00;
evalcond[13]=new_r01;
evalcond[14]=x458;
evalcond[15]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x459=IKcos(j21);
IkReal x460=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x459)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x460)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x460)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x459)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x461=IKcos(j21);
IkReal x462=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x461)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x462)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x462)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x461)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x463=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x463;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x463;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[15]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x464=IKsin(j21);
IkReal x465=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x465)))+(new_r20));
evalcond[1]=((x464)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x464)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x465)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x466=IKsin(j21);
IkReal x467=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x467)))+(new_r20));
evalcond[1]=((x466)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x466)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x467)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x468=((IkReal(2.00000000000000))*(atan(htj20)));
IkReal x469=IKcos(x468);
IkReal x470=IKsin(x468);
IkReal x471=((((IkReal(-1.00000000000000))*(x469)))+(new_r22));
IkReal x472=((((IkReal(-1.00000000000000))*(x470)))+(new_r02));
IkReal x473=((IkReal(1.00000000000000))*(x470));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)+(((IkReal(-1.00000000000000))*(x468)))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x471;
evalcond[2]=x471;
evalcond[3]=x472;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x472;
evalcond[8]=((((new_r20)*(x469)))+(((new_r00)*(x470))));
evalcond[9]=((((new_r01)*(x470)))+(((new_r21)*(x469))));
evalcond[10]=((IkReal(-1.00000000000000))+(((new_r02)*(x470)))+(((new_r22)*(x469))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r22)*(x473)))+(((new_r02)*(x469))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r10, new_r11);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x474=IKsin(j21);
IkReal x475=IKcos(j21);
IkReal x476=((IkReal(2.00000000000000))*(atan(htj20)));
IkReal x477=((IkReal(1.00000000000000))*(x475));
IkReal x478=((IkReal(1.00000000000000))*(x474));
IkReal x479=IKsin(x476);
IkReal x480=IKcos(x476);
IkReal x481=((IkReal(1.00000000000000))*(x479));
evalcond[0]=((new_r20)+(((x475)*(x479))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x478)*(x479)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x478)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x477)))+(new_r11));
evalcond[4]=((((x474)*(x480)))+(new_r01));
evalcond[5]=((((IkReal(-1.00000000000000))*(x477)*(x480)))+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x481)))+(x474)+(((new_r01)*(x480))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x481)))+(((IkReal(-1.00000000000000))*(x477)))+(((new_r00)*(x480))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x482=((IkReal(1.00000000000000))*(new_r02));
IkReal x483=((IkReal(2.00000000000000))*(atan(htj20)));
IkReal x484=IKsin(x483);
IkReal x485=IKcos(x483);
IkReal x486=((((IkReal(-1.00000000000000))*(x485)))+(new_r22));
IkReal x487=((IkReal(1.00000000000000))*(x484));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x483)))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=x486;
evalcond[2]=x486;
evalcond[3]=((x484)+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((((IkReal(-1.00000000000000))*(x487)))+(((IkReal(-1.00000000000000))*(x482))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r00)*(x487)))+(((new_r20)*(x485))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r01)*(x487)))+(((new_r21)*(x485))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x482)*(x484)))+(((new_r22)*(x485))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x482)*(x485)))+(((IkReal(-1.00000000000000))*(new_r22)*(x487))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), ((IkReal(-1.00000000000000))*(new_r11)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x488=IKsin(j21);
IkReal x489=IKcos(j21);
IkReal x490=((IkReal(2.00000000000000))*(atan(htj20)));
IkReal x491=((IkReal(1.00000000000000))*(x489));
IkReal x492=((IkReal(1.00000000000000))*(x488));
IkReal x493=IKsin(x490);
IkReal x494=IKcos(x490);
IkReal x495=((IkReal(1.00000000000000))*(x494));
IkReal x496=((IkReal(1.00000000000000))*(x493));
evalcond[0]=((((x489)*(x493)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x492)*(x493))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x492)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x491)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((x488)*(x494)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x491)*(x494)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r01)*(x495)))+(((IkReal(-1.00000000000000))*(new_r21)*(x496)))+(x488));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r00)*(x495)))+(((IkReal(-1.00000000000000))*(new_r20)*(x496)))+(((IkReal(-1.00000000000000))*(x491))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x497=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x497;
evalcond[2]=x497;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x497;
evalcond[15]=new_r02;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x498=IKsin(j21);
IkReal x499=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x498)))+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x499)))+(new_r11));
evalcond[2]=((x498)+(new_r01));
evalcond[3]=((((IkReal(-1.00000000000000))*(x499)))+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x500=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959)))))));
evalcond[1]=x500;
evalcond[2]=x500;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x500;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x501=IKsin(j21);
IkReal x502=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x501))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x502)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[2]=((x501)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x502)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x503=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x503;
evalcond[2]=x503;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[15]=((IkReal(-1.00000000000000))*(new_r02));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x504=IKcos(j21);
IkReal x505=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x505)))+(new_r10));
evalcond[1]=((new_r11)+(((IkReal(-1.00000000000000))*(x504))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x505)))+(new_r01));
evalcond[3]=((x504)+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x506=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959)))))));
evalcond[1]=x506;
evalcond[2]=x506;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x507=IKcos(j21);
IkReal x508=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x508)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x507))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x508)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[3]=((x507)+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x509=((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30);
if( IKabs(((x509)*(((IKabs(cj19) != 0)?((IkReal)1/(cj19)):(IkReal)1.0e30))*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x509))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x509)*(((IKabs(cj19) != 0)?((IkReal)1/(cj19)):(IkReal)1.0e30))*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x509)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((x509)*(((IKabs(cj19) != 0)?((IkReal)1/(cj19)):(IkReal)1.0e30))*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x509)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x510=IKsin(j21);
IkReal x511=IKcos(j21);
IkReal x512=((cj20)*(sj19));
IkReal x513=((cj19)*(new_r01));
IkReal x514=((IkReal(1.00000000000000))*(sj20));
IkReal x515=((cj19)*(new_r00));
IkReal x516=((IkReal(1.00000000000000))*(sj19));
IkReal x517=((IkReal(1.00000000000000))*(x511));
IkReal x518=((cj20)*(x510));
IkReal x519=((IkReal(1.00000000000000))*(x510));
IkReal x520=((cj19)*(x517));
evalcond[0]=((((sj20)*(x511)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x510)*(x514))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x516)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(x519))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x516)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(x517))));
evalcond[4]=((x518)+(x513)+(((new_r11)*(sj19))));
evalcond[5]=((((sj19)*(x511)))+(((cj19)*(x518)))+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x517)))+(x515)+(((new_r10)*(sj19))));
evalcond[7]=((((sj19)*(x510)))+(new_r00)+(((IkReal(-1.00000000000000))*(cj20)*(x520))));
evalcond[8]=((((x510)*(x512)))+(((IkReal(-1.00000000000000))*(x520)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj19)*(x519)))+(((IkReal(-1.00000000000000))*(x512)*(x517)))+(new_r10));
evalcond[10]=((((new_r11)*(x512)))+(((cj20)*(x513)))+(x510)+(((IkReal(-1.00000000000000))*(new_r21)*(x514))));
evalcond[11]=((((new_r10)*(x512)))+(((cj20)*(x515)))+(((IkReal(-1.00000000000000))*(new_r20)*(x514)))+(((IkReal(-1.00000000000000))*(x517))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x521=((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30);
if( IKabs(((x521)*(((IKabs(sj19) != 0)?((IkReal)1/(sj19)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x521))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x521)*(((IKabs(sj19) != 0)?((IkReal)1/(sj19)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x521)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((x521)*(((IKabs(sj19) != 0)?((IkReal)1/(sj19)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x521)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x522=IKsin(j21);
IkReal x523=IKcos(j21);
IkReal x524=((cj20)*(sj19));
IkReal x525=((cj19)*(new_r01));
IkReal x526=((IkReal(1.00000000000000))*(sj20));
IkReal x527=((cj19)*(new_r00));
IkReal x528=((IkReal(1.00000000000000))*(sj19));
IkReal x529=((IkReal(1.00000000000000))*(x523));
IkReal x530=((cj20)*(x522));
IkReal x531=((IkReal(1.00000000000000))*(x522));
IkReal x532=((cj19)*(x529));
evalcond[0]=((((sj20)*(x523)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x522)*(x526)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x528)))+(((IkReal(-1.00000000000000))*(x531)))+(((cj19)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x529)))+(((IkReal(-1.00000000000000))*(new_r01)*(x528)))+(((cj19)*(new_r11))));
evalcond[4]=((x530)+(x525)+(((new_r11)*(sj19))));
evalcond[5]=((((sj19)*(x523)))+(((cj19)*(x530)))+(new_r01));
evalcond[6]=((x527)+(((new_r10)*(sj19)))+(((IkReal(-1.00000000000000))*(cj20)*(x529))));
evalcond[7]=((((sj19)*(x522)))+(new_r00)+(((IkReal(-1.00000000000000))*(cj20)*(x532))));
evalcond[8]=((((x522)*(x524)))+(((IkReal(-1.00000000000000))*(x532)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj19)*(x531)))+(((IkReal(-1.00000000000000))*(x524)*(x529)))+(new_r10));
evalcond[10]=((((new_r11)*(x524)))+(((IkReal(-1.00000000000000))*(new_r21)*(x526)))+(x522)+(((cj20)*(x525))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x526)))+(((IkReal(-1.00000000000000))*(x529)))+(((new_r10)*(x524)))+(((cj20)*(x527))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
Atan2Value<IkReal> x533 = IKatan2WithCheck(((gconst76)*(new_r21)),((IkReal(-1.00000000000000))*(gconst76)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x533.valid ) {
    continue;
}
j21array[0]=x533.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x534=IKsin(j21);
IkReal x535=IKcos(j21);
IkReal x536=((cj20)*(sj19));
IkReal x537=((cj19)*(new_r01));
IkReal x538=((IkReal(1.00000000000000))*(sj20));
IkReal x539=((cj19)*(new_r00));
IkReal x540=((IkReal(1.00000000000000))*(sj19));
IkReal x541=((IkReal(1.00000000000000))*(x535));
IkReal x542=((cj20)*(x534));
IkReal x543=((IkReal(1.00000000000000))*(x534));
IkReal x544=((cj19)*(x541));
evalcond[0]=((((sj20)*(x535)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x534)*(x538)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x540)))+(((IkReal(-1.00000000000000))*(x543)))+(((cj19)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x540)))+(((IkReal(-1.00000000000000))*(x541)))+(((cj19)*(new_r11))));
evalcond[4]=((x542)+(x537)+(((new_r11)*(sj19))));
evalcond[5]=((((sj19)*(x535)))+(((cj19)*(x542)))+(new_r01));
evalcond[6]=((x539)+(((IkReal(-1.00000000000000))*(cj20)*(x541)))+(((new_r10)*(sj19))));
evalcond[7]=((((sj19)*(x534)))+(((IkReal(-1.00000000000000))*(cj20)*(x544)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x544)))+(((x534)*(x536)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj19)*(x543)))+(new_r10)+(((IkReal(-1.00000000000000))*(x536)*(x541))));
evalcond[10]=((((new_r11)*(x536)))+(((IkReal(-1.00000000000000))*(new_r21)*(x538)))+(x534)+(((cj20)*(x537))));
evalcond[11]=((((new_r10)*(x536)))+(((IkReal(-1.00000000000000))*(new_r20)*(x538)))+(((IkReal(-1.00000000000000))*(x541)))+(((cj20)*(x539))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
_nj19 = 1;
Atan2Value<IkReal> x545 = IKatan2WithCheck(((gconst59)*(new_r12)),((gconst59)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x545.valid ) {
    continue;
}
j19array[0]=x545.value;
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
_ij19[0] = ij19; _ij19[1] = -1;
for(int iij19 = ij19+1; iij19 < 1; ++iij19)
{
if( j19valid[iij19] && IKabs(cj19array[ij19]-cj19array[iij19]) < IKFAST_SOLUTION_THRESH && IKabs(sj19array[ij19]-sj19array[iij19]) < IKFAST_SOLUTION_THRESH )
{
    j19valid[iij19]=false; _ij19[1] = iij19; break; 
}
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];
{
IkReal evalcond[8];
IkReal x546=IKcos(j19);
IkReal x547=IKsin(j19);
IkReal x548=((IkReal(1.00000000000000))*(sj20));
IkReal x549=((new_r02)*(x546));
IkReal x550=((new_r12)*(x547));
IkReal x551=((sj20)*(x546));
IkReal x552=((sj20)*(x547));
evalcond[0]=((new_r02)+(((IkReal(-1.00000000000000))*(x546)*(x548))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x547)*(x548)))+(new_r12));
evalcond[2]=((((new_r12)*(x546)))+(((IkReal(-1.00000000000000))*(new_r02)*(x547))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x548)))+(x550)+(x549));
evalcond[4]=((((new_r10)*(x552)))+(((cj20)*(new_r20)))+(((new_r00)*(x551))));
evalcond[5]=((((new_r11)*(x552)))+(((cj20)*(new_r21)))+(((new_r01)*(x551))));
evalcond[6]=((IkReal(-1.00000000000000))+(((sj20)*(x550)))+(((sj20)*(x549)))+(((cj20)*(new_r22))));
evalcond[7]=((((cj20)*(x550)))+(((IkReal(-1.00000000000000))*(new_r22)*(x548)))+(((cj20)*(x549))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst76;
gconst76=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj19;
dummyeval[1]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj19;
dummyeval[1]=cj20;
dummyeval[2]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
IkReal x553=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x554=((((IkReal(-1.00000000000000))*(sj20)))+(new_r12));
IkReal x555=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j19)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x553;
evalcond[2]=x553;
evalcond[3]=new_r02;
evalcond[4]=x554;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x554;
evalcond[7]=((((new_r10)*(sj20)))+(((cj20)*(new_r20))));
evalcond[8]=((((new_r11)*(sj20)))+(((cj20)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((new_r12)*(sj20)))+(((cj20)*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r22)*(x555)))+(((cj20)*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst77;
gconst77=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj20;
dummyeval[1]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x556=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x556;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x556;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r10;
evalcond[12]=new_r11;
evalcond[13]=x556;
evalcond[14]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x557=IKcos(j21);
IkReal x558=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x557)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x558)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x558)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x557)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x559=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x559;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x559;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[14]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x560=IKsin(j21);
IkReal x561=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x561))));
evalcond[1]=((x560)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x560)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x561))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x562=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x562;
evalcond[2]=x562;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x562;
evalcond[14]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x563=IKsin(j21);
IkReal x564=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x563)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x564))));
evalcond[2]=((x563)+(new_r11));
evalcond[3]=((new_r10)+(((IkReal(-1.00000000000000))*(x564))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x565=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=x565;
evalcond[2]=x565;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r12));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x566=IKcos(j21);
IkReal x567=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x567))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x566)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((new_r11)+(((IkReal(-1.00000000000000))*(x567))));
evalcond[3]=((x566)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x568=IKsin(j21);
IkReal x569=IKcos(j21);
IkReal x570=((IkReal(1.00000000000000))*(sj20));
IkReal x571=((IkReal(1.00000000000000))*(x569));
IkReal x572=((IkReal(1.00000000000000))*(x568));
evalcond[0]=((new_r20)+(((sj20)*(x569))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x568)*(x570)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x572)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x571)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj20)*(x568)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x571)))+(new_r10));
evalcond[6]=((((cj20)*(new_r11)))+(x568)+(((IkReal(-1.00000000000000))*(new_r21)*(x570))));
evalcond[7]=((((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(x571)))+(((IkReal(-1.00000000000000))*(new_r20)*(x570))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
Atan2Value<IkReal> x573 = IKatan2WithCheck(((gconst77)*(new_r21)),((IkReal(-1.00000000000000))*(gconst77)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x573.valid ) {
    continue;
}
j21array[0]=x573.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x574=IKsin(j21);
IkReal x575=IKcos(j21);
IkReal x576=((IkReal(1.00000000000000))*(sj20));
IkReal x577=((IkReal(1.00000000000000))*(x575));
IkReal x578=((IkReal(1.00000000000000))*(x574));
evalcond[0]=((((sj20)*(x575)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x574)*(x576)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x578)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x577)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj20)*(x574)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x577)))+(new_r10));
evalcond[6]=((((cj20)*(new_r11)))+(x574)+(((IkReal(-1.00000000000000))*(new_r21)*(x576))));
evalcond[7]=((((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(x577)))+(((IkReal(-1.00000000000000))*(new_r20)*(x576))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x579=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x580=((((IkReal(-1.00000000000000))*(sj20)))+(new_r12));
IkReal x581=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j19)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959)))))));
evalcond[1]=x579;
evalcond[2]=x579;
evalcond[3]=new_r02;
evalcond[4]=x580;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x580;
evalcond[7]=((((new_r10)*(sj20)))+(((cj20)*(new_r20))));
evalcond[8]=((((new_r11)*(sj20)))+(((cj20)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((new_r12)*(sj20)))+(((cj20)*(new_r22))));
evalcond[10]=((((cj20)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x581))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst78;
gconst78=IKsign(sj20);
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj20;
dummyeval[1]=sj20;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x582=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x582;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x582;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r10;
evalcond[12]=new_r11;
evalcond[13]=x582;
evalcond[14]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x583=IKcos(j21);
IkReal x584=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x583)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x584))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x584))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x583)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x585=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x585;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x585;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[14]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x586=IKsin(j21);
IkReal x587=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x587))));
evalcond[1]=((x586)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x586)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x587))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x588=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))));
evalcond[1]=x588;
evalcond[2]=x588;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x588;
evalcond[14]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x589=IKsin(j21);
IkReal x590=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x589)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x590)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x589)+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x590)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x591=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))));
evalcond[1]=x591;
evalcond[2]=x591;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r12));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x592=IKcos(j21);
IkReal x593=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x593)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x592)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x593)))+(new_r11));
evalcond[3]=((x592)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x594=IKsin(j21);
IkReal x595=IKcos(j21);
IkReal x596=((IkReal(1.00000000000000))*(sj20));
IkReal x597=((IkReal(1.00000000000000))*(x595));
IkReal x598=((IkReal(1.00000000000000))*(x594));
evalcond[0]=((((sj20)*(x595)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x594)*(x596)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x598)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x597)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj20)*(x594)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x597)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x596)))+(((cj20)*(new_r11)))+(x594));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x596)))+(((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(x597))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
Atan2Value<IkReal> x599 = IKatan2WithCheck(((gconst78)*(new_r21)),((IkReal(-1.00000000000000))*(gconst78)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x599.valid ) {
    continue;
}
j21array[0]=x599.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x600=IKsin(j21);
IkReal x601=IKcos(j21);
IkReal x602=((IkReal(1.00000000000000))*(sj20));
IkReal x603=((IkReal(1.00000000000000))*(x601));
IkReal x604=((IkReal(1.00000000000000))*(x600));
evalcond[0]=((((sj20)*(x601)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x600)*(x602)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x604)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x603)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj20)*(x600)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x603)))+(new_r10));
evalcond[6]=((((cj20)*(new_r11)))+(x600)+(((IkReal(-1.00000000000000))*(new_r21)*(x602))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x602)))+(((cj20)*(new_r10)))+(((IkReal(-1.00000000000000))*(x603))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x605=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x606=((IkReal(1.00000000000000))*(new_r12));
IkReal x607=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j19)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x605;
evalcond[2]=x605;
evalcond[3]=new_r02;
evalcond[4]=((sj20)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x606)))+(((IkReal(-1.00000000000000))*(x607))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x607)))+(((cj20)*(new_r20))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x607)))+(((cj20)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(sj20)*(x606)))+(((cj20)*(new_r22))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r22)*(x607)))+(((IkReal(-1.00000000000000))*(cj20)*(x606))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r00, new_r01);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x608=IKsin(j21);
IkReal x609=IKcos(j21);
IkReal x610=((IkReal(1.00000000000000))*(new_r11));
IkReal x611=((IkReal(1.00000000000000))*(sj20));
IkReal x612=((IkReal(1.00000000000000))*(new_r10));
IkReal x613=((IkReal(1.00000000000000))*(x609));
IkReal x614=((IkReal(1.00000000000000))*(x608));
evalcond[0]=((((sj20)*(x609)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x608)*(x611))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x614)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x613)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x610)))+(((cj20)*(x608))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x613)))+(((IkReal(-1.00000000000000))*(x612))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x611)))+(((IkReal(-1.00000000000000))*(cj20)*(x610)))+(x608));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj20)*(x612)))+(((IkReal(-1.00000000000000))*(x613)))+(((IkReal(-1.00000000000000))*(new_r20)*(x611))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x615=((((IkReal(-1.00000000000000))*(cj20)))+(new_r22));
IkReal x616=((IkReal(1.00000000000000))*(new_r12));
IkReal x617=((IkReal(1.00000000000000))*(sj20));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x615;
evalcond[2]=x615;
evalcond[3]=new_r02;
evalcond[4]=((sj20)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x617)))+(((IkReal(-1.00000000000000))*(x616))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x617)))+(((cj20)*(new_r20))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x617)))+(((cj20)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((cj20)*(new_r22)))+(((IkReal(-1.00000000000000))*(sj20)*(x616))));
evalcond[11]=((((IkReal(-1.00000000000000))*(cj20)*(x616)))+(((IkReal(-1.00000000000000))*(new_r22)*(x617))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r00, new_r01);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x618=IKsin(j21);
IkReal x619=IKcos(j21);
IkReal x620=((IkReal(1.00000000000000))*(new_r11));
IkReal x621=((IkReal(1.00000000000000))*(sj20));
IkReal x622=((IkReal(1.00000000000000))*(new_r10));
IkReal x623=((IkReal(1.00000000000000))*(x619));
IkReal x624=((IkReal(1.00000000000000))*(x618));
evalcond[0]=((((sj20)*(x619)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x618)*(x621)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x624)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x623)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x620)))+(((cj20)*(x618))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj20)*(x623)))+(((IkReal(-1.00000000000000))*(x622))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x620)))+(((IkReal(-1.00000000000000))*(new_r21)*(x621)))+(x618));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj20)*(x622)))+(((IkReal(-1.00000000000000))*(x623)))+(((IkReal(-1.00000000000000))*(new_r20)*(x621))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x625=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x625;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x625;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r00;
evalcond[13]=new_r01;
evalcond[14]=x625;
evalcond[15]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x626=IKcos(j21);
IkReal x627=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x626)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x627)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x627)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x626)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x628=IKcos(j21);
IkReal x629=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((x628)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x629)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x629)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x628))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x630=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x630;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x630;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[15]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x631=IKsin(j21);
IkReal x632=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x632)))+(new_r20));
evalcond[1]=((x631)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x631)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x632)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j20)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x633=IKsin(j21);
IkReal x634=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x634)))+(new_r20));
evalcond[1]=((x633)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x633))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x634)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x635=((IkReal(2.00000000000000))*(atan(htj20)));
IkReal x636=IKcos(x635);
IkReal x637=IKsin(x635);
IkReal x638=((((IkReal(-1.00000000000000))*(x636)))+(new_r22));
IkReal x639=((((IkReal(-1.00000000000000))*(x637)))+(new_r02));
IkReal x640=((IkReal(1.00000000000000))*(x637));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)+(((IkReal(-1.00000000000000))*(x635)))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x638;
evalcond[2]=x638;
evalcond[3]=x639;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x639;
evalcond[8]=((((new_r00)*(x637)))+(((new_r20)*(x636))));
evalcond[9]=((((new_r01)*(x637)))+(((new_r21)*(x636))));
evalcond[10]=((IkReal(-1.00000000000000))+(((new_r02)*(x637)))+(((new_r22)*(x636))));
evalcond[11]=((((new_r02)*(x636)))+(((IkReal(-1.00000000000000))*(new_r22)*(x640))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r10, new_r11);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x641=IKsin(j21);
IkReal x642=IKcos(j21);
IkReal x643=((IkReal(2.00000000000000))*(atan(htj20)));
IkReal x644=((IkReal(1.00000000000000))*(x642));
IkReal x645=((IkReal(1.00000000000000))*(x641));
IkReal x646=IKsin(x643);
IkReal x647=IKcos(x643);
IkReal x648=((IkReal(1.00000000000000))*(x646));
evalcond[0]=((new_r20)+(((x642)*(x646))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x645)*(x646)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x645)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x644)))+(new_r11));
evalcond[4]=((((x641)*(x647)))+(new_r01));
evalcond[5]=((((IkReal(-1.00000000000000))*(x644)*(x647)))+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x648)))+(((new_r01)*(x647)))+(x641));
evalcond[7]=((((IkReal(-1.00000000000000))*(x644)))+(((new_r00)*(x647)))+(((IkReal(-1.00000000000000))*(new_r20)*(x648))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x649=((IkReal(1.00000000000000))*(new_r02));
IkReal x650=((IkReal(2.00000000000000))*(atan(htj20)));
IkReal x651=IKsin(x650);
IkReal x652=IKcos(x650);
IkReal x653=((((IkReal(-1.00000000000000))*(x652)))+(new_r22));
IkReal x654=((IkReal(1.00000000000000))*(x651));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)+(((IkReal(-1.00000000000000))*(x650)))), IkReal(6.28318530717959)))))));
evalcond[1]=x653;
evalcond[2]=x653;
evalcond[3]=((x651)+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((((IkReal(-1.00000000000000))*(x654)))+(((IkReal(-1.00000000000000))*(x649))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r00)*(x654)))+(((new_r20)*(x652))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r01)*(x654)))+(((new_r21)*(x652))));
evalcond[9]=((IkReal(-1.00000000000000))+(((new_r22)*(x652)))+(((IkReal(-1.00000000000000))*(x649)*(x651))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x649)*(x652)))+(((IkReal(-1.00000000000000))*(new_r22)*(x654))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), ((IkReal(-1.00000000000000))*(new_r11)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[8];
IkReal x655=IKsin(j21);
IkReal x656=IKcos(j21);
IkReal x657=((IkReal(2.00000000000000))*(atan(htj20)));
IkReal x658=((IkReal(1.00000000000000))*(x656));
IkReal x659=((IkReal(1.00000000000000))*(x655));
IkReal x660=IKsin(x657);
IkReal x661=IKcos(x657);
IkReal x662=((IkReal(1.00000000000000))*(x661));
IkReal x663=((IkReal(1.00000000000000))*(x660));
evalcond[0]=((((x656)*(x660)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x659)*(x660)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x658)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)))+(((x655)*(x661))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x658)*(x661)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x663)))+(x655)+(((IkReal(-1.00000000000000))*(new_r01)*(x662))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x658)))+(((IkReal(-1.00000000000000))*(new_r00)*(x662)))+(((IkReal(-1.00000000000000))*(new_r20)*(x663))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x664=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x664;
evalcond[2]=x664;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x664;
evalcond[15]=new_r02;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x665=IKsin(j21);
IkReal x666=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x665)))+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x666)))+(new_r11));
evalcond[2]=((x665)+(new_r01));
evalcond[3]=((((IkReal(-1.00000000000000))*(x666)))+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x667=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j20)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959)))))));
evalcond[1]=x667;
evalcond[2]=x667;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x667;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x668=IKsin(j21);
IkReal x669=((IkReal(1.00000000000000))*(IKcos(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x668)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x669)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[2]=((x668)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x669)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x670=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j19)), IkReal(6.28318530717959)))))));
evalcond[1]=x670;
evalcond[2]=x670;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[15]=((IkReal(-1.00000000000000))*(new_r02));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x671=IKcos(j21);
IkReal x672=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((new_r10)+(((IkReal(-1.00000000000000))*(x672))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x671)))+(new_r11));
evalcond[2]=((new_r01)+(((IkReal(-1.00000000000000))*(x672))));
evalcond[3]=((x671)+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x673=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j19, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j20, IkReal(6.28318530717959)))))));
evalcond[1]=x673;
evalcond[2]=x673;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[4];
IkReal x674=IKcos(j21);
IkReal x675=((IkReal(1.00000000000000))*(IKsin(j21)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x675))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x674)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x675))));
evalcond[3]=((x674)+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x676=((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30);
if( IKabs(((x676)*(((IKabs(cj19) != 0)?((IkReal)1/(cj19)):(IkReal)1.0e30))*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x676))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x676)*(((IKabs(cj19) != 0)?((IkReal)1/(cj19)):(IkReal)1.0e30))*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x676)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((x676)*(((IKabs(cj19) != 0)?((IkReal)1/(cj19)):(IkReal)1.0e30))*(((IKabs(cj20) != 0)?((IkReal)1/(cj20)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r01)*(sj20)))+(((new_r20)*(sj19)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x676)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x677=IKsin(j21);
IkReal x678=IKcos(j21);
IkReal x679=((cj20)*(sj19));
IkReal x680=((cj19)*(new_r01));
IkReal x681=((IkReal(1.00000000000000))*(sj20));
IkReal x682=((cj19)*(new_r00));
IkReal x683=((IkReal(1.00000000000000))*(sj19));
IkReal x684=((IkReal(1.00000000000000))*(x678));
IkReal x685=((cj20)*(x677));
IkReal x686=((IkReal(1.00000000000000))*(x677));
IkReal x687=((cj19)*(x684));
evalcond[0]=((new_r20)+(((sj20)*(x678))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x677)*(x681)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x686)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x683))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x683)))+(((IkReal(-1.00000000000000))*(x684)))+(((cj19)*(new_r11))));
evalcond[4]=((x680)+(x685)+(((new_r11)*(sj19))));
evalcond[5]=((((cj19)*(x685)))+(((sj19)*(x678)))+(new_r01));
evalcond[6]=((x682)+(((new_r10)*(sj19)))+(((IkReal(-1.00000000000000))*(cj20)*(x684))));
evalcond[7]=((((sj19)*(x677)))+(new_r00)+(((IkReal(-1.00000000000000))*(cj20)*(x687))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x687)))+(((x677)*(x679)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x679)*(x684)))+(((IkReal(-1.00000000000000))*(cj19)*(x686)))+(new_r10));
evalcond[10]=((((new_r11)*(x679)))+(((IkReal(-1.00000000000000))*(new_r21)*(x681)))+(x677)+(((cj20)*(x680))));
evalcond[11]=((((new_r10)*(x679)))+(((IkReal(-1.00000000000000))*(x684)))+(((IkReal(-1.00000000000000))*(new_r20)*(x681)))+(((cj20)*(x682))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
IkReal x688=((IKabs(sj20) != 0)?((IkReal)1/(sj20)):(IkReal)1.0e30);
if( IKabs(((x688)*(((IKabs(sj19) != 0)?((IkReal)1/(sj19)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x688))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x688)*(((IKabs(sj19) != 0)?((IkReal)1/(sj19)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x688)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j21array[0]=IKatan2(((x688)*(((IKabs(sj19) != 0)?((IkReal)1/(sj19)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj20)))+(((IkReal(-1.00000000000000))*(cj19)*(cj20)*(new_r20)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x688)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x689=IKsin(j21);
IkReal x690=IKcos(j21);
IkReal x691=((cj20)*(sj19));
IkReal x692=((cj19)*(new_r01));
IkReal x693=((IkReal(1.00000000000000))*(sj20));
IkReal x694=((cj19)*(new_r00));
IkReal x695=((IkReal(1.00000000000000))*(sj19));
IkReal x696=((IkReal(1.00000000000000))*(x690));
IkReal x697=((cj20)*(x689));
IkReal x698=((IkReal(1.00000000000000))*(x689));
IkReal x699=((cj19)*(x696));
evalcond[0]=((((sj20)*(x690)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x689)*(x693)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x695)))+(((IkReal(-1.00000000000000))*(x698)))+(((cj19)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x695)))+(((IkReal(-1.00000000000000))*(x696)))+(((cj19)*(new_r11))));
evalcond[4]=((x697)+(x692)+(((new_r11)*(sj19))));
evalcond[5]=((((sj19)*(x690)))+(((cj19)*(x697)))+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj20)*(x696)))+(x694)+(((new_r10)*(sj19))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj20)*(x699)))+(new_r00)+(((sj19)*(x689))));
evalcond[8]=((((x689)*(x691)))+(((IkReal(-1.00000000000000))*(x699)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj19)*(x698)))+(((IkReal(-1.00000000000000))*(x691)*(x696)))+(new_r10));
evalcond[10]=((((cj20)*(x692)))+(((new_r11)*(x691)))+(x689)+(((IkReal(-1.00000000000000))*(new_r21)*(x693))));
evalcond[11]=((((new_r10)*(x691)))+(((cj20)*(x694)))+(((IkReal(-1.00000000000000))*(x696)))+(((IkReal(-1.00000000000000))*(new_r20)*(x693))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
_nj21 = 1;
Atan2Value<IkReal> x700 = IKatan2WithCheck(((gconst76)*(new_r21)),((IkReal(-1.00000000000000))*(gconst76)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x700.valid ) {
    continue;
}
j21array[0]=x700.value;
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
_ij21[0] = ij21; _ij21[1] = -1;
for(int iij21 = ij21+1; iij21 < 1; ++iij21)
{
if( j21valid[iij21] && IKabs(cj21array[ij21]-cj21array[iij21]) < IKFAST_SOLUTION_THRESH && IKabs(sj21array[ij21]-sj21array[iij21]) < IKFAST_SOLUTION_THRESH )
{
    j21valid[iij21]=false; _ij21[1] = iij21; break; 
}
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];
{
IkReal evalcond[12];
IkReal x701=IKsin(j21);
IkReal x702=IKcos(j21);
IkReal x703=((cj20)*(sj19));
IkReal x704=((cj19)*(new_r01));
IkReal x705=((IkReal(1.00000000000000))*(sj20));
IkReal x706=((cj19)*(new_r00));
IkReal x707=((IkReal(1.00000000000000))*(sj19));
IkReal x708=((IkReal(1.00000000000000))*(x702));
IkReal x709=((cj20)*(x701));
IkReal x710=((IkReal(1.00000000000000))*(x701));
IkReal x711=((cj19)*(x708));
evalcond[0]=((new_r20)+(((sj20)*(x702))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x701)*(x705))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x710)))+(((cj19)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x707))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x708)))+(((cj19)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x707))));
evalcond[4]=((x709)+(x704)+(((new_r11)*(sj19))));
evalcond[5]=((((cj19)*(x709)))+(((sj19)*(x702)))+(new_r01));
evalcond[6]=((x706)+(((new_r10)*(sj19)))+(((IkReal(-1.00000000000000))*(cj20)*(x708))));
evalcond[7]=((((sj19)*(x701)))+(((IkReal(-1.00000000000000))*(cj20)*(x711)))+(new_r00));
evalcond[8]=((((x701)*(x703)))+(((IkReal(-1.00000000000000))*(x711)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj19)*(x710)))+(((IkReal(-1.00000000000000))*(x703)*(x708)))+(new_r10));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x705)))+(((cj20)*(x704)))+(x701)+(((new_r11)*(x703))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x705)))+(((cj20)*(x706)))+(((IkReal(-1.00000000000000))*(x708)))+(((new_r10)*(x703))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j18;
vinfos[3].indices[0] = _ij18[0];
vinfos[3].indices[1] = _ij18[1];
vinfos[3].maxsolutions = _nj18;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j19;
vinfos[4].indices[0] = _ij19[0];
vinfos[4].indices[1] = _ij19[1];
vinfos[4].maxsolutions = _nj19;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j20;
vinfos[5].indices[0] = _ij20[0];
vinfos[5].indices[1] = _ij20[1];
vinfos[5].maxsolutions = _nj20;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j21;
vinfos[6].indices[0] = _ij21[0];
vinfos[6].indices[1] = _ij21[1];
vinfos[6].maxsolutions = _nj21;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c45a6ca7742b52feb0b51dbc6c01064f"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
