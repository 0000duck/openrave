#define IKFAST_NAMESPACE ik_pr2_rightarm_torso
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2012-10-08 02:46:55.741584
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
x0=IKcos(j[1]);
x1=IKcos(j[3]);
x2=IKsin(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[3]);
x5=IKcos(j[5]);
x6=IKcos(j[4]);
x7=IKcos(j[2]);
x8=IKsin(j[4]);
x9=IKsin(j[5]);
x10=IKcos(j[7]);
x11=IKsin(j[7]);
x12=IKsin(j[6]);
x13=IKcos(j[6]);
x14=((IkReal(1.00000000000000))*(x8));
x15=((IkReal(0.180000000000000))*(x5));
x16=((IkReal(1.00000000000000))*(x1));
x17=((IkReal(0.321000000000000))*(x4));
x18=((IkReal(0.180000000000000))*(x9));
x19=((IkReal(0.180000000000000))*(x8));
x20=((IkReal(1.00000000000000))*(x6));
x21=((IkReal(1.00000000000000))*(x13));
x22=((IkReal(0.180000000000000))*(x6));
x23=((IkReal(0.321000000000000))*(x6));
x24=((IkReal(1.00000000000000))*(x12));
x25=((IkReal(0.321000000000000))*(x1));
x26=((x3)*(x7));
x27=((IkReal(-1.00000000000000))*(x8));
x28=((x0)*(x2));
x29=((x4)*(x7));
x30=((x2)*(x6));
x31=((x0)*(x7));
x32=((IkReal(-1.00000000000000))*(x6));
x33=((x3)*(x4));
x34=((x2)*(x3));
x35=((x1)*(x7)*(x8));
x36=((x14)*(x31));
x37=((x16)*(x6)*(x7));
x38=((((IkReal(-1.00000000000000))*(x16)*(x3)))+(((x28)*(x4))));
x39=((((x0)*(x4)))+(((IkReal(-1.00000000000000))*(x16)*(x34))));
x40=((((x0)*(x1)))+(((x2)*(x33))));
x41=((((IkReal(-1.00000000000000))*(x37)))+(((x2)*(x8))));
x42=((((IkReal(-1.00000000000000))*(x33)))+(((IkReal(-1.00000000000000))*(x16)*(x28))));
x43=((x38)*(x5));
x44=((x38)*(x9));
x45=((((x1)*(x14)*(x7)))+(((x2)*(x20))));
x46=((x40)*(x9));
x47=((x42)*(x6));
x48=((((x29)*(x9)))+(((x41)*(x5))));
x49=((((x39)*(x6)))+(((x26)*(x27))));
x50=((((x29)*(x5)))+(((x9)*(((((IkReal(-1.00000000000000))*(x14)*(x2)))+(x37))))));
x51=((x13)*(x48));
x52=((((x27)*(x31)))+(x47));
x53=((((x27)*(x39)))+(((x26)*(x32))));
x54=((x49)*(x5));
x55=((x5)*(x52));
x56=((x12)*(x53));
x57=((x46)+(x54));
x58=((((x9)*(((((IkReal(-1.00000000000000))*(x20)*(x39)))+(((x14)*(x26)))))))+(((x40)*(x5))));
x59=((x44)+(x55));
x60=((x13)*(x57));
x61=((x13)*(x59));
eerot[0]=((((x11)*(((x43)+(((x9)*(((((IkReal(-1.00000000000000))*(x20)*(x42)))+(x36)))))))))+(((x10)*(((((x12)*(((((x27)*(x42)))+(((x31)*(x32)))))))+(x61))))));
eerot[1]=((((x10)*(((((x9)*(((x36)+(((x32)*(x42)))))))+(x43)))))+(((IkReal(-1.00000000000000))*(x11)*(((((x24)*(((((IkReal(-1.00000000000000))*(x20)*(x31)))+(((IkReal(-1.00000000000000))*(x14)*(x42)))))))+(((x21)*(x59))))))));
eerot[2]=((((x12)*(((((x5)*(((((IkReal(-1.00000000000000))*(x36)))+(x47)))))+(x44)))))+(((x13)*(((((x31)*(x6)))+(((x42)*(x8))))))));
eetrans[0]=((IkReal(-0.0500000000000000))+(((x23)*(x31)))+(((IkReal(0.100000000000000))*(x0)))+(((x8)*(((((IkReal(-1.00000000000000))*(x25)*(x28)))+(((IkReal(-1.00000000000000))*(x17)*(x3)))))))+(((x13)*(((((x19)*(x42)))+(((x22)*(x31)))))))+(((IkReal(0.400000000000000))*(x31)))+(((x12)*(((((x15)*(x52)))+(((x18)*(x38))))))));
eerot[3]=((((x10)*(((x56)+(x60)))))+(((x11)*(x58))));
eerot[4]=((((x11)*(((((IkReal(-1.00000000000000))*(x56)))+(((IkReal(-1.00000000000000))*(x60)))))))+(((x10)*(x58))));
eerot[5]=((((x12)*(x57)))+(((x13)*(((((x39)*(x8)))+(((x26)*(x6))))))));
eetrans[1]=((IkReal(-0.188000000000000))+(((x8)*(((((x0)*(x17)))+(((IkReal(-1.00000000000000))*(x25)*(x34)))))))+(((IkReal(0.100000000000000))*(x3)))+(((x13)*(((((x22)*(x26)))+(((x19)*(x39)))))))+(((x23)*(x26)))+(((IkReal(0.400000000000000))*(x26)))+(((x12)*(((((x18)*(x40)))+(((x15)*(x49))))))));
eerot[6]=((((x10)*(((x51)+(((x12)*(x45)))))))+(((x11)*(x50))));
eerot[7]=((((x11)*(((((IkReal(-1.00000000000000))*(x24)*(x45)))+(((IkReal(-1.00000000000000))*(x21)*(x48)))))))+(((x10)*(x50))));
eerot[8]=((((x12)*(x48)))+(((IkReal(-1.00000000000000))*(x13)*(x45))));
IkReal x62=((IkReal(1.00000000000000))*(x2));
IkReal x63=((IkReal(1.00000000000000))*(x7));
eetrans[2]=((IkReal(0.739675000000000))+(((IkReal(-1.00000000000000))*(x25)*(x63)*(x8)))+(((x12)*(((((x18)*(x29)))+(((x15)*(x41)))))))+(((IkReal(-1.00000000000000))*(x23)*(x62)))+(((IkReal(-0.400000000000000))*(x2)))+(j[0])+(((x13)*(((((IkReal(-1.00000000000000))*(x1)*(x19)*(x63)))+(((IkReal(-1.00000000000000))*(x22)*(x62))))))));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 8; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j27,cj27,sj27,htj27,j28,cj28,sj28,htj28,j30,cj30,sj30,htj30,j31,cj31,sj31,htj31,j32,cj32,sj32,htj32,j33,cj33,sj33,htj33,j12,cj12,sj12,htj12,j29,cj29,sj29,htj29,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij27[2], _nj27,_ij28[2], _nj28,_ij30[2], _nj30,_ij31[2], _nj31,_ij32[2], _nj32,_ij33[2], _nj33,_ij12[2], _nj12,_ij29[2], _nj29;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j27=numeric_limits<IkReal>::quiet_NaN(); _ij27[0] = -1; _ij27[1] = -1; _nj27 = -1; j28=numeric_limits<IkReal>::quiet_NaN(); _ij28[0] = -1; _ij28[1] = -1; _nj28 = -1; j30=numeric_limits<IkReal>::quiet_NaN(); _ij30[0] = -1; _ij30[1] = -1; _nj30 = -1; j31=numeric_limits<IkReal>::quiet_NaN(); _ij31[0] = -1; _ij31[1] = -1; _nj31 = -1; j32=numeric_limits<IkReal>::quiet_NaN(); _ij32[0] = -1; _ij32[1] = -1; _nj32 = -1; j33=numeric_limits<IkReal>::quiet_NaN(); _ij33[0] = -1; _ij33[1] = -1; _nj33 = -1;  _ij12[0] = -1; _ij12[1] = -1; _nj12 = 0;  _ij29[0] = -1; _ij29[1] = -1; _nj29 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j12=pfree[0]; cj12=cos(pfree[0]); sj12=sin(pfree[0]);
j29=pfree[1]; cj29=cos(pfree[1]); sj29=sin(pfree[1]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((IkReal(0.0500000000000000))+(((IkReal(-0.180000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(0.188000000000000))+(((IkReal(-0.180000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.739675000000000))+(((IkReal(-1.00000000000000))*(j12)))+(pz)+(((IkReal(-0.180000000000000))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=((IkReal(-1.00000000000000))*(py));
IkReal gconst1;
gconst1=((IkReal(0.642000000000000))*(sj29));
IkReal gconst2;
gconst2=((IkReal(-1.00000000000000))*(py));
IkReal gconst3;
gconst3=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst4;
gconst4=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst5;
gconst5=((IkReal(-1.00000000000000))*(py));
IkReal gconst6;
gconst6=((IkReal(0.642000000000000))*(sj29));
IkReal gconst7;
gconst7=((IkReal(-1.00000000000000))*(py));
IkReal gconst8;
gconst8=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst9;
gconst9=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst10;
gconst10=((IkReal(2.00000000000000))*(px));
IkReal gconst11;
gconst11=((IkReal(2.00000000000000))*(px));
IkReal gconst12;
gconst12=((IkReal(0.400000000000000))*(py));
IkReal gconst13;
gconst13=((IkReal(0.400000000000000))*(py));
IkReal gconst14;
gconst14=((IkReal(2.00000000000000))*(px));
IkReal gconst15;
gconst15=((IkReal(2.00000000000000))*(px));
IkReal gconst16;
gconst16=((IkReal(0.400000000000000))*(py));
IkReal gconst17;
gconst17=((IkReal(0.400000000000000))*(py));
IkReal gconst18;
gconst18=py;
IkReal gconst19;
gconst19=((IkReal(0.642000000000000))*(sj29));
IkReal gconst20;
gconst20=py;
IkReal gconst21;
gconst21=((IkReal(0.509841000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst22;
gconst22=((IkReal(-0.00375900000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst23;
gconst23=py;
IkReal gconst24;
gconst24=((IkReal(0.642000000000000))*(sj29));
IkReal gconst25;
gconst25=py;
IkReal gconst26;
gconst26=((IkReal(0.509841000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst27;
gconst27=((IkReal(-0.00375900000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal x64=((gconst20)*(gconst21));
IkReal x65=((gconst23)*(gconst27));
IkReal x66=((gconst25)*(gconst26));
IkReal x67=((gconst18)*(gconst22));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x64)*(x66)))+(((IkReal(-1.00000000000000))*(x65)*(x67)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst22)*(gconst24)*(gconst26)))+(((x64)*(x65)))+(((x66)*(x67))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x68=((IkReal(1.00000000000000))*(gconst8));
IkReal x69=((gconst3)*(gconst7));
IkReal x70=((gconst0)*(gconst8));
IkReal x71=((gconst13)*(gconst15));
IkReal x72=((IkReal(1.00000000000000))*(gconst22));
IkReal x73=((gconst19)*(gconst24));
IkReal x74=((gconst0)*(gconst9));
IkReal x75=((gconst1)*(gconst6));
IkReal x76=((gconst27)*(gconst5));
IkReal x77=((gconst2)*(gconst3));
IkReal x78=((IkReal(1.00000000000000))*(gconst4));
IkReal x79=((gconst17)*(gconst5));
IkReal x80=((gconst12)*(gconst14));
IkReal x81=((gconst2)*(gconst9));
IkReal x82=((IkReal(1.00000000000000))*(gconst16));
IkReal x83=((gconst18)*(gconst25));
IkReal x84=((gconst12)*(gconst7));
IkReal x85=((gconst18)*(gconst9));
IkReal x86=((gconst20)*(gconst27));
IkReal x87=((gconst26)*(gconst4));
IkReal x88=((gconst1)*(gconst24));
IkReal x89=((gconst11)*(gconst3));
IkReal x90=((IkReal(1.00000000000000))*(gconst26));
IkReal x91=((gconst20)*(gconst21));
IkReal x92=((gconst13)*(gconst16));
IkReal x93=((gconst18)*(gconst23));
IkReal x94=((gconst21)*(gconst25));
IkReal x95=((gconst2)*(gconst21));
IkReal x96=((gconst12)*(gconst2));
IkReal x97=((gconst5)*(gconst9));
IkReal x98=((gconst20)*(gconst3));
IkReal x99=((gconst4)*(gconst7));
IkReal x100=((gconst11)*(gconst12));
IkReal x101=((gconst14)*(gconst17));
IkReal x102=((gconst15)*(gconst4));
IkReal x103=((IkReal(1.00000000000000))*(gconst13));
IkReal x104=((gconst10)*(gconst8));
IkReal x105=((gconst0)*(gconst16));
IkReal x106=((gconst23)*(gconst27));
IkReal x107=((gconst22)*(gconst25));
IkReal x108=((gconst10)*(gconst16));
IkReal x109=((gconst19)*(gconst6));
IkReal x110=((gconst22)*(gconst7));
IkReal x111=((gconst0)*(gconst7));
IkReal x112=((gconst17)*(gconst23));
IkReal x113=((gconst10)*(gconst14));
IkReal x114=((gconst11)*(gconst21));
IkReal x115=((gconst12)*(gconst20));
IkReal x116=((gconst18)*(gconst26));
IkReal x117=((gconst14)*(gconst9));
IkReal x118=((gconst13)*(gconst7));
IkReal x119=((gconst16)*(gconst22));
IkReal x120=((gconst23)*(x91));
IkReal x121=((gconst10)*(gconst25)*(gconst26));
IkReal x122=((gconst15)*(gconst22)*(gconst26));
IkReal x123=((gconst14)*(gconst18)*(gconst27));
op[0]=((((IkReal(-1.00000000000000))*(gconst27)*(x72)*(x93)))+(((gconst22)*(gconst26)*(x83)))+(((IkReal(-1.00000000000000))*(gconst25)*(x90)*(x91)))+(((gconst21)*(gconst23)*(x86)))+(((IkReal(-1.00000000000000))*(gconst26)*(x72)*(x73))));
op[1]=((((IkReal(-1.00000000000000))*(gconst10)*(x106)*(x72)))+(((IkReal(-1.00000000000000))*(gconst17)*(x72)*(x93)))+(((x106)*(x114)))+(((IkReal(-1.00000000000000))*(gconst13)*(x73)*(x90)))+(((gconst13)*(gconst26)*(x83)))+(((gconst10)*(gconst26)*(x107)))+(((IkReal(-1.00000000000000))*(x123)*(x72)))+(((gconst14)*(gconst21)*(x86)))+(((IkReal(-1.00000000000000))*(gconst11)*(x90)*(x94)))+(((IkReal(-1.00000000000000))*(gconst25)*(x82)*(x91)))+(((x112)*(x91)))+(((gconst15)*(gconst22)*(x116)))+(((x119)*(x83)))+(((IkReal(-1.00000000000000))*(gconst25)*(x115)*(x90)))+(((IkReal(-1.00000000000000))*(gconst16)*(x72)*(x73)))+(((gconst12)*(gconst23)*(x86)))+(((IkReal(-1.00000000000000))*(gconst15)*(x90)*(x91)))+(((IkReal(-1.00000000000000))*(gconst27)*(x103)*(x93))));
op[2]=((((IkReal(-1.00000000000000))*(gconst22)*(x68)*(x73)))+(((IkReal(-1.00000000000000))*(gconst18)*(x101)*(x72)))+(((IkReal(-1.00000000000000))*(gconst26)*(x109)*(x72)))+(((x107)*(x108)))+(((gconst15)*(gconst18)*(x119)))+(((x110)*(x116)))+(((IkReal(-1.00000000000000))*(gconst15)*(x114)*(x90)))+(((x112)*(x115)))+(((x112)*(x114)))+(((IkReal(-1.00000000000000))*(gconst2)*(x90)*(x94)))+(((gconst23)*(gconst3)*(x86)))+(((gconst9)*(x120)))+(((IkReal(-1.00000000000000))*(gconst17)*(x103)*(x93)))+(((gconst14)*(gconst27)*(x114)))+(((x101)*(x91)))+(((IkReal(-1.00000000000000))*(gconst13)*(x73)*(x82)))+(((IkReal(-1.00000000000000))*(gconst27)*(x78)*(x93)))+(((IkReal(-1.00000000000000))*(gconst7)*(x90)*(x91)))+(((IkReal(-1.00000000000000))*(gconst25)*(x100)*(x90)))+(((x116)*(x71)))+(((IkReal(-1.00000000000000))*(gconst27)*(x113)*(x72)))+(((x106)*(x95)))+(((IkReal(-1.00000000000000))*(gconst25)*(x68)*(x91)))+(((gconst22)*(gconst8)*(x83)))+(((gconst13)*(x121)))+(((IkReal(-1.00000000000000))*(gconst25)*(x90)*(x98)))+(((IkReal(-1.00000000000000))*(gconst26)*(x72)*(x88)))+(((x76)*(x91)))+(((gconst0)*(gconst26)*(x107)))+(((IkReal(-1.00000000000000))*(gconst15)*(x82)*(x91)))+(((IkReal(-1.00000000000000))*(gconst10)*(x103)*(x106)))+(((x83)*(x87)))+(((gconst10)*(x122)))+(((x80)*(x86)))+(((IkReal(-1.00000000000000))*(gconst15)*(x115)*(x90)))+(((x83)*(x92)))+(((IkReal(-1.00000000000000))*(gconst25)*(x115)*(x82)))+(((IkReal(-1.00000000000000))*(gconst26)*(x73)*(x78)))+(((IkReal(-1.00000000000000))*(gconst10)*(x112)*(x72)))+(((IkReal(-1.00000000000000))*(gconst23)*(x72)*(x85)))+(((IkReal(-1.00000000000000))*(gconst18)*(x72)*(x76)))+(((IkReal(-1.00000000000000))*(x103)*(x123)))+(((IkReal(-1.00000000000000))*(gconst11)*(x82)*(x94)))+(((IkReal(-1.00000000000000))*(gconst0)*(x106)*(x72)))+(((x100)*(x106))));
op[3]=((((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst23)*(gconst4)))+(((gconst16)*(gconst18)*(gconst25)*(gconst4)))+(((gconst15)*(gconst18)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst22)*(gconst6)))+(((gconst11)*(gconst12)*(gconst14)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst21)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst27)))+(((gconst0)*(gconst16)*(gconst22)*(gconst25)))+(((gconst0)*(gconst15)*(gconst22)*(gconst26)))+(((gconst14)*(gconst2)*(gconst21)*(gconst27)))+(((gconst10)*(gconst13)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst21)*(gconst25)))+(((gconst11)*(gconst23)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst17)*(gconst23)))+(((gconst11)*(gconst14)*(gconst17)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst26)*(gconst3)))+(((gconst12)*(gconst14)*(gconst17)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst22)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst25)*(gconst3)))+(((gconst11)*(gconst21)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst26)*(gconst7)))+(((gconst14)*(gconst20)*(gconst21)*(gconst9)))+(((gconst16)*(gconst18)*(gconst22)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst22)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst21)*(gconst26)))+(((gconst12)*(gconst20)*(gconst23)*(gconst9)))+(((gconst13)*(gconst18)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst20)))+(((gconst10)*(gconst25)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst27)*(gconst5)))+(((gconst14)*(gconst20)*(gconst27)*(gconst3)))+(((gconst15)*(gconst18)*(gconst26)*(gconst4)))+(((gconst13)*(gconst15)*(gconst16)*(gconst18)))+(((gconst10)*(gconst22)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst22)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst21)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst17)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst24)*(gconst8)))+(((gconst11)*(gconst12)*(gconst17)*(gconst23)))+(((gconst12)*(gconst2)*(gconst23)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((gconst17)*(gconst20)*(gconst23)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst26)*(gconst6)))+(((gconst17)*(gconst20)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst25)*(gconst26)))+(((gconst10)*(gconst15)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst22)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst23)*(gconst27)))+(((gconst11)*(gconst21)*(gconst27)*(gconst5)))+(((gconst13)*(gconst18)*(gconst26)*(gconst7)))+(((gconst17)*(gconst2)*(gconst21)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst23)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst22)*(gconst27)))+(((gconst0)*(gconst13)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst24)*(gconst26)))+(((gconst10)*(gconst22)*(gconst26)*(gconst7)))+(((gconst12)*(gconst20)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst24)*(gconst4)))+(((gconst10)*(gconst13)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst25)*(gconst8))));
op[4]=((((gconst12)*(gconst14)*(gconst2)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst23)*(gconst4)))+(((gconst10)*(gconst15)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst5)))+(((gconst2)*(gconst23)*(gconst27)*(gconst3)))+(((gconst18)*(gconst22)*(gconst7)*(gconst8)))+(((gconst14)*(gconst17)*(gconst2)*(gconst21)))+(((gconst20)*(gconst27)*(gconst3)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst21)*(gconst25)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst27)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst21)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst2)*(gconst26)))+(((gconst10)*(gconst16)*(gconst22)*(gconst7)))+(((gconst13)*(gconst15)*(gconst18)*(gconst8)))+(((gconst12)*(gconst17)*(gconst2)*(gconst23)))+(((gconst10)*(gconst13)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst16)*(gconst24)))+(((gconst11)*(gconst14)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst14)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst24)*(gconst8)))+(((gconst18)*(gconst25)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst20)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst9)))+(((gconst0)*(gconst13)*(gconst16)*(gconst25)))+(((gconst13)*(gconst16)*(gconst18)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst26)*(gconst3)*(gconst7)))+(((gconst11)*(gconst12)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst17)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst25)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst20)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst26)*(gconst4)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst2)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst22)*(gconst9)))+(((gconst10)*(gconst13)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst5)*(gconst9)))+(((gconst10)*(gconst13)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((gconst0)*(gconst13)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst2)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst21)*(gconst7)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst25)*(gconst26)*(gconst3)))+(((gconst2)*(gconst21)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst4)))+(((gconst2)*(gconst21)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst19)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst8)))+(((gconst12)*(gconst14)*(gconst20)*(gconst9)))+(((gconst18)*(gconst26)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst23)*(gconst27)*(gconst4)))+(((gconst20)*(gconst21)*(gconst5)*(gconst9)))+(((gconst11)*(gconst12)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst22)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst26)*(gconst6)))+(((gconst10)*(gconst15)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst23)*(gconst9)))+(((gconst11)*(gconst17)*(gconst23)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst22)*(gconst5)))+(((gconst0)*(gconst15)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst21)*(gconst7)))+(((gconst0)*(gconst25)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst24)*(gconst4)*(gconst8)))+(((gconst0)*(gconst22)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst23)*(gconst4)*(gconst9)))+(((gconst11)*(gconst14)*(gconst21)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst25)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst21)*(gconst8)))+(((gconst14)*(gconst17)*(gconst20)*(gconst3)))+(((gconst12)*(gconst17)*(gconst20)*(gconst5)))+(((gconst11)*(gconst17)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst22)*(gconst6)*(gconst8)))+(((gconst15)*(gconst16)*(gconst18)*(gconst4)))+(((gconst0)*(gconst22)*(gconst26)*(gconst7)))+(((gconst20)*(gconst23)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst24)*(gconst26)*(gconst4)))+(((gconst10)*(gconst16)*(gconst25)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst17)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst20)*(gconst3))));
op[5]=((((gconst0)*(gconst13)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst25)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst4)*(gconst6)))+(((gconst17)*(gconst20)*(gconst3)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst27)*(gconst4)))+(((gconst10)*(gconst15)*(gconst16)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst23)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst3)*(gconst7)))+(((gconst12)*(gconst20)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst22)*(gconst9)))+(((gconst11)*(gconst14)*(gconst17)*(gconst3)))+(((gconst0)*(gconst15)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst21)*(gconst8)))+(((gconst10)*(gconst25)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst22)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst26)*(gconst3)*(gconst7)))+(((gconst17)*(gconst2)*(gconst23)*(gconst3)))+(((gconst0)*(gconst16)*(gconst25)*(gconst4)))+(((gconst10)*(gconst26)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst8)))+(((gconst14)*(gconst2)*(gconst21)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst27)*(gconst5)))+(((gconst17)*(gconst2)*(gconst21)*(gconst5)))+(((gconst12)*(gconst14)*(gconst17)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst21)*(gconst7)))+(((gconst11)*(gconst23)*(gconst3)*(gconst9)))+(((gconst10)*(gconst13)*(gconst16)*(gconst7)))+(((gconst11)*(gconst12)*(gconst17)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst25)*(gconst8)))+(((gconst12)*(gconst2)*(gconst27)*(gconst5)))+(((gconst11)*(gconst21)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst6)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst23)*(gconst4)*(gconst9)))+(((gconst0)*(gconst13)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst24)*(gconst4)))+(((gconst14)*(gconst20)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst3)))+(((gconst16)*(gconst18)*(gconst4)*(gconst7)))+(((gconst12)*(gconst2)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst26)*(gconst7)))+(((gconst10)*(gconst22)*(gconst7)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst24)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst7)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst17)*(gconst4)))+(((gconst13)*(gconst18)*(gconst7)*(gconst8)))+(((gconst10)*(gconst13)*(gconst15)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst7)*(gconst8)))+(((gconst14)*(gconst2)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst26)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst27)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst4)*(gconst9)))+(((gconst0)*(gconst15)*(gconst26)*(gconst4)))+(((gconst15)*(gconst18)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst17)*(gconst5)))+(((gconst0)*(gconst13)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst22)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst7)))+(((gconst11)*(gconst27)*(gconst3)*(gconst5)))+(((gconst0)*(gconst16)*(gconst22)*(gconst7))));
op[6]=((((IkReal(-1.00000000000000))*(gconst22)*(x68)*(x75)))+(((IkReal(-1.00000000000000))*(gconst2)*(x69)*(x90)))+(((x79)*(x89)))+(((x110)*(x70)))+(((x100)*(x97)))+(((IkReal(-1.00000000000000))*(gconst23)*(x74)*(x78)))+(((x79)*(x96)))+(((x117)*(x89)))+(((IkReal(-1.00000000000000))*(gconst15)*(x68)*(x89)))+(((gconst23)*(gconst9)*(x77)))+(((IkReal(-1.00000000000000))*(gconst15)*(x68)*(x96)))+(((IkReal(-1.00000000000000))*(gconst13)*(x75)*(x82)))+(((IkReal(-1.00000000000000))*(gconst5)*(x72)*(x74)))+(((IkReal(-1.00000000000000))*(gconst2)*(x82)*(x84)))+(((IkReal(-1.00000000000000))*(gconst9)*(x113)*(x78)))+(((x97)*(x98)))+(((gconst18)*(gconst8)*(x99)))+(((gconst25)*(gconst4)*(x70)))+(((x101)*(x77)))+(((x102)*(x105)))+(((x102)*(x104)))+(((IkReal(-1.00000000000000))*(gconst25)*(x68)*(x77)))+(((IkReal(-1.00000000000000))*(gconst10)*(x78)*(x79)))+(((x108)*(x99)))+(((x111)*(x87)))+(((IkReal(-1.00000000000000))*(gconst20)*(x68)*(x69)))+(((IkReal(-1.00000000000000))*(gconst14)*(x103)*(x74)))+(((x76)*(x77)))+(((IkReal(-1.00000000000000))*(gconst10)*(x103)*(x97)))+(((IkReal(-1.00000000000000))*(gconst4)*(x109)*(x68)))+(((IkReal(-1.00000000000000))*(gconst0)*(x103)*(x79)))+(((x111)*(x92)))+(((gconst21)*(gconst5)*(x81)))+(((IkReal(-1.00000000000000))*(gconst0)*(x101)*(x78)))+(((IkReal(-1.00000000000000))*(gconst26)*(x75)*(x78)))+(((IkReal(-1.00000000000000))*(gconst11)*(x68)*(x84)))+(((x104)*(x118)))+(((x80)*(x81)))+(((x70)*(x71)))+(((IkReal(-1.00000000000000))*(gconst4)*(x68)*(x88)))+(((IkReal(-1.00000000000000))*(gconst0)*(x76)*(x78)))+(((IkReal(-1.00000000000000))*(gconst11)*(x69)*(x82)))+(((IkReal(-1.00000000000000))*(gconst15)*(x77)*(x82)))+(((IkReal(-1.00000000000000))*(gconst5)*(x78)*(x85)))+(((IkReal(-1.00000000000000))*(gconst7)*(x68)*(x95))));
op[7]=((((IkReal(-1.00000000000000))*(gconst10)*(x78)*(x97)))+(((x89)*(x97)))+(((IkReal(-1.00000000000000))*(gconst2)*(x69)*(x82)))+(((IkReal(-1.00000000000000))*(gconst5)*(x103)*(x74)))+(((IkReal(-1.00000000000000))*(gconst0)*(x78)*(x79)))+(((x117)*(x77)))+(((gconst12)*(gconst5)*(x81)))+(((x118)*(x70)))+(((IkReal(-1.00000000000000))*(gconst2)*(x68)*(x84)))+(((IkReal(-1.00000000000000))*(gconst13)*(x68)*(x75)))+(((IkReal(-1.00000000000000))*(gconst11)*(x68)*(x69)))+(((IkReal(-1.00000000000000))*(gconst14)*(x74)*(x78)))+(((IkReal(-1.00000000000000))*(gconst15)*(x68)*(x77)))+(((IkReal(-1.00000000000000))*(gconst16)*(x75)*(x78)))+(((x105)*(x99)))+(((x77)*(x79)))+(((x102)*(x70)))+(((x104)*(x99))));
op[8]=((((IkReal(-1.00000000000000))*(gconst5)*(x74)*(x78)))+(((x70)*(x99)))+(((IkReal(-1.00000000000000))*(gconst2)*(x68)*(x69)))+(((x77)*(x97)))+(((IkReal(-1.00000000000000))*(gconst4)*(x68)*(x75))));
polyroots8(op,zeror,numroots);
IkReal j27array[8], cj27array[8], sj27array[8], tempj27array[1];
int numsolutions = 0;
for(int ij27 = 0; ij27 < numroots; ++ij27)
{
IkReal htj27 = zeror[ij27];
tempj27array[0]=((IkReal(2.00000000000000))*(atan(htj27)));
for(int kj27 = 0; kj27 < 1; ++kj27)
{
j27array[numsolutions] = tempj27array[kj27];
if( j27array[numsolutions] > IKPI )
{
    j27array[numsolutions]-=IK2PI;
}
else if( j27array[numsolutions] < -IKPI )
{
    j27array[numsolutions]+=IK2PI;
}
sj27array[numsolutions] = IKsin(j27array[numsolutions]);
cj27array[numsolutions] = IKcos(j27array[numsolutions]);
numsolutions++;
}
}
bool j27valid[8]={true,true,true,true,true,true,true,true};
_nj27 = 8;
for(int ij27 = 0; ij27 < numsolutions; ++ij27)
    {
if( !j27valid[ij27] )
{
    continue;
}
    j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
htj27 = IKtan(j27/2);

_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < numsolutions; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst44;
IkReal x124=((IkReal(0.800000000000000))*(sj29));
IkReal x125=((cj27)*(px));
IkReal x126=((py)*(sj27));
IkReal x127=((IkReal(4.00000000000000))*(sj29));
gconst44=IKsign(((((IkReal(-1.00000000000000))*(x127)*((x125)*(x125))))+(((IkReal(-1.00000000000000))*(x127)*((x126)*(x126))))+(((IkReal(-8.00000000000000))*(sj29)*(x125)*(x126)))+(((x124)*(x125)))+(((x124)*(x126)))+(((IkReal(-1.00000000000000))*(x127)*((pz)*(pz))))+(((IkReal(-0.0400000000000000))*(sj29)))));
IkReal x128=((py)*(sj27));
IkReal x129=((IkReal(100.000000000000))*(sj29));
IkReal x130=((cj27)*(px)*(sj29));
dummyeval[0]=((((IkReal(20.0000000000000))*(sj29)*(x128)))+(((IkReal(-1.00000000000000))*(x129)*((cj27)*(cj27))*((px)*(px))))+(((IkReal(-200.000000000000))*(x128)*(x130)))+(((IkReal(-1.00000000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(x129)*((pz)*(pz))))+(((IkReal(-1.00000000000000))*(x129)*((x128)*(x128))))+(((IkReal(20.0000000000000))*(x130))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x131=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j29)), IkReal(6.28318530717959))));
evalcond[1]=x131;
evalcond[2]=x131;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
cj30array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))));
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IkReal dummyeval[1];
IkReal gconst48;
IkReal x132=((py)*(sj27));
IkReal x133=((IkReal(321.000000000000))*(cj30));
IkReal x134=((cj27)*(px));
gconst48=IKsign(((IkReal(40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj30)))+(((IkReal(-1.00000000000000))*(x133)*(x134)))+(((IkReal(-400.000000000000))*(x132)))+(((IkReal(-400.000000000000))*(x134)))+(((IkReal(-1.00000000000000))*(x132)*(x133)))+(((IkReal(32.1000000000000))*(cj30)))));
IkReal x135=((py)*(sj27));
IkReal x136=((IkReal(10.0000000000000))*(cj30));
IkReal x137=((cj27)*(px));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-1.00000000000000))*(x135)*(x136)))+(((IkReal(-12.4610591900312))*(x137)))+(((IkReal(-12.4610591900312))*(x135)))+(((IkReal(-10.0000000000000))*(pz)*(sj30)))+(((IkReal(-1.00000000000000))*(x136)*(x137)))+(cj30));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x138=((IkReal(10.0000000000000))*(sj30));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj27)*(px)*(x138)))+(((IkReal(-1.00000000000000))*(py)*(sj27)*(x138)))+(sj30)+(((IkReal(10.0000000000000))*(cj30)*(pz)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x139=((cj30)*(pz));
IkReal x140=((IkReal(1000.00000000000))*(pz));
IkReal x141=((py)*(sj27)*(sj30));
IkReal x142=((cj27)*(px)*(sj30));
if( IKabs(((((IKabs(((((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-321000.000000000))*(x141)))+(((IkReal(-321000.000000000))*(x142)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x139))))) != 0)?((IkReal)1/(((((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-321000.000000000))*(x141)))+(((IkReal(-321000.000000000))*(x142)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x139)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj30)*(sj30))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(321.000000000000))*(x139)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(32.1000000000000))*(sj30)))+(((IkReal(-321.000000000000))*(x142)))+(((IkReal(-321.000000000000))*(x141))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x139)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(32.1000000000000))*(sj30)))+(((IkReal(-321.000000000000))*(x142)))+(((IkReal(-321.000000000000))*(x141)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((py)*(sj27)*(x140)))+(((cj27)*(px)*(x140)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-321000.000000000))*(x141)))+(((IkReal(-321000.000000000))*(x142)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x139))))) != 0)?((IkReal)1/(((((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-321000.000000000))*(x141)))+(((IkReal(-321000.000000000))*(x142)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x139)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj30)*(sj30))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(321.000000000000))*(x139)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(32.1000000000000))*(sj30)))+(((IkReal(-321.000000000000))*(x142)))+(((IkReal(-321.000000000000))*(x141))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x139)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(32.1000000000000))*(sj30)))+(((IkReal(-321.000000000000))*(x142)))+(((IkReal(-321.000000000000))*(x141)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((py)*(sj27)*(x140)))+(((cj27)*(px)*(x140)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((((IKabs(((((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-321000.000000000))*(x141)))+(((IkReal(-321000.000000000))*(x142)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x139))))) != 0)?((IkReal)1/(((((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-321000.000000000))*(x141)))+(((IkReal(-321000.000000000))*(x142)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(x139)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj30)*(sj30))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(321.000000000000))*(x139)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(32.1000000000000))*(sj30)))+(((IkReal(-321.000000000000))*(x142)))+(((IkReal(-321.000000000000))*(x141))))) != 0)?((IkReal)1/(((((IkReal(321.000000000000))*(x139)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(32.1000000000000))*(sj30)))+(((IkReal(-321.000000000000))*(x142)))+(((IkReal(-321.000000000000))*(x141)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((py)*(sj27)*(x140)))+(((cj27)*(px)*(x140)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x143=IKsin(j28);
IkReal x144=IKcos(j28);
IkReal x145=((IkReal(0.321000000000000))*(cj30));
IkReal x146=((IkReal(0.321000000000000))*(sj30));
IkReal x147=((cj27)*(px));
IkReal x148=((py)*(sj27));
IkReal x149=((IkReal(1.00000000000000))*(x148));
IkReal x150=((pz)*(x143));
IkReal x151=((IkReal(0.800000000000000))*(x144));
evalcond[0]=((((IkReal(0.400000000000000))*(x143)))+(((x144)*(x146)))+(pz)+(((x143)*(x145))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x144)*(x147)))+(((IkReal(-1.00000000000000))*(x144)*(x149)))+(((IkReal(0.100000000000000))*(x144)))+(x150)+(x145));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x149)))+(((IkReal(0.400000000000000))*(x144)))+(((IkReal(-1.00000000000000))*(x143)*(x146)))+(((x144)*(x145)))+(((IkReal(-1.00000000000000))*(x147))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x144)))+(((IkReal(0.200000000000000))*(x148)))+(((IkReal(0.200000000000000))*(x147)))+(((IkReal(-0.800000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(pp)))+(((x147)*(x151)))+(((x148)*(x151))));
evalcond[4]=((((pz)*(x144)))+(((IkReal(-0.100000000000000))*(x143)))+(x146)+(((x143)*(x148)))+(((x143)*(x147))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x291=((IkReal(1000.00000000000))*(pz));
if( IKabs(((gconst48)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((py)*(sj27)*(x291)))+(((cj27)*(px)*(x291)))+(((IkReal(103.041000000000))*(cj30)*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((IkReal(-160.000000000000))+(((pz)*(x291)))+(((IkReal(-103.041000000000))*((cj30)*(cj30))))+(((IkReal(-256.800000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((gconst48)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((py)*(sj27)*(x291)))+(((cj27)*(px)*(x291)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))), ((gconst48)*(((IkReal(-160.000000000000))+(((pz)*(x291)))+(((IkReal(-103.041000000000))*((cj30)*(cj30))))+(((IkReal(-256.800000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x292=IKsin(j28);
IkReal x293=IKcos(j28);
IkReal x294=((IkReal(0.321000000000000))*(cj30));
IkReal x295=((IkReal(0.321000000000000))*(sj30));
IkReal x296=((cj27)*(px));
IkReal x297=((py)*(sj27));
IkReal x298=((IkReal(1.00000000000000))*(x297));
IkReal x299=((pz)*(x292));
IkReal x300=((IkReal(0.800000000000000))*(x293));
evalcond[0]=((((IkReal(0.400000000000000))*(x292)))+(pz)+(((x293)*(x295)))+(((x292)*(x294))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x293)*(x296)))+(((IkReal(0.100000000000000))*(x293)))+(((IkReal(-1.00000000000000))*(x293)*(x298)))+(x299)+(x294));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x296)))+(((IkReal(0.400000000000000))*(x293)))+(((IkReal(-1.00000000000000))*(x298)))+(((x293)*(x294)))+(((IkReal(-1.00000000000000))*(x292)*(x295))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x299)))+(((IkReal(0.200000000000000))*(x297)))+(((IkReal(0.200000000000000))*(x296)))+(((IkReal(-1.00000000000000))*(pp)))+(((x297)*(x300)))+(((x296)*(x300)))+(((IkReal(-0.0800000000000000))*(x293))));
evalcond[4]=((((IkReal(-0.100000000000000))*(x292)))+(((pz)*(x293)))+(x295)+(((x292)*(x296)))+(((x292)*(x297))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
IkReal x301=((px)*(sj27));
IkReal x302=((cj27)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j29, IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x302)))+(x301));
evalcond[2]=((((IkReal(-1.00000000000000))*(x301)))+(x302));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
cj30array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))));
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x303=((py)*(sj27));
IkReal x304=((IkReal(321.000000000000))*(cj30));
IkReal x305=((cj27)*(px));
gconst49=IKsign(((IkReal(-40.0000000000000))+(((x303)*(x304)))+(((IkReal(-321.000000000000))*(pz)*(sj30)))+(((IkReal(400.000000000000))*(x303)))+(((IkReal(400.000000000000))*(x305)))+(((x304)*(x305)))+(((IkReal(-32.1000000000000))*(cj30)))));
IkReal x306=((cj27)*(px));
IkReal x307=((py)*(sj27));
IkReal x308=((IkReal(10.0000000000000))*(cj30));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj30)))+(((IkReal(-1.00000000000000))*(cj30)))+(((x307)*(x308)))+(((IkReal(12.4610591900312))*(x306)))+(((IkReal(12.4610591900312))*(x307)))+(((x306)*(x308))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x309=((IkReal(10.0000000000000))*(sj30));
dummyeval[0]=((((py)*(sj27)*(x309)))+(((IkReal(-1.00000000000000))*(sj30)))+(((IkReal(10.0000000000000))*(cj30)*(pz)))+(((cj27)*(px)*(x309)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x310=((cj30)*(pz));
IkReal x311=((py)*(sj27));
IkReal x312=((IkReal(321000.000000000))*(sj30));
IkReal x313=((IkReal(1000.00000000000))*(pz));
IkReal x314=((IkReal(321.000000000000))*(sj30));
IkReal x315=((cj27)*(px));
if( IKabs(((((IKabs(((((x312)*(x315)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj30)))+(((IkReal(321000.000000000))*(x310)))+(((x311)*(x312))))) != 0)?((IkReal)1/(((((x312)*(x315)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj30)))+(((IkReal(321000.000000000))*(x310)))+(((x311)*(x312)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj30)*(sj30))))+(((IkReal(-1000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x310)))+(((x311)*(x314)))+(((x314)*(x315)))+(((IkReal(-32.1000000000000))*(sj30))))) != 0)?((IkReal)1/(((((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x310)))+(((x311)*(x314)))+(((x314)*(x315)))+(((IkReal(-32.1000000000000))*(sj30)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((x311)*(x313)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))+(((x313)*(x315))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x312)*(x315)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj30)))+(((IkReal(321000.000000000))*(x310)))+(((x311)*(x312))))) != 0)?((IkReal)1/(((((x312)*(x315)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj30)))+(((IkReal(321000.000000000))*(x310)))+(((x311)*(x312)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj30)*(sj30))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))))+IKsqr(((((IKabs(((((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x310)))+(((x311)*(x314)))+(((x314)*(x315)))+(((IkReal(-32.1000000000000))*(sj30))))) != 0)?((IkReal)1/(((((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x310)))+(((x311)*(x314)))+(((x314)*(x315)))+(((IkReal(-32.1000000000000))*(sj30)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((x311)*(x313)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))+(((x313)*(x315)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((((IKabs(((((x312)*(x315)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj30)))+(((IkReal(321000.000000000))*(x310)))+(((x311)*(x312))))) != 0)?((IkReal)1/(((((x312)*(x315)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj30)))+(((IkReal(321000.000000000))*(x310)))+(((x311)*(x312)))))):(IkReal)1.0e30))*(((((IkReal(103041.000000000))*((sj30)*(sj30))))+(((IkReal(-1000000.00000000))*((pz)*(pz))))))), ((((IKabs(((((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x310)))+(((x311)*(x314)))+(((x314)*(x315)))+(((IkReal(-32.1000000000000))*(sj30))))) != 0)?((IkReal)1/(((((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x310)))+(((x311)*(x314)))+(((x314)*(x315)))+(((IkReal(-32.1000000000000))*(sj30)))))):(IkReal)1.0e30))*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((x311)*(x313)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))+(((x313)*(x315)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x316=IKsin(j28);
IkReal x317=IKcos(j28);
IkReal x318=((IkReal(0.321000000000000))*(cj30));
IkReal x319=((IkReal(0.321000000000000))*(sj30));
IkReal x320=((py)*(sj27));
IkReal x321=((cj27)*(px));
IkReal x322=((IkReal(1.00000000000000))*(x320));
IkReal x323=((pz)*(x316));
IkReal x324=((IkReal(1.00000000000000))*(x317));
IkReal x325=((IkReal(0.800000000000000))*(x317));
evalcond[0]=((((IkReal(0.400000000000000))*(x316)))+(pz)+(((IkReal(-1.00000000000000))*(x317)*(x319)))+(((x316)*(x318))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x321)*(x324)))+(((IkReal(-1.00000000000000))*(x317)*(x322)))+(x323)+(x318)+(((IkReal(0.100000000000000))*(x317))));
evalcond[2]=((IkReal(0.100000000000000))+(((x317)*(x318)))+(((IkReal(-1.00000000000000))*(x322)))+(((IkReal(-1.00000000000000))*(x321)))+(((IkReal(0.400000000000000))*(x317)))+(((x316)*(x319))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x323)))+(((x320)*(x325)))+(((IkReal(0.200000000000000))*(x320)))+(((IkReal(0.200000000000000))*(x321)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x317)))+(((x321)*(x325))));
evalcond[4]=((x319)+(((IkReal(-1.00000000000000))*(x316)*(x322)))+(((IkReal(0.100000000000000))*(x316)))+(((IkReal(-1.00000000000000))*(x316)*(x321)))+(((IkReal(-1.00000000000000))*(pz)*(x324))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x326=((IkReal(1000.00000000000))*(pz));
if( IKabs(((gconst49)*(((((IkReal(-1.00000000000000))*(py)*(sj27)*(x326)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(-1.00000000000000))*(cj27)*(px)*(x326)))+(((IkReal(103.041000000000))*(cj30)*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(160.000000000000))+(((IkReal(103.041000000000))*((cj30)*(cj30))))+(((IkReal(-1.00000000000000))*(pz)*(x326)))+(((IkReal(256.800000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((gconst49)*(((((IkReal(-1.00000000000000))*(py)*(sj27)*(x326)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(-1.00000000000000))*(cj27)*(px)*(x326)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))), ((gconst49)*(((IkReal(160.000000000000))+(((IkReal(103.041000000000))*((cj30)*(cj30))))+(((IkReal(-1.00000000000000))*(pz)*(x326)))+(((IkReal(256.800000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x327=IKsin(j28);
IkReal x328=IKcos(j28);
IkReal x329=((IkReal(0.321000000000000))*(cj30));
IkReal x330=((IkReal(0.321000000000000))*(sj30));
IkReal x331=((py)*(sj27));
IkReal x332=((cj27)*(px));
IkReal x333=((IkReal(1.00000000000000))*(x331));
IkReal x334=((pz)*(x327));
IkReal x335=((IkReal(1.00000000000000))*(x328));
IkReal x336=((IkReal(0.800000000000000))*(x328));
evalcond[0]=((((x327)*(x329)))+(((IkReal(-1.00000000000000))*(x328)*(x330)))+(pz)+(((IkReal(0.400000000000000))*(x327))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x328)))+(((IkReal(-1.00000000000000))*(x328)*(x333)))+(x334)+(x329)+(((IkReal(-1.00000000000000))*(x332)*(x335))));
evalcond[2]=((IkReal(0.100000000000000))+(((x328)*(x329)))+(((IkReal(-1.00000000000000))*(x332)))+(((x327)*(x330)))+(((IkReal(-1.00000000000000))*(x333)))+(((IkReal(0.400000000000000))*(x328))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x334)))+(((x331)*(x336)))+(((IkReal(-0.0800000000000000))*(x328)))+(((x332)*(x336)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x331)))+(((IkReal(0.200000000000000))*(x332))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x327)*(x332)))+(((IkReal(0.100000000000000))*(x327)))+(((IkReal(-1.00000000000000))*(pz)*(x335)))+(x330)+(((IkReal(-1.00000000000000))*(x327)*(x333))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27)))+(((IkReal(0.321000000000000))*(sj29)*(IKsin(j30)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(IKcos(j30))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst45;
IkReal x337=((py)*(sj27));
IkReal x338=((IkReal(321.000000000000))*(cj30));
IkReal x339=((cj27)*(px));
gconst45=IKsign(((IkReal(-40.0000000000000))+(((x337)*(x338)))+(((IkReal(321.000000000000))*(cj29)*(pz)*(sj30)))+(((x338)*(x339)))+(((IkReal(400.000000000000))*(x339)))+(((IkReal(400.000000000000))*(x337)))+(((IkReal(-32.1000000000000))*(cj30)))));
IkReal x340=((cj27)*(px));
IkReal x341=((py)*(sj27));
IkReal x342=((IkReal(10.0000000000000))*(cj30));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(-1.00000000000000))*(cj30)))+(((IkReal(12.4610591900312))*(x341)))+(((IkReal(12.4610591900312))*(x340)))+(((x341)*(x342)))+(((x340)*(x342)))+(((IkReal(10.0000000000000))*(cj29)*(pz)*(sj30))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((IkReal(160000.000000000))+(((IkReal(256800.000000000))*(cj30)))+(((IkReal(103041.000000000))*((cj30)*(cj30))))+(((IkReal(103041.000000000))*((cj29)*(cj29))*((sj30)*(sj30))))));
dummyeval[0]=((IkReal(1.55277996137460))+((((cj29)*(cj29))*((sj30)*(sj30))))+(((IkReal(2.49221183800623))*(cj30)))+((cj30)*(cj30)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x343=((cj27)*(px));
IkReal x344=((IkReal(321000.000000000))*(cj30));
IkReal x345=((py)*(sj27));
IkReal x346=((IkReal(321000.000000000))*(cj29)*(sj30));
if( IKabs(((gconst46)*(((((IkReal(32100.0000000000))*(cj29)*(sj30)))+(((IkReal(-400000.000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x345)*(x346)))+(((IkReal(-1.00000000000000))*(x343)*(x346)))+(((IkReal(-1.00000000000000))*(pz)*(x344))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((IkReal(-40000.0000000000))+(((IkReal(-32100.0000000000))*(cj30)))+(((x344)*(x345)))+(((x343)*(x344)))+(((IkReal(-1.00000000000000))*(pz)*(x346)))+(((IkReal(400000.000000000))*(x345)))+(((IkReal(400000.000000000))*(x343))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((gconst46)*(((((IkReal(32100.0000000000))*(cj29)*(sj30)))+(((IkReal(-400000.000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x345)*(x346)))+(((IkReal(-1.00000000000000))*(x343)*(x346)))+(((IkReal(-1.00000000000000))*(pz)*(x344)))))), ((gconst46)*(((IkReal(-40000.0000000000))+(((IkReal(-32100.0000000000))*(cj30)))+(((x344)*(x345)))+(((x343)*(x344)))+(((IkReal(-1.00000000000000))*(pz)*(x346)))+(((IkReal(400000.000000000))*(x345)))+(((IkReal(400000.000000000))*(x343)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[6];
IkReal x347=IKsin(j28);
IkReal x348=IKcos(j28);
IkReal x349=((IkReal(0.321000000000000))*(cj30));
IkReal x350=((py)*(sj27));
IkReal x351=((IkReal(0.321000000000000))*(sj30));
IkReal x352=((IkReal(1.00000000000000))*(sj29));
IkReal x353=((px)*(sj27));
IkReal x354=((cj27)*(px));
IkReal x355=((cj27)*(py));
IkReal x356=((IkReal(1.00000000000000))*(x350));
IkReal x357=((pz)*(x347));
IkReal x358=((cj29)*(x347));
IkReal x359=((pz)*(x348));
IkReal x360=((IkReal(0.800000000000000))*(x348));
IkReal x361=((sj29)*(x347));
evalcond[0]=((((IkReal(0.400000000000000))*(x347)))+(pz)+(((x347)*(x349)))+(((cj29)*(x348)*(x351))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x348)*(x356)))+(x357)+(x349)+(((IkReal(0.100000000000000))*(x348)))+(((IkReal(-1.00000000000000))*(x348)*(x354))));
evalcond[2]=((IkReal(0.100000000000000))+(((x348)*(x349)))+(((IkReal(-1.00000000000000))*(x356)))+(((IkReal(0.400000000000000))*(x348)))+(((IkReal(-1.00000000000000))*(x354)))+(((IkReal(-1.00000000000000))*(x351)*(x358))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x357)))+(((x350)*(x360)))+(((IkReal(0.200000000000000))*(x350)))+(((IkReal(0.200000000000000))*(x354)))+(((IkReal(-1.00000000000000))*(pp)))+(((x354)*(x360)))+(((IkReal(-0.0800000000000000))*(x348))));
evalcond[4]=((((cj29)*(x353)))+(((IkReal(-1.00000000000000))*(x347)*(x352)*(x354)))+(((IkReal(-1.00000000000000))*(x347)*(x350)*(x352)))+(((IkReal(0.100000000000000))*(x361)))+(((IkReal(-1.00000000000000))*(x352)*(x359)))+(((IkReal(-1.00000000000000))*(cj29)*(x355))));
evalcond[5]=((((cj29)*(x359)))+(x351)+(((x354)*(x358)))+(((IkReal(-0.100000000000000))*(x358)))+(((x350)*(x358)))+(((IkReal(-1.00000000000000))*(x352)*(x355)))+(((sj29)*(x353))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x362=((cj29)*(sj30));
IkReal x363=((IkReal(1000.00000000000))*(pz));
if( IKabs(((gconst45)*(((((IkReal(-1.00000000000000))*(py)*(sj27)*(x363)))+(((IkReal(-128.400000000000))*(x362)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(cj27)*(px)*(x363)))+(((IkReal(-103.041000000000))*(cj30)*(x362))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((IkReal(160.000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x363)))+(((IkReal(103.041000000000))*((cj30)*(cj30))))+(((IkReal(256.800000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((gconst45)*(((((IkReal(-1.00000000000000))*(py)*(sj27)*(x363)))+(((IkReal(-128.400000000000))*(x362)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(cj27)*(px)*(x363)))+(((IkReal(-103.041000000000))*(cj30)*(x362)))))), ((gconst45)*(((IkReal(160.000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x363)))+(((IkReal(103.041000000000))*((cj30)*(cj30))))+(((IkReal(256.800000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[6];
IkReal x364=IKsin(j28);
IkReal x365=IKcos(j28);
IkReal x366=((IkReal(0.321000000000000))*(cj30));
IkReal x367=((py)*(sj27));
IkReal x368=((IkReal(0.321000000000000))*(sj30));
IkReal x369=((IkReal(1.00000000000000))*(sj29));
IkReal x370=((px)*(sj27));
IkReal x371=((cj27)*(px));
IkReal x372=((cj27)*(py));
IkReal x373=((IkReal(1.00000000000000))*(x367));
IkReal x374=((pz)*(x364));
IkReal x375=((cj29)*(x364));
IkReal x376=((pz)*(x365));
IkReal x377=((IkReal(0.800000000000000))*(x365));
IkReal x378=((sj29)*(x364));
evalcond[0]=((((x364)*(x366)))+(((cj29)*(x365)*(x368)))+(((IkReal(0.400000000000000))*(x364)))+(pz));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x365)))+(((IkReal(-1.00000000000000))*(x365)*(x371)))+(x374)+(x366)+(((IkReal(-1.00000000000000))*(x365)*(x373))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x371)))+(((IkReal(-1.00000000000000))*(x368)*(x375)))+(((IkReal(0.400000000000000))*(x365)))+(((IkReal(-1.00000000000000))*(x373)))+(((x365)*(x366))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x367)*(x377)))+(((IkReal(-0.800000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x365)))+(((IkReal(0.200000000000000))*(x367)))+(((IkReal(0.200000000000000))*(x371)))+(((x371)*(x377))));
evalcond[4]=((((cj29)*(x370)))+(((IkReal(-1.00000000000000))*(cj29)*(x372)))+(((IkReal(-1.00000000000000))*(x364)*(x367)*(x369)))+(((IkReal(0.100000000000000))*(x378)))+(((IkReal(-1.00000000000000))*(x369)*(x376)))+(((IkReal(-1.00000000000000))*(x364)*(x369)*(x371))));
evalcond[5]=((((x367)*(x375)))+(((cj29)*(x376)))+(x368)+(((IkReal(-0.100000000000000))*(x375)))+(((sj29)*(x370)))+(((IkReal(-1.00000000000000))*(x369)*(x372)))+(((x371)*(x375))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x379=(py)*(py);
IkReal x380=(sj27)*(sj27);
IkReal x381=(cj27)*(cj27);
IkReal x382=(px)*(px);
IkReal x383=((pz)*(sj27));
IkReal x384=((py)*(sj29));
IkReal x385=((IkReal(5.00000000000000))*(pp));
IkReal x386=((pz)*(sj29));
IkReal x387=((IkReal(0.400000000000000))*(cj29));
IkReal x388=((px)*(sj27));
IkReal x389=((IkReal(4.00000000000000))*(cj29)*(px));
IkReal x390=((cj27)*(px)*(sj29));
IkReal x391=((IkReal(4.00000000000000))*(cj27)*(cj29));
if( IKabs(((gconst44)*(((((x387)*(x388)))+(((IkReal(-1.00000000000000))*(x383)*(x384)))+(((py)*(x381)*(x389)))+(((IkReal(-1.00000000000000))*(py)*(x380)*(x389)))+(((IkReal(-1.00000000000000))*(cj27)*(px)*(x386)))+(((IkReal(0.334795000000000))*(x386)))+(((sj27)*(x379)*(x391)))+(((x385)*(x386)))+(((IkReal(-1.00000000000000))*(cj27)*(py)*(x387)))+(((IkReal(-1.00000000000000))*(sj27)*(x382)*(x391))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((IkReal(0.500000000000000))*(pp)*(sj29)))+(((IkReal(-1.00000000000000))*(sj27)*(x384)*(x385)))+(((py)*(pz)*(x391)))+(((IkReal(-1.00000000000000))*(x385)*(x390)))+(((IkReal(2.00000000000000))*(cj27)*(x384)*(x388)))+(((IkReal(0.0334795000000000))*(sj29)))+(((sj29)*(x379)*(x380)))+(((IkReal(-0.434795000000000))*(sj27)*(x384)))+(((sj29)*(x381)*(x382)))+(((IkReal(-0.434795000000000))*(x390)))+(((IkReal(-1.00000000000000))*(x383)*(x389))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j28array[0]=IKatan2(((gconst44)*(((((x387)*(x388)))+(((IkReal(-1.00000000000000))*(x383)*(x384)))+(((py)*(x381)*(x389)))+(((IkReal(-1.00000000000000))*(py)*(x380)*(x389)))+(((IkReal(-1.00000000000000))*(cj27)*(px)*(x386)))+(((IkReal(0.334795000000000))*(x386)))+(((sj27)*(x379)*(x391)))+(((x385)*(x386)))+(((IkReal(-1.00000000000000))*(cj27)*(py)*(x387)))+(((IkReal(-1.00000000000000))*(sj27)*(x382)*(x391)))))), ((gconst44)*(((((IkReal(0.500000000000000))*(pp)*(sj29)))+(((IkReal(-1.00000000000000))*(sj27)*(x384)*(x385)))+(((py)*(pz)*(x391)))+(((IkReal(-1.00000000000000))*(x385)*(x390)))+(((IkReal(2.00000000000000))*(cj27)*(x384)*(x388)))+(((IkReal(0.0334795000000000))*(sj29)))+(((sj29)*(x379)*(x380)))+(((IkReal(-0.434795000000000))*(sj27)*(x384)))+(((sj29)*(x381)*(x382)))+(((IkReal(-0.434795000000000))*(x390)))+(((IkReal(-1.00000000000000))*(x383)*(x389)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[2];
IkReal x392=IKcos(j28);
IkReal x393=IKsin(j28);
IkReal x394=((py)*(sj27));
IkReal x395=((IkReal(1.00000000000000))*(cj27));
IkReal x396=((cj27)*(px));
IkReal x397=((IkReal(0.800000000000000))*(x392));
IkReal x398=((sj29)*(x393));
evalcond[0]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x394)))+(((IkReal(0.200000000000000))*(x396)))+(((IkReal(-0.800000000000000))*(pz)*(x393)))+(((x394)*(x397)))+(((x396)*(x397)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x392))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x395)*(x398)))+(((IkReal(-1.00000000000000))*(pz)*(sj29)*(x392)))+(((cj29)*(px)*(sj27)))+(((IkReal(-1.00000000000000))*(x394)*(x398)))+(((IkReal(0.100000000000000))*(x398)))+(((IkReal(-1.00000000000000))*(cj29)*(py)*(x395))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj28;
dummyeval[1]=cj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x399=((cj27)*(px));
IkReal x400=((IkReal(1.00000000000000))*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x399)))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27))));
evalcond[2]=((((cj29)*(px)*(sj27)))+(((IkReal(-1.00000000000000))*(sj29)*(x399)))+(((IkReal(0.100000000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(sj27)*(sj29)*(x400)))+(((IkReal(-1.00000000000000))*(cj27)*(cj29)*(x400))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x401=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j29)), IkReal(6.28318530717959))));
evalcond[1]=x401;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=x401;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x402=IKcos(j30);
IkReal x403=((py)*(sj27));
IkReal x404=((cj27)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x402)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x404)))+(((IkReal(0.200000000000000))*(x403))));
evalcond[1]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x402))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-0.321000000000000))*(IKsin(j30))))+(((IkReal(-1.00000000000000))*(x404)))+(((IkReal(-1.00000000000000))*(x403))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x405=((cj27)*(py));
IkReal x406=((px)*(sj27));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j29, IkReal(6.28318530717959))));
evalcond[1]=((x406)+(((IkReal(-1.00000000000000))*(x405))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=((x405)+(((IkReal(-1.00000000000000))*(x406))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x407=IKcos(j30);
IkReal x408=((py)*(sj27));
IkReal x409=((cj27)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x407)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x409)))+(((IkReal(0.200000000000000))*(x408))));
evalcond[1]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x407))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x409)))+(((IkReal(-1.00000000000000))*(x408)))+(((IkReal(0.321000000000000))*(IKsin(j30)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x410=((py)*(sj27));
IkReal x411=((cj27)*(px));
IkReal x412=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x410)))+(((IkReal(-1.00000000000000))*(x411))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j29)), IkReal(6.28318530717959))));
evalcond[1]=x412;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x410)))+(((IkReal(0.200000000000000))*(x411))));
evalcond[3]=x412;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x413=IKcos(j30);
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27)))+(((IkReal(0.321000000000000))*(IKsin(j30)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x413)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[2]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x413))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x414=((py)*(sj27));
IkReal x415=((cj27)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j29)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x414)))+(((IkReal(-1.00000000000000))*(x415))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x415)))+(((IkReal(0.200000000000000))*(x414))));
evalcond[3]=((IkReal(-0.100000000000000))+(x414)+(x415));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x416=IKcos(j30);
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((IkReal(-0.321000000000000))*(IKsin(j30))))+(((px)*(sj27))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x416)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[2]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x416))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x417=IKcos(j30);
IkReal x418=IKsin(j30);
IkReal x419=((IkReal(1.00000000000000))*(py));
IkReal x420=((cj27)*(px));
IkReal x421=((py)*(sj27));
IkReal x422=((px)*(sj27));
IkReal x423=((IkReal(0.321000000000000))*(x418));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(x419)))+(x422)+(((sj29)*(x423))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x420)))+(((IkReal(0.200000000000000))*(x421)))+(((IkReal(0.256800000000000))*(x417)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x417))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x420)))+(((IkReal(-1.00000000000000))*(sj27)*(x419)))+(((IkReal(-1.00000000000000))*(cj29)*(x423))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x419)))+(((cj29)*(x420)))+(((cj29)*(x421)))+(x423)+(((sj29)*(x422)))+(((IkReal(-0.100000000000000))*(cj29))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj29) != 0)?((IkReal)1/(cj29)):(IkReal)1.0e30))*(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(cj27)*(px)))+(((IkReal(-1000.00000000000))*(py)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj29) != 0)?((IkReal)1/(cj29)):(IkReal)1.0e30))*(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(cj27)*(px)))+(((IkReal(-1000.00000000000))*(py)*(sj27)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj29) != 0)?((IkReal)1/(cj29)):(IkReal)1.0e30))*(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(cj27)*(px)))+(((IkReal(-1000.00000000000))*(py)*(sj27)))))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x424=IKcos(j30);
IkReal x425=IKsin(j30);
IkReal x426=((IkReal(1.00000000000000))*(py));
IkReal x427=((cj27)*(px));
IkReal x428=((py)*(sj27));
IkReal x429=((px)*(sj27));
IkReal x430=((IkReal(0.321000000000000))*(x425));
evalcond[0]=((x429)+(((IkReal(-1.00000000000000))*(cj27)*(x426)))+(((sj29)*(x430))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x424)))+(((IkReal(0.200000000000000))*(x428)))+(((IkReal(0.200000000000000))*(x427)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x424))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x427)))+(((IkReal(-1.00000000000000))*(sj27)*(x426)))+(((IkReal(-1.00000000000000))*(cj29)*(x430))));
evalcond[4]=((((cj29)*(x428)))+(((cj29)*(x427)))+(x430)+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x426)))+(((sj29)*(x429)))+(((IkReal(-0.100000000000000))*(cj29))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x431=IKcos(j30);
IkReal x432=IKsin(j30);
IkReal x433=((IkReal(1.00000000000000))*(py));
IkReal x434=((cj27)*(px));
IkReal x435=((py)*(sj27));
IkReal x436=((px)*(sj27));
IkReal x437=((IkReal(0.321000000000000))*(x432));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(x433)))+(x436)+(((sj29)*(x437))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x431)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x434)))+(((IkReal(0.200000000000000))*(x435))));
evalcond[2]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x431))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x434)))+(((IkReal(-1.00000000000000))*(sj27)*(x433)))+(((IkReal(-1.00000000000000))*(cj29)*(x437))));
evalcond[4]=((((cj29)*(x435)))+(((cj29)*(x434)))+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x433)))+(x437)+(((sj29)*(x436)))+(((IkReal(-0.100000000000000))*(cj29))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x438=((py)*(sj27));
IkReal x439=((cj27)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x439)))+(((IkReal(0.200000000000000))*(x438))));
evalcond[2]=((((cj29)*(px)*(sj27)))+(((IkReal(-1.00000000000000))*(cj27)*(cj29)*(py)))+(((sj29)*(x439)))+(((sj29)*(x438)))+(((IkReal(-0.100000000000000))*(sj29))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x440=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j29)), IkReal(6.28318530717959))));
evalcond[1]=x440;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=x440;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x441=IKcos(j30);
IkReal x442=((py)*(sj27));
IkReal x443=((cj27)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x441)))+(((IkReal(0.200000000000000))*(x442)))+(((IkReal(0.200000000000000))*(x443)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x441))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x443)))+(((IkReal(-1.00000000000000))*(x442)))+(((IkReal(0.321000000000000))*(IKsin(j30)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x444=((cj27)*(py));
IkReal x445=((px)*(sj27));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j29, IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x444)))+(x445));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x445)))+(x444));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x446=IKcos(j30);
IkReal x447=((py)*(sj27));
IkReal x448=((cj27)*(px));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x446)))+(((IkReal(0.200000000000000))*(x448)))+(((IkReal(0.200000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x446))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(x448)))+(((IkReal(-0.321000000000000))*(IKsin(j30)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x449=((py)*(sj27));
IkReal x450=((cj27)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j29)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x449)))+(((IkReal(-1.00000000000000))*(x450))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x450)))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(0.200000000000000))*(x449)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(-0.100000000000000))+(x449)+(x450));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x451=IKcos(j30);
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27)))+(((IkReal(0.321000000000000))*(IKsin(j30)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x451)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[2]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x451))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x452=((py)*(sj27));
IkReal x453=((cj27)*(px));
IkReal x454=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x452)))+(((IkReal(-1.00000000000000))*(x453))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j29)), IkReal(6.28318530717959))));
evalcond[1]=x454;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x453)))+(((IkReal(0.200000000000000))*(x452)))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x454;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x455=IKcos(j30);
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((IkReal(-0.321000000000000))*(IKsin(j30))))+(((px)*(sj27))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x455)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[2]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x455))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x456=IKcos(j30);
IkReal x457=IKsin(j30);
IkReal x458=((IkReal(1.00000000000000))*(py));
IkReal x459=((px)*(sj27));
IkReal x460=((IkReal(1.00000000000000))*(cj27)*(px));
IkReal x461=((IkReal(0.321000000000000))*(x457));
evalcond[0]=((((sj29)*(x461)))+(x459)+(((IkReal(-1.00000000000000))*(cj27)*(x458))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x456)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[2]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x456))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x460)))+(((cj29)*(x461)))+(((IkReal(-1.00000000000000))*(sj27)*(x458))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x458)))+(((sj29)*(x459)))+(x461)+(((IkReal(-1.00000000000000))*(cj29)*(sj27)*(x458)))+(((IkReal(0.100000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(cj29)*(x460))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj29) != 0)?((IkReal)1/(cj29)):(IkReal)1.0e30))*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(cj27)*(px)))+(((IkReal(1000.00000000000))*(py)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj29) != 0)?((IkReal)1/(cj29)):(IkReal)1.0e30))*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(cj27)*(px)))+(((IkReal(1000.00000000000))*(py)*(sj27)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj29) != 0)?((IkReal)1/(cj29)):(IkReal)1.0e30))*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(cj27)*(px)))+(((IkReal(1000.00000000000))*(py)*(sj27)))))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x462=IKcos(j30);
IkReal x463=IKsin(j30);
IkReal x464=((IkReal(1.00000000000000))*(py));
IkReal x465=((px)*(sj27));
IkReal x466=((IkReal(1.00000000000000))*(cj27)*(px));
IkReal x467=((IkReal(0.321000000000000))*(x463));
evalcond[0]=((((sj29)*(x467)))+(x465)+(((IkReal(-1.00000000000000))*(cj27)*(x464))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x462)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[2]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x462))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(sj27)*(x464)))+(((IkReal(-1.00000000000000))*(x466)))+(((cj29)*(x467))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x464)))+(((sj29)*(x465)))+(x467)+(((IkReal(-1.00000000000000))*(cj29)*(sj27)*(x464)))+(((IkReal(0.100000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(cj29)*(x466))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x468=IKcos(j30);
IkReal x469=IKsin(j30);
IkReal x470=((IkReal(1.00000000000000))*(py));
IkReal x471=((px)*(sj27));
IkReal x472=((IkReal(1.00000000000000))*(cj27)*(px));
IkReal x473=((IkReal(0.321000000000000))*(x469));
evalcond[0]=((((sj29)*(x473)))+(x471)+(((IkReal(-1.00000000000000))*(cj27)*(x470))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x468)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[2]=((IkReal(-0.400000000000000))+(pz)+(((IkReal(-0.321000000000000))*(x468))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(sj27)*(x470)))+(((IkReal(-1.00000000000000))*(x472)))+(((cj29)*(x473))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj29)*(x472)))+(((sj29)*(x471)))+(x473)+(((IkReal(0.100000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(cj29)*(sj27)*(x470)))+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x470))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x474=((cj27)*(px));
IkReal x475=((IkReal(0.800000000000000))*(cj28));
IkReal x476=((py)*(sj27));
IkReal x477=((IkReal(1.00000000000000))*(sj28));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j29)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x476)))+(((IkReal(0.200000000000000))*(x474)))+(((IkReal(-0.0800000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(pp)))+(((x474)*(x475)))+(((x475)*(x476)))+(((IkReal(-0.800000000000000))*(pz)*(sj28))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x476)*(x477)))+(((IkReal(0.100000000000000))*(sj28)))+(((IkReal(-1.00000000000000))*(x474)*(x477)))+(((IkReal(-1.00000000000000))*(cj28)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x478=IKcos(j30);
IkReal x479=((IkReal(1.00000000000000))*(py));
IkReal x480=((cj27)*(px));
IkReal x481=((IkReal(0.321000000000000))*(x478));
evalcond[0]=((((px)*(sj27)))+(((IkReal(-1.00000000000000))*(cj27)*(x479)))+(((IkReal(0.321000000000000))*(IKsin(j30)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(x480)))+(((IkReal(0.256800000000000))*(x478))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x481)))+(pz));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(cj28)*(sj27)*(x479)))+(x481)+(((IkReal(0.100000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(cj28)*(x480)))+(((pz)*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(sj27)*(x479)))+(((IkReal(0.400000000000000))*(cj28)))+(((cj28)*(x481)))+(((IkReal(-1.00000000000000))*(x480))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x482=((cj27)*(px));
IkReal x483=((IkReal(0.800000000000000))*(cj28));
IkReal x484=((py)*(sj27));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j29)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((x483)*(x484)))+(((IkReal(-0.0800000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(pp)))+(((x482)*(x483)))+(((IkReal(0.200000000000000))*(x482)))+(((IkReal(0.200000000000000))*(x484)))+(((IkReal(-0.800000000000000))*(pz)*(sj28))));
evalcond[2]=((((sj28)*(x482)))+(((sj28)*(x484)))+(((cj28)*(pz)))+(((IkReal(-0.100000000000000))*(sj28))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x485=IKcos(j30);
IkReal x486=((IkReal(1.00000000000000))*(py));
IkReal x487=((cj27)*(px));
IkReal x488=((IkReal(0.321000000000000))*(x485));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(x486)))+(((IkReal(-0.321000000000000))*(IKsin(j30))))+(((px)*(sj27))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x485)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(x487))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x488)))+(pz));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(cj28)*(sj27)*(x486)))+(x488)+(((IkReal(0.100000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(cj28)*(x487)))+(((pz)*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(cj28)))+(((cj28)*(x488)))+(((IkReal(-1.00000000000000))*(x487)))+(((IkReal(-1.00000000000000))*(sj27)*(x486))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x489=((cj27)*(px));
IkReal x490=((IkReal(0.800000000000000))*(cj28));
IkReal x491=((py)*(sj27));
IkReal x492=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j29)), IkReal(6.28318530717959))));
evalcond[1]=x492;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x491)))+(((x489)*(x490)))+(((x490)*(x491)))+(((IkReal(-0.0800000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x489)))+(((IkReal(-0.800000000000000))*(pz)*(sj28))));
evalcond[3]=x492;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x493=((cj27)*(px));
IkReal x494=((py)*(sj27));
IkReal x495=((IkReal(3.11526479750779))*(sj28));
if( IKabs(((((IkReal(-1.00000000000000))*(x494)*(x495)))+(((IkReal(-1.00000000000000))*(x493)*(x495)))+(((IkReal(-3.11526479750779))*(cj28)*(pz)))+(((IkReal(0.311526479750779))*(sj28))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x493)))+(((IkReal(-0.778816199376947))*(x494))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(x494)*(x495)))+(((IkReal(-1.00000000000000))*(x493)*(x495)))+(((IkReal(-3.11526479750779))*(cj28)*(pz)))+(((IkReal(0.311526479750779))*(sj28)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x493)))+(((IkReal(-0.778816199376947))*(x494)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(-1.00000000000000))*(x494)*(x495)))+(((IkReal(-1.00000000000000))*(x493)*(x495)))+(((IkReal(-3.11526479750779))*(cj28)*(pz)))+(((IkReal(0.311526479750779))*(sj28)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x493)))+(((IkReal(-0.778816199376947))*(x494)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x496=IKcos(j30);
IkReal x497=IKsin(j30);
IkReal x498=((py)*(sj27));
IkReal x499=((cj27)*(px));
IkReal x500=((IkReal(1.00000000000000))*(cj28));
IkReal x501=((IkReal(0.321000000000000))*(x497));
IkReal x502=((IkReal(0.321000000000000))*(x496));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x499)))+(((IkReal(0.200000000000000))*(x498)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x496))));
evalcond[1]=((((IkReal(0.400000000000000))*(sj28)))+(((cj28)*(x501)))+(((sj28)*(x502)))+(pz));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x499)*(x500)))+(x502)+(((IkReal(0.100000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x498)*(x500)))+(((pz)*(sj28))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(sj28)*(x501)))+(((cj28)*(x502)))+(((IkReal(-1.00000000000000))*(x498)))+(((IkReal(-1.00000000000000))*(x499))));
evalcond[4]=((((sj28)*(x499)))+(((sj28)*(x498)))+(((cj28)*(pz)))+(x501)+(((IkReal(-0.100000000000000))*(sj28))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x503=((cj27)*(px));
IkReal x504=((IkReal(0.800000000000000))*(cj28));
IkReal x505=((cj27)*(py));
IkReal x506=((px)*(sj27));
IkReal x507=((py)*(sj27));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j29, IkReal(6.28318530717959))));
evalcond[1]=((x506)+(((IkReal(-1.00000000000000))*(x505))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x503)))+(((IkReal(0.200000000000000))*(x507)))+(((IkReal(-0.0800000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(pp)))+(((x503)*(x504)))+(((x504)*(x507)))+(((IkReal(-0.800000000000000))*(pz)*(sj28))));
evalcond[3]=((x505)+(((IkReal(-1.00000000000000))*(x506))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(((((IkReal(321.000000000000))*((cj28)*(cj28))))+(((IkReal(321.000000000000))*((sj28)*(sj28))))));
dummyeval[0]=(((cj28)*(cj28))+((sj28)*(sj28)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj28;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj28;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x508=((IkReal(1000.00000000000))*(pz));
IkReal x509=((cj28)*(sj28));
IkReal x510=((cj27)*(px));
IkReal x511=((cj28)*(py)*(sj27));
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj28) != 0)?((IkReal)1/(cj28)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(x509)*(x510)))+(((IkReal(-100.000000000000))*(x509)))+(x508)+(((IkReal(1000.00000000000))*(py)*(sj27)*(x509)))+(((IkReal(-1.00000000000000))*(x508)*((sj28)*(sj28)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(x511)))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((IkReal(3.11526479750779))*(cj28)*(x510))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj28) != 0)?((IkReal)1/(cj28)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(x509)*(x510)))+(((IkReal(-100.000000000000))*(x509)))+(x508)+(((IkReal(1000.00000000000))*(py)*(sj27)*(x509)))+(((IkReal(-1.00000000000000))*(x508)*((sj28)*(sj28))))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(x511)))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((IkReal(3.11526479750779))*(cj28)*(x510)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj28) != 0)?((IkReal)1/(cj28)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(x509)*(x510)))+(((IkReal(-100.000000000000))*(x509)))+(x508)+(((IkReal(1000.00000000000))*(py)*(sj27)*(x509)))+(((IkReal(-1.00000000000000))*(x508)*((sj28)*(sj28))))))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(x511)))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((IkReal(3.11526479750779))*(cj28)*(x510)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x512=IKcos(j30);
IkReal x513=IKsin(j30);
IkReal x514=((py)*(sj27));
IkReal x515=((IkReal(1.00000000000000))*(cj28));
IkReal x516=((cj27)*(px));
IkReal x517=((IkReal(1.00000000000000))*(sj28));
IkReal x518=((IkReal(0.321000000000000))*(x513));
IkReal x519=((IkReal(0.321000000000000))*(x512));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x514)))+(((IkReal(0.200000000000000))*(x516)))+(((IkReal(0.256800000000000))*(x512)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((((IkReal(0.400000000000000))*(sj28)))+(pz)+(((IkReal(-1.00000000000000))*(cj28)*(x518)))+(((sj28)*(x519))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x514)*(x515)))+(((IkReal(-1.00000000000000))*(x515)*(x516)))+(x519)+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x514)))+(((IkReal(-1.00000000000000))*(x516)))+(((cj28)*(x519)))+(((sj28)*(x518))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x514)*(x517)))+(((IkReal(0.100000000000000))*(sj28)))+(((IkReal(-1.00000000000000))*(x516)*(x517)))+(x518)+(((IkReal(-1.00000000000000))*(pz)*(x515))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x520=((IkReal(250.000000000000))*(sj28));
IkReal x521=((py)*(sj27));
IkReal x522=((cj27)*(px));
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj28) != 0)?((IkReal)1/(cj28)):(IkReal)1.0e30))*(((((IkReal(1250.00000000000))*(pp)*(sj28)))+(((IkReal(-1.00000000000000))*(x520)*(x522)))+(((IkReal(-1.00000000000000))*(x520)*(x521)))+(((IkReal(83.6987500000000))*(sj28)))+(((IkReal(1000.00000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x521)))+(((IkReal(-0.778816199376947))*(x522))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj28) != 0)?((IkReal)1/(cj28)):(IkReal)1.0e30))*(((((IkReal(1250.00000000000))*(pp)*(sj28)))+(((IkReal(-1.00000000000000))*(x520)*(x522)))+(((IkReal(-1.00000000000000))*(x520)*(x521)))+(((IkReal(83.6987500000000))*(sj28)))+(((IkReal(1000.00000000000))*(pz)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x521)))+(((IkReal(-0.778816199376947))*(x522)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj28) != 0)?((IkReal)1/(cj28)):(IkReal)1.0e30))*(((((IkReal(1250.00000000000))*(pp)*(sj28)))+(((IkReal(-1.00000000000000))*(x520)*(x522)))+(((IkReal(-1.00000000000000))*(x520)*(x521)))+(((IkReal(83.6987500000000))*(sj28)))+(((IkReal(1000.00000000000))*(pz)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x521)))+(((IkReal(-0.778816199376947))*(x522)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x523=IKcos(j30);
IkReal x524=IKsin(j30);
IkReal x525=((py)*(sj27));
IkReal x526=((IkReal(1.00000000000000))*(cj28));
IkReal x527=((cj27)*(px));
IkReal x528=((IkReal(1.00000000000000))*(sj28));
IkReal x529=((IkReal(0.321000000000000))*(x524));
IkReal x530=((IkReal(0.321000000000000))*(x523));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x527)))+(((IkReal(0.200000000000000))*(x525)))+(((IkReal(0.256800000000000))*(x523)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x530)))+(pz)+(((IkReal(-1.00000000000000))*(cj28)*(x529))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x525)*(x526)))+(((IkReal(-1.00000000000000))*(x526)*(x527)))+(x530)+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
evalcond[3]=((IkReal(0.100000000000000))+(((sj28)*(x529)))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x527)))+(((IkReal(-1.00000000000000))*(x525)))+(((cj28)*(x530))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x525)*(x528)))+(((IkReal(-1.00000000000000))*(x527)*(x528)))+(((IkReal(0.100000000000000))*(sj28)))+(x529)+(((IkReal(-1.00000000000000))*(pz)*(x526))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x531=((IkReal(1000.00000000000))*(cj28));
IkReal x532=((py)*(sj27));
IkReal x533=((IkReal(1000.00000000000))*(sj28));
IkReal x534=((cj27)*(px));
if( IKabs(((gconst47)*(((((pz)*(x531)))+(((IkReal(-100.000000000000))*(sj28)))+(((x532)*(x533)))+(((x533)*(x534))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((((IkReal(-400.000000000000))*((sj28)*(sj28))))+(((IkReal(-400.000000000000))*((cj28)*(cj28))))+(((x531)*(x532)))+(((x531)*(x534)))+(((IkReal(-100.000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(pz)*(x533))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((gconst47)*(((((pz)*(x531)))+(((IkReal(-100.000000000000))*(sj28)))+(((x532)*(x533)))+(((x533)*(x534)))))), ((gconst47)*(((((IkReal(-400.000000000000))*((sj28)*(sj28))))+(((IkReal(-400.000000000000))*((cj28)*(cj28))))+(((x531)*(x532)))+(((x531)*(x534)))+(((IkReal(-100.000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(pz)*(x533)))))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x535=IKcos(j30);
IkReal x536=IKsin(j30);
IkReal x537=((py)*(sj27));
IkReal x538=((IkReal(1.00000000000000))*(cj28));
IkReal x539=((cj27)*(px));
IkReal x540=((IkReal(1.00000000000000))*(sj28));
IkReal x541=((IkReal(0.321000000000000))*(x536));
IkReal x542=((IkReal(0.321000000000000))*(x535));
evalcond[0]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x539)))+(((IkReal(0.200000000000000))*(x537)))+(((IkReal(0.256800000000000))*(x535)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[1]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x542)))+(pz)+(((IkReal(-1.00000000000000))*(cj28)*(x541))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x537)*(x538)))+(((IkReal(-1.00000000000000))*(x538)*(x539)))+(x542)+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
evalcond[3]=((IkReal(0.100000000000000))+(((sj28)*(x541)))+(((IkReal(-1.00000000000000))*(x539)))+(((IkReal(-1.00000000000000))*(x537)))+(((IkReal(0.400000000000000))*(cj28)))+(((cj28)*(x542))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x537)*(x540)))+(((IkReal(-1.00000000000000))*(x539)*(x540)))+(((IkReal(0.100000000000000))*(sj28)))+(x541)+(((IkReal(-1.00000000000000))*(pz)*(x538))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x543=((IkReal(250.000000000000))*(sj28));
IkReal x544=((py)*(sj27));
IkReal x545=((cj27)*(px));
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(cj28) != 0)?((IkReal)1/(cj28)):(IkReal)1.0e30))*(((IKabs(cj29) != 0)?((IkReal)1/(cj29)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-83.6987500000000))*(sj28)))+(((IkReal(-1250.00000000000))*(pp)*(sj28)))+(((x543)*(x545)))+(((x543)*(x544))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x544)))+(((IkReal(-0.778816199376947))*(x545))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(cj28) != 0)?((IkReal)1/(cj28)):(IkReal)1.0e30))*(((IKabs(cj29) != 0)?((IkReal)1/(cj29)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-83.6987500000000))*(sj28)))+(((IkReal(-1250.00000000000))*(pp)*(sj28)))+(((x543)*(x545)))+(((x543)*(x544)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x544)))+(((IkReal(-0.778816199376947))*(x545)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(cj28) != 0)?((IkReal)1/(cj28)):(IkReal)1.0e30))*(((IKabs(cj29) != 0)?((IkReal)1/(cj29)):(IkReal)1.0e30))*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-83.6987500000000))*(sj28)))+(((IkReal(-1250.00000000000))*(pp)*(sj28)))+(((x543)*(x545)))+(((x543)*(x544)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x544)))+(((IkReal(-0.778816199376947))*(x545)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x546=IKsin(j30);
IkReal x547=IKcos(j30);
IkReal x548=((IkReal(1.00000000000000))*(py));
IkReal x549=((cj29)*(sj28));
IkReal x550=((cj27)*(px));
IkReal x551=((cj28)*(cj29));
IkReal x552=((py)*(sj27));
IkReal x553=((px)*(sj27));
IkReal x554=((IkReal(0.321000000000000))*(x546));
IkReal x555=((IkReal(0.321000000000000))*(x547));
evalcond[0]=((((sj29)*(x554)))+(x553)+(((IkReal(-1.00000000000000))*(cj27)*(x548))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x550)))+(((IkReal(0.200000000000000))*(x552)))+(((IkReal(0.256800000000000))*(x547)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x555)))+(pz)+(((x551)*(x554))));
evalcond[3]=((IkReal(0.400000000000000))+(x555)+(((IkReal(0.100000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(cj28)*(x550)))+(((IkReal(-1.00000000000000))*(cj28)*(sj27)*(x548)))+(((pz)*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x550)))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(sj27)*(x548)))+(((IkReal(-1.00000000000000))*(x549)*(x554)))+(((cj28)*(x555))));
evalcond[5]=((((IkReal(-0.100000000000000))*(x549)))+(((pz)*(x551)))+(((sj29)*(x553)))+(x554)+(((x549)*(x552)))+(((x549)*(x550)))+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x548))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x556=((IkReal(3.11526479750779))*(cj28));
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((py)*(sj27)*(x556)))+(((cj27)*(px)*(x556))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((py)*(sj27)*(x556)))+(((cj27)*(px)*(x556)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-1.24610591900312))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((py)*(sj27)*(x556)))+(((cj27)*(px)*(x556)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x557=IKsin(j30);
IkReal x558=IKcos(j30);
IkReal x559=((IkReal(1.00000000000000))*(py));
IkReal x560=((cj29)*(sj28));
IkReal x561=((cj27)*(px));
IkReal x562=((cj28)*(cj29));
IkReal x563=((py)*(sj27));
IkReal x564=((px)*(sj27));
IkReal x565=((IkReal(0.321000000000000))*(x557));
IkReal x566=((IkReal(0.321000000000000))*(x558));
evalcond[0]=((x564)+(((sj29)*(x565)))+(((IkReal(-1.00000000000000))*(cj27)*(x559))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x558)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x563)))+(((IkReal(0.200000000000000))*(x561))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj28)))+(((x562)*(x565)))+(pz)+(((sj28)*(x566))));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(cj28)*(sj27)*(x559)))+(((IkReal(-1.00000000000000))*(cj28)*(x561)))+(x566)+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((cj28)*(x566)))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(sj27)*(x559)))+(((IkReal(-1.00000000000000))*(x560)*(x565)))+(((IkReal(-1.00000000000000))*(x561))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x559)))+(((IkReal(-0.100000000000000))*(x560)))+(((x560)*(x563)))+(((x560)*(x561)))+(x565)+(((pz)*(x562)))+(((sj29)*(x564))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(((IKabs(sj29) != 0)?((IkReal)1/(sj29)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x567=IKsin(j30);
IkReal x568=IKcos(j30);
IkReal x569=((IkReal(1.00000000000000))*(py));
IkReal x570=((cj29)*(sj28));
IkReal x571=((cj27)*(px));
IkReal x572=((cj28)*(cj29));
IkReal x573=((py)*(sj27));
IkReal x574=((px)*(sj27));
IkReal x575=((IkReal(0.321000000000000))*(x567));
IkReal x576=((IkReal(0.321000000000000))*(x568));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(x569)))+(x574)+(((sj29)*(x575))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x571)))+(((IkReal(0.200000000000000))*(x573)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x568))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj28)))+(pz)+(((x572)*(x575)))+(((sj28)*(x576))));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(cj28)*(x571)))+(((IkReal(-1.00000000000000))*(cj28)*(sj27)*(x569)))+(x576)+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x570)*(x575)))+(((IkReal(-1.00000000000000))*(x571)))+(((cj28)*(x576)))+(((IkReal(-1.00000000000000))*(sj27)*(x569))));
evalcond[5]=((((pz)*(x572)))+(x575)+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x569)))+(((IkReal(-0.100000000000000))*(x570)))+(((sj29)*(x574)))+(((x570)*(x571)))+(((x570)*(x573))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x152=((sj27)*(sj29));
IkReal x153=((cj27)*(sj29));
IkReal x154=((cj28)*(sj29));
IkReal x155=((cj28)*(cj30));
IkReal x156=((IkReal(1.00000000000000))*(sj30));
IkReal x157=((IkReal(1.00000000000000))*(cj29));
IkReal x158=((cj29)*(x156));
IkReal x159=((IkReal(1.00000000000000))*(cj30)*(sj28));
IkReal x160=((((sj28)*(sj30)))+(((IkReal(-1.00000000000000))*(x155)*(x157))));
IkReal x161=((((IkReal(-1.00000000000000))*(sj27)*(x157)))+(((sj28)*(x153))));
IkReal x162=((((sj28)*(x152)))+(((cj27)*(cj29))));
IkReal x163=((((IkReal(-1.00000000000000))*(sj28)*(x158)))+(x155));
IkReal x164=((cj27)*(x163));
IkReal x165=((((IkReal(-1.00000000000000))*(cj30)*(sj28)*(x157)))+(((IkReal(-1.00000000000000))*(cj28)*(x156))));
IkReal x166=((((IkReal(-1.00000000000000))*(x159)))+(((IkReal(-1.00000000000000))*(cj28)*(x158))));
IkReal x167=((cj27)*(x165));
IkReal x168=((((sj27)*(x163)))+(((sj30)*(x153))));
IkReal x169=((x164)+(((IkReal(-1.00000000000000))*(sj30)*(x152))));
IkReal x170=((((sj27)*(x165)))+(((cj30)*(x153))));
IkReal x171=((((IkReal(-1.00000000000000))*(cj30)*(x152)))+(x167));
new_r00=((((r20)*(x160)))+(((r10)*(x170)))+(((r00)*(((((IkReal(-1.00000000000000))*(cj30)*(x152)))+(x167))))));
new_r01=((((r01)*(x171)))+(((r21)*(x160)))+(((r11)*(x170))));
new_r02=((((r22)*(x160)))+(((r12)*(x170)))+(((r02)*(x171))));
new_r10=((((r00)*(x161)))+(((r20)*(x154)))+(((r10)*(x162))));
new_r11=((((r01)*(x161)))+(((r21)*(x154)))+(((r11)*(x162))));
new_r12=((((r12)*(x162)))+(((r22)*(x154)))+(((r02)*(x161))));
new_r20=((((r00)*(x169)))+(((r20)*(x166)))+(((r10)*(x168))));
new_r21=((((r01)*(x169)))+(((r21)*(x166)))+(((r11)*(x168))));
new_r22=((((r02)*(((x164)+(((IkReal(-1.00000000000000))*(x152)*(x156)))))))+(((r22)*(x166)))+(((r12)*(x168))));
{
IkReal j32array[2], cj32array[2], sj32array[2];
bool j32valid[2]={false};
_nj32 = 2;
cj32array[0]=new_r22;
if( cj32array[0] >= -1-IKFAST_SINCOS_THRESH && cj32array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j32valid[0] = j32valid[1] = true;
    j32array[0] = IKacos(cj32array[0]);
    sj32array[0] = IKsin(j32array[0]);
    cj32array[1] = cj32array[0];
    j32array[1] = -j32array[0];
    sj32array[1] = -sj32array[0];
}
else if( isnan(cj32array[0]) )
{
    // probably any value will work
    j32valid[0] = true;
    cj32array[0] = 1; sj32array[0] = 0; j32array[0] = 0;
}
for(int ij32 = 0; ij32 < 2; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 2; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];

{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign(((((new_r00)*(new_r02)*(sj32)))+(((new_r10)*(new_r12)*(sj32)))));
dummyeval[0]=((((new_r00)*(new_r02)*(sj32)))+(((new_r10)*(new_r12)*(sj32))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x172=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j32)), IkReal(6.28318530717959))));
evalcond[1]=x172;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x172;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j31array[2], cj31array[2], sj31array[2];
bool j31valid[2]={false};
_nj31 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x173=IKatan2(new_r02, new_r12);
j31array[0]=((IkReal(-1.00000000000000))*(x173));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
j31array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x173))));
sj31array[1]=IKsin(j31array[1]);
cj31array[1]=IKcos(j31array[1]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
if( j31array[1] > IKPI )
{
    j31array[1]-=IK2PI;
}
else if( j31array[1] < -IKPI )
{    j31array[1]+=IK2PI;
}
j31valid[1] = true;
for(int ij31 = 0; ij31 < 2; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 2; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j31))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j31)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj31)*(new_r00)))+(((new_r10)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj31)))))+IKsqr(((((cj31)*(new_r00)))+(((new_r10)*(sj31)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj31)))), ((((cj31)*(new_r00)))+(((new_r10)*(sj31)))));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x174=IKsin(j33);
IkReal x175=((IkReal(1.00000000000000))*(sj31));
IkReal x176=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x174)))+(((IkReal(-1.00000000000000))*(new_r00)*(x175))));
evalcond[1]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x176)))+(((IkReal(-1.00000000000000))*(new_r01)*(x175))));
evalcond[2]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(x174));
evalcond[3]=((((IkReal(-1.00000000000000))*(x176)))+(((cj31)*(new_r00)))+(((new_r10)*(sj31))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j32, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j31array[2], cj31array[2], sj31array[2];
bool j31valid[2]={false};
_nj31 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x177=IKatan2(new_r02, new_r12);
j31array[0]=((IkReal(-1.00000000000000))*(x177));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
j31array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x177))));
sj31array[1]=IKsin(j31array[1]);
cj31array[1]=IKcos(j31array[1]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
if( j31array[1] > IKPI )
{
    j31array[1]-=IK2PI;
}
else if( j31array[1] < -IKPI )
{    j31array[1]+=IK2PI;
}
j31valid[1] = true;
for(int ij31 = 0; ij31 < 2; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 2; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j31))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j31)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((((cj31)*(new_r01)))+(((new_r11)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj31)*(new_r01)))+(((new_r11)*(sj31)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj31)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((((cj31)*(new_r01)))+(((new_r11)*(sj31)))), ((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj31)))));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x178=IKcos(j33);
IkReal x179=((IkReal(1.00000000000000))*(sj31));
IkReal x180=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x180)))+(((IkReal(-1.00000000000000))*(new_r00)*(x179))));
evalcond[1]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x178)))+(((IkReal(-1.00000000000000))*(new_r01)*(x179))));
evalcond[2]=((((cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(x180)))+(((new_r11)*(sj31))));
evalcond[3]=((((cj31)*(new_r00)))+(x178)+(((new_r10)*(sj31))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x181=((IkReal(-1.00000000000000))*(cj32)*(gconst51)*(new_r20));
if( IKabs(((new_r12)*(x181))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x181))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j31array[0]=IKatan2(((new_r12)*(x181)), ((new_r02)*(x181)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[6];
IkReal x182=IKsin(j31);
IkReal x183=IKcos(j31);
IkReal x184=((IkReal(1.00000000000000))*(sj32));
IkReal x185=((new_r02)*(x183));
IkReal x186=((new_r12)*(x182));
IkReal x187=((sj32)*(x183));
IkReal x188=((sj32)*(x182));
evalcond[0]=((((new_r12)*(x183)))+(((IkReal(-1.00000000000000))*(new_r02)*(x182))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x184)))+(x185)+(x186));
evalcond[2]=((((new_r10)*(x188)))+(((new_r00)*(x187)))+(((cj32)*(new_r20))));
evalcond[3]=((((new_r11)*(x188)))+(((new_r01)*(x187)))+(((cj32)*(new_r21))));
evalcond[4]=((IkReal(-1.00000000000000))+(((sj32)*(x186)))+(((sj32)*(x185)))+(((cj32)*(new_r22))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r22)*(x184)))+(((cj32)*(x185)))+(((cj32)*(x186))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x189=((IkReal(-1.00000000000000))+(new_r22));
IkReal x190=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj31))));
IkReal x191=((((cj31)*(new_r02)))+(((new_r12)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j32)), IkReal(6.28318530717959))));
evalcond[1]=x189;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x190;
evalcond[5]=x190;
evalcond[6]=x191;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x189;
evalcond[10]=x191;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj31)*(new_r00)))+(((new_r10)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj31)))))+IKsqr(((((cj31)*(new_r00)))+(((new_r10)*(sj31)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj31)))), ((((cj31)*(new_r00)))+(((new_r10)*(sj31)))));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x192=IKsin(j33);
IkReal x193=((IkReal(1.00000000000000))*(sj31));
IkReal x194=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x192)))+(((IkReal(-1.00000000000000))*(new_r00)*(x193))));
evalcond[1]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-1.00000000000000))*(new_r01)*(x193))));
evalcond[2]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(x192));
evalcond[3]=((((cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(x194)))+(((new_r10)*(sj31))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x195=((cj31)*(new_r02));
IkReal x196=((new_r12)*(sj31));
IkReal x197=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j32, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x197;
evalcond[5]=x197;
evalcond[6]=((x196)+(x195));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(x195))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((((cj31)*(new_r01)))+(((new_r11)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj31)*(new_r01)))+(((new_r11)*(sj31)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj31)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((((cj31)*(new_r01)))+(((new_r11)*(sj31)))), ((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj31)))));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x198=IKcos(j33);
IkReal x199=((IkReal(1.00000000000000))*(sj31));
IkReal x200=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x200)))+(((IkReal(-1.00000000000000))*(new_r00)*(x199))));
evalcond[1]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(new_r01)*(x199))));
evalcond[2]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(((IkReal(-1.00000000000000))*(x200))));
evalcond[3]=((((cj31)*(new_r00)))+(x198)+(((new_r10)*(sj31))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj31)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj31)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30))));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x201=IKsin(j33);
IkReal x202=IKcos(j33);
IkReal x203=((new_r10)*(sj31));
IkReal x204=((cj31)*(cj32));
IkReal x205=((IkReal(1.00000000000000))*(sj32));
IkReal x206=((new_r11)*(sj31));
IkReal x207=((IkReal(1.00000000000000))*(sj31));
IkReal x208=((IkReal(1.00000000000000))*(x202));
evalcond[0]=((((sj32)*(x202)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x201)*(x205)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x207)))+(((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x201))));
evalcond[3]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x208)))+(((IkReal(-1.00000000000000))*(new_r01)*(x207))));
evalcond[4]=((((cj32)*(x201)))+(((cj31)*(new_r01)))+(x206));
evalcond[5]=((((cj31)*(new_r00)))+(x203)+(((IkReal(-1.00000000000000))*(cj32)*(x208))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x205)))+(((cj32)*(x206)))+(((new_r01)*(x204)))+(x201));
evalcond[7]=((((cj32)*(x203)))+(((new_r00)*(x204)))+(((IkReal(-1.00000000000000))*(new_r20)*(x205)))+(((IkReal(-1.00000000000000))*(x208))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((new_r21)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30))))+IKsqr(((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj31)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((new_r21)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30))), ((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj31)))));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x209=IKsin(j33);
IkReal x210=IKcos(j33);
IkReal x211=((new_r10)*(sj31));
IkReal x212=((cj31)*(cj32));
IkReal x213=((IkReal(1.00000000000000))*(sj32));
IkReal x214=((new_r11)*(sj31));
IkReal x215=((IkReal(1.00000000000000))*(sj31));
IkReal x216=((IkReal(1.00000000000000))*(x210));
evalcond[0]=((((sj32)*(x210)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x209)*(x213))));
evalcond[2]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x215)))+(((IkReal(-1.00000000000000))*(x209))));
evalcond[3]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x215)))+(((IkReal(-1.00000000000000))*(x216))));
evalcond[4]=((((cj32)*(x209)))+(((cj31)*(new_r01)))+(x214));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x216)))+(((cj31)*(new_r00)))+(x211));
evalcond[6]=((x209)+(((IkReal(-1.00000000000000))*(new_r21)*(x213)))+(((new_r01)*(x212)))+(((cj32)*(x214))));
evalcond[7]=((((new_r00)*(x212)))+(((IkReal(-1.00000000000000))*(new_r20)*(x213)))+(((cj32)*(x211)))+(((IkReal(-1.00000000000000))*(x216))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((gconst53)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst53)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j33array[0]=IKatan2(((gconst53)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst53)*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x217=IKsin(j33);
IkReal x218=IKcos(j33);
IkReal x219=((new_r10)*(sj31));
IkReal x220=((cj31)*(cj32));
IkReal x221=((IkReal(1.00000000000000))*(sj32));
IkReal x222=((new_r11)*(sj31));
IkReal x223=((IkReal(1.00000000000000))*(sj31));
IkReal x224=((IkReal(1.00000000000000))*(x218));
evalcond[0]=((((sj32)*(x218)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x217)*(x221)))+(new_r21));
evalcond[2]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x217)))+(((IkReal(-1.00000000000000))*(new_r00)*(x223))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x223)))+(((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x224))));
evalcond[4]=((((cj31)*(new_r01)))+(x222)+(((cj32)*(x217))));
evalcond[5]=((((cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(cj32)*(x224)))+(x219));
evalcond[6]=((((new_r01)*(x220)))+(x217)+(((cj32)*(x222)))+(((IkReal(-1.00000000000000))*(new_r21)*(x221))));
evalcond[7]=((((new_r00)*(x220)))+(((cj32)*(x219)))+(((IkReal(-1.00000000000000))*(new_r20)*(x221)))+(((IkReal(-1.00000000000000))*(x224))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x225=((gconst50)*(sj32));
if( IKabs(((new_r12)*(x225))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x225))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j31array[0]=IKatan2(((new_r12)*(x225)), ((new_r02)*(x225)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[6];
IkReal x226=IKsin(j31);
IkReal x227=IKcos(j31);
IkReal x228=((IkReal(1.00000000000000))*(sj32));
IkReal x229=((new_r02)*(x227));
IkReal x230=((new_r12)*(x226));
IkReal x231=((sj32)*(x227));
IkReal x232=((sj32)*(x226));
evalcond[0]=((((new_r12)*(x227)))+(((IkReal(-1.00000000000000))*(new_r02)*(x226))));
evalcond[1]=((x229)+(x230)+(((IkReal(-1.00000000000000))*(x228))));
evalcond[2]=((((new_r10)*(x232)))+(((new_r00)*(x231)))+(((cj32)*(new_r20))));
evalcond[3]=((((new_r11)*(x232)))+(((new_r01)*(x231)))+(((cj32)*(new_r21))));
evalcond[4]=((IkReal(-1.00000000000000))+(((sj32)*(x229)))+(((sj32)*(x230)))+(((cj32)*(new_r22))));
evalcond[5]=((((cj32)*(x230)))+(((IkReal(-1.00000000000000))*(new_r22)*(x228)))+(((cj32)*(x229))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x233=((IkReal(-1.00000000000000))+(new_r22));
IkReal x234=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj31))));
IkReal x235=((((cj31)*(new_r02)))+(((new_r12)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j32)), IkReal(6.28318530717959))));
evalcond[1]=x233;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x234;
evalcond[5]=x234;
evalcond[6]=x235;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x233;
evalcond[10]=x235;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj31)*(new_r00)))+(((new_r10)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj31)))))+IKsqr(((((cj31)*(new_r00)))+(((new_r10)*(sj31)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj31)))), ((((cj31)*(new_r00)))+(((new_r10)*(sj31)))));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x236=IKsin(j33);
IkReal x237=((IkReal(1.00000000000000))*(sj31));
IkReal x238=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x236)))+(((IkReal(-1.00000000000000))*(new_r00)*(x237))));
evalcond[1]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x238)))+(((IkReal(-1.00000000000000))*(new_r01)*(x237))));
evalcond[2]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(x236));
evalcond[3]=((((cj31)*(new_r00)))+(((new_r10)*(sj31)))+(((IkReal(-1.00000000000000))*(x238))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x239=((cj31)*(new_r02));
IkReal x240=((new_r12)*(sj31));
IkReal x241=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j32, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x241;
evalcond[5]=x241;
evalcond[6]=((x239)+(x240));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(x239))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((((cj31)*(new_r01)))+(((new_r11)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj31)*(new_r01)))+(((new_r11)*(sj31)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj31)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((((cj31)*(new_r01)))+(((new_r11)*(sj31)))), ((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj31)))));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x242=IKcos(j33);
IkReal x243=((IkReal(1.00000000000000))*(sj31));
IkReal x244=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x243)))+(((IkReal(-1.00000000000000))*(x244))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x243)))+(((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x242))));
evalcond[2]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(((IkReal(-1.00000000000000))*(x244))));
evalcond[3]=((((cj31)*(new_r00)))+(((new_r10)*(sj31)))+(x242));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj31)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj31)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30))));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x245=IKsin(j33);
IkReal x246=IKcos(j33);
IkReal x247=((new_r10)*(sj31));
IkReal x248=((cj31)*(cj32));
IkReal x249=((IkReal(1.00000000000000))*(sj32));
IkReal x250=((new_r11)*(sj31));
IkReal x251=((IkReal(1.00000000000000))*(sj31));
IkReal x252=((IkReal(1.00000000000000))*(x246));
evalcond[0]=((((sj32)*(x246)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x245)*(x249)))+(new_r21));
evalcond[2]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x245)))+(((IkReal(-1.00000000000000))*(new_r00)*(x251))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x251)))+(((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x252))));
evalcond[4]=((((cj31)*(new_r01)))+(((cj32)*(x245)))+(x250));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x252)))+(((cj31)*(new_r00)))+(x247));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x249)))+(x245)+(((new_r01)*(x248)))+(((cj32)*(x250))));
evalcond[7]=((((cj32)*(x247)))+(((new_r00)*(x248)))+(((IkReal(-1.00000000000000))*(new_r20)*(x249)))+(((IkReal(-1.00000000000000))*(x252))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((new_r21)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj31))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30))))+IKsqr(((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj31)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((new_r21)*(((IKabs(sj32) != 0)?((IkReal)1/(sj32)):(IkReal)1.0e30))), ((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj31)))));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x253=IKsin(j33);
IkReal x254=IKcos(j33);
IkReal x255=((new_r10)*(sj31));
IkReal x256=((cj31)*(cj32));
IkReal x257=((IkReal(1.00000000000000))*(sj32));
IkReal x258=((new_r11)*(sj31));
IkReal x259=((IkReal(1.00000000000000))*(sj31));
IkReal x260=((IkReal(1.00000000000000))*(x254));
evalcond[0]=((((sj32)*(x254)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x253)*(x257))));
evalcond[2]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x259)))+(((IkReal(-1.00000000000000))*(x253))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x259)))+(((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x260))));
evalcond[4]=((((cj31)*(new_r01)))+(x258)+(((cj32)*(x253))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x260)))+(((cj31)*(new_r00)))+(x255));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x257)))+(((new_r01)*(x256)))+(x253)+(((cj32)*(x258))));
evalcond[7]=((((new_r00)*(x256)))+(((IkReal(-1.00000000000000))*(x260)))+(((IkReal(-1.00000000000000))*(new_r20)*(x257)))+(((cj32)*(x255))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((gconst53)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst53)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j33array[0]=IKatan2(((gconst53)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst53)*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x261=IKsin(j33);
IkReal x262=IKcos(j33);
IkReal x263=((new_r10)*(sj31));
IkReal x264=((cj31)*(cj32));
IkReal x265=((IkReal(1.00000000000000))*(sj32));
IkReal x266=((new_r11)*(sj31));
IkReal x267=((IkReal(1.00000000000000))*(sj31));
IkReal x268=((IkReal(1.00000000000000))*(x262));
evalcond[0]=((((sj32)*(x262)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x261)*(x265)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x261)))+(((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x267))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x267)))+(((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x268))));
evalcond[4]=((((cj31)*(new_r01)))+(((cj32)*(x261)))+(x266));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x268)))+(((cj31)*(new_r00)))+(x263));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x265)))+(((cj32)*(x266)))+(x261)+(((new_r01)*(x264))));
evalcond[7]=((((cj32)*(x263)))+(((IkReal(-1.00000000000000))*(new_r20)*(x265)))+(((new_r00)*(x264)))+(((IkReal(-1.00000000000000))*(x268))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((gconst52)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst52)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j33array[0]=IKatan2(((gconst52)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst52)*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[2];
evalcond[0]=((((sj32)*(IKcos(j33))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj32)*(IKsin(j33))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x269=((cj32)*(gconst55)*(sj33));
if( IKabs(((new_r12)*(x269))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x269))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j31array[0]=IKatan2(((new_r12)*(x269)), ((new_r02)*(x269)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[12];
IkReal x270=IKsin(j31);
IkReal x271=IKcos(j31);
IkReal x272=((IkReal(1.00000000000000))*(cj33));
IkReal x273=((IkReal(1.00000000000000))*(sj32));
IkReal x274=((new_r10)*(x270));
IkReal x275=((cj32)*(x271));
IkReal x276=((sj32)*(x271));
IkReal x277=((new_r11)*(x270));
IkReal x278=((new_r12)*(x270));
IkReal x279=((IkReal(1.00000000000000))*(x270));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x279)))+(((new_r12)*(x271))));
evalcond[1]=((x278)+(((IkReal(-1.00000000000000))*(x273)))+(((new_r02)*(x271))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj33)))+(((IkReal(-1.00000000000000))*(new_r00)*(x279)))+(((new_r10)*(x271))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x279)))+(((IkReal(-1.00000000000000))*(x272)))+(((new_r11)*(x271))));
evalcond[4]=((((cj32)*(sj33)))+(x277)+(((new_r01)*(x271))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x272)))+(x274)+(((new_r00)*(x271))));
evalcond[6]=((((sj32)*(x274)))+(((new_r00)*(x276)))+(((cj32)*(new_r20))));
evalcond[7]=((((sj32)*(x277)))+(((new_r01)*(x276)))+(((cj32)*(new_r21))));
evalcond[8]=((IkReal(-1.00000000000000))+(((sj32)*(x278)))+(((cj32)*(new_r22)))+(((new_r02)*(x276))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r22)*(x273)))+(((cj32)*(x278)))+(((new_r02)*(x275))));
evalcond[10]=((((cj32)*(x277)))+(((IkReal(-1.00000000000000))*(new_r21)*(x273)))+(sj33)+(((new_r01)*(x275))));
evalcond[11]=((((cj32)*(x274)))+(((new_r00)*(x275)))+(((IkReal(-1.00000000000000))*(new_r20)*(x273)))+(((IkReal(-1.00000000000000))*(x272))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x280=((gconst54)*(sj32));
if( IKabs(((new_r12)*(x280))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x280))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j31array[0]=IKatan2(((new_r12)*(x280)), ((new_r02)*(x280)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[12];
IkReal x281=IKsin(j31);
IkReal x282=IKcos(j31);
IkReal x283=((IkReal(1.00000000000000))*(cj33));
IkReal x284=((IkReal(1.00000000000000))*(sj32));
IkReal x285=((new_r10)*(x281));
IkReal x286=((cj32)*(x282));
IkReal x287=((sj32)*(x282));
IkReal x288=((new_r11)*(x281));
IkReal x289=((new_r12)*(x281));
IkReal x290=((IkReal(1.00000000000000))*(x281));
evalcond[0]=((((new_r12)*(x282)))+(((IkReal(-1.00000000000000))*(new_r02)*(x290))));
evalcond[1]=((x289)+(((new_r02)*(x282)))+(((IkReal(-1.00000000000000))*(x284))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj33)))+(((IkReal(-1.00000000000000))*(new_r00)*(x290)))+(((new_r10)*(x282))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x290)))+(((IkReal(-1.00000000000000))*(x283)))+(((new_r11)*(x282))));
evalcond[4]=((((cj32)*(sj33)))+(x288)+(((new_r01)*(x282))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x283)))+(x285)+(((new_r00)*(x282))));
evalcond[6]=((((cj32)*(new_r20)))+(((new_r00)*(x287)))+(((sj32)*(x285))));
evalcond[7]=((((cj32)*(new_r21)))+(((sj32)*(x288)))+(((new_r01)*(x287))));
evalcond[8]=((IkReal(-1.00000000000000))+(((new_r02)*(x287)))+(((cj32)*(new_r22)))+(((sj32)*(x289))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r22)*(x284)))+(((cj32)*(x289)))+(((new_r02)*(x286))));
evalcond[10]=((((cj32)*(x288)))+(sj33)+(((IkReal(-1.00000000000000))*(new_r21)*(x284)))+(((new_r01)*(x286))));
evalcond[11]=((((cj32)*(x285)))+(((IkReal(-1.00000000000000))*(x283)))+(((IkReal(-1.00000000000000))*(new_r20)*(x284)))+(((new_r00)*(x286))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j33;
vinfos[7].indices[0] = _ij33[0];
vinfos[7].indices[1] = _ij33[1];
vinfos[7].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c363859a2d7a151a22dc1e251d6d8669"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
