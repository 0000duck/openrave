#define IKFAST_NAMESPACE ik_katana5d_trans
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 66 generated on 2013-07-25 00:06:03.425810
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==66);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=((0.139)*x0);
x9=((0.273)*x0);
x10=((0.273)*x6);
x11=((0.139)*x6);
x12=((0.19)*x1);
x13=(x2*x3);
x14=(x1*x3);
x15=(x1*x4);
x16=(x2*x4);
eetrans[0]=(((x0*x12))+((x5*(((((-1.0)*x16*x9))+((x14*x9))))))+((x13*x8))+((x7*((((x13*x9))+((x15*x9))))))+((x15*x8)));
IkReal x17=((1.0)*x10);
IkReal x18=((1.0)*x11);
eetrans[1]=((((-1.0)*x12*x6))+((x5*(((((-1.0)*x14*x17))+((x10*x16))))))+(((-1.0)*x13*x18))+(((-1.0)*x15*x18))+((x7*(((((-1.0)*x13*x17))+(((-1.0)*x15*x17)))))));
eetrans[2]=((0.2015)+((x7*(((((-0.273)*x14))+(((0.273)*x16))))))+(((-0.139)*x14))+((x5*(((((0.273)*x15))+(((0.273)*x13))))))+(((0.19)*x2))+(((0.139)*x16)));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3, 4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j3=pfree[0]; cj3=cos(pfree[0]); sj3=sin(pfree[0]);
j4=pfree[1]; cj4=cos(pfree[1]); sj4=sin(pfree[1]);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=px;
new_py=((-1.0)*py);
new_pz=((0.2015)+(((-1.0)*pz)));
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x20 = IKatan2WithCheck(py,((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x20.valid){
continue;
}
IkReal x19=x20.value;
j0array[0]=((-1.0)*x19);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x19)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((3.92805755395683)*cj3))+(((3.85740903679934)*(sj3*sj3)))+(((3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((3.92805755395683)*cj3))+(((3.85740903679934)*(sj3*sj3)))+(((3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x21=((((0.38)*cj0*px))+(((0.38)*py*sj0)));
CheckValue<IkReal> x24 = IKatan2WithCheck(((-0.38)*pz),x21,IKFAST_ATAN2_MAGTHRESH);
if(!x24.valid){
continue;
}
IkReal x22=((1.0)*(x24.value));
if((((x21*x21)+(((0.1444)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x25=IKPowWithIntegerCheck(IKabs(IKsqrt(((x21*x21)+(((0.1444)*(pz*pz)))))),-1);
if(!x25.valid){
continue;
}
if( (((x25.value)*(((0.05775)+(((-1.0)*pp))+(((0.075894)*cj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x25.value)*(((0.05775)+(((-1.0)*pp))+(((0.075894)*cj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x23=IKasin(((x25.value)*(((0.05775)+(((-1.0)*pp))+(((0.075894)*cj3))))));
j1array[0]=((((-1.0)*x22))+(((-1.0)*x23)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x22))+x23);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((-367099.0)+(((-1416051.0)*(cj3*cj3)))+(((-1416051.0)*(sj3*sj3)))+(((-1441986.0)*cj3))));
dummyeval[0]=((-1.0)+(((-3.92805755395683)*cj3))+(((-3.85740903679934)*(sj3*sj3)))+(((-3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((19321.0)+(((75894.0)*cj3))+(((74529.0)*(sj3*sj3)))+(((74529.0)*(cj3*cj3)))));
dummyeval[0]=((1.0)+(((3.92805755395683)*cj3))+(((3.85740903679934)*(sj3*sj3)))+(((3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x26=((139000.0)*cj1);
IkReal x27=(py*sj0);
IkReal x28=(cj0*px);
IkReal x29=((273000.0)*cj3);
IkReal x30=((139000.0)*sj1);
IkReal x31=((273000.0)*cj1*sj3);
IkReal x32=((273000.0)*sj1*sj3);
CheckValue<IkReal> x33 = IKatan2WithCheck((gconst1*((((x27*x32))+((pz*x30))+(((-1.0)*pz*x31))+((cj1*x27*x29))+((x28*x32))+(((-51870.0)*sj3))+((cj1*x28*x29))+((x26*x27))+((x26*x28))+((pz*sj1*x29))))),(gconst1*(((-26410.0)+((x27*x30))+((sj1*x28*x29))+(((-1.0)*x27*x31))+(((-1.0)*pz*x32))+(((-1.0)*x28*x31))+((x28*x30))+(((-1.0)*pz*x26))+((sj1*x27*x29))+(((-51870.0)*cj3))+(((-1.0)*cj1*pz*x29))))),IKFAST_ATAN2_MAGTHRESH);
if(!x33.valid){
continue;
}
j2array[0]=x33.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x34=IKcos(j2);
IkReal x35=IKsin(j2);
IkReal x36=(cj0*px);
IkReal x37=(py*sj0);
IkReal x38=((1.0)*pz);
IkReal x39=((0.273)*cj1);
IkReal x40=((1.0)*cj1);
IkReal x41=((0.273)*sj1);
IkReal x42=(cj3*x34);
IkReal x43=((0.139)*x35);
IkReal x44=((0.139)*x34);
IkReal x45=(sj3*x35);
IkReal x46=((0.273)*cj3*x35);
IkReal x47=((0.273)*sj3*x34);
evalcond[0]=((0.12995)+(((0.05282)*x34))+(((-1.0)*pp))+(((0.075894)*cj3))+(((0.10374)*x45))+(((0.10374)*x42)));
evalcond[1]=((-0.19)+(((-1.0)*x44))+(((-1.0)*cj1*x38))+((sj1*x36))+((sj1*x37))+(((-0.273)*x42))+(((-0.273)*x45)));
evalcond[2]=((((-1.0)*x36*x40))+(((-1.0)*x37*x40))+(((-1.0)*x47))+x46+x43+(((-1.0)*sj1*x38)));
evalcond[3]=((((-0.19)*cj1))+(((-1.0)*x38))+(((-1.0)*sj3*x34*x41))+(((-1.0)*x39*x42))+(((-1.0)*x39*x45))+((cj3*x35*x41))+(((-1.0)*cj1*x44))+((sj1*x43)));
evalcond[4]=((((-1.0)*x37))+(((-1.0)*x36))+((x41*x42))+((x41*x45))+((cj1*x43))+(((-1.0)*sj3*x34*x39))+(((0.19)*sj1))+((cj3*x35*x39))+((sj1*x44)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x48=((13650000.0)*pp);
IkReal x49=((5187000.0)*pz*sj1);
IkReal x50=(cj0*cj1*px);
IkReal x51=((5187000.0)*cj1*py*sj0);
CheckValue<IkReal> x52 = IKatan2WithCheck((gconst0*(((((1035953.1)*cj3*sj3))+(((-2641000.0)*x50))+(((-2641000.0)*cj1*py*sj0))+(((-2641000.0)*pz*sj1))+(((-1.0)*cj3*x49))+(((-1.0)*sj3*x48))+(((1773817.5)*sj3))+(((-1.0)*cj3*x51))+(((-5187000.0)*cj3*x50))))),(gconst0*(((903152.5)+((sj3*x51))+(((-6950000.0)*pp))+(((2301280.8)*cj3))+(((-1.0)*cj3*x48))+((sj3*x49))+(((1035953.1)*(cj3*cj3)))+(((5187000.0)*sj3*x50))))),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
j2array[0]=x52.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x53=IKcos(j2);
IkReal x54=IKsin(j2);
IkReal x55=(cj0*px);
IkReal x56=(py*sj0);
IkReal x57=((1.0)*pz);
IkReal x58=((0.273)*cj1);
IkReal x59=((1.0)*cj1);
IkReal x60=((0.273)*sj1);
IkReal x61=(cj3*x53);
IkReal x62=((0.139)*x54);
IkReal x63=((0.139)*x53);
IkReal x64=(sj3*x54);
IkReal x65=((0.273)*cj3*x54);
IkReal x66=((0.273)*sj3*x53);
evalcond[0]=((0.12995)+(((-1.0)*pp))+(((0.075894)*cj3))+(((0.05282)*x53))+(((0.10374)*x64))+(((0.10374)*x61)));
evalcond[1]=((-0.19)+((sj1*x56))+((sj1*x55))+(((-1.0)*x63))+(((-0.273)*x64))+(((-0.273)*x61))+(((-1.0)*cj1*x57)));
evalcond[2]=((((-1.0)*x56*x59))+(((-1.0)*x55*x59))+x62+x65+(((-1.0)*sj1*x57))+(((-1.0)*x66)));
evalcond[3]=((((-1.0)*cj1*x63))+((sj1*x62))+(((-0.19)*cj1))+((cj3*x54*x60))+(((-1.0)*x58*x64))+(((-1.0)*x58*x61))+(((-1.0)*x57))+(((-1.0)*sj3*x53*x60)));
evalcond[4]=(((cj1*x62))+((sj1*x63))+((x60*x64))+((x60*x61))+(((0.19)*sj1))+((cj3*x54*x58))+(((-1.0)*sj3*x53*x58))+(((-1.0)*x56))+(((-1.0)*x55)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x67=((0.05282)+(((0.10374)*cj3)));
CheckValue<IkReal> x70 = IKatan2WithCheck(x67,((0.10374)*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x70.valid){
continue;
}
IkReal x68=((1.0)*(x70.value));
if((((x67*x67)+(((0.0107619876)*(sj3*sj3))))) < -0.00001)
continue;
CheckValue<IkReal> x71=IKPowWithIntegerCheck(IKabs(IKsqrt(((x67*x67)+(((0.0107619876)*(sj3*sj3)))))),-1);
if(!x71.valid){
continue;
}
if( (((x71.value)*(((0.12995)+(((-1.0)*pp))+(((0.075894)*cj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x71.value)*(((0.12995)+(((-1.0)*pp))+(((0.075894)*cj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x69=IKasin(((x71.value)*(((0.12995)+(((-1.0)*pp))+(((0.075894)*cj3))))));
j2array[0]=((((-1.0)*x68))+(((-1.0)*x69)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+x69+(((-1.0)*x68)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((-19.0)*(py*py)*(sj0*sj0)))+(((-19.0)*(cj0*cj0)*(px*px)))+(((-38.0)*cj0*px*py*sj0))+(((-19.0)*(pz*pz)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x72=((0.273)*cj3);
IkReal x73=(py*sj0);
IkReal x74=((0.273)*sj3);
IkReal x75=(pz*sj2);
IkReal x76=((0.139)*cj2);
IkReal x77=(cj0*px);
IkReal x78=(cj2*pz);
IkReal x79=((0.139)*sj2);
IkReal x80=(cj2*x77);
CheckValue<IkReal> x81 = IKatan2WithCheck((gconst3*(((((-1.0)*x72*x80))+(((-0.139)*x75))+(((-1.0)*sj2*x73*x74))+(((-1.0)*sj2*x74*x77))+(((-1.0)*cj2*x72*x73))+(((-1.0)*x72*x75))+(((-1.0)*x73*x76))+(((-1.0)*x76*x77))+((x74*x78))+(((-0.19)*x77))+(((-0.19)*x73))))),(gconst3*((((cj2*x73*x74))+((pz*x76))+(((0.19)*pz))+((x74*x80))+(((-1.0)*sj2*x72*x77))+(((-1.0)*sj2*x72*x73))+(((-1.0)*x73*x79))+((x72*x78))+(((-1.0)*x77*x79))+((x74*x75))))),IKFAST_ATAN2_MAGTHRESH);
if(!x81.valid){
continue;
}
j1array[0]=x81.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x82=IKsin(j1);
IkReal x83=IKcos(j1);
IkReal x84=((0.273)*sj3);
IkReal x85=(cj0*px);
IkReal x86=((0.273)*cj3);
IkReal x87=(py*sj0);
IkReal x88=((1.0)*pz);
IkReal x89=((0.139)*sj2);
IkReal x90=(sj2*x82);
IkReal x91=((1.0)*x83);
IkReal x92=(cj2*x83);
IkReal x93=(cj2*x82);
IkReal x94=((0.38)*x82);
IkReal x95=(sj2*x83);
evalcond[0]=((0.05775)+((x87*x94))+((x85*x94))+(((-1.0)*pp))+(((0.075894)*cj3))+(((-0.38)*pz*x83)));
evalcond[1]=((-0.19)+(((-1.0)*sj2*x84))+(((-1.0)*x83*x88))+((x82*x87))+((x82*x85))+(((-0.139)*cj2))+(((-1.0)*cj2*x86)));
evalcond[2]=(((sj2*x86))+(((-1.0)*x82*x88))+(((-1.0)*x87*x91))+x89+(((-1.0)*cj2*x84))+(((-1.0)*x85*x91)));
evalcond[3]=((((-0.19)*x83))+((x82*x89))+((x86*x90))+(((-1.0)*x86*x92))+(((-1.0)*x84*x95))+(((-1.0)*x84*x93))+(((-1.0)*x88))+(((-0.139)*x92)));
evalcond[4]=(((x86*x93))+((x86*x95))+(((0.139)*x93))+(((-1.0)*x87))+(((-1.0)*x85))+(((-1.0)*x84*x92))+((x83*x89))+(((0.19)*x82))+((x84*x90)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x96=((50.0)*pp);
IkReal x97=(cj0*px);
IkReal x98=(py*sj0);
IkReal x99=((2.641)*sj2);
IkReal x100=((3.7947)*cj3);
IkReal x101=((5.187)*cj3*sj2);
IkReal x102=((5.187)*cj2*sj3);
CheckValue<IkReal> x103 = IKatan2WithCheck((gconst2*(((((-1.0)*pz*x101))+(((-1.0)*pz*x99))+((x100*x97))+((x100*x98))+((pz*x102))+(((2.8875)*x97))+(((2.8875)*x98))+(((-1.0)*x96*x98))+(((-1.0)*x96*x97))))),(gconst2*(((((-1.0)*pz*x100))+(((-2.8875)*pz))+(((-1.0)*x98*x99))+((x102*x98))+((x102*x97))+((pz*x96))+(((-1.0)*x101*x97))+(((-1.0)*x101*x98))+(((-1.0)*x97*x99))))),IKFAST_ATAN2_MAGTHRESH);
if(!x103.valid){
continue;
}
j1array[0]=x103.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x104=IKsin(j1);
IkReal x105=IKcos(j1);
IkReal x106=((0.273)*sj3);
IkReal x107=(cj0*px);
IkReal x108=((0.273)*cj3);
IkReal x109=(py*sj0);
IkReal x110=((1.0)*pz);
IkReal x111=((0.139)*sj2);
IkReal x112=(sj2*x104);
IkReal x113=((1.0)*x105);
IkReal x114=(cj2*x105);
IkReal x115=(cj2*x104);
IkReal x116=((0.38)*x104);
IkReal x117=(sj2*x105);
evalcond[0]=((0.05775)+((x109*x116))+(((-1.0)*pp))+(((0.075894)*cj3))+(((-0.38)*pz*x105))+((x107*x116)));
evalcond[1]=((-0.19)+(((-1.0)*sj2*x106))+(((-1.0)*cj2*x108))+((x104*x107))+((x104*x109))+(((-1.0)*x105*x110))+(((-0.139)*cj2)));
evalcond[2]=(((sj2*x108))+(((-1.0)*cj2*x106))+(((-1.0)*x107*x113))+x111+(((-1.0)*x109*x113))+(((-1.0)*x104*x110)));
evalcond[3]=((((-0.139)*x114))+(((-1.0)*x110))+(((-0.19)*x105))+(((-1.0)*x108*x114))+(((-1.0)*x106*x115))+(((-1.0)*x106*x117))+((x108*x112))+((x104*x111)));
evalcond[4]=((((0.139)*x115))+((x106*x112))+(((-1.0)*x106*x114))+((x108*x117))+((x108*x115))+(((0.19)*x104))+((x105*x111))+(((-1.0)*x107))+(((-1.0)*x109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x118=((0.05282)+(((0.10374)*cj3)));
CheckValue<IkReal> x121 = IKatan2WithCheck(x118,((0.10374)*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x121.valid){
continue;
}
IkReal x119=((1.0)*(x121.value));
if((((x118*x118)+(((0.0107619876)*(sj3*sj3))))) < -0.00001)
continue;
CheckValue<IkReal> x122=IKPowWithIntegerCheck(IKabs(IKsqrt(((x118*x118)+(((0.0107619876)*(sj3*sj3)))))),-1);
if(!x122.valid){
continue;
}
if( (((x122.value)*(((0.12995)+(((-1.0)*pp))+(((0.075894)*cj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x122.value)*(((0.12995)+(((-1.0)*pp))+(((0.075894)*cj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x120=IKasin(((x122.value)*(((0.12995)+(((-1.0)*pp))+(((0.075894)*cj3))))));
j2array[0]=((((-1.0)*x119))+(((-1.0)*x120)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x119))+x120);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((-19.0)*(py*py)*(sj0*sj0)))+(((-19.0)*(cj0*cj0)*(px*px)))+(((-38.0)*cj0*px*py*sj0))+(((-19.0)*(pz*pz)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x123=((0.273)*cj3);
IkReal x124=(py*sj0);
IkReal x125=((0.273)*sj3);
IkReal x126=(pz*sj2);
IkReal x127=((0.139)*cj2);
IkReal x128=(cj0*px);
IkReal x129=(cj2*pz);
IkReal x130=((0.139)*sj2);
IkReal x131=(cj2*x128);
CheckValue<IkReal> x132 = IKatan2WithCheck((gconst3*(((((-1.0)*x123*x131))+(((-1.0)*x123*x126))+(((-0.139)*x126))+(((-1.0)*sj2*x124*x125))+(((-1.0)*x124*x127))+((x125*x129))+(((-0.19)*x124))+(((-0.19)*x128))+(((-1.0)*cj2*x123*x124))+(((-1.0)*sj2*x125*x128))+(((-1.0)*x127*x128))))),(gconst3*((((cj2*x124*x125))+(((0.19)*pz))+(((-1.0)*x124*x130))+(((-1.0)*x128*x130))+((pz*x127))+((x125*x126))+((x125*x131))+((x123*x129))+(((-1.0)*sj2*x123*x128))+(((-1.0)*sj2*x123*x124))))),IKFAST_ATAN2_MAGTHRESH);
if(!x132.valid){
continue;
}
j1array[0]=x132.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x133=IKsin(j1);
IkReal x134=IKcos(j1);
IkReal x135=((0.273)*sj3);
IkReal x136=(cj0*px);
IkReal x137=((0.273)*cj3);
IkReal x138=(py*sj0);
IkReal x139=((1.0)*pz);
IkReal x140=((0.139)*sj2);
IkReal x141=(sj2*x133);
IkReal x142=((1.0)*x134);
IkReal x143=(cj2*x134);
IkReal x144=(cj2*x133);
IkReal x145=((0.38)*x133);
IkReal x146=(sj2*x134);
evalcond[0]=((0.05775)+((x136*x145))+((x138*x145))+(((-1.0)*pp))+(((0.075894)*cj3))+(((-0.38)*pz*x134)));
evalcond[1]=((-0.19)+(((-1.0)*sj2*x135))+(((-1.0)*x134*x139))+(((-1.0)*cj2*x137))+((x133*x136))+((x133*x138))+(((-0.139)*cj2)));
evalcond[2]=((((-1.0)*x138*x142))+((sj2*x137))+(((-1.0)*x133*x139))+x140+(((-1.0)*cj2*x135))+(((-1.0)*x136*x142)));
evalcond[3]=((((-1.0)*x137*x143))+((x137*x141))+(((-1.0)*x139))+(((-0.139)*x143))+(((-0.19)*x134))+((x133*x140))+(((-1.0)*x135*x146))+(((-1.0)*x135*x144)));
evalcond[4]=(((x137*x144))+((x137*x146))+((x135*x141))+((x134*x140))+(((-1.0)*x138))+(((-1.0)*x136))+(((0.19)*x133))+(((0.139)*x144))+(((-1.0)*x135*x143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x147=((50.0)*pp);
IkReal x148=(cj0*px);
IkReal x149=(py*sj0);
IkReal x150=((2.641)*sj2);
IkReal x151=((3.7947)*cj3);
IkReal x152=((5.187)*cj3*sj2);
IkReal x153=((5.187)*cj2*sj3);
CheckValue<IkReal> x154 = IKatan2WithCheck((gconst2*((((x149*x151))+(((-1.0)*pz*x150))+(((-1.0)*pz*x152))+(((-1.0)*x147*x148))+(((-1.0)*x147*x149))+((x148*x151))+(((2.8875)*x149))+(((2.8875)*x148))+((pz*x153))))),(gconst2*(((((-2.8875)*pz))+((pz*x147))+((x149*x153))+(((-1.0)*pz*x151))+(((-1.0)*x148*x150))+(((-1.0)*x148*x152))+((x148*x153))+(((-1.0)*x149*x152))+(((-1.0)*x149*x150))))),IKFAST_ATAN2_MAGTHRESH);
if(!x154.valid){
continue;
}
j1array[0]=x154.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x155=IKsin(j1);
IkReal x156=IKcos(j1);
IkReal x157=((0.273)*sj3);
IkReal x158=(cj0*px);
IkReal x159=((0.273)*cj3);
IkReal x160=(py*sj0);
IkReal x161=((1.0)*pz);
IkReal x162=((0.139)*sj2);
IkReal x163=(sj2*x155);
IkReal x164=((1.0)*x156);
IkReal x165=(cj2*x156);
IkReal x166=(cj2*x155);
IkReal x167=((0.38)*x155);
IkReal x168=(sj2*x156);
evalcond[0]=((0.05775)+(((-1.0)*pp))+(((-0.38)*pz*x156))+(((0.075894)*cj3))+((x158*x167))+((x160*x167)));
evalcond[1]=((-0.19)+((x155*x158))+(((-1.0)*cj2*x159))+((x155*x160))+(((-1.0)*sj2*x157))+(((-1.0)*x156*x161))+(((-0.139)*cj2)));
evalcond[2]=((((-1.0)*x158*x164))+(((-1.0)*x160*x164))+x162+(((-1.0)*cj2*x157))+(((-1.0)*x155*x161))+((sj2*x159)));
evalcond[3]=((((-1.0)*x157*x168))+(((-1.0)*x157*x166))+(((-1.0)*x161))+(((-1.0)*x159*x165))+(((-0.19)*x156))+(((-0.139)*x165))+((x155*x162))+((x159*x163)));
evalcond[4]=((((-1.0)*x157*x165))+(((0.139)*x166))+((x157*x163))+((x156*x162))+(((-1.0)*x160))+(((-1.0)*x158))+((x159*x166))+((x159*x168))+(((0.19)*x155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "afe50514bf09aff5f2a84beb078bafbd"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
