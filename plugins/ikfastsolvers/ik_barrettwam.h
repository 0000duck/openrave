/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2011-01-12 18:42:22.843326
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[4]);
x3=IKcos(j[3]);
x4=IKcos(j[5]);
x5=IKcos(j[6]);
x6=IKsin(j[2]);
x7=IKsin(j[6]);
x8=IKsin(j[4]);
x9=IKsin(j[0]);
x10=IKsin(j[3]);
x11=IKcos(j[2]);
x12=IKsin(j[1]);
x13=IKsin(j[5]);
eerot[0]=((((x0)*(x10)*(x12)*(x7)*(x8)))+(((-1.00000000000000)*(x11)*(x4)*(x5)*(x8)*(x9)))+(((x0)*(x1)*(x11)*(x2)*(x3)*(x4)*(x5)))+(((-1.00000000000000)*(x11)*(x2)*(x7)*(x9)))+(((-1.00000000000000)*(x3)*(x6)*(x7)*(x8)*(x9)))+(((x0)*(x1)*(x4)*(x5)*(x6)*(x8)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x3)*(x5)))+(((x0)*(x1)*(x2)*(x6)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x11)*(x13)*(x5)))+(((x2)*(x3)*(x4)*(x5)*(x6)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x12)*(x2)*(x4)*(x5)))+(((-1.00000000000000)*(x10)*(x13)*(x5)*(x6)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x3)*(x7)*(x8))));
eerot[1]=((((-1.00000000000000)*(x0)*(x1)*(x4)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x11)*(x2)*(x5)*(x9)))+(((x10)*(x13)*(x6)*(x7)*(x9)))+(((x0)*(x1)*(x2)*(x5)*(x6)))+(((x11)*(x4)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x2)*(x3)*(x4)*(x7)))+(((x0)*(x12)*(x13)*(x3)*(x7)))+(((-1.00000000000000)*(x3)*(x5)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x2)*(x3)*(x4)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x3)*(x5)*(x8)))+(((x0)*(x10)*(x12)*(x2)*(x4)*(x7)))+(((x0)*(x10)*(x12)*(x5)*(x8)))+(((x0)*(x1)*(x10)*(x11)*(x13)*(x7))));
eerot[2]=((((x10)*(x4)*(x6)*(x9)))+(((x13)*(x2)*(x3)*(x6)*(x9)))+(((x0)*(x1)*(x13)*(x6)*(x8)))+(((-1.00000000000000)*(x11)*(x13)*(x8)*(x9)))+(((x0)*(x12)*(x3)*(x4)))+(((x0)*(x1)*(x10)*(x11)*(x4)))+(((x0)*(x1)*(x11)*(x13)*(x2)*(x3)))+(((-1.00000000000000)*(x0)*(x10)*(x12)*(x13)*(x2))));
eetrans[0]=((0.220000000000000)+(((-0.0450000000000000)*(x3)*(x6)*(x9)))+(((-0.0450000000000000)*(x0)*(x1)*(x11)*(x3)))+(((0.0450000000000000)*(x0)*(x10)*(x12)))+(((0.300000000000000)*(x0)*(x12)*(x3)))+(((0.220000000000000)*(x0)*(x1)*(x10)*(x11)*(x4)))+(((-0.220000000000000)*(x0)*(x10)*(x12)*(x13)*(x2)))+(((0.220000000000000)*(x13)*(x2)*(x3)*(x6)*(x9)))+(((0.220000000000000)*(x10)*(x4)*(x6)*(x9)))+(((0.0450000000000000)*(x6)*(x9)))+(((0.300000000000000)*(x10)*(x6)*(x9)))+(((-0.220000000000000)*(x11)*(x13)*(x8)*(x9)))+(((0.550000000000000)*(x0)*(x12)))+(((0.220000000000000)*(x0)*(x12)*(x3)*(x4)))+(((0.220000000000000)*(x0)*(x1)*(x13)*(x6)*(x8)))+(((0.300000000000000)*(x0)*(x1)*(x10)*(x11)))+(((0.0450000000000000)*(x0)*(x1)*(x11)))+(((0.220000000000000)*(x0)*(x1)*(x11)*(x13)*(x2)*(x3))));
eerot[3]=((((x0)*(x11)*(x4)*(x5)*(x8)))+(((x1)*(x2)*(x6)*(x7)*(x9)))+(((x0)*(x11)*(x2)*(x7)))+(((x10)*(x12)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((x0)*(x3)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x10)*(x12)*(x2)*(x4)*(x5)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x3)*(x7)*(x8)*(x9)))+(((x1)*(x11)*(x2)*(x3)*(x4)*(x5)*(x9)))+(((x1)*(x4)*(x5)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x12)*(x13)*(x3)*(x5)*(x9)))+(((x0)*(x10)*(x13)*(x5)*(x6)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x13)*(x5)*(x9))));
eerot[4]=((((x0)*(x11)*(x2)*(x5)))+(((x1)*(x2)*(x5)*(x6)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x3)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x13)*(x6)*(x7)))+(((x0)*(x3)*(x5)*(x6)*(x8)))+(((-1.00000000000000)*(x1)*(x4)*(x6)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x4)*(x7)*(x8)))+(((x10)*(x12)*(x2)*(x4)*(x7)*(x9)))+(((x12)*(x13)*(x3)*(x7)*(x9)))+(((x10)*(x12)*(x5)*(x8)*(x9)))+(((x0)*(x2)*(x3)*(x4)*(x6)*(x7)))+(((x1)*(x10)*(x11)*(x13)*(x7)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x2)*(x3)*(x4)*(x7)*(x9))));
eerot[5]=((((x0)*(x11)*(x13)*(x8)))+(((x1)*(x13)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x12)*(x13)*(x2)*(x9)))+(((x12)*(x3)*(x4)*(x9)))+(((-1.00000000000000)*(x0)*(x13)*(x2)*(x3)*(x6)))+(((x1)*(x11)*(x13)*(x2)*(x3)*(x9)))+(((x1)*(x10)*(x11)*(x4)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x4)*(x6))));
eetrans[1]=((0.140000000000000)+(((-0.220000000000000)*(x0)*(x10)*(x4)*(x6)))+(((-0.220000000000000)*(x10)*(x12)*(x13)*(x2)*(x9)))+(((0.300000000000000)*(x1)*(x10)*(x11)*(x9)))+(((0.0450000000000000)*(x10)*(x12)*(x9)))+(((0.220000000000000)*(x0)*(x11)*(x13)*(x8)))+(((0.0450000000000000)*(x0)*(x3)*(x6)))+(((-0.0450000000000000)*(x0)*(x6)))+(((0.220000000000000)*(x1)*(x13)*(x6)*(x8)*(x9)))+(((0.0450000000000000)*(x1)*(x11)*(x9)))+(((-0.0450000000000000)*(x1)*(x11)*(x3)*(x9)))+(((-0.300000000000000)*(x0)*(x10)*(x6)))+(((0.550000000000000)*(x12)*(x9)))+(((0.220000000000000)*(x12)*(x3)*(x4)*(x9)))+(((0.220000000000000)*(x1)*(x11)*(x13)*(x2)*(x3)*(x9)))+(((0.220000000000000)*(x1)*(x10)*(x11)*(x4)*(x9)))+(((0.300000000000000)*(x12)*(x3)*(x9)))+(((-0.220000000000000)*(x0)*(x13)*(x2)*(x3)*(x6))));
eerot[6]=((((-1.00000000000000)*(x1)*(x10)*(x2)*(x4)*(x5)))+(((-1.00000000000000)*(x1)*(x13)*(x3)*(x5)))+(((-1.00000000000000)*(x12)*(x2)*(x6)*(x7)))+(((x11)*(x12)*(x3)*(x7)*(x8)))+(((x10)*(x11)*(x12)*(x13)*(x5)))+(((x1)*(x10)*(x7)*(x8)))+(((-1.00000000000000)*(x12)*(x4)*(x5)*(x6)*(x8)))+(((-1.00000000000000)*(x11)*(x12)*(x2)*(x3)*(x4)*(x5))));
eerot[7]=((((-1.00000000000000)*(x12)*(x2)*(x5)*(x6)))+(((x1)*(x10)*(x2)*(x4)*(x7)))+(((x12)*(x4)*(x6)*(x7)*(x8)))+(((x11)*(x12)*(x3)*(x5)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x13)*(x7)))+(((x1)*(x13)*(x3)*(x7)))+(((x11)*(x12)*(x2)*(x3)*(x4)*(x7)))+(((x1)*(x10)*(x5)*(x8))));
eerot[8]=((((-1.00000000000000)*(x1)*(x10)*(x13)*(x2)))+(((x1)*(x3)*(x4)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x4)))+(((-1.00000000000000)*(x12)*(x13)*(x6)*(x8)))+(((-1.00000000000000)*(x11)*(x12)*(x13)*(x2)*(x3))));
eetrans[2]=((0.346000000000000)+(((0.0450000000000000)*(x11)*(x12)*(x3)))+(((0.550000000000000)*(x1)))+(((-0.220000000000000)*(x10)*(x11)*(x12)*(x4)))+(((-0.220000000000000)*(x12)*(x13)*(x6)*(x8)))+(((0.220000000000000)*(x1)*(x3)*(x4)))+(((-0.220000000000000)*(x11)*(x12)*(x13)*(x2)*(x3)))+(((-0.0450000000000000)*(x11)*(x12)))+(((-0.220000000000000)*(x1)*(x10)*(x13)*(x2)))+(((0.300000000000000)*(x1)*(x3)))+(((-0.300000000000000)*(x10)*(x11)*(x12)))+(((0.0450000000000000)*(x1)*(x10))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.00000000000000)*(r02));
new_r02=r01;
new_px=((-0.220000000000000)+(px)+(((-0.220000000000000)*(r02))));
new_r10=r10;
new_r11=((-1.00000000000000)*(r12));
new_r12=r11;
new_py=((-0.140000000000000)+(py)+(((-0.220000000000000)*(r12))));
new_r20=r20;
new_r21=((-1.00000000000000)*(r22));
new_r22=r21;
new_pz=((-0.346000000000000)+(pz)+(((-0.220000000000000)*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
IKReal x0=(py)*(py);
IKReal x1=((2.98679637348110)*(x0));
IKReal x2=(pz)*(pz);
IKReal x3=((2.98679637348110)*(x2));
IKReal x4=(px)*(px);
IKReal x5=((2.98679637348110)*(x4));
IKReal x6=((-1.18441410190393)+(x3)+(x1)+(x5));
if( (x6) < -1.0001 || (x6) > 1.0001 )
    continue;
IKReal x7=IKasin(x6);
j3array[0]=((-1.34027003705633)+(x7));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+(((-1.00000000000000)*(x7))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
if( j3array[1] > IKPI )
    j3array[1]-=IK2PI;
else if( j3array[1] < -IKPI )
    j3array[1]+=IK2PI;
j3valid[1] = true;
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x8=x4;
IKReal x9=x0;
IKReal x10=((x9)+(x8));
if( (x10) < (IKReal)-0.00001 )
    continue;
IKReal x11=IKsqrt(x10);
IKReal x12=IKabs(x11);
IKReal x13=((IKabs(x12) != 0)?((IKReal)1/(x12)):(IKReal)1.0e30);
IKReal x14=((0.0450000000000000)*(cj3)*(sj2));
IKReal x15=((0.300000000000000)*(sj2)*(sj3));
IKReal x16=((0.0450000000000000)*(sj2));
IKReal x17=((x15)+(x16));
IKReal x18=((((-1.00000000000000)*(x17)))+(x14));
IKReal x19=((x13)*(x18));
if( (x19) < -1.0001 || (x19) > 1.0001 )
    continue;
IKReal x20=IKasin(x19);
IKReal x21=((-1.00000000000000)*(py));
IKReal x22=IKatan2(x21, px);
j0array[0]=((((-1.00000000000000)*(x20)))+(((-1.00000000000000)*(x22))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x22)))+(x20));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
if( j0array[1] > IKPI )
    j0array[1]-=IK2PI;
else if( j0array[1] < -IKPI )
    j0array[1]+=IK2PI;
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
    j0valid[1]=false;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj2)*((py)*(py))*((sj0)*(sj0))))+(((cj2)*((cj0)*(cj0))*((px)*(px))))+(((2.00000000000000)*(cj0)*(cj2)*(px)*(py)*(sj0)))+(((cj2)*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x23=((0.300000000000000)*(sj3));
IKReal x24=((cj0)*(py));
IKReal x25=((0.0450000000000000)*(cj3));
IKReal x26=((px)*(sj0));
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.325950000000000)*(cj3))));
evalcond[2]=((-0.0450000000000000)+(((-1.00000000000000)*(x24)))+(((-1.00000000000000)*(x23)))+(x25)+(x26));
evalcond[3]=((0.0450000000000000)+(((-1.00000000000000)*(x26)))+(((-1.00000000000000)*(x25)))+(x24)+(x23));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((0.550000000000000)*(pz)))+(((0.300000000000000)*(cj3)*(pz)))+(((0.0450000000000000)*(pz)*(sj3))));
dummyeval[1]=((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3))));
if( IKabs(dummyeval[0]) < 0.000001  || IKabs(dummyeval[1]) < 0.000001  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3))));
dummyeval[1]=((((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000001  || IKabs(dummyeval[1]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x27=((cj0)*(px));
IKReal x28=((py)*(sj0));
IKReal x29=((x27)+(x28));
j1array[0]=IKatan2(((x29)*(((IKabs(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3)))))):(IKReal)1.0e30))), ((-1.00000000000000)*(pz)*(x29)*(((IKabs(((((-0.300000000000000)*(cj3)*(x27)))+(((-0.300000000000000)*(cj3)*(x28)))+(((-0.0450000000000000)*(sj3)*(x27)))+(((-0.0450000000000000)*(sj3)*(x28)))+(((-0.550000000000000)*(x27)))+(((-0.550000000000000)*(x28))))) != 0)?((IKReal)1/(((((-0.300000000000000)*(cj3)*(x27)))+(((-0.300000000000000)*(cj3)*(x28)))+(((-0.0450000000000000)*(sj3)*(x27)))+(((-0.0450000000000000)*(sj3)*(x28)))+(((-0.550000000000000)*(x27)))+(((-0.550000000000000)*(x28)))))):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((-1.00000000000000)*(pz)*(((IKabs(((((0.550000000000000)*(pz)))+(((0.300000000000000)*(cj3)*(pz)))+(((0.0450000000000000)*(pz)*(sj3))))) != 0)?((IKReal)1/(((((0.550000000000000)*(pz)))+(((0.300000000000000)*(cj3)*(pz)))+(((0.0450000000000000)*(pz)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))), ((pz)*(((IKabs(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3)))))):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x71=((0.0450000000000000)*(sj3));
IKReal x72=((0.300000000000000)*(cj3));
IKReal x73=((0.550000000000000)+(x72)+(x71));
IKReal x74=((IKabs(x73) != 0)?((IKReal)1/(x73)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x74)*(((((cj0)*(px)))+(((py)*(sj0)))))), ((pz)*(x74)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x75=((0.300000000000000)*(sj3));
IKReal x76=((px)*(sj0));
IKReal x77=((0.0450000000000000)+(x76)+(x75));
IKReal x78=((0.0450000000000000)*(cj3));
IKReal x79=((cj0)*(py));
IKReal x80=((x79)+(x78));
IKReal x81=((x77)+(((-1.00000000000000)*(x80))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.325950000000000)*(cj3))));
evalcond[2]=x81;
evalcond[3]=x81;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((0.550000000000000)*(pz)))+(((0.300000000000000)*(cj3)*(pz)))+(((0.0450000000000000)*(pz)*(sj3))));
dummyeval[1]=((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3))));
if( IKabs(dummyeval[0]) < 0.000001  || IKabs(dummyeval[1]) < 0.000001  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3))));
dummyeval[1]=((((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000001  || IKabs(dummyeval[1]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x82=((cj0)*(px));
IKReal x83=((py)*(sj0));
IKReal x84=((x82)+(x83));
j1array[0]=IKatan2(((x84)*(((IKabs(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3)))))):(IKReal)1.0e30))), ((-1.00000000000000)*(pz)*(x84)*(((IKabs(((((-0.0450000000000000)*(sj3)*(x82)))+(((-0.0450000000000000)*(sj3)*(x83)))+(((-0.550000000000000)*(x83)))+(((-0.550000000000000)*(x82)))+(((-0.300000000000000)*(cj3)*(x82)))+(((-0.300000000000000)*(cj3)*(x83))))) != 0)?((IKReal)1/(((((-0.0450000000000000)*(sj3)*(x82)))+(((-0.0450000000000000)*(sj3)*(x83)))+(((-0.550000000000000)*(x83)))+(((-0.550000000000000)*(x82)))+(((-0.300000000000000)*(cj3)*(x82)))+(((-0.300000000000000)*(cj3)*(x83)))))):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
j1array[0]=IKatan2(((-1.00000000000000)*(pz)*(((IKabs(((((0.550000000000000)*(pz)))+(((0.300000000000000)*(cj3)*(pz)))+(((0.0450000000000000)*(pz)*(sj3))))) != 0)?((IKReal)1/(((((0.550000000000000)*(pz)))+(((0.300000000000000)*(cj3)*(pz)))+(((0.0450000000000000)*(pz)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))), ((pz)*(((IKabs(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3)))))):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x85=((0.0450000000000000)*(sj3));
IKReal x86=((0.300000000000000)*(cj3));
IKReal x87=((0.550000000000000)+(x86)+(x85));
IKReal x88=((IKabs(x87) != 0)?((IKReal)1/(x87)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x88)*(((((cj0)*(px)))+(((py)*(sj0)))))), ((pz)*(x88)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x89=((px)*(sj0));
IKReal x90=((cj0)*(py));
IKReal x91=((x89)+(((-1.00000000000000)*(x90))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.325950000000000)*(cj3))));
evalcond[2]=x91;
evalcond[3]=x91;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.0450000000000000)*(pz)))+(((-0.300000000000000)*(pz)*(sj3)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3)))+(((0.0450000000000000)*(cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.550000000000000)*(pz)))+(((-0.300000000000000)*(cj0)*(px)*(sj3)))+(((-0.0450000000000000)*(py)*(sj0)))+(((0.0450000000000000)*(cj3)*(py)*(sj0)))+(((0.0450000000000000)*(cj0)*(cj3)*(px)))+(((0.300000000000000)*(cj3)*(pz)))+(((0.0450000000000000)*(pz)*(sj3)))+(((-0.0450000000000000)*(cj0)*(px)))+(((-0.300000000000000)*(py)*(sj0)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x92=((0.300000000000000)*(sj3));
IKReal x93=((0.0450000000000000)+(x92));
IKReal x94=((0.0450000000000000)*(cj3));
IKReal x95=((x93)+(((-1.00000000000000)*(x94))));
IKReal x96=((0.550000000000000)*(pz));
IKReal x97=((1.00000000000000)*(py)*(sj0)*(x94));
IKReal x98=((1.00000000000000)*(cj0)*(px)*(x94));
IKReal x99=((0.300000000000000)*(cj3)*(pz));
IKReal x100=((0.0450000000000000)*(pz)*(sj3));
IKReal x101=((x100)+(x99)+(x98)+(x97)+(x96));
IKReal x102=((py)*(sj0)*(x92));
IKReal x103=((cj0)*(px)*(x92));
IKReal x104=((0.0450000000000000)*(cj0)*(px));
IKReal x105=((0.0450000000000000)*(py)*(sj0));
IKReal x106=((x104)+(x105)+(x102)+(x103));
IKReal x107=((((-1.00000000000000)*(x106)))+(x101));
IKReal x108=((IKabs(x107) != 0)?((IKReal)1/(x107)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x108)*(((((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((x95)*(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3)))))))))), ((x108)*(((((-1.00000000000000)*((x95)*(x95))))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x109=((0.0450000000000000)*(sj3));
IKReal x110=((0.300000000000000)*(cj3));
IKReal x111=((0.550000000000000)+(x110)+(x109));
IKReal x112=((0.0450000000000000)*(cj3)*(pz));
IKReal x113=((0.550000000000000)*(py)*(sj0));
IKReal x114=((0.300000000000000)*(pz)*(sj3));
IKReal x115=((cj0)*(px)*(x110));
IKReal x116=((1.00000000000000)*(cj0)*(px)*(x109));
IKReal x117=((1.00000000000000)*(py)*(sj0)*(x109));
IKReal x118=((py)*(sj0)*(x110));
IKReal x119=((0.550000000000000)*(cj0)*(px));
IKReal x120=((0.0450000000000000)*(pz));
IKReal x121=((x120)+(x113)+(x117)+(x116)+(x115)+(x114)+(x119)+(x118));
IKReal x122=((((-1.00000000000000)*(x121)))+(x112));
IKReal x123=((IKabs(x122) != 0)?((IKReal)1/(x122)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x123)*(((((-1.00000000000000)*((x111)*(x111))))+((pz)*(pz))))), ((x123)*(((((-1.00000000000000)*(x111)*(((0.0450000000000000)+(((0.300000000000000)*(sj3)))+(((-0.0450000000000000)*(cj3)))))))+(((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x124=x0;
IKReal x125=(sj0)*(sj0);
IKReal x126=((x124)*(x125));
IKReal x127=((2.00000000000000)*(cj0)*(px)*(py)*(sj0));
IKReal x128=x2;
IKReal x129=(cj0)*(cj0);
IKReal x130=x4;
IKReal x131=((x129)*(x130));
IKReal x132=((x131)+(x126)+(x127)+(x128));
IKReal x133=((IKabs(x132) != 0)?((IKReal)1/(x132)):(IKReal)1.0e30);
IKReal x134=((cj0)*(px));
IKReal x135=((py)*(sj0));
IKReal x136=((x135)+(x134));
IKReal x137=((0.300000000000000)*(sj3));
IKReal x138=((0.0450000000000000)+(x137));
IKReal x139=((0.0450000000000000)*(cj3));
IKReal x140=((x138)+(((-1.00000000000000)*(x139))));
IKReal x141=((0.0450000000000000)*(sj3));
IKReal x142=((0.300000000000000)*(cj3));
IKReal x143=((0.550000000000000)+(x141)+(x142));
j1array[0]=IKatan2(((x133)*(((((x136)*(x143)))+(((-1.00000000000000)*(pz)*(x140)))))), ((x133)*(((((pz)*(x143)))+(((x136)*(x140)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x144=((cj0)*(py));
IKReal x145=((px)*(sj0));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.325950000000000)*(cj3))));
evalcond[2]=((((-1.00000000000000)*(x144)))+(x145));
evalcond[3]=((((-1.00000000000000)*(x145)))+(x144));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.300000000000000)*(pz)*(sj3)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.0450000000000000)*(cj3)*(pz)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((0.0450000000000000)*(pz)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.550000000000000)*(pz)))+(((0.300000000000000)*(py)*(sj0)*(sj3)))+(((0.300000000000000)*(cj0)*(px)*(sj3)))+(((0.0450000000000000)*(cj0)*(px)))+(((0.0450000000000000)*(py)*(sj0)))+(((-0.0450000000000000)*(cj0)*(cj3)*(px)))+(((-0.0450000000000000)*(cj3)*(py)*(sj0)))+(((0.300000000000000)*(cj3)*(pz)))+(((0.0450000000000000)*(pz)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x146=((0.300000000000000)*(sj3));
IKReal x147=((0.0450000000000000)+(x146));
IKReal x148=((0.0450000000000000)*(cj3));
IKReal x149=((((-1.00000000000000)*(x148)))+(x147));
IKReal x150=((0.550000000000000)*(pz));
IKReal x151=((py)*(sj0)*(x146));
IKReal x152=((cj0)*(px)*(x146));
IKReal x153=((0.0450000000000000)*(cj0)*(px));
IKReal x154=((0.0450000000000000)*(py)*(sj0));
IKReal x155=((0.300000000000000)*(cj3)*(pz));
IKReal x156=((0.0450000000000000)*(pz)*(sj3));
IKReal x157=((x156)+(x155)+(x154)+(x153)+(x152)+(x151)+(x150));
IKReal x158=((1.00000000000000)*(py)*(sj0)*(x148));
IKReal x159=((1.00000000000000)*(cj0)*(px)*(x148));
IKReal x160=((x159)+(x158));
IKReal x161=((((-1.00000000000000)*(x160)))+(x157));
IKReal x162=((IKabs(x161) != 0)?((IKReal)1/(x161)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x162)*(((((-1.00000000000000)*(pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((x149)*(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3)))))))))), ((x162)*(((((-1.00000000000000)*((x149)*(x149))))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x163=((0.0450000000000000)*(sj3));
IKReal x164=((0.300000000000000)*(cj3));
IKReal x165=((0.550000000000000)+(x163)+(x164));
IKReal x166=((0.300000000000000)*(pz)*(sj3));
IKReal x167=((0.0450000000000000)*(pz));
IKReal x168=((x166)+(x167));
IKReal x169=((0.550000000000000)*(py)*(sj0));
IKReal x170=((cj0)*(px)*(x164));
IKReal x171=((1.00000000000000)*(cj0)*(px)*(x163));
IKReal x172=((1.00000000000000)*(py)*(sj0)*(x163));
IKReal x173=((py)*(sj0)*(x164));
IKReal x174=((0.550000000000000)*(cj0)*(px));
IKReal x175=((1.00000000000000)*(cj3)*(x167));
IKReal x176=((x171)+(x170)+(x173)+(x172)+(x175)+(x174)+(x169));
IKReal x177=((((-1.00000000000000)*(x176)))+(x168));
IKReal x178=((IKabs(x177) != 0)?((IKReal)1/(x177)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x178)*(((((-1.00000000000000)*((x165)*(x165))))+((pz)*(pz))))), ((x178)*(((((x165)*(((0.0450000000000000)+(((0.300000000000000)*(sj3)))+(((-0.0450000000000000)*(cj3)))))))+(((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x179=x0;
IKReal x180=(sj0)*(sj0);
IKReal x181=((x179)*(x180));
IKReal x182=((2.00000000000000)*(cj0)*(px)*(py)*(sj0));
IKReal x183=x2;
IKReal x184=(cj0)*(cj0);
IKReal x185=x4;
IKReal x186=((x184)*(x185));
IKReal x187=((x186)+(x181)+(x182)+(x183));
IKReal x188=((IKabs(x187) != 0)?((IKReal)1/(x187)):(IKReal)1.0e30);
IKReal x189=((cj0)*(px));
IKReal x190=((py)*(sj0));
IKReal x191=((x190)+(x189));
IKReal x192=((0.300000000000000)*(sj3));
IKReal x193=((0.0450000000000000)+(x192));
IKReal x194=((0.0450000000000000)*(cj3));
IKReal x195=((((-1.00000000000000)*(x194)))+(x193));
IKReal x196=((0.0450000000000000)*(sj3));
IKReal x197=((0.300000000000000)*(cj3));
IKReal x198=((0.550000000000000)+(x197)+(x196));
j1array[0]=IKatan2(((x188)*(((((x191)*(x198)))+(((pz)*(x195)))))), ((x188)*(((((-1.00000000000000)*(x191)*(x195)))+(((pz)*(x198)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x199=x0;
IKReal x200=(sj0)*(sj0);
IKReal x201=((cj2)*(x199)*(x200));
IKReal x202=(cj0)*(cj0);
IKReal x203=x4;
IKReal x204=((cj2)*(x202)*(x203));
IKReal x205=((2.00000000000000)*(cj0)*(cj2)*(px)*(py)*(sj0));
IKReal x206=x2;
IKReal x207=((cj2)*(x206));
IKReal x208=((x207)+(x205)+(x204)+(x201));
IKReal x209=((IKabs(x208) != 0)?((IKReal)1/(x208)):(IKReal)1.0e30);
IKReal x210=((0.300000000000000)*(cj3));
IKReal x211=((0.0450000000000000)*(sj3));
IKReal x212=((0.550000000000000)+(x210)+(x211));
IKReal x213=((cj0)*(py)*(sj2));
IKReal x214=((0.300000000000000)*(sj3));
IKReal x215=((0.0450000000000000)+(x213)+(x214));
IKReal x216=((0.0450000000000000)*(cj3));
IKReal x217=((px)*(sj0)*(sj2));
IKReal x218=((x216)+(x217));
IKReal x219=((x215)+(((-1.00000000000000)*(x218))));
j1array[0]=IKatan2(((x209)*(((((-1.00000000000000)*(pz)*(x219)))+(((x212)*(((((cj2)*(py)*(sj0)))+(((cj0)*(cj2)*(px)))))))))), ((x209)*(((((x219)*(((((cj0)*(px)))+(((py)*(sj0)))))))+(((cj2)*(pz)*(x212)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x220=x2;
IKReal x221=((sj2)*(x220));
IKReal x222=(cj0)*(cj0);
IKReal x223=x4;
IKReal x224=((sj2)*(x222)*(x223));
IKReal x225=((2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2));
IKReal x226=x0;
IKReal x227=(sj0)*(sj0);
IKReal x228=((sj2)*(x226)*(x227));
IKReal x229=((x228)+(x221)+(x225)+(x224));
IKReal x230=((IKabs(x229) != 0)?((IKReal)1/(x229)):(IKReal)1.0e30);
IKReal x231=((0.300000000000000)*(cj3));
IKReal x232=((0.0450000000000000)*(sj3));
IKReal x233=((0.550000000000000)+(x232)+(x231));
IKReal x234=((cj2)*(px)*(sj0));
IKReal x235=((cj0)*(cj2)*(py));
IKReal x236=((((-1.00000000000000)*(x235)))+(x234));
j1array[0]=IKatan2(((x230)*(((((x233)*(((((cj0)*(px)*(sj2)))+(((py)*(sj0)*(sj2)))))))+(((-1.00000000000000)*(pz)*(x236)))))), ((x230)*(((((pz)*(sj2)*(x233)))+(((x236)*(((((cj0)*(px)))+(((py)*(sj0)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x237=x0;
IKReal x238=(sj0)*(sj0);
IKReal x239=((x237)*(x238));
IKReal x240=((2.00000000000000)*(cj0)*(px)*(py)*(sj0));
IKReal x241=x2;
IKReal x242=(cj0)*(cj0);
IKReal x243=x4;
IKReal x244=((x242)*(x243));
IKReal x245=((x239)+(x241)+(x240)+(x244));
IKReal x246=((IKabs(x245) != 0)?((IKReal)1/(x245)):(IKReal)1.0e30);
IKReal x247=((0.300000000000000)*(cj3));
IKReal x248=((0.0450000000000000)*(sj3));
IKReal x249=((0.550000000000000)+(x247)+(x248));
IKReal x250=((cj0)*(px));
IKReal x251=((py)*(sj0));
IKReal x252=((x250)+(x251));
IKReal x253=((0.0450000000000000)*(cj2));
IKReal x254=((0.300000000000000)*(cj2)*(sj3));
IKReal x255=((x254)+(x253));
IKReal x256=((1.00000000000000)*(cj3)*(x253));
IKReal x257=((x255)+(((-1.00000000000000)*(x256))));
j1array[0]=IKatan2(((x246)*(((((x249)*(x252)))+(((-1.00000000000000)*(pz)*(x257)))))), ((x246)*(((((x252)*(x257)))+(((pz)*(x249)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}

} else
{
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
IKReal x30=((cj1)*(sj3));
IKReal x31=((cj2)*(cj3)*(sj1));
IKReal x32=((x31)+(x30));
IKReal x33=((-1.00000000000000)*(x32));
IKReal x34=((cj1)*(cj2)*(cj3)*(sj0));
IKReal x35=((cj0)*(cj3)*(sj2));
IKReal x36=((sj0)*(sj1)*(sj3));
IKReal x37=((x36)+(x35));
IKReal x38=((((-1.00000000000000)*(x37)))+(x34));
IKReal x39=((cj0)*(cj1)*(cj2)*(cj3));
IKReal x40=((cj3)*(sj0)*(sj2));
IKReal x41=((x39)+(x40));
IKReal x42=((cj0)*(sj1)*(sj3));
IKReal x43=((((-1.00000000000000)*(x42)))+(x41));
IKReal x44=((cj0)*(sj2)*(sj3));
IKReal x45=((cj2)*(sj0)*(x30));
IKReal x46=((cj3)*(sj0)*(sj1));
IKReal x47=((x46)+(x45));
IKReal x48=((((-1.00000000000000)*(x47)))+(x44));
IKReal x49=((cj0)*(cj3)*(sj1));
IKReal x50=((cj0)*(cj2)*(x30));
IKReal x51=((sj0)*(sj2)*(sj3));
IKReal x52=((x49)+(x51)+(x50));
IKReal x53=((-1.00000000000000)*(x52));
IKReal x54=((cj2)*(sj1)*(sj3));
IKReal x55=((cj1)*(cj3));
IKReal x56=((x54)+(((-1.00000000000000)*(x55))));
IKReal x57=((cj0)*(cj1)*(sj2));
IKReal x58=((cj2)*(sj0));
IKReal x59=((x57)+(((-1.00000000000000)*(x58))));
IKReal x60=((cj0)*(cj2));
IKReal x61=((cj1)*(sj0)*(sj2));
IKReal x62=((x60)+(x61));
new_r00=((((r20)*(x33)))+(((r00)*(x43)))+(((r10)*(x38))));
new_r01=((((r01)*(x43)))+(((r11)*(x38)))+(((r21)*(x33))));
new_r02=((((r22)*(x33)))+(((r02)*(x43)))+(((r12)*(x38))));
new_r10=((((r10)*(x48)))+(((r00)*(x53)))+(((r20)*(x56))));
new_r11=((((r01)*(x53)))+(((r21)*(x56)))+(((r11)*(x48))));
new_r12=((((r22)*(x56)))+(((r02)*(x53)))+(((r12)*(x48))));
new_r20=((((r10)*(x62)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((r00)*(x59))));
new_r21=((((r11)*(x62)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((r01)*(x59))));
new_r22=((((r02)*(x59)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)))+(((r12)*(x62))));
{
IKReal j5eval;
j5eval=new_r11;
if( j5eval >= -1.000010 && j5eval <= -0.999990 )
{
{
j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=1.00000000000000;
j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r20)), new_r22)));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
if( j5eval >= 0.999990 && j5eval <= 1.000010 )
{
{
j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=-1.00000000000000;
j6=((((-1.00000000000000)*(IKatan2(new_r20, ((-1.00000000000000)*(new_r22))))))+(((-1.00000000000000)*(3.14159265358979))));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
j4array[0]=IKatan2(((-1.00000000000000)*(new_r21)), ((-1.00000000000000)*(new_r01)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
sj4array[1] = -sj4array[0];
cj4array[1] = -cj4array[0];
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal evalcond[1];
evalcond[0]=IKcos(j4);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))), new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x63=IKsin(j4);
IKReal x64=((IKabs(x63) != 0)?((IKReal)1/(x63)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r00)*(x64)), ((-1.00000000000000)*(new_r02)*(x64)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))), new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal evalcond[1];
evalcond[0]=IKsin(j5);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x65=IKsin(j4);
IKReal x66=IKcos(j5);
IKReal x67=((IKabs(x66) != 0)?((IKReal)1/(x66)):(IKReal)1.0e30);
IKReal x68=IKcos(j4);
j6array[0]=IKatan2(((((new_r20)*(x68)))+(((-1.00000000000000)*(new_r00)*(x65)))), ((((new_r20)*(x65)*(x67)))+(((new_r00)*(x67)*(x68)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x69=IKsin(j5);
IKReal x70=((IKabs(x69) != 0)?((IKReal)1/(x69)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r12)*(x70)), ((new_r10)*(x70)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
}
}
}
}
}

} else
{
}
}
}
}
}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "f08ae2b350373ff2b9fb10f36690ef49"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
