/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2011-02-07 21:52:23.545249
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKsin(j[0]);
x1=IKsin(j[2]);
x2=IKcos(j[0]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=((x0)*(x1));
x8=((x2)*(x3)*(x4));
x9=((x7)+(x8));
x10=IKsin(j[3]);
x11=IKcos(j[4]);
x12=((x5)*(x9));
x13=((x10)*(x2)*(x6));
x14=((((-1.00000000000000)*(x13)))+(x12));
x15=IKsin(j[4]);
x16=((x1)*(x2)*(x3));
x17=((x0)*(x4));
x18=((((-1.00000000000000)*(x17)))+(x16));
x19=IKcos(j[6]);
x20=((x11)*(x18));
x21=IKsin(j[6]);
x22=IKsin(j[5]);
x23=((x2)*(x5)*(x6));
x24=((x10)*(x9));
x25=((x24)+(x23));
x26=((-1.00000000000000)*(x25));
x27=((x22)*(x26));
x28=IKcos(j[5]);
x29=((x11)*(x14));
x30=((x15)*(x18));
x31=((x30)+(x29));
x32=((x28)*(x31));
x33=((x32)+(x27));
x34=((x17)*(x3));
x35=((x1)*(x2));
x36=((((-1.00000000000000)*(x35)))+(x34));
x37=((x36)*(x5));
x38=((x0)*(x10)*(x6));
x39=((((-1.00000000000000)*(x38)))+(x37));
x40=((x3)*(x7));
x41=((x2)*(x4));
x42=((x40)+(x41));
x43=((x11)*(x42));
x44=((x11)*(x39));
x45=((x15)*(x42));
x46=((x44)+(x45));
x47=((x28)*(x46));
x48=((-1.00000000000000)*(x10)*(x36));
x49=((-1.00000000000000)*(x0)*(x5)*(x6));
x50=((x48)+(x49));
x51=((x22)*(x50));
x52=((x47)+(x51));
x53=((x10)*(x3));
x54=((x4)*(x5)*(x6));
x55=((x54)+(x53));
x56=((-1.00000000000000)*(x55));
x57=((x1)*(x11)*(x6));
x58=((x15)*(x56));
x59=((x58)+(x57));
x60=((-1.00000000000000)*(x59));
x61=((x10)*(x4)*(x6));
x62=((x3)*(x5));
x63=((x61)+(((-1.00000000000000)*(x62))));
x64=((x22)*(x63));
x65=((-1.00000000000000)*(x1)*(x15)*(x6));
x66=((x11)*(x56));
x67=((x65)+(x66));
x68=((x28)*(x67));
x69=((x64)+(x68));
x70=((x1)*(x15)*(x6));
x71=((((-1.00000000000000)*(x70)))+(x66));
eerot[0]=((((x19)*(x33)))+(((x21)*(((((-1.00000000000000)*(x14)*(x15)))+(x20))))));
eerot[1]=((((x19)*(((((-1.00000000000000)*(x14)*(x15)))+(x20)))))+(((-1.00000000000000)*(x21)*(x33))));
eerot[2]=((((x22)*(x31)))+(((-1.00000000000000)*(x26)*(x28))));
eetrans[0]=((0.220000000000000)+(((-0.0450000000000000)*(x12)))+(((0.550000000000000)*(x2)*(x6)))+(((-0.220000000000000)*(x26)*(x28)))+(((0.300000000000000)*(x23)))+(((0.300000000000000)*(x24)))+(((0.220000000000000)*(x22)*(x31)))+(((0.0450000000000000)*(x13)))+(((0.0450000000000000)*(x8)))+(((0.0450000000000000)*(x7))));
eerot[3]=((((x21)*(((x43)+(((-1.00000000000000)*(x15)*(x39)))))))+(((x19)*(x52))));
eerot[4]=((((x19)*(((x43)+(((-1.00000000000000)*(x15)*(x39)))))))+(((-1.00000000000000)*(x21)*(x52))));
eerot[5]=((((x22)*(((x45)+(((x11)*(((((-1.00000000000000)*(x38)))+(x37)))))))))+(((-1.00000000000000)*(x28)*(((((-1.00000000000000)*(x10)*(x36)))+(((-1.00000000000000)*(x0)*(x5)*(x6))))))));
eetrans[1]=((0.140000000000000)+(((0.300000000000000)*(x0)*(x5)*(x6)))+(((-0.0450000000000000)*(x37)))+(((-0.0450000000000000)*(x35)))+(((-0.220000000000000)*(x28)*(x50)))+(((0.550000000000000)*(x0)*(x6)))+(((0.300000000000000)*(x10)*(x36)))+(((0.0450000000000000)*(x34)))+(((0.0450000000000000)*(x38)))+(((0.220000000000000)*(x22)*(x46))));
eerot[6]=((((x19)*(x69)))+(((x21)*(x60))));
eerot[7]=((((x19)*(x60)))+(((-1.00000000000000)*(x21)*(x69))));
eerot[8]=((((-1.00000000000000)*(x28)*(x63)))+(((x22)*(x71))));
eetrans[2]=((0.346000000000000)+(((-0.220000000000000)*(x28)*(x63)))+(((0.300000000000000)*(x62)))+(((-0.0450000000000000)*(x4)*(x6)))+(((0.0450000000000000)*(x54)))+(((0.0450000000000000)*(x53)))+(((0.220000000000000)*(x22)*(x71)))+(((-0.300000000000000)*(x61)))+(((0.550000000000000)*(x3))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.220000000000000)+(px)+(((-0.220000000000000)*(r02))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.140000000000000)+(py)+(((-0.220000000000000)*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.346000000000000)+(((-0.220000000000000)*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
IKReal x0=2232.04592246665;
IKReal x1=((0.396550000000000)+(((-1.00000000000000)*(pp))));
IKReal x2=((0.00133814288649598)*(x0)*(x1));
if( (x2) < -1.0001 || (x2) > 1.0001 )
    continue;
IKReal x3=IKasin(x2);
j3array[0]=((-1.34027003705633)+(((-1.00000000000000)*(x3))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+(x3));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
if( j3array[1] > IKPI )
    j3array[1]-=IK2PI;
else if( j3array[1] < -IKPI )
    j3array[1]+=IK2PI;
j3valid[1] = true;
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x4=(px)*(px);
IKReal x5=(py)*(py);
IKReal x6=((x5)+(x4));
if( (x6) < (IKReal)-0.00001 )
    continue;
IKReal x7=IKsqrt(x6);
IKReal x8=IKabs(x7);
IKReal x9=((IKabs(x8) != 0)?((IKReal)1/(x8)):(IKReal)1.0e30);
IKReal x10=((0.0450000000000000)*(cj3)*(sj2));
IKReal x11=((0.300000000000000)*(sj2)*(sj3));
IKReal x12=((0.0450000000000000)*(sj2));
IKReal x13=((x11)+(x12));
IKReal x14=((((-1.00000000000000)*(x13)))+(x10));
IKReal x15=((x14)*(x9));
if( (x15) < -1.0001 || (x15) > 1.0001 )
    continue;
IKReal x16=IKasin(x15);
IKReal x17=((-1.00000000000000)*(py));
IKReal x18=IKatan2(x17, px);
j0array[0]=((((-1.00000000000000)*(x18)))+(((-1.00000000000000)*(x16))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x18)))+(x16));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
if( j0array[1] > IKPI )
    j0array[1]-=IK2PI;
else if( j0array[1] < -IKPI )
    j0array[1]+=IK2PI;
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
    j0valid[1]=false;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
dummyeval[0]=((((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(sj2)*((pz)*(pz))))+(((-1.00000000000000)*(sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((-0.0450000000000000)*(cj2)*(pz)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.550000000000000)*(py)*(sj0)))+(((0.0450000000000000)*(cj2)*(cj3)*(pz)))+(((-0.300000000000000)*(cj2)*(pz)*(sj3)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.300000000000000)*(cj3)*(pz)))+(((-0.0450000000000000)*(cj2)*(cj3)*(py)*(sj0)))+(((0.0450000000000000)*(cj2)*(py)*(sj0)))+(((0.0450000000000000)*(cj0)*(cj2)*(px)))+(((-0.0450000000000000)*(cj0)*(cj2)*(cj3)*(px)))+(((-0.550000000000000)*(pz)))+(((0.300000000000000)*(cj2)*(py)*(sj0)*(sj3)))+(((-0.0450000000000000)*(pz)*(sj3)))+(((0.300000000000000)*(cj0)*(cj2)*(px)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[4];
IKReal x19=((px)*(sj0));
IKReal x20=((cj0)*(py));
IKReal x21=((((-1.00000000000000)*(x20)))+(x19));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x21;
evalcond[3]=x21;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz))))+(((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+(((-1.00000000000000)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((0.0450000000000000)*(cj3)*(pz)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.550000000000000)*(py)*(sj0)))+(((-0.0450000000000000)*(pz)))+(((-0.300000000000000)*(pz)*(sj3)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.0450000000000000)*(cj3)*(py)*(sj0)))+(((-0.300000000000000)*(cj0)*(px)*(sj3)))+(((0.0450000000000000)*(pz)*(sj3)))+(((0.550000000000000)*(pz)))+(((0.300000000000000)*(cj3)*(pz)))+(((0.0450000000000000)*(cj0)*(cj3)*(px)))+(((-0.300000000000000)*(py)*(sj0)*(sj3)))+(((-0.0450000000000000)*(py)*(sj0)))+(((-0.0450000000000000)*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x22=((0.300000000000000)*(sj3));
IKReal x23=((0.0450000000000000)+(x22));
IKReal x24=((0.0450000000000000)*(cj3));
IKReal x25=((((-1.00000000000000)*(x24)))+(x23));
IKReal x26=((py)*(sj0)*(x24));
IKReal x27=((0.0450000000000000)*(pz)*(sj3));
IKReal x28=((0.550000000000000)*(pz));
IKReal x29=((0.300000000000000)*(cj3)*(pz));
IKReal x30=((cj0)*(px)*(x24));
IKReal x31=((x30)+(x26)+(x27)+(x28)+(x29));
IKReal x32=((0.0450000000000000)*(py)*(sj0));
IKReal x33=((0.0450000000000000)*(cj0)*(px));
IKReal x34=((py)*(sj0)*(x22));
IKReal x35=((cj0)*(px)*(x22));
IKReal x36=((x33)+(x32)+(x35)+(x34));
IKReal x37=((((-1.00000000000000)*(x36)))+(x31));
IKReal x38=((IKabs(x37) != 0)?((IKReal)1/(x37)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x38)*(((((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((x25)*(((0.550000000000000)+(((0.300000000000000)*(cj3)))+(((0.0450000000000000)*(sj3)))))))))), ((x38)*((((pz)*(pz))+(((-1.00000000000000)*((x25)*(x25))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x117=((0.300000000000000)*(cj3));
IKReal x118=((0.0450000000000000)*(sj3));
IKReal x119=((0.550000000000000)+(x117)+(x118));
IKReal x120=((0.0450000000000000)*(cj3)*(pz));
IKReal x121=((0.550000000000000)*(cj0)*(px));
IKReal x122=((py)*(sj0)*(x118));
IKReal x123=((cj0)*(px)*(x117));
IKReal x124=((0.550000000000000)*(py)*(sj0));
IKReal x125=((cj0)*(px)*(x118));
IKReal x126=((0.0450000000000000)*(pz));
IKReal x127=((py)*(sj0)*(x117));
IKReal x128=((0.300000000000000)*(pz)*(sj3));
IKReal x129=((x126)+(x127)+(x124)+(x125)+(x122)+(x123)+(x121)+(x128));
IKReal x130=((((-1.00000000000000)*(x129)))+(x120));
IKReal x131=((IKabs(x130) != 0)?((IKReal)1/(x130)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x131)*(((((-1.00000000000000)*((x119)*(x119))))+((pz)*(pz))))), ((-1.00000000000000)*(x131)*(((((x119)*(((0.0450000000000000)+(((0.300000000000000)*(sj3)))+(((-0.0450000000000000)*(cj3)))))))+(((pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x132=((0.300000000000000)*(cj3));
IKReal x133=((0.0450000000000000)*(sj3));
IKReal x134=((0.550000000000000)+(x133)+(x132));
IKReal x135=((0.300000000000000)*(sj3));
IKReal x136=((0.0450000000000000)+(x135));
IKReal x137=((0.0450000000000000)*(cj3));
IKReal x138=((x136)+(((-1.00000000000000)*(x137))));
IKReal x139=x5;
IKReal x140=(sj0)*(sj0);
IKReal x141=((x139)*(x140));
IKReal x142=((2.00000000000000)*(cj0)*(px)*(py)*(sj0));
IKReal x143=(pz)*(pz);
IKReal x144=(cj0)*(cj0);
IKReal x145=x4;
IKReal x146=((x144)*(x145));
IKReal x147=((x141)+(x142)+(x143)+(x146));
IKReal x148=((-1.00000000000000)*(x147));
IKReal x149=((IKabs(x148) != 0)?((IKReal)1/(x148)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x149)*(((((pz)*(x138)))+(((x134)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))), ((x149)*(((((-1.00000000000000)*(pz)*(x134)))+(((x138)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x150=((cj0)*(py));
IKReal x151=((px)*(sj0));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((-1.00000000000000)*(x150)))+(x151));
evalcond[3]=((((-1.00000000000000)*(x151)))+(x150));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((0.0450000000000000)*(pz)))+(((-0.0450000000000000)*(cj3)*(pz)))+(((-0.550000000000000)*(cj0)*(px)))+(((0.300000000000000)*(pz)*(sj3)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.550000000000000)*(py)*(sj0)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.300000000000000)*(cj3)*(pz)))+(((0.0450000000000000)*(cj3)*(py)*(sj0)))+(((-0.300000000000000)*(cj0)*(px)*(sj3)))+(((0.0450000000000000)*(cj0)*(cj3)*(px)))+(((-0.300000000000000)*(py)*(sj0)*(sj3)))+(((-0.550000000000000)*(pz)))+(((-0.0450000000000000)*(py)*(sj0)))+(((-0.0450000000000000)*(cj0)*(px)))+(((-0.0450000000000000)*(pz)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x152=((0.300000000000000)*(sj3));
IKReal x153=((0.0450000000000000)+(x152));
IKReal x154=((0.0450000000000000)*(cj3));
IKReal x155=((((-1.00000000000000)*(x154)))+(x153));
IKReal x156=((py)*(sj0)*(x154));
IKReal x157=((cj0)*(px)*(x154));
IKReal x158=((x157)+(x156));
IKReal x159=((0.0450000000000000)*(py)*(sj0));
IKReal x160=((0.0450000000000000)*(pz)*(sj3));
IKReal x161=((0.550000000000000)*(pz));
IKReal x162=((0.300000000000000)*(cj3)*(pz));
IKReal x163=((0.0450000000000000)*(cj0)*(px));
IKReal x164=((py)*(sj0)*(x152));
IKReal x165=((cj0)*(px)*(x152));
IKReal x166=((x162)+(x163)+(x160)+(x161)+(x164)+(x165)+(x159));
IKReal x167=((((-1.00000000000000)*(x166)))+(x158));
IKReal x168=((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x168)*(((((-1.00000000000000)*(x155)*(((0.550000000000000)+(((0.300000000000000)*(cj3)))+(((0.0450000000000000)*(sj3)))))))+(((-1.00000000000000)*(pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))))), ((x168)*(((((-1.00000000000000)*((pz)*(pz))))+((x155)*(x155))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x169=((0.300000000000000)*(cj3));
IKReal x170=((0.0450000000000000)*(sj3));
IKReal x171=((0.550000000000000)+(x170)+(x169));
IKReal x172=((0.0450000000000000)*(pz));
IKReal x173=((0.300000000000000)*(pz)*(sj3));
IKReal x174=((x173)+(x172));
IKReal x175=((0.550000000000000)*(cj0)*(px));
IKReal x176=((py)*(sj0)*(x170));
IKReal x177=((cj0)*(px)*(x169));
IKReal x178=((0.550000000000000)*(py)*(sj0));
IKReal x179=((cj0)*(px)*(x170));
IKReal x180=((py)*(sj0)*(x169));
IKReal x181=((cj3)*(x172));
IKReal x182=((x179)+(x178)+(x175)+(x177)+(x176)+(x180)+(x181));
IKReal x183=((((-1.00000000000000)*(x182)))+(x174));
IKReal x184=((IKabs(x183) != 0)?((IKReal)1/(x183)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x184)*(((((-1.00000000000000)*((x171)*(x171))))+((pz)*(pz))))), ((x184)*(((((-1.00000000000000)*(pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))+(((x171)*(((0.0450000000000000)+(((0.300000000000000)*(sj3)))+(((-0.0450000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x185=x5;
IKReal x186=(sj0)*(sj0);
IKReal x187=((x185)*(x186));
IKReal x188=((2.00000000000000)*(cj0)*(px)*(py)*(sj0));
IKReal x189=(pz)*(pz);
IKReal x190=(cj0)*(cj0);
IKReal x191=x4;
IKReal x192=((x190)*(x191));
IKReal x193=((x192)+(x187)+(x188)+(x189));
IKReal x194=((IKabs(x193) != 0)?((IKReal)1/(x193)):(IKReal)1.0e30);
IKReal x195=((0.300000000000000)*(cj3));
IKReal x196=((0.0450000000000000)*(sj3));
IKReal x197=((0.550000000000000)+(x196)+(x195));
IKReal x198=((0.300000000000000)*(sj3));
IKReal x199=((0.0450000000000000)+(x198));
IKReal x200=((0.0450000000000000)*(cj3));
IKReal x201=((x199)+(((-1.00000000000000)*(x200))));
j1array[0]=IKatan2(((x194)*(((((x197)*(((((cj0)*(px)))+(((py)*(sj0)))))))+(((pz)*(x201)))))), ((x194)*(((((x201)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((pz)*(x197)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x202=((0.300000000000000)*(cj3));
IKReal x203=((0.0450000000000000)*(sj3));
IKReal x204=((0.550000000000000)+(x203)+(x202));
IKReal x205=((cj0)*(px));
IKReal x206=((py)*(sj0));
IKReal x207=((x206)+(x205));
IKReal x208=((-1.00000000000000)*(x207));
IKReal x209=((0.0450000000000000)*(cj2)*(x206));
IKReal x210=((0.0450000000000000)*(cj2)*(x205));
IKReal x211=((0.300000000000000)*(cj2)*(sj3)*(x206));
IKReal x212=((0.300000000000000)*(cj2)*(sj3)*(x205));
IKReal x213=((x210)+(x211)+(x212)+(x209));
IKReal x214=((pz)*(x203));
IKReal x215=((0.550000000000000)*(pz));
IKReal x216=((pz)*(x202));
IKReal x217=((cj3)*(x210));
IKReal x218=((cj3)*(x209));
IKReal x219=((x214)+(x215)+(x216)+(x217)+(x218));
IKReal x220=((x213)+(((-1.00000000000000)*(x219))));
IKReal x221=((IKabs(x220) != 0)?((IKReal)1/(x220)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x221)*(((((x204)*(((((0.0450000000000000)*(cj2)))+(((0.300000000000000)*(cj2)*(sj3)))+(((-0.0450000000000000)*(cj2)*(cj3)))))))+(((pz)*(x208)))))), ((x221)*((((x208)*(x208))+(((-1.00000000000000)*((x204)*(x204))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x222=((0.300000000000000)*(cj3));
IKReal x223=((0.0450000000000000)*(sj3));
IKReal x224=((0.550000000000000)+(x223)+(x222));
IKReal x225=((0.0450000000000000)*(cj2)*(cj3)*(pz));
IKReal x226=((0.550000000000000)*(cj0)*(px));
IKReal x227=((py)*(sj0)*(x223));
IKReal x228=((cj0)*(px)*(x222));
IKReal x229=((0.550000000000000)*(py)*(sj0));
IKReal x230=((cj0)*(px)*(x223));
IKReal x231=((py)*(sj0)*(x222));
IKReal x232=((0.0450000000000000)*(cj2)*(pz));
IKReal x233=((0.300000000000000)*(cj2)*(pz)*(sj3));
IKReal x234=((x229)+(x228)+(x227)+(x226)+(x232)+(x233)+(x230)+(x231));
IKReal x235=((((-1.00000000000000)*(x234)))+(x225));
IKReal x236=((IKabs(x235) != 0)?((IKReal)1/(x235)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x236)*((((pz)*(pz))+(((-1.00000000000000)*((x224)*(x224))))))), ((-1.00000000000000)*(x236)*(((((x224)*(((((0.0450000000000000)*(cj2)))+(((0.300000000000000)*(cj2)*(sj3)))+(((-0.0450000000000000)*(cj2)*(cj3)))))))+(((pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x237=((0.300000000000000)*(cj3));
IKReal x238=((0.0450000000000000)*(sj3));
IKReal x239=((0.550000000000000)+(x238)+(x237));
IKReal x240=((cj2)*(px)*(sj0));
IKReal x241=((cj0)*(cj2)*(py));
IKReal x242=((x240)+(((-1.00000000000000)*(x241))));
IKReal x243=(pz)*(pz);
IKReal x244=((sj2)*(x243));
IKReal x245=(cj0)*(cj0);
IKReal x246=x4;
IKReal x247=((sj2)*(x245)*(x246));
IKReal x248=((2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2));
IKReal x249=x5;
IKReal x250=(sj0)*(sj0);
IKReal x251=((sj2)*(x249)*(x250));
IKReal x252=((x251)+(x247)+(x244)+(x248));
IKReal x253=((-1.00000000000000)*(x252));
IKReal x254=((IKabs(x253) != 0)?((IKReal)1/(x253)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x254)*(((((x239)*(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2)))))))+(((pz)*(x242)))))), ((x254)*(((((-1.00000000000000)*(pz)*(sj2)*(x239)))+(((x242)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x39=((cj1)*(cj2)*(cj3));
IKReal x40=((sj1)*(sj3));
IKReal x41=((((-1.00000000000000)*(x40)))+(x39));
IKReal x42=((cj1)*(sj3));
IKReal x43=((cj2)*(cj3)*(sj1));
IKReal x44=((x42)+(x43));
IKReal x45=((-1.00000000000000)*(x44));
IKReal x46=((sj0)*(x41));
IKReal x47=((cj3)*(sj0)*(sj2));
IKReal x48=((cj0)*(x41));
IKReal x49=((x48)+(x47));
IKReal x50=((-1.00000000000000)*(cj0)*(cj3)*(sj2));
IKReal x51=((x46)+(x50));
IKReal x52=((cj0)*(cj1)*(sj2));
IKReal x53=((cj2)*(sj0));
IKReal x54=((x52)+(((-1.00000000000000)*(x53))));
IKReal x55=((cj0)*(cj2));
IKReal x56=((cj1)*(sj0)*(sj2));
IKReal x57=((x55)+(x56));
IKReal x58=((cj2)*(x42));
IKReal x59=((cj3)*(sj1));
IKReal x60=((x59)+(x58));
IKReal x61=((cj0)*(x60));
IKReal x62=((sj0)*(sj2)*(sj3));
IKReal x63=((x61)+(x62));
IKReal x64=((cj1)*(cj3));
IKReal x65=((cj2)*(x40));
IKReal x66=((x64)+(((-1.00000000000000)*(x65))));
IKReal x67=((sj0)*(x60));
IKReal x68=((cj0)*(sj2)*(sj3));
IKReal x69=((x67)+(((-1.00000000000000)*(x68))));
new_r00=((((r20)*(x45)))+(((r00)*(x49)))+(((r10)*(((((-1.00000000000000)*(cj0)*(cj3)*(sj2)))+(x46))))));
new_r01=((((r11)*(x51)))+(((r01)*(x49)))+(((r21)*(x45))));
new_r02=((((r22)*(x45)))+(((r02)*(x49)))+(((r12)*(x51))));
new_r10=((((r10)*(x57)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((r00)*(x54))));
new_r11=((((r11)*(x57)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((r01)*(x54))));
new_r12=((((r02)*(x54)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)))+(((r12)*(x57))));
new_r20=((((r10)*(x69)))+(((r20)*(x66)))+(((r00)*(x63))));
new_r21=((((r11)*(x69)))+(((r01)*(x63)))+(((r21)*(x66))));
new_r22=((((r22)*(x66)))+(((r02)*(x63)))+(((r12)*(x69))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
cj5array[0]=new_r22;
if( cj5array[0] >= -1.0001 && cj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
    j5valid[1]=false;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r10)*(new_r12)*(sj5)))+(((new_r00)*(new_r02)*(sj5))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[7];
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x70=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x70));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x70))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
IKReal x71=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x71;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x71;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x72=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x72));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x72))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x73=((new_r10)*(new_r12)*(sj5));
IKReal x74=((new_r00)*(new_r02)*(sj5));
IKReal x75=((x74)+(x73));
j4array[0]=IKatan2(((-1.00000000000000)*(cj5)*(new_r12)*(new_r20)*(((IKabs(x75) != 0)?((IKReal)1/(x75)):(IKReal)1.0e30))), ((-1.00000000000000)*(cj5)*(new_r02)*(new_r20)*(((IKabs(x75) != 0)?((IKReal)1/(x75)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x76=((cj4)*(new_r12));
IKReal x77=((new_r02)*(sj4));
IKReal x78=((((-1.00000000000000)*(x77)))+(x76));
IKReal x79=((new_r12)*(sj4));
IKReal x80=((cj4)*(new_r02));
IKReal x81=((x79)+(x80));
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x78;
evalcond[5]=x78;
evalcond[6]=x81;
evalcond[7]=x81;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
IKReal x82=((cj4)*(new_r12));
IKReal x83=((new_r02)*(sj4));
IKReal x84=((x82)+(((-1.00000000000000)*(x83))));
IKReal x85=((new_r12)*(sj4));
IKReal x86=((cj4)*(new_r02));
IKReal x87=((x86)+(x85));
IKReal x88=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x88;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x84;
evalcond[5]=x84;
evalcond[6]=x87;
evalcond[7]=((-1.00000000000000)*(x87));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x88;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x89=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x89)), ((-1.00000000000000)*(new_r20)*(x89)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(cj5)*(new_r01)))+(((new_r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(new_r11)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x90=(new_r12)*(new_r12);
IKReal x91=(new_r02)*(new_r02);
IKReal x92=((x91)+(x90));
j4array[0]=IKatan2(((new_r12)*(sj5)*(((IKabs(x92) != 0)?((IKReal)1/(x92)):(IKReal)1.0e30))), ((new_r02)*(sj5)*(((IKabs(x92) != 0)?((IKReal)1/(x92)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x93=((cj4)*(new_r12));
IKReal x94=((new_r02)*(sj4));
IKReal x95=((x93)+(((-1.00000000000000)*(x94))));
IKReal x96=((new_r12)*(sj4));
IKReal x97=((cj4)*(new_r02));
IKReal x98=((x97)+(x96));
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x95;
evalcond[5]=x95;
evalcond[6]=x98;
evalcond[7]=x98;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
IKReal x99=((cj4)*(new_r12));
IKReal x100=((new_r02)*(sj4));
IKReal x101=((((-1.00000000000000)*(x100)))+(x99));
IKReal x102=((new_r12)*(sj4));
IKReal x103=((cj4)*(new_r02));
IKReal x104=((x102)+(x103));
IKReal x105=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x105;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x101;
evalcond[5]=x101;
evalcond[6]=x104;
evalcond[7]=((-1.00000000000000)*(x104));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x105;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x106=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x106)), ((-1.00000000000000)*(new_r20)*(x106)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(cj5)*(new_r01)))+(((new_r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(new_r11)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x107=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x107)), ((-1.00000000000000)*(new_r20)*(x107)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r11)*(new_r12)))+(((-1.00000000000000)*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r02)))+(((-1.00000000000000)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x108=((new_r10)*(new_r12));
IKReal x109=((new_r00)*(new_r02));
IKReal x110=((x108)+(x109));
j4array[0]=IKatan2(((cj5)*(cj6)*(new_r12)*(((IKabs(x110) != 0)?((IKReal)1/(x110)):(IKReal)1.0e30))), ((cj5)*(cj6)*(new_r02)*(((IKabs(x110) != 0)?((IKReal)1/(x110)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x111=((new_r11)*(new_r12));
IKReal x112=((new_r01)*(new_r02));
IKReal x113=((x112)+(x111));
j4array[0]=IKatan2(((-1.00000000000000)*(cj5)*(new_r12)*(sj6)*(((IKabs(x113) != 0)?((IKReal)1/(x113)):(IKReal)1.0e30))), ((-1.00000000000000)*(cj5)*(new_r02)*(sj6)*(((IKabs(x113) != 0)?((IKReal)1/(x113)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x114=(new_r12)*(new_r12);
IKReal x115=(new_r02)*(new_r02);
IKReal x116=((x115)+(x114));
j4array[0]=IKatan2(((new_r12)*(sj5)*(((IKabs(x116) != 0)?((IKReal)1/(x116)):(IKReal)1.0e30))), ((new_r02)*(sj5)*(((IKabs(x116) != 0)?((IKReal)1/(x116)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "f08ae2b350373ff2b9fb10f36690ef49"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
