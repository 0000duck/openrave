/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-11-02 19:10:45.489748
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
    x0=IKcos(j[0]);
    x1=IKcos(j[1]);
    x2=IKcos(j[2]);
    x3=IKcos(j[3]);
    x4=IKsin(j[4]);
    x5=IKsin(j[6]);
    x6=IKcos(j[4]);
    x7=IKcos(j[5]);
    x8=IKcos(j[6]);
    x9=IKsin(j[0]);
    x10=IKsin(j[2]);
    x11=IKsin(j[3]);
    x12=IKsin(j[1]);
    x13=IKsin(j[5]);
    eerot[0]=((((x0)*(x1)*(x2)*(x3)*(x4)*(x5)))+(((x2)*(x5)*(x6)*(x9)))+(((x0)*(x1)*(x2)*(x3)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x3)*(x8)))+(((x10)*(x3)*(x4)*(x5)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x13)*(x2)*(x8)))+(((-1.00000000000000)*(x2)*(x4)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x5)*(x6)))+(((x0)*(x1)*(x10)*(x4)*(x7)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x13)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x4)*(x5)))+(((x10)*(x3)*(x6)*(x7)*(x8)*(x9))));
    eerot[1]=((((-1.00000000000000)*(x0)*(x11)*(x12)*(x5)*(x6)*(x7)))+(((x10)*(x3)*(x5)*(x6)*(x7)*(x9)))+(((x0)*(x1)*(x2)*(x3)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x3)*(x5)))+(((x0)*(x1)*(x10)*(x4)*(x5)*(x7)))+(((x0)*(x11)*(x12)*(x4)*(x8)))+(((x0)*(x1)*(x10)*(x6)*(x8)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x13)*(x2)*(x5)))+(((-1.00000000000000)*(x2)*(x4)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x2)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x13)*(x5)*(x9)))+(((-1.00000000000000)*(x10)*(x3)*(x4)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x2)*(x3)*(x4)*(x8))));
    eerot[2]=((((x10)*(x13)*(x3)*(x6)*(x9)))+(((x0)*(x1)*(x11)*(x2)*(x7)))+(((x0)*(x12)*(x3)*(x7)))+(((-1.00000000000000)*(x13)*(x2)*(x4)*(x9)))+(((x10)*(x11)*(x7)*(x9)))+(((x0)*(x1)*(x10)*(x13)*(x4)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x13)*(x6)))+(((x0)*(x1)*(x13)*(x2)*(x3)*(x6))));
    eetrans[0]=((0.220000000000000)+(((0.300000000000000)*(x10)*(x11)*(x9)))+(((-0.0450000000000000)*(x10)*(x3)*(x9)))+(((0.220000000000000)*(x0)*(x1)*(x11)*(x2)*(x7)))+(((-0.220000000000000)*(x0)*(x11)*(x12)*(x13)*(x6)))+(((0.220000000000000)*(x10)*(x11)*(x7)*(x9)))+(((-0.220000000000000)*(x13)*(x2)*(x4)*(x9)))+(((0.300000000000000)*(x0)*(x1)*(x11)*(x2)))+(((0.0450000000000000)*(x10)*(x9)))+(((0.220000000000000)*(x0)*(x1)*(x10)*(x13)*(x4)))+(((-0.0450000000000000)*(x0)*(x1)*(x2)*(x3)))+(((0.220000000000000)*(x0)*(x1)*(x13)*(x2)*(x3)*(x6)))+(((0.0450000000000000)*(x0)*(x1)*(x2)))+(((0.220000000000000)*(x10)*(x13)*(x3)*(x6)*(x9)))+(((0.0450000000000000)*(x0)*(x11)*(x12)))+(((0.300000000000000)*(x0)*(x12)*(x3)))+(((0.550000000000000)*(x0)*(x12)))+(((0.220000000000000)*(x0)*(x12)*(x3)*(x7))));
    eerot[3]=((((-1.00000000000000)*(x0)*(x2)*(x5)*(x6)))+(((x0)*(x10)*(x11)*(x13)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x5)*(x6)*(x9)))+(((x1)*(x2)*(x3)*(x6)*(x7)*(x8)*(x9)))+(((x0)*(x2)*(x4)*(x7)*(x8)))+(((-1.00000000000000)*(x12)*(x13)*(x3)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x6)*(x7)*(x8)))+(((x1)*(x10)*(x4)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x11)*(x12)*(x6)*(x7)*(x8)*(x9)))+(((x1)*(x2)*(x3)*(x4)*(x5)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x13)*(x2)*(x8)*(x9)))+(((-1.00000000000000)*(x11)*(x12)*(x4)*(x5)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x4)*(x5))));
    eerot[4]=((((x0)*(x10)*(x3)*(x4)*(x8)))+(((-1.00000000000000)*(x1)*(x11)*(x13)*(x2)*(x5)*(x9)))+(((x11)*(x12)*(x4)*(x8)*(x9)))+(((x0)*(x10)*(x11)*(x13)*(x5)))+(((x1)*(x10)*(x4)*(x5)*(x7)*(x9)))+(((x1)*(x2)*(x3)*(x5)*(x6)*(x7)*(x9)))+(((x0)*(x2)*(x6)*(x8)))+(((-1.00000000000000)*(x12)*(x13)*(x3)*(x5)*(x9)))+(((-1.00000000000000)*(x1)*(x2)*(x3)*(x4)*(x8)*(x9)))+(((x1)*(x10)*(x6)*(x8)*(x9)))+(((x0)*(x2)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x11)*(x12)*(x5)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x5)*(x6)*(x7))));
    eerot[5]=((((-1.00000000000000)*(x11)*(x12)*(x13)*(x6)*(x9)))+(((x1)*(x13)*(x2)*(x3)*(x6)*(x9)))+(((x1)*(x11)*(x2)*(x7)*(x9)))+(((x0)*(x13)*(x2)*(x4)))+(((-1.00000000000000)*(x0)*(x10)*(x13)*(x3)*(x6)))+(((x12)*(x3)*(x7)*(x9)))+(((x1)*(x10)*(x13)*(x4)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x7))));
    eetrans[1]=((0.140000000000000)+(((0.0450000000000000)*(x11)*(x12)*(x9)))+(((0.220000000000000)*(x1)*(x11)*(x2)*(x7)*(x9)))+(((-0.220000000000000)*(x11)*(x12)*(x13)*(x6)*(x9)))+(((-0.220000000000000)*(x0)*(x10)*(x11)*(x7)))+(((-0.0450000000000000)*(x1)*(x2)*(x3)*(x9)))+(((0.300000000000000)*(x12)*(x3)*(x9)))+(((0.300000000000000)*(x1)*(x11)*(x2)*(x9)))+(((-0.300000000000000)*(x0)*(x10)*(x11)))+(((0.220000000000000)*(x1)*(x13)*(x2)*(x3)*(x6)*(x9)))+(((0.220000000000000)*(x12)*(x3)*(x7)*(x9)))+(((0.220000000000000)*(x1)*(x10)*(x13)*(x4)*(x9)))+(((0.550000000000000)*(x12)*(x9)))+(((0.0450000000000000)*(x0)*(x10)*(x3)))+(((-0.220000000000000)*(x0)*(x10)*(x13)*(x3)*(x6)))+(((0.220000000000000)*(x0)*(x13)*(x2)*(x4)))+(((0.0450000000000000)*(x1)*(x2)*(x9)))+(((-0.0450000000000000)*(x0)*(x10))));
    eerot[6]=((((-1.00000000000000)*(x12)*(x2)*(x3)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x10)*(x12)*(x4)*(x7)*(x8)))+(((-1.00000000000000)*(x1)*(x13)*(x3)*(x8)))+(((-1.00000000000000)*(x1)*(x11)*(x4)*(x5)))+(((-1.00000000000000)*(x12)*(x2)*(x3)*(x4)*(x5)))+(((-1.00000000000000)*(x1)*(x11)*(x6)*(x7)*(x8)))+(((x11)*(x12)*(x13)*(x2)*(x8)))+(((x10)*(x12)*(x5)*(x6))));
    eerot[7]=((((-1.00000000000000)*(x10)*(x12)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x1)*(x13)*(x3)*(x5)))+(((-1.00000000000000)*(x10)*(x12)*(x6)*(x8)))+(((x12)*(x2)*(x3)*(x4)*(x8)))+(((x11)*(x12)*(x13)*(x2)*(x5)))+(((-1.00000000000000)*(x1)*(x11)*(x5)*(x6)*(x7)))+(((x1)*(x11)*(x4)*(x8)))+(((-1.00000000000000)*(x12)*(x2)*(x3)*(x5)*(x6)*(x7))));
    eerot[8]=((((-1.00000000000000)*(x1)*(x11)*(x13)*(x6)))+(((x1)*(x3)*(x7)))+(((-1.00000000000000)*(x11)*(x12)*(x2)*(x7)))+(((-1.00000000000000)*(x10)*(x12)*(x13)*(x4)))+(((-1.00000000000000)*(x12)*(x13)*(x2)*(x3)*(x6))));
    eetrans[2]=((0.346000000000000)+(((-0.220000000000000)*(x1)*(x11)*(x13)*(x6)))+(((-0.220000000000000)*(x10)*(x12)*(x13)*(x4)))+(((0.300000000000000)*(x1)*(x3)))+(((0.550000000000000)*(x1)))+(((-0.220000000000000)*(x12)*(x13)*(x2)*(x3)*(x6)))+(((-0.300000000000000)*(x11)*(x12)*(x2)))+(((0.0450000000000000)*(x12)*(x2)*(x3)))+(((0.220000000000000)*(x1)*(x3)*(x7)))+(((-0.0450000000000000)*(x12)*(x2)))+(((-0.220000000000000)*(x11)*(x12)*(x2)*(x7)))+(((0.0450000000000000)*(x1)*(x11))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
    r00 = eerot[0*3+0];
    r01 = eerot[0*3+1];
    r02 = eerot[0*3+2];
    r10 = eerot[1*3+0];
    r11 = eerot[1*3+1];
    r12 = eerot[1*3+2];
    r20 = eerot[2*3+0];
    r21 = eerot[2*3+1];
    r22 = eerot[2*3+2];
    px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
    
    new_r00=r00;
    new_r01=((-1.00000000000000)*(r02));
    new_r02=r01;
    new_px=((-0.220000000000000)+(px)+(((-0.220000000000000)*(r02))));
    new_r10=r10;
    new_r11=((-1.00000000000000)*(r12));
    new_r12=r11;
    new_py=((-0.140000000000000)+(py)+(((-0.220000000000000)*(r12))));
    new_r20=r20;
    new_r21=((-1.00000000000000)*(r22));
    new_r22=r21;
    new_pz=((-0.346000000000000)+(pz)+(((-0.220000000000000)*(r22))));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x0=(pz)*(pz);
        IKReal x1=((2.98679637348110)*(x0));
        IKReal x2=(py)*(py);
        IKReal x3=((2.98679637348110)*(x2));
        IKReal x4=(px)*(px);
        IKReal x5=((2.98679637348110)*(x4));
        IKReal x6=((-1.18441410190393)+(x3)+(x1)+(x5));
        if( (x6) < -1.0001 || (x6) > 1.0001 )
            continue;
        IKReal x7=IKasin(x6);
        j3array[0]=((-1.34027003705633)+(x7));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.80132261653346)+(((-1.00000000000000)*(x7))));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3)
        {
        if( !j3valid[ij3] ) { continue; }
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x8=x4;
        IKReal x9=x2;
        IKReal x10=((x9)+(x8));
        if( (x10) < (IKReal)-0.00001 )
            continue;
        IKReal x11=IKsqrt(x10);
        IKReal x12=IKabs(x11);
        IKReal x13=((IKabs(x12) != 0)?((IKReal)1/(x12)):(IKReal)1.0e30);
        IKReal x14=((0.0450000000000000)*(cj3)*(sj2));
        IKReal x15=((0.0450000000000000)*(sj2));
        IKReal x16=((0.300000000000000)*(sj2)*(sj3));
        IKReal x17=((x15)+(x16));
        IKReal x18=((((-1.00000000000000)*(x17)))+(x14));
        IKReal x19=((x13)*(x18));
        if( (x19) < -1.0001 || (x19) > 1.0001 )
            continue;
        IKReal x20=IKasin(x19);
        IKReal x21=((-1.00000000000000)*(py));
        IKReal x22=IKatan2(x21, px);
        j0array[0]=((((-1.00000000000000)*(x20)))+(((-1.00000000000000)*(x22))));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x22)))+(x20));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0)
        {
        if( !j0valid[ij0] ) { continue; }
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
            IKReal j1eval[1];
            j1eval[0]=(((((py)*(py))*((sj0)*(sj0))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
            if( IKabs(j1eval[0]) < 0.000001  )
            {
                {
                    if( 1 )
                    {
                    {
                        IKReal j1eval[1];
                        j1eval[0]=((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0)))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                            IKReal evalcond[4];
                                IKReal x23=((px)*(sj0));
                                IKReal x24=((cj0)*(py));
                                IKReal x25=((((-1.00000000000000)*(x24)))+(x23));
                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.325950000000000)*(cj3))));
                                evalcond[2]=x25;
                                evalcond[3]=x25;
                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                {
                                {
                                    IKReal j1eval[1];
                                    j1eval[0]=(((((py)*(py))*((sj0)*(sj0))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
                                    if( IKabs(j1eval[0]) < 0.000001  )
                                    {
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[1];
                                                j1eval[0]=((((-0.0450000000000000)*(pz)))+(((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.300000000000000)*(pz)*(sj3)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3)))+(((0.0450000000000000)*(cj3)*(pz))));
                                                if( IKabs(j1eval[0]) < 0.000001  )
                                                {
                                                    {
                                                        if( 1 )
                                                        {
                                                        continue;
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    IKReal x26=((0.0450000000000000)*(sj3));
                                                    IKReal x27=((0.300000000000000)*(cj3));
                                                    IKReal x28=((0.550000000000000)+(x26)+(x27));
                                                    IKReal x29=((0.0450000000000000)*(cj3)*(pz));
                                                    IKReal x30=((0.550000000000000)*(py)*(sj0));
                                                    IKReal x31=((1.00000000000000)*(cj0)*(px)*(x26));
                                                    IKReal x32=((0.300000000000000)*(pz)*(sj3));
                                                    IKReal x33=((1.00000000000000)*(py)*(sj0)*(x26));
                                                    IKReal x34=((0.550000000000000)*(cj0)*(px));
                                                    IKReal x35=((0.0450000000000000)*(pz));
                                                    IKReal x36=((py)*(sj0)*(x27));
                                                    IKReal x37=((cj0)*(px)*(x27));
                                                    IKReal x38=((x33)+(x32)+(x31)+(x30)+(x37)+(x36)+(x35)+(x34));
                                                    IKReal x39=((((-1.00000000000000)*(x38)))+(x29));
                                                    IKReal x40=((IKabs(x39) != 0)?((IKReal)1/(x39)):(IKReal)1.0e30);
                                                    j1array[0]=IKatan2(((x40)*(((((-1.00000000000000)*((x28)*(x28))))+((pz)*(pz))))), ((x40)*(((((-1.00000000000000)*(x28)*(((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((0.300000000000000)*(sj3)))))))+(((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        IKReal x82=x2;
                                        IKReal x83=(sj0)*(sj0);
                                        IKReal x84=((x82)*(x83));
                                        IKReal x85=((2.00000000000000)*(cj0)*(px)*(py)*(sj0));
                                        IKReal x86=x0;
                                        IKReal x87=(cj0)*(cj0);
                                        IKReal x88=x4;
                                        IKReal x89=((x87)*(x88));
                                        IKReal x90=((x89)+(x86)+(x84)+(x85));
                                        IKReal x91=((IKabs(x90) != 0)?((IKReal)1/(x90)):(IKReal)1.0e30);
                                        IKReal x92=((0.0450000000000000)*(sj3));
                                        IKReal x93=((0.300000000000000)*(cj3));
                                        IKReal x94=((0.550000000000000)+(x93)+(x92));
                                        IKReal x95=((cj0)*(px));
                                        IKReal x96=((py)*(sj0));
                                        IKReal x97=((x95)+(x96));
                                        IKReal x98=((0.300000000000000)*(sj3));
                                        IKReal x99=((0.0450000000000000)+(x98));
                                        IKReal x100=((0.0450000000000000)*(cj3));
                                        IKReal x101=((((-1.00000000000000)*(x100)))+(x99));
                                        j1array[0]=IKatan2(((-1.00000000000000)*(x91)*(((((-1.00000000000000)*(x94)*(x97)))+(((pz)*(x101)))))), ((x91)*(((((x101)*(x97)))+(((pz)*(x94)))))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                                IKReal x102=((cj0)*(py));
                                IKReal x103=((px)*(sj0));
                                evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.325950000000000)*(cj3))));
                                evalcond[2]=((((-1.00000000000000)*(x102)))+(x103));
                                evalcond[3]=((((-1.00000000000000)*(x103)))+(x102));
                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                {
                                {
                                    IKReal j1eval[1];
                                    j1eval[0]=(((((py)*(py))*((sj0)*(sj0))))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
                                    if( IKabs(j1eval[0]) < 0.000001  )
                                    {
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[1];
                                                j1eval[0]=((((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((0.300000000000000)*(pz)*(sj3)))+(((-0.0450000000000000)*(cj3)*(pz)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((0.0450000000000000)*(pz)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3))));
                                                if( IKabs(j1eval[0]) < 0.000001  )
                                                {
                                                    {
                                                        if( 1 )
                                                        {
                                                        continue;
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    IKReal x104=((0.0450000000000000)*(sj3));
                                                    IKReal x105=((0.300000000000000)*(cj3));
                                                    IKReal x106=((0.550000000000000)+(x104)+(x105));
                                                    IKReal x107=((0.300000000000000)*(pz)*(sj3));
                                                    IKReal x108=((0.0450000000000000)*(pz));
                                                    IKReal x109=((x108)+(x107));
                                                    IKReal x110=((0.550000000000000)*(py)*(sj0));
                                                    IKReal x111=((1.00000000000000)*(cj0)*(px)*(x104));
                                                    IKReal x112=((1.00000000000000)*(py)*(sj0)*(x104));
                                                    IKReal x113=((0.550000000000000)*(cj0)*(px));
                                                    IKReal x114=((1.00000000000000)*(cj3)*(x108));
                                                    IKReal x115=((py)*(sj0)*(x105));
                                                    IKReal x116=((cj0)*(px)*(x105));
                                                    IKReal x117=((x113)+(x112)+(x111)+(x110)+(x116)+(x115)+(x114));
                                                    IKReal x118=((((-1.00000000000000)*(x117)))+(x109));
                                                    IKReal x119=((IKabs(x118) != 0)?((IKReal)1/(x118)):(IKReal)1.0e30);
                                                    j1array[0]=IKatan2(((x119)*(((((-1.00000000000000)*((x106)*(x106))))+((pz)*(pz))))), ((x119)*(((((x106)*(((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((0.300000000000000)*(sj3)))))))+(((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        IKReal x120=x2;
                                        IKReal x121=(sj0)*(sj0);
                                        IKReal x122=((x120)*(x121));
                                        IKReal x123=((2.00000000000000)*(cj0)*(px)*(py)*(sj0));
                                        IKReal x124=x0;
                                        IKReal x125=(cj0)*(cj0);
                                        IKReal x126=x4;
                                        IKReal x127=((x125)*(x126));
                                        IKReal x128=((x127)+(x124)+(x122)+(x123));
                                        IKReal x129=((IKabs(x128) != 0)?((IKReal)1/(x128)):(IKReal)1.0e30);
                                        IKReal x130=((cj0)*(px));
                                        IKReal x131=((py)*(sj0));
                                        IKReal x132=((x131)+(x130));
                                        IKReal x133=((-1.00000000000000)*(x132));
                                        IKReal x134=((0.300000000000000)*(sj3));
                                        IKReal x135=((0.0450000000000000)+(x134));
                                        IKReal x136=((0.0450000000000000)*(cj3));
                                        IKReal x137=((x135)+(((-1.00000000000000)*(x136))));
                                        IKReal x138=((0.0450000000000000)*(sj3));
                                        IKReal x139=((0.300000000000000)*(cj3));
                                        IKReal x140=((0.550000000000000)+(x139)+(x138));
                                        j1array[0]=IKatan2(((x129)*(((((-1.00000000000000)*(x133)*(x140)))+(((pz)*(x137)))))), ((x129)*(((((pz)*(x140)))+(((x133)*(x137)))))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                                if( 1 )
                                {
                                continue;
                            
                            } else
                            {
                            }
                            }
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x141=x0;
                            IKReal x142=((sj2)*(x141));
                            IKReal x143=(cj0)*(cj0);
                            IKReal x144=x4;
                            IKReal x145=((sj2)*(x143)*(x144));
                            IKReal x146=((2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2));
                            IKReal x147=x2;
                            IKReal x148=(sj0)*(sj0);
                            IKReal x149=((sj2)*(x147)*(x148));
                            IKReal x150=((x142)+(x145)+(x146)+(x149));
                            IKReal x151=((IKabs(x150) != 0)?((IKReal)1/(x150)):(IKReal)1.0e30);
                            IKReal x152=((cj2)*(px)*(sj0));
                            IKReal x153=((cj0)*(cj2)*(py));
                            IKReal x154=((((-1.00000000000000)*(x153)))+(x152));
                            IKReal x155=((0.300000000000000)*(cj3));
                            IKReal x156=((0.0450000000000000)*(sj3));
                            IKReal x157=((0.550000000000000)+(x156)+(x155));
                            j1array[0]=IKatan2(((-1.00000000000000)*(x151)*(((((x157)*(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2)))))))+(((pz)*(x154)))))), ((x151)*(((((pz)*(sj2)*(x157)))+(((x154)*(((((cj0)*(px)))+(((py)*(sj0)))))))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            for(int ij1 = 0; ij1 < 1; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                }
                }
            
            } else
            {
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x158=x2;
                IKReal x159=(sj0)*(sj0);
                IKReal x160=((x158)*(x159));
                IKReal x161=((2.00000000000000)*(cj0)*(px)*(py)*(sj0));
                IKReal x162=x0;
                IKReal x163=(cj0)*(cj0);
                IKReal x164=x4;
                IKReal x165=((x163)*(x164));
                IKReal x166=((x162)+(x160)+(x161)+(x165));
                IKReal x167=((IKabs(x166) != 0)?((IKReal)1/(x166)):(IKReal)1.0e30);
                IKReal x168=((0.300000000000000)*(cj3));
                IKReal x169=((0.0450000000000000)*(sj3));
                IKReal x170=((0.550000000000000)+(x168)+(x169));
                IKReal x171=((0.0450000000000000)*(cj2)*(cj3));
                IKReal x172=((cj0)*(px));
                IKReal x173=((py)*(sj0));
                IKReal x174=((x173)+(x172));
                IKReal x175=((-1.00000000000000)*(x174));
                j1array[0]=IKatan2(((-1.00000000000000)*(x167)*(((((pz)*(((((0.0450000000000000)*(cj2)))+(((-1.00000000000000)*(x171)))+(((0.300000000000000)*(cj2)*(sj3)))))))+(((x170)*(x175)))))), ((x167)*(((((pz)*(x170)))+(((x175)*(((x171)+(((-0.0450000000000000)*(cj2)))+(((-0.300000000000000)*(cj2)*(sj3)))))))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                for(int ij1 = 0; ij1 < 1; ++ij1)
                {
                if( !j1valid[ij1] ) { continue; }
                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                
                rotationfunction0(vsolutions);
                }
                }
            
            }
        
        }
        }
        }
        }
        }
    
    } else
    {
    }
    }
}
return vsolutions.size()>0;
}
    inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        IKReal x41=((cj1)*(sj3));
        IKReal x42=((cj2)*(cj3)*(sj1));
        IKReal x43=((x42)+(x41));
        IKReal x44=((-1.00000000000000)*(x43));
        IKReal x45=((cj1)*(cj2)*(cj3)*(sj0));
        IKReal x46=((cj0)*(cj3)*(sj2));
        IKReal x47=((sj0)*(sj1)*(sj3));
        IKReal x48=((x46)+(x47));
        IKReal x49=((((-1.00000000000000)*(x48)))+(x45));
        IKReal x50=((cj0)*(cj1)*(cj2)*(cj3));
        IKReal x51=((cj3)*(sj0)*(sj2));
        IKReal x52=((x51)+(x50));
        IKReal x53=((cj0)*(sj1)*(sj3));
        IKReal x54=((x52)+(((-1.00000000000000)*(x53))));
        IKReal x55=((cj0)*(sj2)*(sj3));
        IKReal x56=((cj2)*(sj0)*(x41));
        IKReal x57=((cj3)*(sj0)*(sj1));
        IKReal x58=((x57)+(x56));
        IKReal x59=((x55)+(((-1.00000000000000)*(x58))));
        IKReal x60=((cj0)*(cj3)*(sj1));
        IKReal x61=((cj0)*(cj2)*(x41));
        IKReal x62=((sj0)*(sj2)*(sj3));
        IKReal x63=((x60)+(x61)+(x62));
        IKReal x64=((-1.00000000000000)*(x63));
        IKReal x65=((cj2)*(sj1)*(sj3));
        IKReal x66=((cj1)*(cj3));
        IKReal x67=((x65)+(((-1.00000000000000)*(x66))));
        IKReal x68=((cj0)*(cj1)*(sj2));
        IKReal x69=((cj2)*(sj0));
        IKReal x70=((x68)+(((-1.00000000000000)*(x69))));
        IKReal x71=((cj0)*(cj2));
        IKReal x72=((cj1)*(sj0)*(sj2));
        IKReal x73=((x72)+(x71));
        new_r00=((((r20)*(x44)))+(((r10)*(x49)))+(((r00)*(x54))));
        new_r01=((((r01)*(x54)))+(((r11)*(x49)))+(((r21)*(x44))));
        new_r02=((((r02)*(x54)))+(((r22)*(x44)))+(((r12)*(x49))));
        new_r10=((((r10)*(x59)))+(((r20)*(x67)))+(((r00)*(x64))));
        new_r11=((((r11)*(x59)))+(((r01)*(x64)))+(((r21)*(x67))));
        new_r12=((((r22)*(x67)))+(((r02)*(x64)))+(((r12)*(x59))));
        new_r20=((((r10)*(x73)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((r00)*(x70))));
        new_r21=((((r11)*(x73)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((r01)*(x70))));
        new_r22=((((r02)*(x70)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)))+(((r12)*(x73))));
        {
        IKReal j5eval;
        j5eval=new_r11;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r02)), new_r00))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
        
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(new_r20, new_r22)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
        
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(new_r21)), ((-1.00000000000000)*(new_r01)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond[1];
                evalcond[0]=IKcos(j4);
                if( IKabs(evalcond[0]) < 0.000010  )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))), new_r11);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x74=IKsin(j4);
                IKReal x75=((IKabs(x74) != 0)?((IKReal)1/(x74)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((new_r00)*(x75)), ((-1.00000000000000)*(new_r02)*(x75)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
            
            } else
            {
                if( 1 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))), new_r11);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal evalcond[1];
                    evalcond[0]=IKsin(j5);
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x76=IKcos(j5);
                    IKReal x77=((IKabs(x76) != 0)?((IKReal)1/(x76)):(IKReal)1.0e30);
                    IKReal x78=IKcos(j4);
                    IKReal x79=IKsin(j4);
                    j6array[0]=IKatan2(((((new_r02)*(x77)*(x78)))+(((new_r22)*(x77)*(x79)))), ((((-1.00000000000000)*(new_r02)*(x79)))+(((new_r22)*(x78)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x80=IKsin(j5);
                    IKReal x81=((IKabs(x80) != 0)?((IKReal)1/(x80)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((new_r12)*(x81)), ((new_r10)*(x81)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                }
                }
                }
                }
                }
            
            } else
            {
            }
            }
            }
            }
            }
        
        }
        }
    }};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "b4ff7e5e04780df16a6bda565e714741"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
