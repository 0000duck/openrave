/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-07-19 11:11:48.698741
/// To compile with gcc use: gcc -lstdc++ 
/// To compile without any main function use: gcc -lstdc++ -DIKFAST_NO_MAIN
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
    x0=IKcos(j[3]);
    x1=IKsin(j[4]);
    x2=IKsin(j[6]);
    x3=IKcos(j[0]);
    x4=IKcos(j[1]);
    x5=IKcos(j[2]);
    x6=IKcos(j[4]);
    x7=IKsin(j[0]);
    x8=IKcos(j[5]);
    x9=IKcos(j[6]);
    x10=IKsin(j[2]);
    x11=IKsin(j[3]);
    x12=IKsin(j[5]);
    x13=IKsin(j[1]);
    eerot[0]=((((x0)*(x1)*(x2)*(x3)*(x4)*(x5)))+(((x0)*(x10)*(x6)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x2)*(x3)*(x4)*(x6)))+(((-1.00000000000000)*(x11)*(x12)*(x3)*(x4)*(x5)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x13)*(x2)*(x3)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x3)*(x9)))+(((x1)*(x10)*(x3)*(x4)*(x8)*(x9)))+(((x2)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x1)*(x5)*(x7)*(x8)*(x9)))+(((x0)*(x3)*(x4)*(x5)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x7)*(x9)))+(((x0)*(x1)*(x10)*(x2)*(x7)))+(((-1.00000000000000)*(x11)*(x13)*(x3)*(x6)*(x8)*(x9))));
    eerot[1]=((((x1)*(x10)*(x2)*(x3)*(x4)*(x8)))+(((-1.00000000000000)*(x11)*(x12)*(x2)*(x3)*(x4)*(x5)))+(((-1.00000000000000)*(x5)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x3)*(x4)*(x5)*(x9)))+(((x0)*(x2)*(x3)*(x4)*(x5)*(x6)*(x8)))+(((x1)*(x11)*(x13)*(x3)*(x9)))+(((x10)*(x3)*(x4)*(x6)*(x9)))+(((x0)*(x10)*(x2)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x11)*(x13)*(x2)*(x3)*(x6)*(x8)))+(((-1.00000000000000)*(x1)*(x2)*(x5)*(x7)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x2)*(x7)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x2)*(x3))));
    eerot[2]=((((x0)*(x10)*(x12)*(x6)*(x7)))+(((-1.00000000000000)*(x11)*(x12)*(x13)*(x3)*(x6)))+(((x11)*(x3)*(x4)*(x5)*(x8)))+(((x1)*(x10)*(x12)*(x3)*(x4)))+(((x0)*(x13)*(x3)*(x8)))+(((x0)*(x12)*(x3)*(x4)*(x5)*(x6)))+(((-1.00000000000000)*(x1)*(x12)*(x5)*(x7)))+(((x10)*(x11)*(x7)*(x8))));
    eetrans[0]=((0.220000000000000)+(((0.0450000000000728)*(x3)*(x4)*(x5)))+(((0.0450000000000728)*(x11)*(x13)*(x3)))+(((0.299999999999272)*(x10)*(x11)*(x7)))+(((0.299999999999272)*(x11)*(x3)*(x4)*(x5)))+(((0.550000000002910)*(x13)*(x3)))+(((-0.0450000000000728)*(x0)*(x10)*(x7)))+(((-0.0450000000000728)*(x0)*(x3)*(x4)*(x5)))+(((0.0450000000000728)*(x10)*(x7)))+(((0.299999999999272)*(x0)*(x13)*(x3))));
    eerot[3]=((((-1.00000000000000)*(x11)*(x13)*(x6)*(x7)*(x8)*(x9)))+(((x0)*(x4)*(x5)*(x6)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x13)*(x2)*(x7)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x7)*(x9)))+(((-1.00000000000000)*(x11)*(x12)*(x4)*(x5)*(x7)*(x9)))+(((x1)*(x10)*(x4)*(x7)*(x8)*(x9)))+(((x1)*(x3)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x2)*(x3)*(x5)*(x6)))+(((x0)*(x1)*(x2)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x2)*(x3)))+(((-1.00000000000000)*(x10)*(x2)*(x4)*(x6)*(x7)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x6)*(x8)*(x9)))+(((x10)*(x11)*(x12)*(x3)*(x9))));
    eerot[4]=((((x1)*(x2)*(x3)*(x5)*(x8)))+(((x0)*(x1)*(x10)*(x3)*(x9)))+(((x3)*(x5)*(x6)*(x9)))+(((x10)*(x4)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x4)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x2)*(x3)*(x6)*(x8)))+(((x10)*(x11)*(x12)*(x2)*(x3)))+(((x0)*(x2)*(x4)*(x5)*(x6)*(x7)*(x8)))+(((x1)*(x11)*(x13)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x2)*(x7)))+(((x1)*(x10)*(x2)*(x4)*(x7)*(x8)))+(((-1.00000000000000)*(x11)*(x12)*(x2)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x11)*(x13)*(x2)*(x6)*(x7)*(x8))));
    eerot[5]=((((-1.00000000000000)*(x10)*(x11)*(x3)*(x8)))+(((x0)*(x13)*(x7)*(x8)))+(((x11)*(x4)*(x5)*(x7)*(x8)))+(((x1)*(x10)*(x12)*(x4)*(x7)))+(((-1.00000000000000)*(x0)*(x10)*(x12)*(x3)*(x6)))+(((x0)*(x12)*(x4)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x11)*(x12)*(x13)*(x6)*(x7)))+(((x1)*(x12)*(x3)*(x5))));
    eetrans[1]=((0.140000000000000)+(((0.550000000002910)*(x13)*(x7)))+(((-0.299999999999272)*(x10)*(x11)*(x3)))+(((-0.0450000000000728)*(x0)*(x4)*(x5)*(x7)))+(((0.299999999999272)*(x11)*(x4)*(x5)*(x7)))+(((0.0450000000000728)*(x0)*(x10)*(x3)))+(((-0.0450000000000728)*(x10)*(x3)))+(((0.0450000000000728)*(x4)*(x5)*(x7)))+(((0.299999999999272)*(x0)*(x13)*(x7)))+(((0.0450000000000728)*(x11)*(x13)*(x7))));
    eerot[6]=((((-1.00000000000000)*(x1)*(x11)*(x2)*(x4)))+(((-1.00000000000000)*(x0)*(x13)*(x5)*(x6)*(x8)*(x9)))+(((x10)*(x13)*(x2)*(x6)))+(((-1.00000000000000)*(x0)*(x1)*(x13)*(x2)*(x5)))+(((-1.00000000000000)*(x1)*(x10)*(x13)*(x8)*(x9)))+(((x11)*(x12)*(x13)*(x5)*(x9)))+(((-1.00000000000000)*(x11)*(x4)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x12)*(x4)*(x9))));
    eerot[7]=((((-1.00000000000000)*(x11)*(x2)*(x4)*(x6)*(x8)))+(((x1)*(x11)*(x4)*(x9)))+(((x0)*(x1)*(x13)*(x5)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x13)*(x2)*(x8)))+(((-1.00000000000000)*(x0)*(x12)*(x2)*(x4)))+(((-1.00000000000000)*(x0)*(x13)*(x2)*(x5)*(x6)*(x8)))+(((-1.00000000000000)*(x10)*(x13)*(x6)*(x9)))+(((x11)*(x12)*(x13)*(x2)*(x5))));
    eerot[8]=((((-1.00000000000000)*(x0)*(x12)*(x13)*(x5)*(x6)))+(((-1.00000000000000)*(x11)*(x13)*(x5)*(x8)))+(((-1.00000000000000)*(x11)*(x12)*(x4)*(x6)))+(((-1.00000000000000)*(x1)*(x10)*(x12)*(x13)))+(((x0)*(x4)*(x8))));
    eetrans[2]=((0.346000000000000)+(((-0.299999999999272)*(x11)*(x13)*(x5)))+(((0.299999999999272)*(x0)*(x4)))+(((0.0450000000000728)*(x0)*(x13)*(x5)))+(((-0.0450000000000728)*(x13)*(x5)))+(((0.0450000000000728)*(x11)*(x4)))+(((0.550000000002910)*(x4))));
    }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j0, cj0, sj0,
    j1, cj1, sj1,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    j6, cj6, sj6,
    j2=pfree[0], cj2=cos(pfree[0]), sj2=sin(pfree[0]),
    new_r00, r00 = eerot[0*3+0],
    new_r01, r01 = eerot[0*3+1],
    new_r02, r02 = eerot[0*3+2],
    new_r10, r10 = eerot[1*3+0],
    new_r11, r11 = eerot[1*3+1],
    new_r12, r12 = eerot[1*3+2],
    new_r20, r20 = eerot[2*3+0],
    new_r21, r21 = eerot[2*3+1],
    new_r22, r22 = eerot[2*3+2],
    new_px, new_py, new_pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    new_r00=r00;
    new_r01=((-1.00000000000000)*(r02));
    new_r02=r01;
    new_px=((-0.220000000000000)+(px));
    new_r10=r10;
    new_r11=((-1.00000000000000)*(r12));
    new_r12=r11;
    new_py=((-0.140000000000000)+(py));
    new_r20=r20;
    new_r21=((-1.00000000000000)*(r22));
    new_r22=r21;
    new_pz=((-0.346000000000000)+(pz));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
    IKReal evalcond;
        evalcond=j2;
        if( IKabs(evalcond) < 0.00001 )
        {
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x0=((-1.00000000000000)*(py));
        IKReal x1=IKatan2(x0, px);
        j0array[0]=((-1.00000000000000)*(x1));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x1))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0)
        {
        if( !j0valid[ij0] ) { continue; }
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x2=(pz)*(pz);
        IKReal x3=((2.98679637344321)*(x2));
        IKReal x4=(py)*(py);
        IKReal x5=((2.98679637344321)*(x4));
        IKReal x6=(px)*(px);
        IKReal x7=((2.98679637344321)*(x6));
        IKReal x8=((x3)+(x7)+(x5));
        IKReal x9=((1.18441410191008)+(((-1.00000000000000)*(x8))));
        if( (x9) < -1.0001 || (x9) > 1.0001 )
            continue;
        IKReal x10=IKasin(x9);
        j3array[0]=((-1.34027003705316)+(((-1.00000000000000)*(x10))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.80132261653663)+(x10));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3)
        {
        if( !j3valid[ij3] ) { continue; }
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal evalcond[11]; int numsolutionsj1 = 0;
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
            {
            evalcond[0]=((((-1.00000000000000)*((((((py)*(sj0)))+(((cj0)*(px)))))*(((((py)*(sj0)))+(((cj0)*(px))))))))+(((-1.00000000000000)*((pz)*(pz)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x11=((py)*(sj0));
                IKReal x12=((cj0)*(px));
                IKReal x13=((x11)+(x12));
                IKReal x14=((-1.00000000000000)*(x13));
                IKReal x15=((0.299999999999272)*(sj3));
                IKReal x16=((0.0450000000000728)+(x15));
                IKReal x17=((0.0450000000000728)*(cj3));
                IKReal x18=((x16)+(((-1.00000000000000)*(x17))));
                IKReal x19=((6.66666666668607)*(x17));
                IKReal x20=((0.150000000001455)*(x15));
                IKReal x21=((0.550000000002910)+(x20)+(x19));
                IKReal x22=(x14)*(x14);
                IKReal x23=x2;
                IKReal x24=((x22)+(x23));
                IKReal x25=((-1.00000000000000)*(x24));
                IKReal x26=((IKabs(x25) != 0)?((IKReal)1/(x25)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x26)*(((((pz)*(x18)))+(((x14)*(x21)))))), ((x26)*(((((x14)*(x18)))+(((-1.00000000000000)*(pz)*(x21)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))*(((0.0450000000000728)+(((0.299999999999272)*(sj3)))+(((-0.0450000000000728)*(cj3)))))))+(((pz)*(((0.550000000002910)+(((0.300000000002910)*(cj3)))+(((0.0450000000005275)*(sj3))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x27=((0.299999999999272)*(sj3));
                IKReal x28=((0.0450000000000728)+(x27));
                IKReal x29=((0.0450000000000728)*(cj3));
                IKReal x30=((x28)+(((-1.00000000000000)*(x29))));
                IKReal x31=((py)*(sj0));
                IKReal x32=((cj0)*(px));
                IKReal x33=((x32)+(x31));
                IKReal x34=((-1.00000000000000)*(x33));
                IKReal x35=((x30)*(x34));
                IKReal x36=((6.66666666668607)*(x29));
                IKReal x37=((0.150000000001455)*(x27));
                IKReal x38=((0.550000000002910)+(x37)+(x36));
                IKReal x39=((pz)*(x38));
                IKReal x40=((x39)+(x35));
                IKReal x41=((IKabs(x40) != 0)?((IKReal)1/(x40)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x41)*(((((-1.00000000000000)*(x30)*(x38)))+(((-1.00000000000000)*(pz)*(x34)))))), ((x41)*((((pz)*(pz))+(((-1.00000000000000)*((x30)*(x30))))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((-1.00000000000000)*(((((py)*(sj0)))+(((cj0)*(px)))))*(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3)))))))+(((-1.00000000000000)*(pz)*(((0.0450000000000728)+(((0.300000000002910)*(sj3)))+(((-0.0450000000005275)*(cj3))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x42=((0.299999999999272)*(cj3));
                IKReal x43=((0.0450000000000728)*(sj3));
                IKReal x44=((0.550000000002910)+(x42)+(x43));
                IKReal x45=((6.66666666668607)*(x43));
                IKReal x46=((0.0450000000000728)+(x45));
                IKReal x47=((0.150000000001455)*(x42));
                IKReal x48=((((-1.00000000000000)*(x47)))+(x46));
                IKReal x49=((py)*(sj0));
                IKReal x50=((cj0)*(px));
                IKReal x51=((x50)+(x49));
                IKReal x52=((-1.00000000000000)*(x51));
                IKReal x53=((x44)*(x52));
                IKReal x54=((pz)*(x48));
                IKReal x55=((x53)+(((-1.00000000000000)*(x54))));
                IKReal x56=((IKabs(x55) != 0)?((IKReal)1/(x55)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x56)*(((((-1.00000000000000)*((x44)*(x44))))+((pz)*(pz))))), ((x56)*(((((-1.00000000000000)*(x48)*(((0.550000000002910)+(((0.149999999999636)*(x45)))+(((6.66666666662786)*(x47)))))))+(((pz)*(x52)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((((((py)*(sj0)))+(((cj0)*(px)))))*(((0.550000000002910)+(((0.300000000002910)*(cj3)))+(((0.0450000000005275)*(sj3)))))))+(((pz)*(((0.0450000000000728)+(((0.299999999999272)*(sj3)))+(((-0.0450000000000728)*(cj3))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x57=((0.299999999999272)*(sj3));
                IKReal x58=((0.0450000000000728)+(x57));
                IKReal x59=((0.0450000000000728)*(cj3));
                IKReal x60=((x58)+(((-1.00000000000000)*(x59))));
                IKReal x61=((py)*(sj0));
                IKReal x62=((cj0)*(px));
                IKReal x63=((x61)+(x62));
                IKReal x64=((-1.00000000000000)*(x63));
                IKReal x65=((6.66666666668607)*(x59));
                IKReal x66=((0.150000000001455)*(x57));
                IKReal x67=((0.550000000002910)+(x65)+(x66));
                IKReal x68=((pz)*(x60));
                IKReal x69=((x64)*(x67));
                IKReal x70=((x68)+(((-1.00000000000000)*(x69))));
                IKReal x71=((IKabs(x70) != 0)?((IKReal)1/(x70)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x71)*((((x64)*(x64))+(((-1.00000000000000)*((x60)*(x60))))))), ((x71)*(((((-1.00000000000000)*(pz)*(x64)))+(((x60)*(x67)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x72=((0.299999999999272)*(cj3));
            IKReal x73=((0.0450000000000728)*(sj3));
            IKReal x74=((0.550000000002910)+(x73)+(x72));
            IKReal x75=((((-1.00000000000000)*(pz)))+(x74));
            IKReal x76=((6.66666666668607)*(x73));
            IKReal x77=((0.0450000000000728)+(x76));
            IKReal x78=((py)*(sj0));
            IKReal x79=((0.150000000001455)*(x72));
            IKReal x80=((cj0)*(px));
            IKReal x81=((x79)+(x78)+(x80));
            IKReal x82=((x77)+(((-1.00000000000000)*(x81))));
            IKReal x83=x6;
            IKReal x84=x2;
            IKReal x85=x4;
            IKReal x86=((x83)+(x84)+(x85));
            evalcond[0]=((((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396550000004936)+(((-1.00000000000000)*(x86)))+(((0.255000000004657)*(x76)))+(((7.24333333334653)*(x79))));
            evalcond[2]=x82;
            evalcond[3]=x75;
            evalcond[4]=x75;
            evalcond[5]=x82;
            evalcond[6]=((((-1.00000000000000)*(px)))+(((cj0)*(x76)))+(((-1.00000000000000)*(cj0)*(x79)))+(((0.0450000000000728)*(cj0))));
            evalcond[7]=((((-1.00000000000000)*(py)))+(((0.0450000000000728)*(sj0)))+(((-1.00000000000000)*(sj0)*(x79)))+(((sj0)*(x76))));
            evalcond[8]=((-0.212500000005093)+(((1.10000000000582)*(pz)))+(((-1.00000000000000)*(x86)))+(((0.0900000000001455)*(x78)))+(((0.0900000000001455)*(x80))));
            evalcond[9]=((-0.0450000000000728)+(((-1.83333333332848)*(x76)))+(((-22.2222222222481)*(x78)*(x79)))+(((3.33333333334303)*(pz)*(x76)))+(x79)+(((-22.2222222222481)*(x79)*(x80))));
            evalcond[10]=((0.299999999999272)+(((12.2222222222481)*(x79)))+(((-3.33333333334303)*(x76)*(x80)))+(x73)+(((-22.2222222222481)*(pz)*(x79)))+(((-3.33333333334303)*(x76)*(x78))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=0;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x87=((0.0450000000000728)*(cj3));
            IKReal x88=((0.299999999999272)*(sj3));
            IKReal x89=((6.66666666668607)*(x87));
            IKReal x90=((0.150000000001455)*(x88));
            IKReal x91=((0.550000000002910)+(x89)+(x90));
            IKReal x92=((py)*(sj0));
            IKReal x93=((cj0)*(px));
            IKReal x94=((x93)+(x92));
            IKReal x95=((((-1.00000000000000)*(x94)))+(x91));
            IKReal x96=x6;
            IKReal x97=x2;
            IKReal x98=x4;
            evalcond[0]=((((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396550000004936)+(((1.70000000002619)*(x90)))+(((1.08650000000489)*(x89)))+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(x98))));
            evalcond[2]=((0.0450000000000728)+(pz)+(x88)+(((-1.00000000000000)*(x87))));
            evalcond[3]=x95;
            evalcond[4]=((-0.0450000000000728)+(((-1.00000000000000)*(pz)))+(((-1.00000000000000)*(x88)))+(x87));
            evalcond[5]=x95;
            evalcond[6]=((((0.550000000002910)*(cj0)))+(((-1.00000000000000)*(px)))+(((cj0)*(x89)))+(((cj0)*(x90))));
            evalcond[7]=((((-1.00000000000000)*(py)))+(((sj0)*(x89)))+(((0.550000000002910)*(sj0)))+(((sj0)*(x90))));
            evalcond[8]=((-0.212500000005093)+(((1.10000000000582)*(x93)))+(((-1.00000000000000)*(x97)))+(((-0.0900000000001455)*(pz)))+(((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(x98)))+(((1.10000000000582)*(x92))));
            evalcond[9]=((-0.0450000000000728)+(((3.33333333334303)*(pz)*(x89)))+(((22.2222222222481)*(x90)*(x92)))+(((22.2222222222481)*(x90)*(x93)))+(((-12.2222222222481)*(x90)))+(x87));
            evalcond[10]=((0.299999999999272)+(((-3.33333333334303)*(x89)*(x93)))+(((1.83333333332848)*(x89)))+(((22.2222222222481)*(pz)*(x90)))+(((-3.33333333334303)*(x89)*(x92)))+(x90));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=((0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x99=((0.299999999999272)*(cj3));
            IKReal x100=((0.0450000000000728)*(sj3));
            IKReal x101=((0.150000000001455)*(x99));
            IKReal x102=((py)*(sj0));
            IKReal x103=((6.66666666668607)*(x100));
            IKReal x104=((cj0)*(px));
            IKReal x105=x6;
            IKReal x106=x2;
            IKReal x107=x4;
            evalcond[0]=((((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396550000004936)+(((-1.00000000000000)*(x107)))+(((0.255000000004657)*(x103)))+(((7.24333333334653)*(x101)))+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x106))));
            evalcond[2]=((0.0450000000000728)+(((-1.00000000000000)*(x101)))+(x104)+(x102)+(x103));
            evalcond[3]=((0.550000000002910)+(pz)+(x100)+(x99));
            evalcond[4]=((-0.550000000002910)+(((-1.00000000000000)*(pz)))+(((-1.00000000000000)*(x99)))+(((-1.00000000000000)*(x100))));
            evalcond[5]=((-0.0450000000000728)+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x104)))+(((-1.00000000000000)*(x103)))+(x101));
            evalcond[6]=((((-1.00000000000000)*(px)))+(((-1.00000000000000)*(cj0)*(x103)))+(((-0.0450000000000728)*(cj0)))+(((cj0)*(x101))));
            evalcond[7]=((((-1.00000000000000)*(py)))+(((-1.00000000000000)*(sj0)*(x103)))+(((-0.0450000000000728)*(sj0)))+(((sj0)*(x101))));
            evalcond[8]=((-0.212500000005093)+(((-1.00000000000000)*(x107)))+(((-1.10000000000582)*(pz)))+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x106)))+(((-0.0900000000001455)*(x104)))+(((-0.0900000000001455)*(x102))));
            evalcond[9]=((-0.0450000000000728)+(((-3.33333333334303)*(pz)*(x103)))+(((22.2222222222481)*(x101)*(x102)))+(((-1.83333333332848)*(x103)))+(((22.2222222222481)*(x101)*(x104)))+(x101));
            evalcond[10]=((0.299999999999272)+(((12.2222222222481)*(x101)))+(((3.33333333334303)*(x103)*(x104)))+(((3.33333333334303)*(x102)*(x103)))+(((22.2222222222481)*(pz)*(x101)))+(x100));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=3.14159265358979;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x108=((0.299999999999272)*(sj3));
            IKReal x109=((0.0450000000000728)+(x108));
            IKReal x110=((0.0450000000000728)*(cj3));
            IKReal x111=((pz)+(x110));
            IKReal x112=((((-1.00000000000000)*(x111)))+(x109));
            IKReal x113=((6.66666666668607)*(x110));
            IKReal x114=((py)*(sj0));
            IKReal x115=((0.150000000001455)*(x108));
            IKReal x116=((cj0)*(px));
            IKReal x117=x6;
            IKReal x118=x2;
            IKReal x119=x4;
            evalcond[0]=((((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396550000004936)+(((-1.00000000000000)*(x118)))+(((1.08650000000489)*(x113)))+(((-1.00000000000000)*(x117)))+(((1.70000000002619)*(x115)))+(((-1.00000000000000)*(x119))));
            evalcond[2]=x112;
            evalcond[3]=((0.550000000002910)+(x113)+(x116)+(x115)+(x114));
            evalcond[4]=x112;
            evalcond[5]=((-0.550000000002910)+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x113))));
            evalcond[6]=((((-1.00000000000000)*(cj0)*(x113)))+(((-1.00000000000000)*(px)))+(((-0.550000000002910)*(cj0)))+(((-1.00000000000000)*(cj0)*(x115))));
            evalcond[7]=((((-1.00000000000000)*(py)))+(((-1.00000000000000)*(sj0)*(x113)))+(((-0.550000000002910)*(sj0)))+(((-1.00000000000000)*(sj0)*(x115))));
            evalcond[8]=((-0.212500000005093)+(((-1.00000000000000)*(x118)))+(((-1.00000000000000)*(x117)))+(((0.0900000000001455)*(pz)))+(((-1.10000000000582)*(x116)))+(((-1.10000000000582)*(x114)))+(((-1.00000000000000)*(x119))));
            evalcond[9]=((-0.0450000000000728)+(((-3.33333333334303)*(pz)*(x113)))+(((-22.2222222222481)*(x115)*(x116)))+(((-22.2222222222481)*(x114)*(x115)))+(x110)+(((-12.2222222222481)*(x115))));
            evalcond[10]=((0.299999999999272)+(((3.33333333334303)*(x113)*(x116)))+(((3.33333333334303)*(x113)*(x114)))+(x115)+(((1.83333333332848)*(x113)))+(((-22.2222222222481)*(pz)*(x115))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=((-0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            }
            }
            }
            if( numsolutionsj1 == 0 ) { continue; }
            for(int ij1 = 0; ij1 < numsolutionsj1; ++ij1)
        {
        if( !j1valid[ij1] ) { continue; }
        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
        
        new_r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj1)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj0))));
        new_r01=((((cj1)*(cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(cj3)*(r21)*(sj1)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r01)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3))));
        new_r02=((((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj1)))+(((cj0)*(cj1)*(cj3)*(r02)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
        new_r10=((((-1.00000000000000)*(cj1)*(r10)*(sj0)*(sj3)))+(((r20)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj3)*(r10)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00)*(sj3))));
        new_r11=((((-1.00000000000000)*(cj1)*(r11)*(sj0)*(sj3)))+(((r21)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r01)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r21))));
        new_r12=((((r22)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)*(sj1))));
        new_r20=((((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r10))));
        new_r21=((((-1.00000000000000)*(r01)*(sj0)))+(((cj0)*(r11))));
        new_r22=((((-1.00000000000000)*(r02)*(sj0)))+(((cj0)*(r12))));
        {
        IKReal j5eval;
        j5eval=new_r11;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r20)), new_r00))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(new_r20, new_r22)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(new_r21)), ((-1.00000000000000)*(new_r01)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond;
                evalcond=IKcos(j4);
                if( IKabs(evalcond) < 0.00001 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))), new_r11);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x120=IKsin(j4);
                IKReal x121=((IKabs(x120) != 0)?((IKReal)1/(x120)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((new_r00)*(x121)), ((-1.00000000000000)*(new_r02)*(x121)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                
            } else
            {
                if( 1 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))), new_r11);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal evalcond;
                    evalcond=IKsin(j5);
                    if( IKabs(evalcond) < 0.00001 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x122=IKcos(j5);
                    IKReal x123=((IKabs(x122) != 0)?((IKReal)1/(x122)):(IKReal)1.0e30);
                    IKReal x124=IKcos(j4);
                    IKReal x125=IKsin(j4);
                    j6array[0]=IKatan2(((((new_r02)*(x123)*(x124)))+(((new_r22)*(x123)*(x125)))), ((((new_r22)*(x124)))+(((-1.00000000000000)*(new_r02)*(x125)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x126=IKsin(j5);
                    IKReal x127=((IKabs(x126) != 0)?((IKReal)1/(x126)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((new_r12)*(x127)), ((new_r10)*(x127)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                }
                }
                }
                }
                }
                
            } else
            {
            }
            }
            }
            }
            }
            
        }
        }
        }
        }
        }
        }
        }
        }
        
    } else
    {
        evalcond=((((-0.500000000000000)*(3.14159265358979)))+(j2));
        if( IKabs(evalcond) < 0.00001 )
        {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x128=(pz)*(pz);
        IKReal x129=((2.98679637344321)*(x128));
        IKReal x130=(py)*(py);
        IKReal x131=((2.98679637344321)*(x130));
        IKReal x132=(px)*(px);
        IKReal x133=((2.98679637344321)*(x132));
        IKReal x134=((x129)+(x131)+(x133));
        IKReal x135=((1.18441410191008)+(((-1.00000000000000)*(x134))));
        if( (x135) < -1.0001 || (x135) > 1.0001 )
            continue;
        IKReal x136=IKasin(x135);
        j3array[0]=((-1.34027003705316)+(((-1.00000000000000)*(x136))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.80132261653663)+(x136));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3)
        {
        if( !j3valid[ij3] ) { continue; }
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal evalcond[3]; int numsolutionsj1 = 0;
        IKReal j1array[2], cj1array[2], sj1array[2];
        bool j1valid[2]={false};
            {
            evalcond[0]=((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                cj1array[0]=((pz)*(((IKabs(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3))))) != 0)?((IKReal)1/(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3)))))):(IKReal)1.0e30)));
                if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
                {
                    j1valid[0] = j1valid[1] = true;
                    j1array[0] = IKacos(cj1array[0]);
                    sj1array[0] = IKsin(j1array[0]);
                    cj1array[1] = cj1array[0];
                    j1array[1] = -j1array[0];
                    sj1array[1] = -sj1array[0];
                }
                else if( isnan(cj1array[0]) )
                {
                    // probably any value will work
                    j1valid[0] = true;
                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                }
                numsolutionsj1 = 2;
                
            } else
            {
            IKReal x137=((0.299999999999272)*(cj3));
            IKReal x138=((0.0450000000000728)*(sj3));
            IKReal x139=((0.550000000002910)+(x137)+(x138));
            IKReal x140=((((-1.00000000000000)*(pz)))+(x139));
            evalcond[0]=x140;
            evalcond[1]=((0.396550000004936)+(((1.70000000002619)*(x138)))+(((-1.00000000000000)*((py)*(py))))+(((1.08650000000489)*(x137)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=x140;
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j1array[0]=0;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=pz;
            evalcond[1]=((-1.00000000000000)*(pz));
            evalcond[2]=((0.396550000004936)+(((0.0765000000010332)*(sj3)))+(((0.325950000002194)*(cj3)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j1array[0]=((0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x141=((0.299999999999272)*(cj3));
            IKReal x142=((0.0450000000000728)*(sj3));
            evalcond[0]=((-0.550000000002910)+(((-1.00000000000000)*(pz)))+(((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(x142))));
            evalcond[1]=((0.396550000004936)+(((1.70000000002619)*(x142)))+(((1.08650000000489)*(x141)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=((0.550000000002910)+(pz)+(x141)+(x142));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j1array[0]=3.14159265358979;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x143=((-1.00000000000000)*(pz));
            evalcond[0]=x143;
            evalcond[1]=x143;
            evalcond[2]=((0.396550000004936)+(((0.0765000000010332)*(sj3)))+(((0.325950000002194)*(cj3)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j1array[0]=((-0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            if( numsolutionsj1 == 0 ) { continue; }
            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
            j1valid[1]=false;
        for(int ij1 = 0; ij1 < numsolutionsj1; ++ij1)
        {
        if( !j1valid[ij1] ) { continue; }
        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
        
        {
        IKReal evalcond[11]; int numsolutionsj0 = 0;
        IKReal j0array[1], cj0array[1], sj0array[1];
        bool j0valid[1]={false};
            {
            evalcond[0]=((((-1.00000000000000)*(cj1)*((px)*(px))))+(((-1.00000000000000)*(cj1)*((py)*(py)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x144=((0.299999999999272)*(sj3));
                IKReal x145=((0.0450000000000728)+(x144));
                IKReal x146=((0.0450000000000728)*(cj3));
                IKReal x147=((((-1.00000000000000)*(x146)))+(x145));
                IKReal x148=x130;
                IKReal x149=((cj1)*(x148));
                IKReal x150=x132;
                IKReal x151=((cj1)*(x150));
                IKReal x152=((x151)+(x149));
                IKReal x153=((-1.00000000000000)*(x152));
                IKReal x154=((IKabs(x153) != 0)?((IKReal)1/(x153)):(IKReal)1.0e30);
                j0array[0]=IKatan2(((x154)*(((((-1.00000000000000)*(py)*(pz)*(sj1)))+(((-1.00000000000000)*(cj1)*(px)*(x147)))))), ((x154)*(((((cj1)*(py)*(x147)))+(((-1.00000000000000)*(px)*(pz)*(sj1)))))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x155=((0.0450000000000728)*(sj1)*(sj3));
                IKReal x156=((0.299999999999272)*(cj3)*(sj1));
                IKReal x157=((0.550000000002910)*(sj1));
                IKReal x158=((x157)+(x156)+(x155));
                IKReal x159=((0.299999999999272)*(sj3));
                IKReal x160=((0.0450000000000728)+(x159));
                IKReal x161=((0.0450000000000728)*(cj3));
                IKReal x162=((x160)+(((-1.00000000000000)*(x161))));
                IKReal x163=x132;
                IKReal x164=x130;
                IKReal x165=((x163)+(x164));
                IKReal x166=((-1.00000000000000)*(x165));
                IKReal x167=((IKabs(x166) != 0)?((IKReal)1/(x166)):(IKReal)1.0e30);
                j0array[0]=IKatan2(((x167)*(((((-1.00000000000000)*(px)*(x162)))+(((-1.00000000000000)*(py)*(x158)))))), ((x167)*(((((-1.00000000000000)*(px)*(x158)))+(((py)*(x162)))))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((((-1.00000000000000)*(sj1)*((px)*(px))))+(((-1.00000000000000)*(sj1)*((py)*(py)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x168=((0.299999999999272)*(cj3));
                IKReal x169=((0.0450000000000728)*(sj3));
                IKReal x170=((0.550000000002910)+(x168)+(x169));
                IKReal x171=((cj1)*(pz));
                IKReal x172=((x170)+(((-1.00000000000000)*(x171))));
                IKReal x173=((6.66666666668607)*(x169));
                IKReal x174=((0.0450000000000728)+(x173));
                IKReal x175=((0.150000000001455)*(x168));
                IKReal x176=((((-1.00000000000000)*(x175)))+(x174));
                IKReal x177=x130;
                IKReal x178=((sj1)*(x177));
                IKReal x179=x132;
                IKReal x180=((sj1)*(x179));
                IKReal x181=((x178)+(x180));
                IKReal x182=((-1.00000000000000)*(x181));
                IKReal x183=((IKabs(x182) != 0)?((IKReal)1/(x182)):(IKReal)1.0e30);
                j0array[0]=IKatan2(((x183)*(((((-1.00000000000000)*(py)*(x172)))+(((-1.00000000000000)*(px)*(sj1)*(x176)))))), ((x183)*(((((py)*(sj1)*(x176)))+(((-1.00000000000000)*(px)*(x172)))))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((((py)*(((0.0450000000000728)+(((0.299999999999272)*(sj3)))+(((-0.0450000000000728)*(cj3)))))))+(((px)*(((((0.0450000000000728)*(sj1)*(sj3)))+(((0.299999999999272)*(cj3)*(sj1)))+(((0.550000000002910)*(sj1))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x184=((0.0450000000000728)*(sj1)*(sj3));
                IKReal x185=((0.299999999999272)*(cj3)*(sj1));
                IKReal x186=((0.550000000002910)*(sj1));
                IKReal x187=((x184)+(x185)+(x186));
                IKReal x188=((0.299999999999272)*(sj3));
                IKReal x189=((0.0450000000000728)+(x188));
                IKReal x190=((0.0450000000000728)*(cj3));
                IKReal x191=((x189)+(((-1.00000000000000)*(x190))));
                IKReal x192=((py)*(x191));
                IKReal x193=((px)*(x187));
                IKReal x194=((x193)+(x192));
                IKReal x195=((IKabs(x194) != 0)?((IKReal)1/(x194)):(IKReal)1.0e30);
                j0array[0]=IKatan2(((x195)*(((((px)*(py)))+(((x187)*(x191)))))), ((x195)*((((px)*(px))+(((-1.00000000000000)*((x191)*(x191))))))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x196=x132;
            IKReal x197=x128;
            IKReal x198=x130;
            IKReal x199=((0.0450000000000728)*(sj1)*(sj3));
            IKReal x200=((0.299999999999272)*(cj3)*(sj1));
            IKReal x201=((0.550000000002910)*(sj1));
            IKReal x202=((x199)+(x201)+(x200));
            IKReal x203=((((-1.00000000000000)*(px)))+(x202));
            IKReal x204=((0.0450000000000728)*(cj3));
            IKReal x205=((-0.0450000000000728)+(x204));
            IKReal x206=((0.299999999999272)*(sj3));
            IKReal x207=((x206)+(py));
            IKReal x208=((x205)+(((-1.00000000000000)*(x207))));
            IKReal x209=((0.150000000001455)*(x206));
            evalcond[0]=x208;
            evalcond[1]=((((1.81818181817653)*(pz)*(x201)))+(((-1.00000000000000)*(cj1)*(px))));
            evalcond[2]=((((-1.00000000000000)*(pz)))+(((cj1)*(x209)))+(((6.66666666668607)*(cj1)*(x204)))+(((0.550000000002910)*(cj1))));
            evalcond[3]=((0.396550000004936)+(((-1.00000000000000)*(x197)))+(((-1.00000000000000)*(x196)))+(((1.70000000002619)*(x209)))+(((7.24333333340473)*(x204)))+(((-1.00000000000000)*(x198))));
            evalcond[4]=x203;
            evalcond[5]=((0.550000000002910)+(((6.66666666668607)*(x204)))+(x209)+(((-1.00000000000000)*(cj1)*(pz)))+(((-1.81818181817653)*(px)*(x201))));
            evalcond[6]=((-0.212500000005093)+(((1.10000000000582)*(cj1)*(pz)))+(((-1.00000000000000)*(x197)))+(((-1.00000000000000)*(x196)))+(((-0.0900000000001455)*(py)))+(((-1.00000000000000)*(x198)))+(((2.00000000000000)*(px)*(x201))));
            evalcond[7]=x203;
            evalcond[8]=x208;
            evalcond[9]=((((22.2222222222481)*(py)*(x204)))+(((22.2222222222481)*(px)*(x199)))+(((-12.2222222222481)*(x209)))+(x205)+(((22.2222222222481)*(cj1)*(pz)*(x209))));
            evalcond[10]=((0.299999999999272)+(((-22.2222222222481)*(cj1)*(pz)*(x204)))+(((-3.33333333334303)*(px)*(x200)))+(((12.2222222222481)*(x204)))+(x209)+(((22.2222222222481)*(py)*(x209))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j0array[0]=0;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x210=x132;
            IKReal x211=x128;
            IKReal x212=x130;
            IKReal x213=((x210)+(x211)+(x212));
            IKReal x214=((0.299999999999272)*(sj3));
            IKReal x215=((0.0450000000000728)*(cj3));
            IKReal x216=((0.150000000001455)*(sj1)*(x214));
            IKReal x217=((6.66666666668607)*(sj1)*(x215));
            IKReal x218=((0.550000000002910)*(sj1));
            IKReal x219=((x216)+(x217)+(x218));
            IKReal x220=((((-1.00000000000000)*(py)))+(x219));
            IKReal x221=((0.150000000001455)*(x214));
            evalcond[0]=((-0.0450000000000728)+(((-1.00000000000000)*(x214)))+(x215)+(px));
            evalcond[1]=((((1.81818181817653)*(pz)*(x218)))+(((-1.00000000000000)*(cj1)*(py))));
            evalcond[2]=((((-1.00000000000000)*(pz)))+(((6.66666666668607)*(cj1)*(x215)))+(((cj1)*(x221)))+(((0.550000000002910)*(cj1))));
            evalcond[3]=((0.396550000004936)+(((7.24333333340473)*(x215)))+(((-1.00000000000000)*(x213)))+(((1.70000000002619)*(x221))));
            evalcond[4]=x220;
            evalcond[5]=((0.550000000002910)+(((6.66666666668607)*(x215)))+(x221)+(((-1.00000000000000)*(cj1)*(pz)))+(((-1.81818181817653)*(py)*(x218))));
            evalcond[6]=((-0.212500000005093)+(((1.10000000000582)*(cj1)*(pz)))+(((-1.00000000000000)*(x213)))+(((2.00000000000000)*(py)*(x218)))+(((0.0900000000001455)*(px))));
            evalcond[7]=((0.0450000000000728)+(((-1.00000000000000)*(px)))+(x214)+(((-1.00000000000000)*(x215))));
            evalcond[8]=x220;
            evalcond[9]=((-0.0450000000000728)+(((22.2222222222481)*(py)*(x216)))+(((22.2222222222481)*(cj1)*(pz)*(x221)))+(x215)+(((-12.2222222222481)*(x221)))+(((-22.2222222222481)*(px)*(x215))));
            evalcond[10]=((0.299999999999272)+(((-22.2222222222481)*(cj1)*(pz)*(x215)))+(((-3.33333333334303)*(py)*(x217)))+(x221)+(((-22.2222222222481)*(px)*(x221)))+(((12.2222222222481)*(x215))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j0array[0]=((0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x222=x132;
            IKReal x223=x128;
            IKReal x224=x130;
            IKReal x225=((0.0450000000000728)*(sj1)*(sj3));
            IKReal x226=((0.299999999999272)*(cj3)*(sj1));
            IKReal x227=((0.550000000002910)*(sj1));
            IKReal x228=((x225)+(x227)+(x226)+(px));
            IKReal x229=((0.299999999999272)*(sj3));
            IKReal x230=((0.0450000000000728)*(cj3));
            IKReal x231=((0.150000000001455)*(x229));
            evalcond[0]=((-0.0450000000000728)+(x230)+(py)+(((-1.00000000000000)*(x229))));
            evalcond[1]=((((1.81818181817653)*(pz)*(x227)))+(((cj1)*(px))));
            evalcond[2]=((((-1.00000000000000)*(pz)))+(((6.66666666668607)*(cj1)*(x230)))+(((0.550000000002910)*(cj1)))+(((cj1)*(x231))));
            evalcond[3]=((0.396550000004936)+(((7.24333333340473)*(x230)))+(((-1.00000000000000)*(x224)))+(((-1.00000000000000)*(x223)))+(((-1.00000000000000)*(x222)))+(((1.70000000002619)*(x231))));
            evalcond[4]=x228;
            evalcond[5]=((0.550000000002910)+(((1.81818181817653)*(px)*(x227)))+(x231)+(((6.66666666668607)*(x230)))+(((-1.00000000000000)*(cj1)*(pz))));
            evalcond[6]=((-0.212500000005093)+(((1.10000000000582)*(cj1)*(pz)))+(((-1.00000000000000)*(x224)))+(((-1.00000000000000)*(x223)))+(((0.0900000000001455)*(py)))+(((-1.00000000000000)*(x222)))+(((-2.00000000000000)*(px)*(x227))));
            evalcond[7]=((-1.00000000000000)*(x228));
            evalcond[8]=((0.0450000000000728)+(((-1.00000000000000)*(py)))+(((-1.00000000000000)*(x230)))+(x229));
            evalcond[9]=((-0.0450000000000728)+(((-22.2222222222481)*(py)*(x230)))+(((-22.2222222222481)*(px)*(x225)))+(x230)+(((22.2222222222481)*(cj1)*(pz)*(x231)))+(((-12.2222222222481)*(x231))));
            evalcond[10]=((0.299999999999272)+(((12.2222222222481)*(x230)))+(x231)+(((3.33333333334303)*(px)*(x226)))+(((-22.2222222222481)*(py)*(x231)))+(((-22.2222222222481)*(cj1)*(pz)*(x230))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j0array[0]=3.14159265358979;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x232=x132;
            IKReal x233=x128;
            IKReal x234=x130;
            IKReal x235=((0.0450000000000728)*(cj3));
            IKReal x236=((-0.0450000000000728)+(x235));
            IKReal x237=((0.299999999999272)*(sj3));
            IKReal x238=((x237)+(px));
            IKReal x239=((((-1.00000000000000)*(x238)))+(x236));
            IKReal x240=((0.150000000001455)*(sj1)*(x237));
            IKReal x241=((6.66666666668607)*(sj1)*(x235));
            IKReal x242=((0.550000000002910)*(sj1));
            IKReal x243=((x242)+(x241)+(x240)+(py));
            IKReal x244=((0.150000000001455)*(x237));
            evalcond[0]=x239;
            evalcond[1]=((((cj1)*(py)))+(((1.81818181817653)*(pz)*(x242))));
            evalcond[2]=((((cj1)*(x244)))+(((-1.00000000000000)*(pz)))+(((6.66666666668607)*(cj1)*(x235)))+(((0.550000000002910)*(cj1))));
            evalcond[3]=((0.396550000004936)+(((1.70000000002619)*(x244)))+(((7.24333333340473)*(x235)))+(((-1.00000000000000)*(x234)))+(((-1.00000000000000)*(x232)))+(((-1.00000000000000)*(x233))));
            evalcond[4]=x243;
            evalcond[5]=((0.550000000002910)+(((6.66666666668607)*(x235)))+(x244)+(((-1.00000000000000)*(cj1)*(pz)))+(((1.81818181817653)*(py)*(x242))));
            evalcond[6]=((-0.212500000005093)+(((-2.00000000000000)*(py)*(x242)))+(((1.10000000000582)*(cj1)*(pz)))+(((-0.0900000000001455)*(px)))+(((-1.00000000000000)*(x234)))+(((-1.00000000000000)*(x232)))+(((-1.00000000000000)*(x233))));
            evalcond[7]=x239;
            evalcond[8]=((-1.00000000000000)*(x243));
            evalcond[9]=((((-12.2222222222481)*(x244)))+(x236)+(((22.2222222222481)*(px)*(x235)))+(((-22.2222222222481)*(py)*(x240)))+(((22.2222222222481)*(cj1)*(pz)*(x244))));
            evalcond[10]=((0.299999999999272)+(((-22.2222222222481)*(cj1)*(pz)*(x235)))+(((12.2222222222481)*(x235)))+(x244)+(((3.33333333334303)*(py)*(x241)))+(((22.2222222222481)*(px)*(x244))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j0array[0]=((-0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            }
            }
            }
            if( numsolutionsj0 == 0 ) { continue; }
            for(int ij0 = 0; ij0 < numsolutionsj0; ++ij0)
        {
        if( !j0valid[ij0] ) { continue; }
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        new_r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
        new_r01=((((cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3))));
        new_r02=((((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
        new_r10=((((cj0)*(r10)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj3)*(r10)*(sj0)*(sj1))));
        new_r11=((((-1.00000000000000)*(r01)*(sj0)*(sj3)))+(((cj0)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r21))));
        new_r12=((((-1.00000000000000)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)*(sj1))));
        new_r20=((((cj0)*(cj1)*(r00)))+(((cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(r20)*(sj1))));
        new_r21=((((cj1)*(r11)*(sj0)))+(((-1.00000000000000)*(r21)*(sj1)))+(((cj0)*(cj1)*(r01))));
        new_r22=((((-1.00000000000000)*(r22)*(sj1)))+(((cj0)*(cj1)*(r02)))+(((cj1)*(r12)*(sj0))));
        {
        IKReal j5eval;
        j5eval=new_r11;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r20)), new_r00))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(new_r20, new_r22)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(new_r21)), ((-1.00000000000000)*(new_r01)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond;
                evalcond=IKcos(j4);
                if( IKabs(evalcond) < 0.00001 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))), new_r11);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x245=IKsin(j4);
                IKReal x246=((IKabs(x245) != 0)?((IKReal)1/(x245)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((new_r00)*(x246)), ((-1.00000000000000)*(new_r02)*(x246)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                
            } else
            {
                if( 1 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))), new_r11);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal evalcond;
                    evalcond=IKsin(j5);
                    if( IKabs(evalcond) < 0.00001 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x247=IKcos(j5);
                    IKReal x248=((IKabs(x247) != 0)?((IKReal)1/(x247)):(IKReal)1.0e30);
                    IKReal x249=IKcos(j4);
                    IKReal x250=IKsin(j4);
                    j6array[0]=IKatan2(((((new_r22)*(x248)*(x250)))+(((new_r02)*(x248)*(x249)))), ((((new_r22)*(x249)))+(((-1.00000000000000)*(new_r02)*(x250)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x251=IKsin(j5);
                    IKReal x252=((IKabs(x251) != 0)?((IKReal)1/(x251)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((new_r12)*(x252)), ((new_r10)*(x252)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                }
                }
                }
                }
                }
                
            } else
            {
            }
            }
            }
            }
            }
            
        }
        }
        }
        }
        }
        }
        }
        }
        
    } else
    {
        evalcond=((j2)+(((-1.00000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 )
        {
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x253=((-1.00000000000000)*(py));
        IKReal x254=IKatan2(x253, px);
        j0array[0]=((-1.00000000000000)*(x254));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x254))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0)
        {
        if( !j0valid[ij0] ) { continue; }
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x255=(pz)*(pz);
        IKReal x256=((2.98679637344321)*(x255));
        IKReal x257=(py)*(py);
        IKReal x258=((2.98679637344321)*(x257));
        IKReal x259=(px)*(px);
        IKReal x260=((2.98679637344321)*(x259));
        IKReal x261=((x258)+(x256)+(x260));
        IKReal x262=((1.18441410191008)+(((-1.00000000000000)*(x261))));
        if( (x262) < -1.0001 || (x262) > 1.0001 )
            continue;
        IKReal x263=IKasin(x262);
        j3array[0]=((-1.34027003705316)+(((-1.00000000000000)*(x263))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.80132261653663)+(x263));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3)
        {
        if( !j3valid[ij3] ) { continue; }
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal evalcond[11]; int numsolutionsj1 = 0;
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
            {
            evalcond[0]=((((-1.00000000000000)*((((((py)*(sj0)))+(((cj0)*(px)))))*(((((py)*(sj0)))+(((cj0)*(px))))))))+(((-1.00000000000000)*((pz)*(pz)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x264=((py)*(sj0));
                IKReal x265=((cj0)*(px));
                IKReal x266=((x265)+(x264));
                IKReal x267=((-1.00000000000000)*(x266));
                IKReal x268=((0.299999999999272)*(cj3));
                IKReal x269=((0.0450000000000728)*(sj3));
                IKReal x270=((0.550000000002910)+(x269)+(x268));
                IKReal x271=((0.150000000001455)*(x268));
                IKReal x272=(x267)*(x267);
                IKReal x273=x255;
                IKReal x274=((x272)+(x273));
                IKReal x275=((-1.00000000000000)*(x274));
                IKReal x276=((IKabs(x275) != 0)?((IKReal)1/(x275)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x276)*(((((-1.00000000000000)*(pz)*(((0.0450000000000728)+(((6.66666666668607)*(x269)))+(((-1.00000000000000)*(x271)))))))+(((x267)*(x270)))))), ((x276)*(((((-1.00000000000000)*(pz)*(x270)))+(((-1.00000000000000)*(x267)*(((0.0450000000000728)+(((6.66666666668607)*(x269)))+(((-1.00000000000000)*(x271)))))))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((pz)*(((0.0450000000000728)+(((0.300000000002910)*(sj3)))+(((-0.0450000000005275)*(cj3)))))))+(((-1.00000000000000)*(((((py)*(sj0)))+(((cj0)*(px)))))*(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x277=((0.299999999999272)*(cj3));
                IKReal x278=((0.0450000000000728)*(sj3));
                IKReal x279=((0.550000000002910)+(x277)+(x278));
                IKReal x280=((py)*(sj0));
                IKReal x281=((cj0)*(px));
                IKReal x282=((x281)+(x280));
                IKReal x283=((-1.00000000000000)*(x282));
                IKReal x284=((x279)*(x283));
                IKReal x285=((6.66666666668607)*(x278));
                IKReal x286=((0.0450000000000728)+(x285));
                IKReal x287=((0.150000000001455)*(x277));
                IKReal x288=((x286)+(((-1.00000000000000)*(x287))));
                IKReal x289=((pz)*(x288));
                IKReal x290=((x289)+(x284));
                IKReal x291=((IKabs(x290) != 0)?((IKReal)1/(x290)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x291)*((((pz)*(pz))+(((-1.00000000000000)*((x279)*(x279))))))), ((x291)*(((((pz)*(x283)))+(((x279)*(x288)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((pz)*(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3)))))))+(((((((py)*(sj0)))+(((cj0)*(px)))))*(((0.0450000000000728)+(((0.300000000002910)*(sj3)))+(((-0.0450000000005275)*(cj3))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x292=((0.299999999999272)*(cj3));
                IKReal x293=((0.0450000000000728)*(sj3));
                IKReal x294=((0.550000000002910)+(x292)+(x293));
                IKReal x295=((6.66666666668607)*(x293));
                IKReal x296=((0.0450000000000728)+(x295));
                IKReal x297=((0.150000000001455)*(x292));
                IKReal x298=((x296)+(((-1.00000000000000)*(x297))));
                IKReal x299=((py)*(sj0));
                IKReal x300=((cj0)*(px));
                IKReal x301=((x300)+(x299));
                IKReal x302=((-1.00000000000000)*(x301));
                IKReal x303=((pz)*(x294));
                IKReal x304=((x298)*(x302));
                IKReal x305=((x303)+(((-1.00000000000000)*(x304))));
                IKReal x306=((IKabs(x305) != 0)?((IKReal)1/(x305)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x306)*(((((-1.00000000000000)*(pz)*(x302)))+(((x294)*(x298)))))), ((x306)*((((pz)*(pz))+(((-1.00000000000000)*((x298)*(x298))))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((-1.00000000000000)*(pz)*(((0.0450000000000728)+(((0.299999999999272)*(sj3)))+(((-0.0450000000000728)*(cj3)))))))+(((((((py)*(sj0)))+(((cj0)*(px)))))*(((0.550000000002910)+(((0.300000000002910)*(cj3)))+(((0.0450000000005275)*(sj3))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x307=((py)*(sj0));
                IKReal x308=((cj0)*(px));
                IKReal x309=((x308)+(x307));
                IKReal x310=((-1.00000000000000)*(x309));
                IKReal x311=((0.299999999999272)*(sj3));
                IKReal x312=((0.0450000000000728)+(x311));
                IKReal x313=((0.0450000000000728)*(cj3));
                IKReal x314=((x312)+(((-1.00000000000000)*(x313))));
                IKReal x315=((6.66666666668607)*(x313));
                IKReal x316=((0.150000000001455)*(x311));
                IKReal x317=((0.550000000002910)+(x315)+(x316));
                IKReal x318=((x310)*(x317));
                IKReal x319=((pz)*(x314));
                IKReal x320=((x319)+(x318));
                IKReal x321=((-1.00000000000000)*(x320));
                IKReal x322=((IKabs(x321) != 0)?((IKReal)1/(x321)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x322)*((((x310)*(x310))+(((-1.00000000000000)*((x314)*(x314))))))), ((x322)*(((((-1.00000000000000)*(pz)*(x310)))+(((-1.00000000000000)*(x314)*(x317)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x323=((0.299999999999272)*(cj3));
            IKReal x324=((0.0450000000000728)*(sj3));
            IKReal x325=((0.550000000002910)+(x324)+(x323));
            IKReal x326=((((-1.00000000000000)*(pz)))+(x325));
            IKReal x327=((0.150000000001455)*(x323));
            IKReal x328=((-0.0450000000000728)+(x327));
            IKReal x329=((py)*(sj0));
            IKReal x330=((6.66666666668607)*(x324));
            IKReal x331=((cj0)*(px));
            IKReal x332=((x329)+(x331)+(x330));
            IKReal x333=((x328)+(((-1.00000000000000)*(x332))));
            IKReal x334=x259;
            IKReal x335=x255;
            IKReal x336=x257;
            evalcond[0]=((((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396550000004936)+(((0.255000000004657)*(x330)))+(((-1.00000000000000)*(x334)))+(((7.24333333334653)*(x327)))+(((-1.00000000000000)*(x335)))+(((-1.00000000000000)*(x336))));
            evalcond[2]=x333;
            evalcond[3]=x326;
            evalcond[4]=x326;
            evalcond[5]=x333;
            evalcond[6]=((((-1.00000000000000)*(cj0)*(x330)))+(((-1.00000000000000)*(px)))+(((-0.0450000000000728)*(cj0)))+(((cj0)*(x327))));
            evalcond[7]=((((-1.00000000000000)*(py)))+(((-1.00000000000000)*(sj0)*(x330)))+(((-0.0450000000000728)*(sj0)))+(((sj0)*(x327))));
            evalcond[8]=((-0.212500000005093)+(((1.10000000000582)*(pz)))+(((-1.00000000000000)*(x334)))+(((-0.0900000000001455)*(x331)))+(((-0.0900000000001455)*(x329)))+(((-1.00000000000000)*(x335)))+(((-1.00000000000000)*(x336))));
            evalcond[9]=((((-1.83333333332848)*(x330)))+(((22.2222222222481)*(x327)*(x331)))+(((22.2222222222481)*(x327)*(x329)))+(x328)+(((3.33333333334303)*(pz)*(x330))));
            evalcond[10]=((0.299999999999272)+(((3.33333333334303)*(x329)*(x330)))+(x324)+(((12.2222222222481)*(x327)))+(((-22.2222222222481)*(pz)*(x327)))+(((3.33333333334303)*(x330)*(x331))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=0;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x337=((0.299999999999272)*(sj3));
            IKReal x338=((0.0450000000000728)*(cj3));
            IKReal x339=((6.66666666668607)*(x338));
            IKReal x340=((0.150000000001455)*(x337));
            IKReal x341=((0.550000000002910)+(x339)+(x340));
            IKReal x342=((py)*(sj0));
            IKReal x343=((cj0)*(px));
            IKReal x344=((x342)+(x343));
            IKReal x345=((((-1.00000000000000)*(x344)))+(x341));
            IKReal x346=x259;
            IKReal x347=x255;
            IKReal x348=x257;
            IKReal x349=((x346)+(x347)+(x348));
            evalcond[0]=((((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396550000004936)+(((1.08650000000489)*(x339)))+(((1.70000000002619)*(x340)))+(((-1.00000000000000)*(x349))));
            evalcond[2]=((-0.0450000000000728)+(((-1.00000000000000)*(x337)))+(x338)+(pz));
            evalcond[3]=x345;
            evalcond[4]=((0.0450000000000728)+(((-1.00000000000000)*(pz)))+(((-1.00000000000000)*(x338)))+(x337));
            evalcond[5]=x345;
            evalcond[6]=((((0.550000000002910)*(cj0)))+(((-1.00000000000000)*(px)))+(((cj0)*(x339)))+(((cj0)*(x340))));
            evalcond[7]=((((-1.00000000000000)*(py)))+(((sj0)*(x339)))+(((sj0)*(x340)))+(((0.550000000002910)*(sj0))));
            evalcond[8]=((-0.212500000005093)+(((0.0900000000001455)*(pz)))+(((1.10000000000582)*(x342)))+(((1.10000000000582)*(x343)))+(((-1.00000000000000)*(x349))));
            evalcond[9]=((-0.0450000000000728)+(((22.2222222222481)*(x340)*(x343)))+(((-3.33333333334303)*(pz)*(x339)))+(x338)+(((-12.2222222222481)*(x340)))+(((22.2222222222481)*(x340)*(x342))));
            evalcond[10]=((0.299999999999272)+(((1.83333333332848)*(x339)))+(((-22.2222222222481)*(pz)*(x340)))+(((-3.33333333334303)*(x339)*(x342)))+(((-3.33333333334303)*(x339)*(x343)))+(x340));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=((0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x350=((0.299999999999272)*(cj3));
            IKReal x351=((0.0450000000000728)*(sj3));
            IKReal x352=((6.66666666668607)*(x351));
            IKReal x353=((py)*(sj0));
            IKReal x354=((0.150000000001455)*(x350));
            IKReal x355=((cj0)*(px));
            IKReal x356=x259;
            IKReal x357=x255;
            IKReal x358=x257;
            evalcond[0]=((((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396550000004936)+(((-1.00000000000000)*(x357)))+(((7.24333333334653)*(x354)))+(((-1.00000000000000)*(x356)))+(((-1.00000000000000)*(x358)))+(((0.255000000004657)*(x352))));
            evalcond[2]=((-0.0450000000000728)+(((-1.00000000000000)*(x352)))+(x353)+(x355)+(x354));
            evalcond[3]=((0.550000000002910)+(pz)+(x351)+(x350));
            evalcond[4]=((-0.550000000002910)+(((-1.00000000000000)*(pz)))+(((-1.00000000000000)*(x351)))+(((-1.00000000000000)*(x350))));
            evalcond[5]=((0.0450000000000728)+(((-1.00000000000000)*(x353)))+(((-1.00000000000000)*(x355)))+(((-1.00000000000000)*(x354)))+(x352));
            evalcond[6]=((((-1.00000000000000)*(px)))+(((cj0)*(x352)))+(((-1.00000000000000)*(cj0)*(x354)))+(((0.0450000000000728)*(cj0))));
            evalcond[7]=((((-1.00000000000000)*(py)))+(((0.0450000000000728)*(sj0)))+(((-1.00000000000000)*(sj0)*(x354)))+(((sj0)*(x352))));
            evalcond[8]=((-0.212500000005093)+(((0.0900000000001455)*(x353)))+(((0.0900000000001455)*(x355)))+(((-1.00000000000000)*(x357)))+(((-1.10000000000582)*(pz)))+(((-1.00000000000000)*(x356)))+(((-1.00000000000000)*(x358))));
            evalcond[9]=((-0.0450000000000728)+(((-3.33333333334303)*(pz)*(x352)))+(((-22.2222222222481)*(x354)*(x355)))+(((-22.2222222222481)*(x353)*(x354)))+(x354)+(((-1.83333333332848)*(x352))));
            evalcond[10]=((0.299999999999272)+(((-3.33333333334303)*(x352)*(x353)))+(x351)+(((12.2222222222481)*(x354)))+(((22.2222222222481)*(pz)*(x354)))+(((-3.33333333334303)*(x352)*(x355))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=3.14159265358979;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x359=((0.0450000000000728)*(cj3));
            IKReal x360=((-0.0450000000000728)+(x359));
            IKReal x361=((0.299999999999272)*(sj3));
            IKReal x362=((x361)+(pz));
            IKReal x363=((((-1.00000000000000)*(x362)))+(x360));
            IKReal x364=((6.66666666668607)*(x359));
            IKReal x365=((py)*(sj0));
            IKReal x366=((0.150000000001455)*(x361));
            IKReal x367=((cj0)*(px));
            IKReal x368=x259;
            IKReal x369=x255;
            IKReal x370=x257;
            evalcond[0]=((((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[1]=((0.396550000004936)+(((-1.00000000000000)*(x369)))+(((-1.00000000000000)*(x370)))+(((1.08650000000489)*(x364)))+(((1.70000000002619)*(x366)))+(((-1.00000000000000)*(x368))));
            evalcond[2]=x363;
            evalcond[3]=((0.550000000002910)+(x364)+(x365)+(x366)+(x367));
            evalcond[4]=x363;
            evalcond[5]=((-0.550000000002910)+(((-1.00000000000000)*(x367)))+(((-1.00000000000000)*(x364)))+(((-1.00000000000000)*(x365)))+(((-1.00000000000000)*(x366))));
            evalcond[6]=((((-1.00000000000000)*(px)))+(((-0.550000000002910)*(cj0)))+(((-1.00000000000000)*(cj0)*(x366)))+(((-1.00000000000000)*(cj0)*(x364))));
            evalcond[7]=((((-1.00000000000000)*(py)))+(((-1.00000000000000)*(sj0)*(x366)))+(((-1.00000000000000)*(sj0)*(x364)))+(((-0.550000000002910)*(sj0))));
            evalcond[8]=((-0.212500000005093)+(((-1.10000000000582)*(x367)))+(((-1.00000000000000)*(x369)))+(((-1.00000000000000)*(x370)))+(((-0.0900000000001455)*(pz)))+(((-1.00000000000000)*(x368)))+(((-1.10000000000582)*(x365))));
            evalcond[9]=((((3.33333333334303)*(pz)*(x364)))+(x360)+(((-22.2222222222481)*(x365)*(x366)))+(((-22.2222222222481)*(x366)*(x367)))+(((-12.2222222222481)*(x366))));
            evalcond[10]=((0.299999999999272)+(((3.33333333334303)*(x364)*(x365)))+(x366)+(((1.83333333332848)*(x364)))+(((3.33333333334303)*(x364)*(x367)))+(((22.2222222222481)*(pz)*(x366))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j1array[0]=((-0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            }
            }
            }
            if( numsolutionsj1 == 0 ) { continue; }
            for(int ij1 = 0; ij1 < numsolutionsj1; ++ij1)
        {
        if( !j1valid[ij1] ) { continue; }
        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
        
        new_r00=((((cj3)*(r20)*(sj1)))+(((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r00)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r10)*(sj0))));
        new_r01=((((cj3)*(r21)*(sj1)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r11)*(sj0))));
        new_r02=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r02)))+(((-1.00000000000000)*(cj1)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
        new_r10=((((-1.00000000000000)*(r20)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r20)))+(((cj1)*(r10)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)*(sj1)))+(((cj0)*(cj1)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj0)*(sj1))));
        new_r11=((((cj1)*(r11)*(sj0)*(sj3)))+(((cj0)*(cj1)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj0)*(sj1)))+(((-1.00000000000000)*(r21)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r21))));
        new_r12=((((cj1)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj0)*(sj1)))+(((cj0)*(cj1)*(r02)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(r22)*(sj1)*(sj3))));
        new_r20=((((r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r10))));
        new_r21=((((-1.00000000000000)*(cj0)*(r11)))+(((r01)*(sj0))));
        new_r22=((((r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r12))));
        {
        IKReal j5eval;
        j5eval=new_r11;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r20)), new_r00))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(new_r20, new_r22)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(new_r21)), ((-1.00000000000000)*(new_r01)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal j5array[1], cj5array[1], sj5array[1];
            bool j5valid[1]={false};
            j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))), new_r11);
            sj5array[0]=IKsin(j5array[0]);
            cj5array[0]=IKcos(j5array[0]);
            if( j5array[0] > IKPI )
                j5array[0]-=IK2PI;
            else if( j5array[0] < -IKPI )
                j5array[0]+=IK2PI;
            j5valid[0] = true;
            for(int ij5 = 0; ij5 < 1; ++ij5)
            {
            if( !j5valid[ij5] ) { continue; }
            j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
            
            {
            IKReal j6array[1], cj6array[1], sj6array[1];
            bool j6valid[1]={false};
            IKReal x371=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
            j6array[0]=IKatan2(((new_r12)*(x371)), ((new_r10)*(x371)));
            sj6array[0]=IKsin(j6array[0]);
            cj6array[0]=IKcos(j6array[0]);
            if( j6array[0] > IKPI )
                j6array[0]-=IK2PI;
            else if( j6array[0] < -IKPI )
                j6array[0]+=IK2PI;
            j6valid[0] = true;
            for(int ij6 = 0; ij6 < 1; ++ij6)
            {
            if( !j6valid[ij6] ) { continue; }
            j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
            
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.vfree.resize(0);
            }
            }
            }
            }
            }
            }
            
        }
        }
        }
        }
        }
        }
        }
        }
        
    } else
    {
        evalcond=((j2)+(((0.500000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 )
        {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x372=(pz)*(pz);
        IKReal x373=((2.98679637344321)*(x372));
        IKReal x374=(py)*(py);
        IKReal x375=((2.98679637344321)*(x374));
        IKReal x376=(px)*(px);
        IKReal x377=((2.98679637344321)*(x376));
        IKReal x378=((x377)+(x375)+(x373));
        IKReal x379=((1.18441410191008)+(((-1.00000000000000)*(x378))));
        if( (x379) < -1.0001 || (x379) > 1.0001 )
            continue;
        IKReal x380=IKasin(x379);
        j3array[0]=((-1.34027003705316)+(((-1.00000000000000)*(x380))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.80132261653663)+(x380));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3)
        {
        if( !j3valid[ij3] ) { continue; }
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal evalcond[3]; int numsolutionsj1 = 0;
        IKReal j1array[2], cj1array[2], sj1array[2];
        bool j1valid[2]={false};
            {
            evalcond[0]=((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                cj1array[0]=((pz)*(((IKabs(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3))))) != 0)?((IKReal)1/(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3)))))):(IKReal)1.0e30)));
                if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
                {
                    j1valid[0] = j1valid[1] = true;
                    j1array[0] = IKacos(cj1array[0]);
                    sj1array[0] = IKsin(j1array[0]);
                    cj1array[1] = cj1array[0];
                    j1array[1] = -j1array[0];
                    sj1array[1] = -sj1array[0];
                }
                else if( isnan(cj1array[0]) )
                {
                    // probably any value will work
                    j1valid[0] = true;
                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                }
                numsolutionsj1 = 2;
                
            } else
            {
            IKReal x381=((0.299999999999272)*(cj3));
            IKReal x382=((0.0450000000000728)*(sj3));
            IKReal x383=((0.550000000002910)+(x382)+(x381));
            IKReal x384=((((-1.00000000000000)*(pz)))+(x383));
            evalcond[0]=x384;
            evalcond[1]=((0.396550000004936)+(((1.70000000002619)*(x382)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((1.08650000000489)*(x381)))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=x384;
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j1array[0]=0;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=pz;
            evalcond[1]=((-1.00000000000000)*(pz));
            evalcond[2]=((0.396550000004936)+(((0.0765000000010332)*(sj3)))+(((0.325950000002194)*(cj3)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j1array[0]=((0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x385=((0.299999999999272)*(cj3));
            IKReal x386=((0.0450000000000728)*(sj3));
            evalcond[0]=((-0.550000000002910)+(((-1.00000000000000)*(pz)))+(((-1.00000000000000)*(x385)))+(((-1.00000000000000)*(x386))));
            evalcond[1]=((0.396550000004936)+(((1.08650000000489)*(x385)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((1.70000000002619)*(x386)))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=((0.550000000002910)+(x386)+(x385)+(pz));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j1array[0]=3.14159265358979;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x387=((-1.00000000000000)*(pz));
            evalcond[0]=x387;
            evalcond[1]=x387;
            evalcond[2]=((0.396550000004936)+(((0.0765000000010332)*(sj3)))+(((0.325950000002194)*(cj3)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j1array[0]=((-0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            if( numsolutionsj1 == 0 ) { continue; }
            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
            j1valid[1]=false;
        for(int ij1 = 0; ij1 < numsolutionsj1; ++ij1)
        {
        if( !j1valid[ij1] ) { continue; }
        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
        
        {
        IKReal evalcond[11]; int numsolutionsj0 = 0;
        IKReal j0array[1], cj0array[1], sj0array[1];
        bool j0valid[1]={false};
            {
            evalcond[0]=((((-1.00000000000000)*(cj1)*((px)*(px))))+(((-1.00000000000000)*(cj1)*((py)*(py)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x388=((0.299999999999272)*(sj3));
                IKReal x389=((0.0450000000000728)+(x388));
                IKReal x390=((0.0450000000000728)*(cj3));
                IKReal x391=((x389)+(((-1.00000000000000)*(x390))));
                IKReal x392=x374;
                IKReal x393=((cj1)*(x392));
                IKReal x394=x376;
                IKReal x395=((cj1)*(x394));
                IKReal x396=((x395)+(x393));
                IKReal x397=((-1.00000000000000)*(x396));
                IKReal x398=((IKabs(x397) != 0)?((IKReal)1/(x397)):(IKReal)1.0e30);
                j0array[0]=IKatan2(((x398)*(((((-1.00000000000000)*(py)*(pz)*(sj1)))+(((cj1)*(px)*(x391)))))), ((x398)*(((((-1.00000000000000)*(px)*(pz)*(sj1)))+(((-1.00000000000000)*(cj1)*(py)*(x391)))))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x399=((0.299999999999272)*(sj3));
                IKReal x400=((0.0450000000000728)+(x399));
                IKReal x401=((0.0450000000000728)*(cj3));
                IKReal x402=((((-1.00000000000000)*(x401)))+(x400));
                IKReal x403=((0.150000000001455)*(sj1)*(x399));
                IKReal x404=((6.66666666668607)*(sj1)*(x401));
                IKReal x405=((0.550000000002910)*(sj1));
                IKReal x406=((x403)+(x405)+(x404));
                IKReal x407=x376;
                IKReal x408=x374;
                IKReal x409=((x407)+(x408));
                IKReal x410=((-1.00000000000000)*(x409));
                IKReal x411=((IKabs(x410) != 0)?((IKReal)1/(x410)):(IKReal)1.0e30);
                j0array[0]=IKatan2(((x411)*(((((-1.00000000000000)*(py)*(x406)))+(((px)*(x402)))))), ((x411)*(((((-1.00000000000000)*(px)*(x406)))+(((-1.00000000000000)*(py)*(x402)))))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((((-1.00000000000000)*(sj1)*((px)*(px))))+(((-1.00000000000000)*(sj1)*((py)*(py)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x412=((0.299999999999272)*(cj3));
                IKReal x413=((0.0450000000000728)*(sj3));
                IKReal x414=((0.550000000002910)+(x412)+(x413));
                IKReal x415=((cj1)*(pz));
                IKReal x416=((((-1.00000000000000)*(x415)))+(x414));
                IKReal x417=((6.66666666668607)*(x413));
                IKReal x418=((0.0450000000000728)+(x417));
                IKReal x419=((0.150000000001455)*(x412));
                IKReal x420=((((-1.00000000000000)*(x419)))+(x418));
                IKReal x421=x374;
                IKReal x422=((sj1)*(x421));
                IKReal x423=x376;
                IKReal x424=((sj1)*(x423));
                IKReal x425=((x424)+(x422));
                IKReal x426=((-1.00000000000000)*(x425));
                IKReal x427=((IKabs(x426) != 0)?((IKReal)1/(x426)):(IKReal)1.0e30);
                j0array[0]=IKatan2(((x427)*(((((-1.00000000000000)*(py)*(x416)))+(((px)*(sj1)*(x420)))))), ((x427)*(((((-1.00000000000000)*(py)*(sj1)*(x420)))+(((-1.00000000000000)*(px)*(x416)))))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((((px)*(((((0.300000000002910)*(cj3)*(sj1)))+(((0.0450000000005275)*(sj1)*(sj3)))+(((0.550000000002910)*(sj1)))))))+(((-1.00000000000000)*(py)*(((0.0450000000000728)+(((0.299999999999272)*(sj3)))+(((-0.0450000000000728)*(cj3))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x428=((0.299999999999272)*(sj3));
                IKReal x429=((0.0450000000000728)+(x428));
                IKReal x430=((0.0450000000000728)*(cj3));
                IKReal x431=((x429)+(((-1.00000000000000)*(x430))));
                IKReal x432=((0.150000000001455)*(sj1)*(x428));
                IKReal x433=((6.66666666668607)*(sj1)*(x430));
                IKReal x434=((0.550000000002910)*(sj1));
                IKReal x435=((x432)+(x433)+(x434));
                IKReal x436=((px)*(x435));
                IKReal x437=((py)*(x431));
                IKReal x438=((x436)+(((-1.00000000000000)*(x437))));
                IKReal x439=((IKabs(x438) != 0)?((IKReal)1/(x438)):(IKReal)1.0e30);
                j0array[0]=IKatan2(((x439)*(((((px)*(py)))+(((x431)*(((((-1.00000000000000)*(x432)))+(((-1.00000000000000)*(x434)))+(((-1.00000000000000)*(x433)))))))))), ((x439)*((((px)*(px))+(((-1.00000000000000)*((x431)*(x431))))))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x440=x376;
            IKReal x441=x372;
            IKReal x442=x374;
            IKReal x443=((x441)+(x440)+(x442));
            IKReal x444=((0.0450000000000728)*(sj1)*(sj3));
            IKReal x445=((0.299999999999272)*(cj3)*(sj1));
            IKReal x446=((0.550000000002910)*(sj1));
            IKReal x447=((x445)+(x444)+(x446));
            IKReal x448=((((-1.00000000000000)*(px)))+(x447));
            IKReal x449=((0.299999999999272)*(sj3));
            IKReal x450=((0.0450000000000728)+(x449));
            IKReal x451=((0.0450000000000728)*(cj3));
            IKReal x452=((x451)+(py));
            IKReal x453=((((-1.00000000000000)*(x452)))+(x450));
            IKReal x454=((0.150000000001455)*(x449));
            evalcond[0]=x453;
            evalcond[1]=((((-1.00000000000000)*(cj1)*(px)))+(((1.81818181817653)*(pz)*(x446))));
            evalcond[2]=((((6.66666666668607)*(cj1)*(x451)))+(((-1.00000000000000)*(pz)))+(((cj1)*(x454)))+(((0.550000000002910)*(cj1))));
            evalcond[3]=((0.396550000004936)+(((1.70000000002619)*(x454)))+(((7.24333333340473)*(x451)))+(((-1.00000000000000)*(x443))));
            evalcond[4]=x448;
            evalcond[5]=((0.550000000002910)+(((-1.81818181817653)*(px)*(x446)))+(x454)+(((6.66666666668607)*(x451)))+(((-1.00000000000000)*(cj1)*(pz))));
            evalcond[6]=((-0.212500000005093)+(((1.10000000000582)*(cj1)*(pz)))+(((2.00000000000000)*(px)*(x446)))+(((0.0900000000001455)*(py)))+(((-1.00000000000000)*(x443))));
            evalcond[7]=x448;
            evalcond[8]=x453;
            evalcond[9]=((-0.0450000000000728)+(x451)+(((22.2222222222481)*(px)*(x444)))+(((-12.2222222222481)*(x454)))+(((-22.2222222222481)*(py)*(x451)))+(((22.2222222222481)*(cj1)*(pz)*(x454))));
            evalcond[10]=((0.299999999999272)+(((-3.33333333334303)*(px)*(x445)))+(((12.2222222222481)*(x451)))+(x454)+(((-22.2222222222481)*(cj1)*(pz)*(x451)))+(((-22.2222222222481)*(py)*(x454))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j0array[0]=0;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x455=x376;
            IKReal x456=x372;
            IKReal x457=x374;
            IKReal x458=((0.0450000000000728)*(cj3));
            IKReal x459=((0.299999999999272)*(sj3));
            IKReal x460=((0.150000000001455)*(sj1)*(x459));
            IKReal x461=((6.66666666668607)*(sj1)*(x458));
            IKReal x462=((0.550000000002910)*(sj1));
            IKReal x463=((x462)+(x461)+(x460));
            IKReal x464=((((-1.00000000000000)*(py)))+(x463));
            IKReal x465=((0.150000000001455)*(x459));
            evalcond[0]=((0.0450000000000728)+(x459)+(px)+(((-1.00000000000000)*(x458))));
            evalcond[1]=((((1.81818181817653)*(pz)*(x462)))+(((-1.00000000000000)*(cj1)*(py))));
            evalcond[2]=((((-1.00000000000000)*(pz)))+(((cj1)*(x465)))+(((6.66666666668607)*(cj1)*(x458)))+(((0.550000000002910)*(cj1))));
            evalcond[3]=((0.396550000004936)+(((-1.00000000000000)*(x455)))+(((-1.00000000000000)*(x456)))+(((-1.00000000000000)*(x457)))+(((7.24333333340473)*(x458)))+(((1.70000000002619)*(x465))));
            evalcond[4]=x464;
            evalcond[5]=((0.550000000002910)+(((-1.81818181817653)*(py)*(x462)))+(x465)+(((-1.00000000000000)*(cj1)*(pz)))+(((6.66666666668607)*(x458))));
            evalcond[6]=((-0.212500000005093)+(((1.10000000000582)*(cj1)*(pz)))+(((-1.00000000000000)*(x455)))+(((-1.00000000000000)*(x456)))+(((-0.0900000000001455)*(px)))+(((2.00000000000000)*(py)*(x462)))+(((-1.00000000000000)*(x457))));
            evalcond[7]=((-0.0450000000000728)+(((-1.00000000000000)*(x459)))+(((-1.00000000000000)*(px)))+(x458));
            evalcond[8]=x464;
            evalcond[9]=((-0.0450000000000728)+(x458)+(((22.2222222222481)*(py)*(x460)))+(((22.2222222222481)*(cj1)*(pz)*(x465)))+(((-12.2222222222481)*(x465)))+(((22.2222222222481)*(px)*(x458))));
            evalcond[10]=((0.299999999999272)+(((12.2222222222481)*(x458)))+(((-3.33333333334303)*(py)*(x461)))+(x465)+(((-22.2222222222481)*(cj1)*(pz)*(x458)))+(((22.2222222222481)*(px)*(x465))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j0array[0]=((0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x466=x376;
            IKReal x467=x372;
            IKReal x468=x374;
            IKReal x469=((0.0450000000000728)*(sj1)*(sj3));
            IKReal x470=((0.299999999999272)*(cj3)*(sj1));
            IKReal x471=((0.550000000002910)*(sj1));
            IKReal x472=((x470)+(x471)+(x469)+(px));
            IKReal x473=((0.0450000000000728)*(cj3));
            IKReal x474=((0.299999999999272)*(sj3));
            IKReal x475=((0.150000000001455)*(x474));
            evalcond[0]=((0.0450000000000728)+(x474)+(((-1.00000000000000)*(x473)))+(py));
            evalcond[1]=((((1.81818181817653)*(pz)*(x471)))+(((cj1)*(px))));
            evalcond[2]=((((-1.00000000000000)*(pz)))+(((6.66666666668607)*(cj1)*(x473)))+(((0.550000000002910)*(cj1)))+(((cj1)*(x475))));
            evalcond[3]=((0.396550000004936)+(((-1.00000000000000)*(x467)))+(((1.70000000002619)*(x475)))+(((-1.00000000000000)*(x466)))+(((7.24333333340473)*(x473)))+(((-1.00000000000000)*(x468))));
            evalcond[4]=x472;
            evalcond[5]=((0.550000000002910)+(x475)+(((6.66666666668607)*(x473)))+(((1.81818181817653)*(px)*(x471)))+(((-1.00000000000000)*(cj1)*(pz))));
            evalcond[6]=((-0.212500000005093)+(((-2.00000000000000)*(px)*(x471)))+(((1.10000000000582)*(cj1)*(pz)))+(((-1.00000000000000)*(x467)))+(((-0.0900000000001455)*(py)))+(((-1.00000000000000)*(x466)))+(((-1.00000000000000)*(x468))));
            evalcond[7]=((-1.00000000000000)*(x472));
            evalcond[8]=((-0.0450000000000728)+(((-1.00000000000000)*(py)))+(x473)+(((-1.00000000000000)*(x474))));
            evalcond[9]=((-0.0450000000000728)+(x473)+(((22.2222222222481)*(py)*(x473)))+(((-22.2222222222481)*(px)*(x469)))+(((22.2222222222481)*(cj1)*(pz)*(x475)))+(((-12.2222222222481)*(x475))));
            evalcond[10]=((0.299999999999272)+(x475)+(((12.2222222222481)*(x473)))+(((3.33333333334303)*(px)*(x470)))+(((-22.2222222222481)*(cj1)*(pz)*(x473)))+(((22.2222222222481)*(py)*(x475))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j0array[0]=3.14159265358979;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x476=x376;
            IKReal x477=x372;
            IKReal x478=x374;
            IKReal x479=((0.299999999999272)*(sj3));
            IKReal x480=((0.0450000000000728)+(x479));
            IKReal x481=((0.0450000000000728)*(cj3));
            IKReal x482=((px)+(x481));
            IKReal x483=((((-1.00000000000000)*(x482)))+(x480));
            IKReal x484=((0.150000000001455)*(sj1)*(x479));
            IKReal x485=((6.66666666668607)*(sj1)*(x481));
            IKReal x486=((0.550000000002910)*(sj1));
            IKReal x487=((py)+(x485)+(x484)+(x486));
            IKReal x488=((0.150000000001455)*(x479));
            evalcond[0]=x483;
            evalcond[1]=((((cj1)*(py)))+(((1.81818181817653)*(pz)*(x486))));
            evalcond[2]=((((-1.00000000000000)*(pz)))+(((6.66666666668607)*(cj1)*(x481)))+(((0.550000000002910)*(cj1)))+(((cj1)*(x488))));
            evalcond[3]=((0.396550000004936)+(((-1.00000000000000)*(x478)))+(((7.24333333340473)*(x481)))+(((1.70000000002619)*(x488)))+(((-1.00000000000000)*(x476)))+(((-1.00000000000000)*(x477))));
            evalcond[4]=x487;
            evalcond[5]=((0.550000000002910)+(((6.66666666668607)*(x481)))+(((-1.00000000000000)*(cj1)*(pz)))+(x488)+(((1.81818181817653)*(py)*(x486))));
            evalcond[6]=((-0.212500000005093)+(((1.10000000000582)*(cj1)*(pz)))+(((-1.00000000000000)*(x478)))+(((0.0900000000001455)*(px)))+(((-1.00000000000000)*(x476)))+(((-1.00000000000000)*(x477)))+(((-2.00000000000000)*(py)*(x486))));
            evalcond[7]=x483;
            evalcond[8]=((-1.00000000000000)*(x487));
            evalcond[9]=((-0.0450000000000728)+(((-12.2222222222481)*(x488)))+(((22.2222222222481)*(cj1)*(pz)*(x488)))+(((-22.2222222222481)*(py)*(x484)))+(x481)+(((-22.2222222222481)*(px)*(x481))));
            evalcond[10]=((0.299999999999272)+(((3.33333333334303)*(py)*(x485)))+(((12.2222222222481)*(x481)))+(((-22.2222222222481)*(px)*(x488)))+(x488)+(((-22.2222222222481)*(cj1)*(pz)*(x481))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  )
            {
                j0array[0]=((-0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            }
            }
            }
            if( numsolutionsj0 == 0 ) { continue; }
            for(int ij0 = 0; ij0 < numsolutionsj0; ++ij0)
        {
        if( !j0valid[ij0] ) { continue; }
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        new_r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
        new_r01=((((cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0))));
        new_r02=((((-1.00000000000000)*(cj3)*(r02)*(sj0)))+(((cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
        new_r10=((((-1.00000000000000)*(cj0)*(r10)*(sj3)))+(((r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj3)*(r10)*(sj0)*(sj1))));
        new_r11=((((r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r11)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r21))));
        new_r12=((((-1.00000000000000)*(cj3)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r12)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)*(sj1)))+(((r02)*(sj0)*(sj3))));
        new_r20=((((r20)*(sj1)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00))));
        new_r21=((((-1.00000000000000)*(cj0)*(cj1)*(r01)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)))+(((r21)*(sj1))));
        new_r22=((((r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02))));
        {
        IKReal j5eval;
        j5eval=new_r11;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r20)), new_r00))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(new_r20, new_r22)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(new_r21)), ((-1.00000000000000)*(new_r01)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal j5array[1], cj5array[1], sj5array[1];
            bool j5valid[1]={false};
            j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))), new_r11);
            sj5array[0]=IKsin(j5array[0]);
            cj5array[0]=IKcos(j5array[0]);
            if( j5array[0] > IKPI )
                j5array[0]-=IK2PI;
            else if( j5array[0] < -IKPI )
                j5array[0]+=IK2PI;
            j5valid[0] = true;
            for(int ij5 = 0; ij5 < 1; ++ij5)
            {
            if( !j5valid[ij5] ) { continue; }
            j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
            
            {
            IKReal j6array[1], cj6array[1], sj6array[1];
            bool j6valid[1]={false};
            IKReal x489=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
            j6array[0]=IKatan2(((new_r12)*(x489)), ((new_r10)*(x489)));
            sj6array[0]=IKsin(j6array[0]);
            cj6array[0]=IKcos(j6array[0]);
            if( j6array[0] > IKPI )
                j6array[0]-=IK2PI;
            else if( j6array[0] < -IKPI )
                j6array[0]+=IK2PI;
            j6valid[0] = true;
            for(int ij6 = 0; ij6 < 1; ++ij6)
            {
            if( !j6valid[ij6] ) { continue; }
            j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
            
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.vfree.resize(0);
            }
            }
            }
            }
            }
            }
            
        }
        }
        }
        }
        }
        }
        }
        }
        
    } else
    {
        if( 1 )
        {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x490=(pz)*(pz);
        IKReal x491=((2.98679637344321)*(x490));
        IKReal x492=(py)*(py);
        IKReal x493=((2.98679637344321)*(x492));
        IKReal x494=(px)*(px);
        IKReal x495=((2.98679637344321)*(x494));
        IKReal x496=((x493)+(x491)+(x495));
        IKReal x497=((1.18441410189553)+(((-1.00000000000000)*(x496))));
        if( (x497) < -1.0001 || (x497) > 1.0001 )
            continue;
        IKReal x498=IKasin(x497);
        j3array[0]=((-1.34027003705316)+(((-1.00000000000000)*(x498))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.80132261653663)+(x498));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3)
        {
        if( !j3valid[ij3] ) { continue; }
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal evalcond[3]; int numsolutionsj0 = 0;
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
            {
            evalcond[0]=(((px)*(px))+((py)*(py)));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x499=x494;
                IKReal x500=x492;
                IKReal x501=((x499)+(x500));
                IKReal x502=((IKabs(x501) != 0)?(pow(x501,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x503=((0.0450000000000728)*(cj3)*(sj2));
                IKReal x504=((0.299999999999272)*(sj2)*(sj3));
                IKReal x505=((0.0450000000000728)*(sj2));
                IKReal x506=((x504)+(x505));
                IKReal x507=((((-1.00000000000000)*(x506)))+(x503));
                IKReal x508=((x502)*(x507));
                if( (x508) < -1.0001 || (x508) > 1.0001 )
                    continue;
                IKReal x509=IKasin(x508);
                IKReal x510=((-1.00000000000000)*(py));
                IKReal x511=IKatan2(x510, px);
                j0array[0]=((((-1.00000000000000)*(x509)))+(((-1.00000000000000)*(x511))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x511)))+(x509));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                numsolutionsj0 = 2;
                
            } else
            {
            IKReal x512=((0.0450000000000728)*(cj3)*(sj2));
            IKReal x513=((0.299999999999272)*(sj2)*(sj3));
            IKReal x514=((0.0450000000000728)*(sj2));
            IKReal x515=((x514)+(x513)+(py));
            IKReal x516=((x512)+(((-1.00000000000000)*(x515))));
            evalcond[0]=((0.396550000001298)+(((0.0765000000010332)*(sj3)))+(((0.325950000002194)*(cj3)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[1]=x516;
            evalcond[2]=x516;
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=0;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x517=((0.299999999999272)*(sj2)*(sj3));
            IKReal x518=((0.0450000000000728)*(sj2));
            IKReal x519=((x518)+(x517));
            IKReal x520=((cj3)*(x518));
            IKReal x521=((px)+(x520));
            evalcond[0]=((0.396550000001298)+(((0.0765000000010332)*(sj3)))+(((0.325950000002194)*(cj3)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[1]=((((-1.00000000000000)*(x519)))+(x521));
            evalcond[2]=((x519)+(((-1.00000000000000)*(x521))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=((0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x522=((0.299999999999272)*(sj2)*(sj3));
            IKReal x523=((0.0450000000000728)*(sj2));
            IKReal x524=((x522)+(x523));
            IKReal x525=((cj3)*(x523));
            IKReal x526=((py)+(x525));
            evalcond[0]=((0.396550000001298)+(((0.0765000000010332)*(sj3)))+(((0.325950000002194)*(cj3)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[1]=((((-1.00000000000000)*(x524)))+(x526));
            evalcond[2]=((((-1.00000000000000)*(x526)))+(x524));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=3.14159265358979;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x527=((0.0450000000000728)*(cj3)*(sj2));
            IKReal x528=((0.299999999999272)*(sj2)*(sj3));
            IKReal x529=((0.0450000000000728)*(sj2));
            IKReal x530=((px)+(x528)+(x529));
            IKReal x531=((((-1.00000000000000)*(x530)))+(x527));
            evalcond[0]=((0.396550000001298)+(((0.0765000000010332)*(sj3)))+(((0.325950000002194)*(cj3)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[1]=x531;
            evalcond[2]=x531;
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=((-0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            if( numsolutionsj0 == 0 ) { continue; }
            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < numsolutionsj0; ++ij0)
        {
        if( !j0valid[ij0] ) { continue; }
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal evalcond[13]; int numsolutionsj1 = 0;
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
            {
            evalcond[0]=(((((((py)*(sj0)))+(((cj0)*(px)))))*(((((py)*(sj0)))+(((cj0)*(px))))))+((pz)*(pz)));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x532=((py)*(sj0));
                IKReal x533=((cj0)*(px));
                IKReal x534=((x533)+(x532));
                IKReal x535=((-1.00000000000000)*(x534));
                IKReal x536=(x535)*(x535);
                IKReal x537=x490;
                IKReal x538=((x537)+(x536));
                IKReal x539=((IKabs(x538) != 0)?((IKReal)1/(x538)):(IKReal)1.0e30);
                IKReal x540=((0.0450000000000728)*(cj2)*(cj3));
                j1array[0]=IKatan2(((x539)*(((((-1.00000000000000)*(pz)*(((((-1.00000000000000)*(x540)))+(((0.0450000000000728)*(cj2)))+(((0.299999999999272)*(cj2)*(sj3)))))))+(((-1.00000000000000)*(x535)*(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3)))))))))), ((x539)*(((((x535)*(((x540)+(((-0.299999999999272)*(cj2)*(sj3)))+(((-0.0450000000000728)*(cj2)))))))+(((pz)*(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3)))))))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x541=IKcos(j2);
            evalcond[0]=((((-1.00000000000000)*(((((py)*(sj0)))+(((cj0)*(px)))))*(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3)))))))+(((pz)*(((((-0.300000000002910)*(sj3)*(x541)))+(((0.0450000000005275)*(cj3)*(x541)))+(((-0.0450000000000728)*(x541))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x542=((0.299999999999272)*(cj3));
                IKReal x543=((0.0450000000000728)*(sj3));
                IKReal x544=((0.550000000002910)+(x542)+(x543));
                IKReal x545=((0.150000000001455)*(cj2)*(x542));
                IKReal x546=((0.0450000000000728)*(cj2));
                IKReal x547=((148.148148149252)*(x543)*(x546));
                IKReal x548=((x546)+(x547));
                IKReal x549=((((-1.00000000000000)*(x548)))+(x545));
                IKReal x550=((pz)*(x549));
                IKReal x551=((py)*(sj0));
                IKReal x552=((cj0)*(px));
                IKReal x553=((x552)+(x551));
                IKReal x554=((-1.00000000000000)*(x553));
                IKReal x555=((x544)*(x554));
                IKReal x556=((x550)+(x555));
                IKReal x557=((IKabs(x556) != 0)?((IKReal)1/(x556)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x557)*(((((-1.00000000000000)*((x544)*(x544))))+((pz)*(pz))))), ((x557)*(((((pz)*(x554)))+(((x544)*(x549)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x558=IKsin(j2);
            evalcond[0]=((((x558)*((pz)*(pz))))+(((((((py)*(sj0)))+(((cj0)*(px)))))*(((((py)*(sj0)*(x558)))+(((cj0)*(px)*(x558))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x559=((py)*(sj0)*(sj2));
                IKReal x560=((cj0)*(px)*(sj2));
                IKReal x561=((x560)+(x559));
                IKReal x562=((-1.00000000000000)*(x561));
                IKReal x563=x490;
                IKReal x564=((sj2)*(x563));
                IKReal x565=((py)*(sj0));
                IKReal x566=((cj0)*(px));
                IKReal x567=((x566)+(x565));
                IKReal x568=((-1.00000000000000)*(x567));
                IKReal x569=((x562)*(x568));
                IKReal x570=((x569)+(x564));
                IKReal x571=((IKabs(x570) != 0)?((IKReal)1/(x570)):(IKReal)1.0e30);
                IKReal x572=((cj0)*(cj2)*(py));
                j1array[0]=IKatan2(((x571)*(((((-1.00000000000000)*(x562)*(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3)))))))+(((-1.00000000000000)*(pz)*(((((cj2)*(px)*(sj0)))+(((-1.00000000000000)*(x572)))))))))), ((x571)*(((((x568)*(((x572)+(((-1.00000000000000)*(cj2)*(px)*(sj0)))))))+(((pz)*(sj2)*(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3)))))))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x573=IKcos(j2);
            evalcond[0]=((((pz)*(((0.550000000002910)+(((0.299999999999272)*(cj3)))+(((0.0450000000000728)*(sj3)))))))+(((((((py)*(sj0)))+(((cj0)*(px)))))*(((((-0.0450000000000728)*(x573)))+(((-0.299999999999272)*(sj3)*(x573)))+(((0.0450000000000728)*(cj3)*(x573))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x574=((0.0450000000000728)*(cj2)*(cj3));
                IKReal x575=((0.0450000000000728)*(cj2));
                IKReal x576=((6.66666666668607)*(sj3)*(x575));
                IKReal x577=((x575)+(x576));
                IKReal x578=((py)*(sj0));
                IKReal x579=((cj0)*(px));
                IKReal x580=((x579)+(x578));
                IKReal x581=((-1.00000000000000)*(x580));
                IKReal x582=((x577)+(((-1.00000000000000)*(x574))));
                IKReal x583=((x574)+(((-1.00000000000000)*(x577))));
                IKReal x584=((0.299999999999272)*(cj3));
                IKReal x585=((0.0450000000000728)*(sj3));
                IKReal x586=((0.550000000002910)+(x584)+(x585));
                IKReal x587=((pz)*(x586));
                IKReal x588=((x581)*(x583));
                IKReal x589=((((-1.00000000000000)*(x588)))+(x587));
                IKReal x590=((IKabs(x589) != 0)?((IKReal)1/(x589)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x590)*(((((-1.00000000000000)*(pz)*(x581)))+(((-1.00000000000000)*(x582)*(x586)))))), ((x590)*((((pz)*(pz))+(((x582)*(x583)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x591=((0.299999999999272)*(cj3));
            IKReal x592=((0.0450000000000728)*(sj3));
            IKReal x593=((0.550000000002910)+(x592)+(x591));
            IKReal x594=((((-1.00000000000000)*(pz)))+(x593));
            IKReal x595=((0.0450000000000728)*(cj2));
            IKReal x596=((148.148148149252)*(x592)*(x595));
            IKReal x597=((x596)+(x595));
            IKReal x598=((py)*(sj0));
            IKReal x599=((3.33333333337214)*(x591)*(x595));
            IKReal x600=((cj0)*(px));
            IKReal x601=((x599)+(x598)+(x600));
            IKReal x602=((((-1.00000000000000)*(x601)))+(x597));
            IKReal x603=x494;
            IKReal x604=x490;
            IKReal x605=x492;
            IKReal x606=((0.150000000001455)*(x591));
            evalcond[0]=((0.396550000001298)+(((-1.00000000000000)*(x605)))+(((-1.00000000000000)*(x603)))+(((7.24333333334653)*(x606)))+(((-1.00000000000000)*(x604)))+(((1.70000000002619)*(x592))));
            evalcond[1]=((((sj2)*(x606)))+(((-0.0450000000000728)*(sj2)))+(((-6.66666666668607)*(sj2)*(x592)))+(((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[2]=x594;
            evalcond[3]=x602;
            evalcond[4]=((((-1.00000000000000)*(sj2)*(x600)))+(((-22.2222222222481)*(cj0)*(py)*(x595)))+(((-1.00000000000000)*(sj2)*(x598)))+(((22.2222222222481)*(px)*(sj0)*(x595))));
            evalcond[5]=x594;
            evalcond[6]=((0.0450000000000728)+(((-1.00000000000000)*(x606)))+(((6.66666666668607)*(x592)))+(((cj0)*(py)*(sj2)))+(((-1.00000000000000)*(px)*(sj0)*(sj2)))+(((-22.2222222222481)*(x595)*(x598)))+(((-22.2222222222481)*(x595)*(x600))));
            evalcond[7]=x602;
            evalcond[8]=((-0.212500000005093)+(((1.10000000000582)*(pz)))+(((-1.00000000000000)*(x605)))+(((2.00000000000000)*(x595)*(x598)))+(((-1.00000000000000)*(x603)))+(((0.0900000000001455)*(px)*(sj0)*(sj2)))+(((2.00000000000000)*(x595)*(x600)))+(((-1.00000000000000)*(x604)))+(((-0.0900000000001455)*(cj0)*(py)*(sj2))));
            evalcond[9]=((((-1.00000000000000)*(px)))+(((-1.00000000000000)*(cj0)*(x599)))+(((0.0450000000000728)*(sj0)*(sj2)))+(((cj0)*(x596)))+(((6.66666666668607)*(sj0)*(sj2)*(x592)))+(((-1.00000000000000)*(sj0)*(sj2)*(x606)))+(((cj0)*(x595))));
            evalcond[10]=((((-1.00000000000000)*(py)))+(((-6.66666666668607)*(cj0)*(sj2)*(x592)))+(((cj0)*(sj2)*(x606)))+(((sj0)*(x596)))+(((-1.00000000000000)*(sj0)*(x599)))+(((sj0)*(x595)))+(((-0.0450000000000728)*(cj0)*(sj2))));
            evalcond[11]=((-0.0450000000000728)+(((22.2222222222481)*(pz)*(x592)))+(((-22.2222222222481)*(px)*(sj0)*(sj2)*(x606)))+(((-22.2222222220153)*(x599)*(x600)))+(((-12.2222222222481)*(x592)))+(((22.2222222222481)*(cj0)*(py)*(sj2)*(x606)))+(x606)+(((-22.2222222220153)*(x598)*(x599))));
            evalcond[12]=((0.299999999999272)+(((22.2222222222481)*(cj0)*(py)*(sj2)*(x592)))+(((-3.33333333331393)*(x596)*(x598)))+(((-3.33333333331393)*(x596)*(x600)))+(((-22.2222222222481)*(px)*(sj0)*(sj2)*(x592)))+(((-22.2222222222481)*(pz)*(x606)))+(x592)+(((12.2222222222481)*(x606))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  && IKabs(evalcond[12]) <= 0.000010  )
            {
                j1array[0]=0;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x607=((0.0450000000000728)*(cj2)*(cj3));
            IKReal x608=((0.0450000000000728)*(cj2));
            IKReal x609=((6.66666666668607)*(sj3)*(x608));
            IKReal x610=((pz)+(x609)+(x608));
            IKReal x611=((0.299999999999272)*(cj3));
            IKReal x612=((0.0450000000000728)*(sj3));
            IKReal x613=((0.550000000002910)+(x611)+(x612));
            IKReal x614=((py)*(sj0));
            IKReal x615=((cj0)*(px));
            IKReal x616=((x614)+(x615));
            IKReal x617=((x613)+(((-1.00000000000000)*(x616))));
            IKReal x618=x494;
            IKReal x619=x490;
            IKReal x620=x492;
            IKReal x621=((0.150000000001455)*(x611));
            evalcond[0]=((0.396550000001298)+(((7.24333333334653)*(x621)))+(((-1.00000000000000)*(x618)))+(((-1.00000000000000)*(x620)))+(((-1.00000000000000)*(x619)))+(((1.70000000002619)*(x612))));
            evalcond[1]=((((-6.66666666668607)*(sj2)*(x612)))+(((-0.0450000000000728)*(sj2)))+(((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py)))+(((sj2)*(x621))));
            evalcond[2]=x617;
            evalcond[3]=((((-1.00000000000000)*(x607)))+(x610));
            evalcond[4]=((((22.2222222222481)*(px)*(sj0)*(x608)))+(((-22.2222222222481)*(cj0)*(py)*(x608)))+(((pz)*(sj2))));
            evalcond[5]=((((-1.00000000000000)*(x610)))+(x607));
            evalcond[6]=((0.0450000000000728)+(((-1.00000000000000)*(x621)))+(((cj0)*(py)*(sj2)))+(((-1.00000000000000)*(px)*(sj0)*(sj2)))+(((6.66666666668607)*(x612)))+(((22.2222222222481)*(pz)*(x608))));
            evalcond[7]=x617;
            evalcond[8]=((-0.212500000005093)+(((1.10000000000582)*(x614)))+(((-1.00000000000000)*(x618)))+(((-1.00000000000000)*(x620)))+(((-1.00000000000000)*(x619)))+(((0.0900000000001455)*(px)*(sj0)*(sj2)))+(((-0.0900000000001455)*(cj0)*(py)*(sj2)))+(((1.10000000000582)*(x615)))+(((-2.00000000000000)*(pz)*(x608))));
            evalcond[9]=((((6.66666666668607)*(sj0)*(sj2)*(x612)))+(((0.550000000002910)*(cj0)))+(((-1.00000000000000)*(px)))+(((0.0450000000000728)*(sj0)*(sj2)))+(((cj0)*(x612)))+(((6.66666666662786)*(cj0)*(x621)))+(((-1.00000000000000)*(sj0)*(sj2)*(x621))));
            evalcond[10]=((((-1.00000000000000)*(py)))+(((sj0)*(x612)))+(((6.66666666662786)*(sj0)*(x621)))+(((cj0)*(sj2)*(x621)))+(((0.550000000002910)*(sj0)))+(((-0.0450000000000728)*(cj0)*(sj2)))+(((-6.66666666668607)*(cj0)*(sj2)*(x612))));
            evalcond[11]=((-0.0450000000000728)+(((22.2222222222481)*(x612)*(x615)))+(((22.2222222222481)*(x612)*(x614)))+(((22.2222222222481)*(pz)*(x607)))+(((-12.2222222222481)*(x612)))+(((-22.2222222222481)*(px)*(sj0)*(sj2)*(x621)))+(((22.2222222222481)*(cj0)*(py)*(sj2)*(x621)))+(x621));
            evalcond[12]=((0.299999999999272)+(((-22.2222222222481)*(x614)*(x621)))+(((12.2222222222481)*(x621)))+(((-22.2222222222481)*(px)*(sj0)*(sj2)*(x612)))+(x612)+(((-22.2222222222481)*(x615)*(x621)))+(((22.2222222222481)*(cj0)*(py)*(sj2)*(x612)))+(((3.33333333334303)*(pz)*(x609))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  && IKabs(evalcond[12]) <= 0.000010  )
            {
                j1array[0]=((0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x622=((0.299999999999272)*(cj3));
            IKReal x623=((0.0450000000000728)*(sj3));
            IKReal x624=((0.150000000001455)*(cj2)*(x622));
            IKReal x625=((py)*(sj0));
            IKReal x626=((0.0450000000000728)*(cj2));
            IKReal x627=((148.148148149252)*(x623)*(x626));
            IKReal x628=((cj0)*(px));
            IKReal x629=((x625)+(x627)+(x626)+(x628));
            IKReal x630=x494;
            IKReal x631=x490;
            IKReal x632=x492;
            IKReal x633=((0.150000000001455)*(x622));
            evalcond[0]=((0.396550000001298)+(((-1.00000000000000)*(x630)))+(((7.24333333334653)*(x633)))+(((1.70000000002619)*(x623)))+(((-1.00000000000000)*(x632)))+(((-1.00000000000000)*(x631))));
            evalcond[1]=((((-0.0450000000000728)*(sj2)))+(((-6.66666666668607)*(sj2)*(x623)))+(((sj2)*(x633)))+(((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[2]=((0.550000000002910)+(pz)+(x623)+(x622));
            evalcond[3]=((((-1.00000000000000)*(x624)))+(x629));
            evalcond[4]=((((sj2)*(x625)))+(((sj2)*(x628)))+(((22.2222222222481)*(px)*(sj0)*(x626)))+(((-22.2222222222481)*(cj0)*(py)*(x626))));
            evalcond[5]=((-0.550000000002910)+(((-1.00000000000000)*(x622)))+(((-1.00000000000000)*(pz)))+(((-1.00000000000000)*(x623))));
            evalcond[6]=((0.0450000000000728)+(((22.2222222222481)*(x625)*(x626)))+(((cj0)*(py)*(sj2)))+(((-1.00000000000000)*(px)*(sj0)*(sj2)))+(((22.2222222222481)*(x626)*(x628)))+(((-1.00000000000000)*(x633)))+(((6.66666666668607)*(x623))));
            evalcond[7]=((((-1.00000000000000)*(x629)))+(x624));
            evalcond[8]=((-0.212500000005093)+(((-1.00000000000000)*(x630)))+(((-2.00000000000000)*(x626)*(x628)))+(((-2.00000000000000)*(x625)*(x626)))+(((0.0900000000001455)*(px)*(sj0)*(sj2)))+(((-1.10000000000582)*(pz)))+(((-0.0900000000001455)*(cj0)*(py)*(sj2)))+(((-1.00000000000000)*(x632)))+(((-1.00000000000000)*(x631))));
            evalcond[9]=((((-1.00000000000000)*(px)))+(((0.0450000000000728)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(x627)))+(((6.66666666668607)*(sj0)*(sj2)*(x623)))+(((-1.00000000000000)*(cj0)*(x626)))+(((-1.00000000000000)*(sj0)*(sj2)*(x633)))+(((cj0)*(x624))));
            evalcond[10]=((((-1.00000000000000)*(py)))+(((cj0)*(sj2)*(x633)))+(((-1.00000000000000)*(sj0)*(x626)))+(((-6.66666666668607)*(cj0)*(sj2)*(x623)))+(((-1.00000000000000)*(sj0)*(x627)))+(((-0.0450000000000728)*(cj0)*(sj2)))+(((sj0)*(x624))));
            evalcond[11]=((-0.0450000000000728)+(((-12.2222222222481)*(x623)))+(((-22.2222222222481)*(px)*(sj0)*(sj2)*(x633)))+(((22.2222222222481)*(x624)*(x625)))+(((22.2222222222481)*(x624)*(x628)))+(((22.2222222222481)*(cj0)*(py)*(sj2)*(x633)))+(x633)+(((-22.2222222222481)*(pz)*(x623))));
            evalcond[12]=((0.299999999999272)+(((3.33333333331393)*(x625)*(x627)))+(((12.2222222222481)*(x633)))+(((22.2222222222481)*(pz)*(x633)))+(x623)+(((3.33333333331393)*(x627)*(x628)))+(((22.2222222222481)*(cj0)*(py)*(sj2)*(x623)))+(((-22.2222222222481)*(px)*(sj0)*(sj2)*(x623))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  && IKabs(evalcond[12]) <= 0.000010  )
            {
                j1array[0]=3.14159265358979;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x634=((0.0450000000000728)*(cj2));
            IKReal x635=((6.66666666668607)*(sj3)*(x634));
            IKReal x636=((x634)+(x635));
            IKReal x637=((cj3)*(x634));
            IKReal x638=((pz)+(x637));
            IKReal x639=((((-1.00000000000000)*(x638)))+(x636));
            IKReal x640=((0.299999999999272)*(cj3));
            IKReal x641=((py)*(sj0));
            IKReal x642=((0.0450000000000728)*(sj3));
            IKReal x643=((cj0)*(px));
            IKReal x644=x494;
            IKReal x645=x490;
            IKReal x646=x492;
            IKReal x647=((0.150000000001455)*(x640));
            evalcond[0]=((0.396550000001298)+(((-1.00000000000000)*(x646)))+(((7.24333333334653)*(x647)))+(((-1.00000000000000)*(x645)))+(((1.70000000002619)*(x642)))+(((-1.00000000000000)*(x644))));
            evalcond[1]=((((-6.66666666668607)*(sj2)*(x642)))+(((sj2)*(x647)))+(((-0.0450000000000728)*(sj2)))+(((px)*(sj0)))+(((-1.00000000000000)*(cj0)*(py))));
            evalcond[2]=((0.550000000002910)+(x643)+(x642)+(x641)+(x640));
            evalcond[3]=x639;
            evalcond[4]=((((-1.00000000000000)*(pz)*(sj2)))+(((22.2222222222481)*(px)*(sj0)*(x634)))+(((-22.2222222222481)*(cj0)*(py)*(x634))));
            evalcond[5]=x639;
            evalcond[6]=((0.0450000000000728)+(((6.66666666668607)*(x642)))+(((-22.2222222222481)*(pz)*(x634)))+(((cj0)*(py)*(sj2)))+(((-1.00000000000000)*(px)*(sj0)*(sj2)))+(((-1.00000000000000)*(x647))));
            evalcond[7]=((-0.550000000002910)+(((-1.00000000000000)*(x643)))+(((-1.00000000000000)*(x642)))+(((-1.00000000000000)*(x641)))+(((-1.00000000000000)*(x640))));
            evalcond[8]=((-0.212500000005093)+(((-1.10000000000582)*(x641)))+(((-1.00000000000000)*(x646)))+(((2.00000000000000)*(pz)*(x634)))+(((-1.10000000000582)*(x643)))+(((-1.00000000000000)*(x645)))+(((0.0900000000001455)*(px)*(sj0)*(sj2)))+(((-1.00000000000000)*(x644)))+(((-0.0900000000001455)*(cj0)*(py)*(sj2))));
            evalcond[9]=((((-6.66666666662786)*(cj0)*(x647)))+(((-1.00000000000000)*(px)))+(((-1.00000000000000)*(cj0)*(x642)))+(((6.66666666668607)*(sj0)*(sj2)*(x642)))+(((0.0450000000000728)*(sj0)*(sj2)))+(((-0.550000000002910)*(cj0)))+(((-1.00000000000000)*(sj0)*(sj2)*(x647))));
            evalcond[10]=((((-1.00000000000000)*(py)))+(((-6.66666666668607)*(cj0)*(sj2)*(x642)))+(((cj0)*(sj2)*(x647)))+(((-0.0450000000000728)*(cj0)*(sj2)))+(((-1.00000000000000)*(sj0)*(x642)))+(((-0.550000000002910)*(sj0)))+(((-6.66666666662786)*(sj0)*(x647))));
            evalcond[11]=((-0.0450000000000728)+(x647)+(((22.2222222222481)*(cj0)*(py)*(sj2)*(x647)))+(((-22.2222222222481)*(x642)*(x643)))+(((-12.2222222222481)*(x642)))+(((-22.2222222222481)*(px)*(sj0)*(sj2)*(x647)))+(((-22.2222222222481)*(x641)*(x642)))+(((-22.2222222222481)*(pz)*(x637))));
            evalcond[12]=((0.299999999999272)+(((22.2222222222481)*(x641)*(x647)))+(((-22.2222222222481)*(px)*(sj0)*(sj2)*(x642)))+(x642)+(((-3.33333333334303)*(pz)*(x635)))+(((22.2222222222481)*(cj0)*(py)*(sj2)*(x642)))+(((22.2222222222481)*(x643)*(x647)))+(((12.2222222222481)*(x647))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  && IKabs(evalcond[12]) <= 0.000010  )
            {
                j1array[0]=((-0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            }
            }
            }
            if( numsolutionsj1 == 0 ) { continue; }
            for(int ij1 = 0; ij1 < numsolutionsj1; ++ij1)
        {
        if( !j1valid[ij1] ) { continue; }
        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
        
        new_r00=((((cj0)*(cj1)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r00)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj1))));
        new_r01=((((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj1)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r11)*(sj0)))+(((cj0)*(cj1)*(cj2)*(cj3)*(r01)))+(((cj3)*(r01)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj2))));
        new_r02=((((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj2)))+(((cj0)*(cj1)*(cj2)*(cj3)*(r02)))+(((cj3)*(r02)*(sj0)*(sj2)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r12)*(sj0))));
        new_r10=((((cj0)*(r10)*(sj2)*(sj3)))+(((cj2)*(r20)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj2)*(r00)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj3)*(r10)*(sj0)*(sj1)))+(((-1.00000000000000)*(r00)*(sj0)*(sj2)*(sj3))));
        new_r11=((((-1.00000000000000)*(cj1)*(cj2)*(r11)*(sj0)*(sj3)))+(((cj0)*(r11)*(sj2)*(sj3)))+(((cj2)*(r21)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r21))));
        new_r12=((((-1.00000000000000)*(cj3)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj2)*(r02)*(sj3)))+(((cj0)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(r02)*(sj0)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)*(sj0)*(sj3))));
        new_r20=((((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((cj1)*(r10)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)))+(((cj0)*(cj1)*(r00)*(sj2)))+(((cj0)*(cj2)*(r10))));
        new_r21=((((cj0)*(cj1)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)))+(((cj1)*(r11)*(sj0)*(sj2)))+(((cj0)*(cj2)*(r11)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2))));
        new_r22=((((cj0)*(cj1)*(r02)*(sj2)))+(((cj0)*(cj2)*(r12)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)))+(((cj1)*(r12)*(sj0)*(sj2))));
        {
        IKReal j5eval;
        j5eval=new_r11;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r20)), new_r00))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(new_r20, new_r22)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(new_r21)), ((-1.00000000000000)*(new_r01)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond;
                evalcond=IKcos(j4);
                if( IKabs(evalcond) < 0.00001 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))), new_r11);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x648=IKsin(j4);
                IKReal x649=((IKabs(x648) != 0)?((IKReal)1/(x648)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((new_r00)*(x649)), ((-1.00000000000000)*(new_r02)*(x649)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                
            } else
            {
                if( 1 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))), new_r11);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal evalcond;
                    evalcond=IKsin(j5);
                    if( IKabs(evalcond) < 0.00001 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x650=IKcos(j5);
                    IKReal x651=((IKabs(x650) != 0)?((IKReal)1/(x650)):(IKReal)1.0e30);
                    IKReal x652=IKcos(j4);
                    IKReal x653=IKsin(j4);
                    j6array[0]=IKatan2(((((new_r02)*(x651)*(x652)))+(((new_r22)*(x651)*(x653)))), ((((-1.00000000000000)*(new_r02)*(x653)))+(((new_r22)*(x652)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x654=IKsin(j5);
                    IKReal x655=((IKabs(x654) != 0)?((IKReal)1/(x654)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((new_r12)*(x655)), ((new_r10)*(x655)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                }
                }
                }
                }
                }
                
            } else
            {
            }
            }
            }
            }
            }
            
        }
        }
        }
        }
        }
        }
        }
        }
        
    } else
    {
    }
    }
    }
    }
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
