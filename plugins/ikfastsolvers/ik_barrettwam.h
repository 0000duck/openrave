/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 33 generated on 2011-02-17 00:58:40.685149
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKcos(j[4]);
x6=((x2)*(x4));
x7=((x0)*(x1)*(x3));
x8=((x7)+(x6));
x9=IKcos(j[3]);
x10=((x8)*(x9));
x11=IKsin(j[1]);
x12=IKsin(j[3]);
x13=((x0)*(x11)*(x12));
x14=IKsin(j[4]);
x15=((x0)*(x1)*(x2));
x16=((x3)*(x4));
x17=((((-1.00000000000000)*(x16)))+(x15));
x18=IKsin(j[6]);
x19=IKcos(j[5]);
x20=((((-1.00000000000000)*(x13)))+(x10));
x21=((x20)*(x5));
x22=((x14)*(x17));
x23=((x21)+(x22));
x24=IKsin(j[5]);
x25=((-1.00000000000000)*(x8));
x26=((x12)*(x25));
x27=((x0)*(x11)*(x9));
x28=((((-1.00000000000000)*(x27)))+(x26));
x29=IKcos(j[6]);
x30=((((-1.00000000000000)*(x10)))+(x13));
x31=((x14)*(x30));
x32=((x17)*(x5));
x33=((x32)+(x31));
x34=((0.0450000000000000)*(x7));
x35=((0.0450000000000000)*(x6));
x36=((x1)*(x16));
x37=((x0)*(x2));
x38=((((-1.00000000000000)*(x37)))+(x36));
x39=((x11)*(x12)*(x4));
x40=((x1)*(x6));
x41=((x0)*(x3));
x42=((x40)+(x41));
x43=((x38)*(x9));
x44=((((-1.00000000000000)*(x39)))+(x43));
x45=((x44)*(x5));
x46=((x14)*(x42));
x47=((x46)+(x45));
x48=((x19)*(x47));
x49=((((-1.00000000000000)*(x36)))+(x37));
x50=((x12)*(x49));
x51=((x11)*(x4)*(x9));
x52=((x50)+(((-1.00000000000000)*(x51))));
x53=((x24)*(x52));
x54=((x48)+(x53));
x55=((-1.00000000000000)*(x43));
x56=((x39)+(x55));
x57=((x14)*(x56));
x58=((x42)*(x5));
x59=((x58)+(x57));
x60=((0.0450000000000000)*(x36));
x61=((0.0450000000000000)*(x37));
x62=((x1)*(x12));
x63=((x11)*(x3)*(x9));
x64=((x62)+(x63));
x65=((x14)*(x64));
x66=((x11)*(x2)*(x5));
x67=((x65)+(((-1.00000000000000)*(x66))));
x68=((x11)*(x12)*(x3));
x69=((x1)*(x9));
x70=((x68)+(((-1.00000000000000)*(x69))));
x71=((x24)*(x70));
x72=((-1.00000000000000)*(x64));
x73=((x5)*(x72));
x74=((x11)*(x14)*(x2));
x75=((((-1.00000000000000)*(x74)))+(x73));
x76=((x19)*(x75));
x77=((x76)+(x71));
eerot[0]=((((x29)*(((((x19)*(x23)))+(((x24)*(x28)))))))+(((x18)*(x33))));
eerot[1]=((((x29)*(x33)))+(((x18)*(((((-1.00000000000000)*(x19)*(x23)))+(((-1.00000000000000)*(x24)*(x28))))))));
eerot[2]=((((x23)*(x24)))+(((x19)*(((((-1.00000000000000)*(x26)))+(x27))))));
eetrans[0]=((0.220000000000000)+(((0.300000000000000)*(x27)))+(((x19)*(((((0.220000000000000)*(x27)))+(((-0.220000000000000)*(x26)))))))+(((0.550000000000000)*(x0)*(x11)))+(x35)+(x34)+(((x9)*(((((-1.00000000000000)*(x34)))+(((-1.00000000000000)*(x35)))))))+(((x24)*(((((0.220000000000000)*(x21)))+(((0.220000000000000)*(x22)))))))+(((0.0450000000000000)*(x13)))+(((x12)*(((((0.300000000000000)*(x7)))+(((0.300000000000000)*(x6))))))));
eerot[3]=((((x18)*(x59)))+(((x29)*(x54))));
eerot[4]=((((-1.00000000000000)*(x18)*(x54)))+(((x29)*(x59))));
eerot[5]=((((x19)*(((x51)+(((-1.00000000000000)*(x50)))))))+(((x24)*(x47))));
eetrans[1]=((0.140000000000000)+(((x24)*(((((0.220000000000000)*(x45)))+(((0.220000000000000)*(x46)))))))+(((0.550000000000000)*(x11)*(x4)))+(((0.0450000000000000)*(x39)))+(((x9)*(((x61)+(((-1.00000000000000)*(x60)))))))+(((x19)*(((((-0.220000000000000)*(x50)))+(((0.220000000000000)*(x51)))))))+(((x12)*(((((0.300000000000000)*(x36)))+(((-0.300000000000000)*(x37)))))))+(x60)+(((0.300000000000000)*(x51)))+(((-1.00000000000000)*(x61))));
eerot[6]=((((x18)*(x67)))+(((x29)*(x77))));
eerot[7]=((((x29)*(x67)))+(((-1.00000000000000)*(x18)*(x77))));
eerot[8]=((((x19)*(((x69)+(((-1.00000000000000)*(x68)))))))+(((x24)*(x75))));
eetrans[2]=((0.346000000000000)+(((-0.0450000000000000)*(x11)*(x3)))+(((x19)*(((((-0.220000000000000)*(x68)))+(((0.220000000000000)*(x69)))))))+(((x24)*(((((0.220000000000000)*(x73)))+(((-0.220000000000000)*(x74)))))))+(((0.550000000000000)*(x1)))+(((-0.300000000000000)*(x68)))+(((0.0450000000000000)*(x63)))+(((0.0450000000000000)*(x62)))+(((0.300000000000000)*(x69))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.220000000000000)+(px)+(((-0.220000000000000)*(r02))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.140000000000000)+(py)+(((-0.220000000000000)*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.346000000000000)+(pz)+(((-0.220000000000000)*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
IKReal x0=((2.98679637348110)*(pp));
IKReal x1=((-1.18441410190393)+(x0));
if( (((1.18441410190393)+(((-1.00000000000000)*(x0))))) < -1.0001 || (((1.18441410190393)+(((-1.00000000000000)*(x0))))) > 1.0001 )
    continue;
IKReal x2=((-1.00000000000000)*(IKasin(((1.18441410190393)+(((-1.00000000000000)*(x0)))))));
j3array[0]=((-1.34027003705633)+(x2));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+(((-1.00000000000000)*(x2))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
{
    j3valid[1]=false;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x3=(px)*(px);
IKReal x4=(py)*(py);
IKReal x5=((x3)+(x4));
if( (x5) < (IKReal)-0.00001 )
    continue;
IKReal x6=IKsqrt(x5);
IKReal x7=IKabs(x6);
IKReal x8=((IKabs(x7) != 0)?((IKReal)1/(x7)):(IKReal)1.0e30);
IKReal x9=((0.0450000000000000)*(cj3)*(sj2));
IKReal x10=((0.0450000000000000)*(sj2));
IKReal x11=((0.300000000000000)*(sj2)*(sj3));
IKReal x12=((x11)+(x10));
IKReal x13=((((-1.00000000000000)*(x12)))+(x9));
IKReal x14=((x13)*(x8));
if( (x14) < -1.0001 || (x14) > 1.0001 )
    continue;
IKReal x15=IKasin(x14);
IKReal x16=((-1.00000000000000)*(py));
IKReal x17=IKatan2(x16, px);
j0array[0]=((((-1.00000000000000)*(x17)))+(((-1.00000000000000)*(x15))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x17)))+(x15));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
dummyeval[0]=((((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(sj2)*((pz)*(pz))))+(((-1.00000000000000)*(sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x18=((cj2)*(cj3)*(pz));
IKReal x19=((6.66666666666667)*(cj2)*(pz)*(sj3));
IKReal x20=((12.2222222222222)*(py)*(sj0));
IKReal x21=((cj0)*(px)*(sj3));
IKReal x22=((6.66666666666667)*(cj0)*(cj3)*(px));
IKReal x23=((cj2)*(pz));
IKReal x24=((py)*(sj0)*(sj3));
IKReal x25=((6.66666666666667)*(cj3)*(py)*(sj0));
IKReal x26=((12.2222222222222)*(cj0)*(px));
IKReal x27=((x19)+(x24)+(x25)+(x26)+(x20)+(x21)+(x22)+(x23));
IKReal x28=((((-1.00000000000000)*(x27)))+(x18));
dummyeval[0]=x28;
dummyeval[1]=x28;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj2)*((pz)*(pz))))+(((-2.00000000000000)*(cj0)*(cj2)*(px)*(py)*(sj0)))+(((-1.00000000000000)*(cj2)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*(cj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x29=((0.300000000000000)*(sj3));
IKReal x30=((cj0)*(py));
IKReal x31=((0.0450000000000000)*(cj3));
IKReal x32=((px)*(sj0));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((-0.0450000000000000)+(((-1.00000000000000)*(x29)))+(((-1.00000000000000)*(x30)))+(x32)+(x31));
evalcond[3]=((0.0450000000000000)+(((-1.00000000000000)*(x31)))+(((-1.00000000000000)*(x32)))+(x30)+(x29));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x33=((0.150000000000000)*(sj3));
IKReal x34=((1.83333333333333)+(cj3)+(x33));
dummyeval[0]=x34;
dummyeval[1]=x34;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x35=((0.150000000000000)*(sj3));
IKReal x36=((1.83333333333333)+(cj3)+(x35));
dummyeval[0]=x36;
dummyeval[1]=x36;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((-1.00000000000000)*(py)*(sj0)*(sj3)))+(((-6.66666666666667)*(cj0)*(cj3)*(px)))+(((-12.2222222222222)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)*(sj3)))+(((-6.66666666666667)*(cj3)*(py)*(sj0)))+(((-12.2222222222222)*(cj0)*(px))));
dummyeval[1]=((1.83333333333333)+(cj3)+(((0.150000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x37=((0.0450000000000000)*(sj3));
IKReal x38=((0.300000000000000)*(cj3));
IKReal x39=((0.550000000000000)+(x38)+(x37));
j1array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(cj0)*(px)*(x38)))+(((-1.00000000000000)*(cj0)*(px)*(x37)))+(((-1.00000000000000)*(py)*(sj0)*(x38)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(py)*(sj0)*(x37))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(cj0)*(px)*(x38)))+(((-1.00000000000000)*(cj0)*(px)*(x37)))+(((-1.00000000000000)*(py)*(sj0)*(x38)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(py)*(sj0)*(x37)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*((x39)*(x39))))+((pz)*(pz))))), ((pz)*(((IKabs(x39) != 0)?((IKReal)1/(x39)):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x140=((0.0450000000000000)*(sj3));
IKReal x141=((0.300000000000000)*(cj3));
IKReal x142=((0.550000000000000)+(x140)+(x141));
IKReal x143=((IKabs(x142) != 0)?((IKReal)1/(x142)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x143)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))), ((pz)*(x143)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x144=((0.0450000000000000)*(sj3));
IKReal x145=((0.300000000000000)*(cj3));
IKReal x146=((0.550000000000000)+(x144)+(x145));
IKReal x147=((IKabs(x146) != 0)?((IKReal)1/(x146)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x147)*(((((cj0)*(px)))+(((py)*(sj0)))))), ((pz)*(x147)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x148=((0.300000000000000)*(sj3));
IKReal x149=((px)*(sj0));
IKReal x150=((0.0450000000000000)+(x148)+(x149));
IKReal x151=((0.0450000000000000)*(cj3));
IKReal x152=((cj0)*(py));
IKReal x153=((x152)+(x151));
IKReal x154=((((-1.00000000000000)*(x153)))+(x150));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x154;
evalcond[3]=x154;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x155=((0.150000000000000)*(sj3));
IKReal x156=((1.83333333333333)+(cj3)+(x155));
dummyeval[0]=x156;
dummyeval[1]=x156;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x157=((0.150000000000000)*(sj3));
IKReal x158=((1.83333333333333)+(cj3)+(x157));
dummyeval[0]=x158;
dummyeval[1]=x158;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((-1.00000000000000)*(py)*(sj0)*(sj3)))+(((-6.66666666666667)*(cj0)*(cj3)*(px)))+(((-12.2222222222222)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)*(sj3)))+(((-6.66666666666667)*(cj3)*(py)*(sj0)))+(((-12.2222222222222)*(cj0)*(px))));
dummyeval[1]=((1.83333333333333)+(cj3)+(((0.150000000000000)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x159=((0.0450000000000000)*(sj3));
IKReal x160=((0.300000000000000)*(cj3));
IKReal x161=((0.550000000000000)+(x160)+(x159));
j1array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(py)*(sj0)*(x159)))+(((-1.00000000000000)*(py)*(sj0)*(x160)))+(((-0.550000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(cj0)*(px)*(x159)))+(((-1.00000000000000)*(cj0)*(px)*(x160)))+(((-0.550000000000000)*(py)*(sj0))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(py)*(sj0)*(x159)))+(((-1.00000000000000)*(py)*(sj0)*(x160)))+(((-0.550000000000000)*(cj0)*(px)))+(((-1.00000000000000)*(cj0)*(px)*(x159)))+(((-1.00000000000000)*(cj0)*(px)*(x160)))+(((-0.550000000000000)*(py)*(sj0)))))):(IKReal)1.0e30))*((((pz)*(pz))+(((-1.00000000000000)*((x161)*(x161))))))), ((pz)*(((IKabs(x161) != 0)?((IKReal)1/(x161)):(IKReal)1.0e30))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x162=((0.0450000000000000)*(sj3));
IKReal x163=((0.300000000000000)*(cj3));
IKReal x164=((0.550000000000000)+(x162)+(x163));
IKReal x165=((IKabs(x164) != 0)?((IKReal)1/(x164)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x165)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))), ((pz)*(x165)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x166=((0.0450000000000000)*(sj3));
IKReal x167=((0.300000000000000)*(cj3));
IKReal x168=((0.550000000000000)+(x166)+(x167));
IKReal x169=((IKabs(x168) != 0)?((IKReal)1/(x168)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x169)*(((((cj0)*(px)))+(((py)*(sj0)))))), ((pz)*(x169)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x170=((px)*(sj0));
IKReal x171=((cj0)*(py));
IKReal x172=((((-1.00000000000000)*(x171)))+(x170));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x172;
evalcond[3]=x172;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz))))+(((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+(((-1.00000000000000)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x173=((cj3)*(pz));
IKReal x174=((12.2222222222222)*(py)*(sj0));
IKReal x175=((cj0)*(px)*(sj3));
IKReal x176=((6.66666666666667)*(cj0)*(cj3)*(px));
IKReal x177=((6.66666666666667)*(pz)*(sj3));
IKReal x178=((py)*(sj0)*(sj3));
IKReal x179=((6.66666666666667)*(cj3)*(py)*(sj0));
IKReal x180=((12.2222222222222)*(cj0)*(px));
IKReal x181=((x179)+(x178)+(x175)+(x174)+(x177)+(x176)+(x180)+(pz));
IKReal x182=((((-1.00000000000000)*(x181)))+(x173));
dummyeval[0]=x182;
dummyeval[1]=x182;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x183=((12.2222222222222)*(pz));
IKReal x184=((cj3)*(py)*(sj0));
IKReal x185=((cj0)*(cj3)*(px));
IKReal x186=((pz)*(sj3));
IKReal x187=((6.66666666666667)*(cj3)*(pz));
IKReal x188=((x184)+(x185)+(x186)+(x187)+(x183));
IKReal x189=((6.66666666666667)*(py)*(sj0)*(sj3));
IKReal x190=((6.66666666666667)*(cj0)*(px)*(sj3));
IKReal x191=((cj0)*(px));
IKReal x192=((py)*(sj0));
IKReal x193=((x192)+(x191)+(x190)+(x189));
IKReal x194=((((-1.00000000000000)*(x193)))+(x188));
dummyeval[0]=x194;
dummyeval[1]=x194;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x195=((0.300000000000000)*(sj3));
IKReal x196=((0.0450000000000000)+(x195));
IKReal x197=((0.0450000000000000)*(cj3));
IKReal x198=((((-1.00000000000000)*(x197)))+(x196));
IKReal x199=((0.550000000000000)*(pz));
IKReal x200=((1.00000000000000)*(py)*(sj0)*(x197));
IKReal x201=((1.00000000000000)*(cj0)*(px)*(x197));
IKReal x202=((0.300000000000000)*(cj3)*(pz));
IKReal x203=((0.0450000000000000)*(pz)*(sj3));
IKReal x204=((x199)+(x203)+(x202)+(x201)+(x200));
IKReal x205=((0.0450000000000000)*(cj0)*(px));
IKReal x206=((py)*(sj0)*(x195));
IKReal x207=((0.0450000000000000)*(py)*(sj0));
IKReal x208=((cj0)*(px)*(x195));
IKReal x209=((x207)+(x206)+(x205)+(x208));
IKReal x210=((((-1.00000000000000)*(x209)))+(x204));
IKReal x211=((IKabs(x210) != 0)?((IKReal)1/(x210)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x211)*(((((x198)*(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3)))))))+(((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))), ((x211)*(((((-1.00000000000000)*((x198)*(x198))))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x212=((0.0450000000000000)*(sj3));
IKReal x213=((0.300000000000000)*(cj3));
IKReal x214=((0.550000000000000)+(x212)+(x213));
IKReal x215=((0.0450000000000000)*(cj3)*(pz));
IKReal x216=((0.550000000000000)*(py)*(sj0));
IKReal x217=((1.00000000000000)*(cj0)*(px)*(x212));
IKReal x218=((0.300000000000000)*(pz)*(sj3));
IKReal x219=((1.00000000000000)*(py)*(sj0)*(x212));
IKReal x220=((0.550000000000000)*(cj0)*(px));
IKReal x221=((0.0450000000000000)*(pz));
IKReal x222=((py)*(sj0)*(x213));
IKReal x223=((cj0)*(px)*(x213));
IKReal x224=((x216)+(x217)+(x218)+(x219)+(x221)+(x220)+(x223)+(x222));
IKReal x225=((x215)+(((-1.00000000000000)*(x224))));
IKReal x226=((IKabs(x225) != 0)?((IKReal)1/(x225)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x226)*((((pz)*(pz))+(((-1.00000000000000)*((x214)*(x214))))))), ((-1.00000000000000)*(x226)*(((((x214)*(((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((0.300000000000000)*(sj3)))))))+(((pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x227=((0.300000000000000)*(sj3));
IKReal x228=((0.0450000000000000)+(x227));
IKReal x229=((0.0450000000000000)*(cj3));
IKReal x230=((x228)+(((-1.00000000000000)*(x229))));
IKReal x231=((cj0)*(px));
IKReal x232=((py)*(sj0));
IKReal x233=((x232)+(x231));
IKReal x234=((-1.00000000000000)*(x233));
IKReal x235=((0.0450000000000000)*(sj3));
IKReal x236=((0.300000000000000)*(cj3));
IKReal x237=((0.550000000000000)+(x236)+(x235));
IKReal x238=x4;
IKReal x239=(sj0)*(sj0);
IKReal x240=(x232)*(x232);
IKReal x241=(pz)*(pz);
IKReal x242=(cj0)*(cj0);
IKReal x243=x3;
IKReal x244=(x231)*(x231);
IKReal x245=((2.00000000000000)*(x231)*(x232));
IKReal x246=((x241)+(x240)+(x245)+(x244));
IKReal x247=((-1.00000000000000)*(x246));
IKReal x248=((IKabs(x247) != 0)?((IKReal)1/(x247)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x248)*(((((x234)*(x237)))+(((pz)*(x230)))))), ((x248)*(((((-1.00000000000000)*(pz)*(x237)))+(((x230)*(x234)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x249=((cj0)*(py));
IKReal x250=((px)*(sj0));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((x250)+(((-1.00000000000000)*(x249))));
evalcond[3]=((x249)+(((-1.00000000000000)*(x250))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz))))+(((-2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+(((-1.00000000000000)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x251=((6.66666666666667)*(py)*(sj0)*(sj3));
IKReal x252=((12.2222222222222)*(pz));
IKReal x253=((6.66666666666667)*(cj0)*(px)*(sj3));
IKReal x254=((pz)*(sj3));
IKReal x255=((6.66666666666667)*(cj3)*(pz));
IKReal x256=((cj0)*(px));
IKReal x257=((py)*(sj0));
IKReal x258=((x254)+(x255)+(x256)+(x257)+(x251)+(x252)+(x253));
IKReal x259=((cj3)*(x257));
IKReal x260=((cj3)*(x256));
IKReal x261=((x259)+(x260));
IKReal x262=((x258)+(((-1.00000000000000)*(x261))));
dummyeval[0]=x262;
dummyeval[1]=x262;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x263=((6.66666666666667)*(pz)*(sj3));
IKReal x264=((x263)+(pz));
IKReal x265=((12.2222222222222)*(py)*(sj0));
IKReal x266=((cj0)*(px)*(sj3));
IKReal x267=((6.66666666666667)*(cj0)*(cj3)*(px));
IKReal x268=((cj3)*(pz));
IKReal x269=((py)*(sj0)*(sj3));
IKReal x270=((6.66666666666667)*(cj3)*(py)*(sj0));
IKReal x271=((12.2222222222222)*(cj0)*(px));
IKReal x272=((x265)+(x267)+(x266)+(x269)+(x268)+(x270)+(x271));
IKReal x273=((x264)+(((-1.00000000000000)*(x272))));
dummyeval[0]=x273;
dummyeval[1]=x273;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x274=((0.0450000000000000)*(sj3));
IKReal x275=((0.300000000000000)*(cj3));
IKReal x276=((0.550000000000000)+(x274)+(x275));
IKReal x277=((0.300000000000000)*(pz)*(sj3));
IKReal x278=((0.0450000000000000)*(pz));
IKReal x279=((x277)+(x278));
IKReal x280=((0.550000000000000)*(py)*(sj0));
IKReal x281=((1.00000000000000)*(cj0)*(px)*(x274));
IKReal x282=((1.00000000000000)*(py)*(sj0)*(x274));
IKReal x283=((0.550000000000000)*(cj0)*(px));
IKReal x284=((1.00000000000000)*(cj3)*(x278));
IKReal x285=((py)*(sj0)*(x275));
IKReal x286=((cj0)*(px)*(x275));
IKReal x287=((x286)+(x285)+(x284)+(x283)+(x282)+(x281)+(x280));
IKReal x288=((x279)+(((-1.00000000000000)*(x287))));
IKReal x289=((IKabs(x288) != 0)?((IKReal)1/(x288)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x289)*(((((-1.00000000000000)*((x276)*(x276))))+((pz)*(pz))))), ((x289)*(((((x276)*(((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((0.300000000000000)*(sj3)))))))+(((-1.00000000000000)*(pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x290=((0.300000000000000)*(sj3));
IKReal x291=((0.0450000000000000)+(x290));
IKReal x292=((0.0450000000000000)*(cj3));
IKReal x293=((((-1.00000000000000)*(x292)))+(x291));
IKReal x294=((0.550000000000000)*(pz));
IKReal x295=((0.0450000000000000)*(cj0)*(px));
IKReal x296=((py)*(sj0)*(x290));
IKReal x297=((0.0450000000000000)*(py)*(sj0));
IKReal x298=((cj0)*(px)*(x290));
IKReal x299=((0.300000000000000)*(cj3)*(pz));
IKReal x300=((0.0450000000000000)*(pz)*(sj3));
IKReal x301=((x300)+(x298)+(x299)+(x294)+(x295)+(x296)+(x297));
IKReal x302=((1.00000000000000)*(py)*(sj0)*(x292));
IKReal x303=((1.00000000000000)*(cj0)*(px)*(x292));
IKReal x304=((x302)+(x303));
IKReal x305=((x301)+(((-1.00000000000000)*(x304))));
IKReal x306=((IKabs(x305) != 0)?((IKReal)1/(x305)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x306)*(((((x293)*(((0.550000000000000)+(((0.0450000000000000)*(sj3)))+(((0.300000000000000)*(cj3)))))))+(((pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))))), ((x306)*(((((-1.00000000000000)*((x293)*(x293))))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x307=((cj0)*(px));
IKReal x308=((py)*(sj0));
IKReal x309=((x308)+(x307));
IKReal x310=((0.300000000000000)*(sj3));
IKReal x311=((0.0450000000000000)+(x310));
IKReal x312=((0.0450000000000000)*(cj3));
IKReal x313=((x311)+(((-1.00000000000000)*(x312))));
IKReal x314=((0.0450000000000000)*(sj3));
IKReal x315=((0.300000000000000)*(cj3));
IKReal x316=((0.550000000000000)+(x315)+(x314));
IKReal x317=x4;
IKReal x318=(sj0)*(sj0);
IKReal x319=(x308)*(x308);
IKReal x320=(pz)*(pz);
IKReal x321=(cj0)*(cj0);
IKReal x322=x3;
IKReal x323=(x307)*(x307);
IKReal x324=((2.00000000000000)*(x307)*(x308));
IKReal x325=((x324)+(x320)+(x323)+(x319));
IKReal x326=((-1.00000000000000)*(x325));
IKReal x327=((IKabs(x326) != 0)?((IKReal)1/(x326)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x327)*(((((-1.00000000000000)*(pz)*(x313)))+(((-1.00000000000000)*(x309)*(x316)))))), ((x327)*(((((x309)*(x313)))+(((-1.00000000000000)*(pz)*(x316)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x328=((0.0450000000000000)*(sj3));
IKReal x329=((0.300000000000000)*(cj3));
IKReal x330=((0.550000000000000)+(x328)+(x329));
IKReal x331=((cj0)*(py)*(sj2));
IKReal x332=((0.300000000000000)*(sj3));
IKReal x333=((0.0450000000000000)+(x332)+(x331));
IKReal x334=((px)*(sj0)*(sj2));
IKReal x335=((0.0450000000000000)*(cj3));
IKReal x336=((x335)+(x334));
IKReal x337=((x333)+(((-1.00000000000000)*(x336))));
IKReal x338=x4;
IKReal x339=(sj0)*(sj0);
IKReal x340=((cj2)*(x338)*(x339));
IKReal x341=(cj0)*(cj0);
IKReal x342=x3;
IKReal x343=((cj2)*(x341)*(x342));
IKReal x344=((2.00000000000000)*(cj0)*(cj2)*(px)*(py)*(sj0));
IKReal x345=(pz)*(pz);
IKReal x346=((cj2)*(x345));
IKReal x347=((x343)+(x340)+(x346)+(x344));
IKReal x348=((-1.00000000000000)*(x347));
IKReal x349=((IKabs(x348) != 0)?((IKReal)1/(x348)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x349)*(((((x330)*(((((-1.00000000000000)*(cj2)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj2)*(px)))))))+(((pz)*(x337)))))), ((x349)*(((((x337)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((-1.00000000000000)*(cj2)*(pz)*(x330)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x350=((0.0450000000000000)*(sj3));
IKReal x351=((0.300000000000000)*(cj3));
IKReal x352=((0.550000000000000)+(x351)+(x350));
IKReal x353=((0.0450000000000000)*(cj2)*(cj3)*(pz));
IKReal x354=((0.550000000000000)*(py)*(sj0));
IKReal x355=((1.00000000000000)*(cj0)*(px)*(x350));
IKReal x356=((1.00000000000000)*(py)*(sj0)*(x350));
IKReal x357=((0.550000000000000)*(cj0)*(px));
IKReal x358=((0.300000000000000)*(cj2)*(pz)*(sj3));
IKReal x359=((0.0450000000000000)*(cj2)*(pz));
IKReal x360=((py)*(sj0)*(x351));
IKReal x361=((cj0)*(px)*(x351));
IKReal x362=((x355)+(x354)+(x357)+(x356)+(x359)+(x358)+(x360)+(x361));
IKReal x363=((((-1.00000000000000)*(x362)))+(x353));
IKReal x364=((IKabs(x363) != 0)?((IKReal)1/(x363)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x364)*((((pz)*(pz))+(((-1.00000000000000)*((x352)*(x352))))))), ((-1.00000000000000)*(x364)*(((((pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))+(((x352)*(((((0.300000000000000)*(cj2)*(sj3)))+(((0.0450000000000000)*(cj2)))+(((-0.0450000000000000)*(cj2)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x365=((0.0450000000000000)*(sj3));
IKReal x366=((0.300000000000000)*(cj3));
IKReal x367=((0.550000000000000)+(x365)+(x366));
IKReal x368=((cj2)*(px)*(sj0));
IKReal x369=((cj0)*(cj2)*(py));
IKReal x370=((((-1.00000000000000)*(x369)))+(x368));
IKReal x371=((2.00000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2));
IKReal x372=(pz)*(pz);
IKReal x373=((sj2)*(x372));
IKReal x374=(cj0)*(cj0);
IKReal x375=x3;
IKReal x376=((sj2)*(x374)*(x375));
IKReal x377=x4;
IKReal x378=(sj0)*(sj0);
IKReal x379=((sj2)*(x377)*(x378));
IKReal x380=((x379)+(x376)+(x373)+(x371));
IKReal x381=((-1.00000000000000)*(x380));
IKReal x382=((IKabs(x381) != 0)?((IKReal)1/(x381)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x382)*(((((x367)*(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2)))))))+(((pz)*(x370)))))), ((x382)*(((((x370)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((-1.00000000000000)*(pz)*(sj2)*(x367)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x40=((cj1)*(cj2)*(cj3));
IKReal x41=((sj1)*(sj3));
IKReal x42=((((-1.00000000000000)*(x41)))+(x40));
IKReal x43=((cj1)*(sj3));
IKReal x44=((cj2)*(cj3)*(sj1));
IKReal x45=((x44)+(x43));
IKReal x46=((-1.00000000000000)*(x45));
IKReal x47=((cj3)*(sj0)*(sj2));
IKReal x48=((cj0)*(x42));
IKReal x49=((x48)+(x47));
IKReal x50=((sj0)*(x42));
IKReal x51=((-1.00000000000000)*(cj0)*(cj3)*(sj2));
IKReal x52=((x51)+(x50));
IKReal x53=((cj0)*(cj1)*(sj2));
IKReal x54=((cj2)*(sj0));
IKReal x55=((x53)+(((-1.00000000000000)*(x54))));
IKReal x56=((cj0)*(cj2));
IKReal x57=((cj1)*(sj0)*(sj2));
IKReal x58=((x57)+(x56));
IKReal x59=((cj2)*(x43));
IKReal x60=((cj3)*(sj1));
IKReal x61=((x59)+(x60));
IKReal x62=((cj0)*(x61));
IKReal x63=((sj0)*(sj2)*(sj3));
IKReal x64=((x62)+(x63));
IKReal x65=((cj1)*(cj3));
IKReal x66=((cj2)*(x41));
IKReal x67=((x65)+(((-1.00000000000000)*(x66))));
IKReal x68=((sj0)*(x61));
IKReal x69=((cj0)*(sj2)*(sj3));
IKReal x70=((x68)+(((-1.00000000000000)*(x69))));
new_r00=((((r20)*(x46)))+(((r10)*(x52)))+(((r00)*(x49))));
new_r01=((((r01)*(x49)))+(((r11)*(((((-1.00000000000000)*(cj0)*(cj3)*(sj2)))+(x50)))))+(((r21)*(x46))));
new_r02=((((r22)*(x46)))+(((r02)*(x49)))+(((r12)*(x52))));
new_r10=((((r10)*(x58)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)))+(((r00)*(x55))));
new_r11=((((r11)*(x58)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)))+(((r01)*(x55))));
new_r12=((((r02)*(x55)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)))+(((r12)*(x58))));
new_r20=((((r10)*(x70)))+(((r20)*(x67)))+(((r00)*(x64))));
new_r21=((((r11)*(x70)))+(((r01)*(x64)))+(((r21)*(x67))));
new_r22=((((r22)*(x67)))+(((r02)*(x64)))+(((r12)*(x70))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
cj5array[0]=new_r22;
if( cj5array[0] >= -1.0001 && cj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj5)*((new_r02)*(new_r02))))+(((cj5)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((-1.00000000000000)*(new_r22));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r02)*(new_r11)))+(((new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r02)*(new_r10)))+(((new_r00)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x71=((new_r02)*(new_r10));
IKReal x72=((new_r00)*(new_r12));
j4array[0]=IKatan2(((new_r00)*(((IKabs(((((-1.00000000000000)*(x71)))+(x72))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x71)))+(x72)))):(IKReal)1.0e30))), ((new_r10)*(((IKabs(((((-1.00000000000000)*(x72)))+(x71))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x72)))+(x71)))):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x73=((new_r02)*(new_r11));
IKReal x74=((new_r01)*(new_r12));
j4array[0]=IKatan2(((new_r01)*(((IKabs(((((-1.00000000000000)*(x73)))+(x74))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x73)))+(x74)))):(IKReal)1.0e30))), ((new_r11)*(((IKabs(((((-1.00000000000000)*(x74)))+(x73))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x74)))+(x73)))):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x75=(new_r12)*(new_r12);
IKReal x76=(new_r02)*(new_r02);
IKReal x77=((x76)+(x75));
IKReal x78=((IKabs(x77) != 0)?((IKReal)1/(x77)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(x78)), ((new_r02)*(x78)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j5)), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r01)))+(((-1.00000000000000)*(new_r10)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x79=((new_r10)*(new_r11));
IKReal x80=((new_r00)*(new_r01));
IKReal x81=((x79)+(x80));
j4array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(sj6)*(((IKabs(x81) != 0)?((IKReal)1/(x81)):(IKReal)1.0e30))), ((new_r11)*(sj6)*(((IKabs(x81) != 0)?((IKReal)1/(x81)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x82=((new_r00)*(new_r12));
IKReal x83=((new_r02)*(new_r10));
j4array[0]=IKatan2(((new_r00)*(((IKabs(((x83)+(((-1.00000000000000)*(x82))))) != 0)?((IKReal)1/(((x83)+(((-1.00000000000000)*(x82)))))):(IKReal)1.0e30))), ((new_r10)*(((IKabs(((x82)+(((-1.00000000000000)*(x83))))) != 0)?((IKReal)1/(((x82)+(((-1.00000000000000)*(x83)))))):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x84=((new_r01)*(new_r12));
IKReal x85=((new_r02)*(new_r11));
j4array[0]=IKatan2(((new_r01)*(((IKabs(((x85)+(((-1.00000000000000)*(x84))))) != 0)?((IKReal)1/(((x85)+(((-1.00000000000000)*(x84)))))):(IKReal)1.0e30))), ((new_r11)*(((IKabs(((x84)+(((-1.00000000000000)*(x85))))) != 0)?((IKReal)1/(((x84)+(((-1.00000000000000)*(x85)))))):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x86=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x86));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x86))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
IKReal x87=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=x87;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x87;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x88=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x88));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x88))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x89=(new_r02)*(new_r02);
IKReal x90=((cj5)*(x89));
IKReal x91=(new_r12)*(new_r12);
IKReal x92=((cj5)*(x91));
IKReal x93=((x90)+(x92));
IKReal x94=((IKabs(x93) != 0)?((IKReal)1/(x93)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(new_r22)*(sj5)*(x94)), ((new_r02)*(new_r22)*(sj5)*(x94)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x95=((cj4)*(new_r12));
IKReal x96=((new_r02)*(sj4));
IKReal x97=((x95)+(((-1.00000000000000)*(x96))));
IKReal x98=((new_r12)*(sj4));
IKReal x99=((cj4)*(new_r02));
IKReal x100=((x99)+(x98));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x97;
evalcond[5]=x97;
evalcond[6]=x100;
evalcond[7]=x100;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x101=((cj4)*(new_r12));
IKReal x102=((new_r02)*(sj4));
IKReal x103=((((-1.00000000000000)*(x102)))+(x101));
IKReal x104=((new_r12)*(sj4));
IKReal x105=((cj4)*(new_r02));
IKReal x106=((x104)+(x105));
IKReal x107=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=x107;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x103;
evalcond[5]=x103;
evalcond[6]=x106;
evalcond[7]=((-1.00000000000000)*(x106));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x107;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x108=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x108)), ((-1.00000000000000)*(new_r20)*(x108)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x109=(new_r12)*(new_r12);
IKReal x110=(new_r02)*(new_r02);
IKReal x111=((x110)+(x109));
IKReal x112=((IKabs(x111) != 0)?((IKReal)1/(x111)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj5)*(x112)), ((new_r02)*(sj5)*(x112)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x113=((cj4)*(new_r12));
IKReal x114=((new_r02)*(sj4));
IKReal x115=((((-1.00000000000000)*(x114)))+(x113));
IKReal x116=((new_r12)*(sj4));
IKReal x117=((cj4)*(new_r02));
IKReal x118=((x117)+(x116));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x115;
evalcond[5]=x115;
evalcond[6]=x118;
evalcond[7]=x118;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x119=((cj4)*(new_r12));
IKReal x120=((new_r02)*(sj4));
IKReal x121=((((-1.00000000000000)*(x120)))+(x119));
IKReal x122=((new_r12)*(sj4));
IKReal x123=((cj4)*(new_r02));
IKReal x124=((x122)+(x123));
IKReal x125=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=x125;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x121;
evalcond[5]=x121;
evalcond[6]=x124;
evalcond[7]=((-1.00000000000000)*(x124));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x125;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x126=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x126)), ((-1.00000000000000)*(new_r20)*(x126)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))), ((((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x127=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x127)), ((-1.00000000000000)*(new_r20)*(x127)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x128=((new_r02)*(new_r11));
IKReal x129=((new_r01)*(new_r12));
IKReal x130=((((-1.00000000000000)*(x129)))+(x128));
IKReal x131=((IKabs(x130) != 0)?((IKReal)1/(x130)):(IKReal)1.0e30);
j4array[0]=IKatan2(((cj6)*(new_r12)*(x131)), ((cj6)*(new_r02)*(x131)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x132=((new_r02)*(new_r10));
IKReal x133=((new_r00)*(new_r12));
IKReal x134=((x132)+(((-1.00000000000000)*(x133))));
IKReal x135=((IKabs(x134) != 0)?((IKReal)1/(x134)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj6)*(x135)), ((new_r02)*(sj6)*(x135)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x136=(new_r12)*(new_r12);
IKReal x137=(new_r02)*(new_r02);
IKReal x138=((x137)+(x136));
IKReal x139=((IKabs(x138) != 0)?((IKReal)1/(x138)):(IKReal)1.0e30);
j4array[0]=IKatan2(((new_r12)*(sj5)*(x139)), ((new_r02)*(sj5)*(x139)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "f08ae2b350373ff2b9fb10f36690ef49"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
