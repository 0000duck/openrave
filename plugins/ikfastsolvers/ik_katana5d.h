/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 34 generated on 2011-02-17 18:26:02.439865
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 5; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x56000007; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
eetrans[0]=((((0.190000000000000)*(x0)*(x1)))+(((x7)*(((((0.273000000000000)*(x0)*(x1)*(x4)))+(((0.273000000000000)*(x0)*(x2)*(x3)))))))+(((x5)*(((((0.273000000000000)*(x0)*(x1)*(x2)))+(((-0.273000000000000)*(x0)*(x3)*(x4)))))))+(((0.139000000000000)*(x0)*(x2)*(x3)))+(((0.139000000000000)*(x0)*(x1)*(x4))));
eetrans[1]=((((x5)*(((((-0.273000000000000)*(x1)*(x2)*(x6)))+(((0.273000000000000)*(x3)*(x4)*(x6)))))))+(((x7)*(((((-0.273000000000000)*(x1)*(x4)*(x6)))+(((-0.273000000000000)*(x2)*(x3)*(x6)))))))+(((-0.139000000000000)*(x2)*(x3)*(x6)))+(((-0.139000000000000)*(x1)*(x4)*(x6)))+(((-0.190000000000000)*(x1)*(x6))));
eetrans[2]=((0.201500000000000)+(((x7)*(((((-0.273000000000000)*(x1)*(x2)))+(((0.273000000000000)*(x3)*(x4)))))))+(((0.190000000000000)*(x3)))+(((x5)*(((((0.273000000000000)*(x2)*(x3)))+(((0.273000000000000)*(x1)*(x4)))))))+(((0.139000000000000)*(x3)*(x4)))+(((-0.139000000000000)*(x1)*(x2))));
eerot[0]=((((x6)*(x8)))+(((x9)*(((((x5)*(((((x0)*(x2)*(x3)))+(((x0)*(x1)*(x4)))))))+(((x7)*(((((x0)*(x3)*(x4)))+(((-1.00000000000000)*(x0)*(x1)*(x2))))))))))));
eerot[1]=((((x0)*(x8)))+(((-1.00000000000000)*(x9)*(((((x5)*(((((x1)*(x4)*(x6)))+(((x2)*(x3)*(x6)))))))+(((x7)*(((((-1.00000000000000)*(x1)*(x2)*(x6)))+(((x3)*(x4)*(x6))))))))))));
eerot[2]=((-1.00000000000000)*(x9)*(((((x5)*(((((x1)*(x2)))+(((-1.00000000000000)*(x3)*(x4)))))))+(((x7)*(((((x1)*(x4)))+(((x2)*(x3))))))))));
}

class IKSolver {
public:
    IKReal j0, cj0, sj0, htj0,
        j1, cj1, sj1, htj1,
        j2, cj2, sj2, htj2,
        j3, cj3, sj3, htj3,
        j4, cj4, sj4, htj4,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((-1.00000000000000)*(r01));
new_py=((-1.00000000000000)*(py));
new_r02=((-1.00000000000000)*(r02));
new_pz=((0.201500000000000)+(((-1.00000000000000)*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x0=((-1.00000000000000)*(py));
IKReal x1=IKatan2(x0, px);
j0array[0]=((-1.00000000000000)*(x1));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x1))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IKReal op[4+1], zeror[4];
int numroots;
IKReal x2=IKcos(j0);
IKReal x3=IKsin(j0);
IKReal x4=(r02)*(r02);
IKReal x5=(x3)*(x3);
IKReal x6=(py)*(py);
IKReal x7=(r01)*(r01);
IKReal x8=(pz)*(pz);
IKReal x9=(px)*(px);
IKReal x10=(x2)*(x2);
IKReal x11=(r00)*(r00);
IKReal x12=(py)*(py)*(py);
IKReal x13=(pp)*(pp);
IKReal x14=(px)*(px)*(px);
IKReal x15=(pz)*(pz)*(pz);
IKReal x16=(py)*(py)*(py)*(py);
IKReal x17=(pz)*(pz)*(pz)*(pz);
IKReal x18=(px)*(px)*(px)*(px);
IKReal x19=((7.47373324362093)*(px)*(pz)*(x2)*(x4));
IKReal x20=((7.47373324362093)*(px)*(py)*(r01)*(r02)*(x2));
IKReal x21=((39.3354381243207)*(px)*(x2)*(x6)*(x7));
IKReal x22=((1.79582009212774)*(py)*(r00)*(r01)*(x2));
IKReal x23=((39.3354381243207)*(pz)*(r01)*(r02)*(x3)*(x8));
IKReal x24=((78.6708762486414)*(py)*(r00)*(r01)*(x2)*(x9));
IKReal x25=((39.3354381243207)*(pz)*(r00)*(r02)*(x2)*(x9));
IKReal x26=((39.3354381243207)*(py)*(x3)*(x7)*(x8));
IKReal x27=((19.6677190621603)*(pp)*(px)*(x2)*(x4));
IKReal x28=((2.93163086796750)*(pz)*(r00)*(r02)*(x2));
IKReal x29=((78.6708762486414)*(px)*(r00)*(r01)*(x3)*(x6));
IKReal x30=((39.3354381243207)*(px)*(py)*(pz)*(r00)*(r02)*(x3));
IKReal x31=((39.3354381243207)*(py)*(r00)*(r01)*(x2)*(x8));
IKReal x32=((7.47373324362093)*(px)*(pz)*(r00)*(r01)*(x3));
IKReal x33=((39.3354381243207)*(pz)*(r01)*(r02)*(x3)*(x6));
IKReal x34=((39.3354381243207)*(py)*(x3)*(x6)*(x7));
IKReal x35=((7.47373324362093)*(px)*(py)*(r00)*(r02)*(x3));
IKReal x36=((1.79582009212774)*(px)*(r00)*(r01)*(x3));
IKReal x37=((39.3354381243207)*(px)*(r00)*(r01)*(x3)*(x8));
IKReal x38=((39.3354381243207)*(pz)*(r00)*(r02)*(x2)*(x8));
IKReal x39=((7.47373324362093)*(r00)*(r02)*(x2)*(x8));
IKReal x40=((19.6677190621603)*(pp)*(py)*(x3)*(x4));
IKReal x41=((7.47373324362093)*(py)*(pz)*(x3)*(x7));
IKReal x42=((0.557009864913824)*(r01)*(r02)*(x3));
IKReal x43=((39.3354381243207)*(px)*(py)*(pz)*(r01)*(r02)*(x2));
IKReal x44=((7.47373324362093)*(r01)*(r02)*(x3)*(x6));
IKReal x45=((7.47373324362093)*(r00)*(r02)*(x2)*(x9));
IKReal x46=((7.47373324362093)*(py)*(pz)*(x3)*(x4));
IKReal x47=((7.47373324362093)*(py)*(pz)*(r00)*(r01)*(x2));
IKReal x48=((7.47373324362093)*(px)*(pz)*(x11)*(x2));
IKReal x49=((0.557009864913824)*(r00)*(r02)*(x2));
IKReal x50=((39.3354381243207)*(px)*(x11)*(x2)*(x8));
IKReal x51=((1.79582009212774)*(py)*(x3)*(x7));
IKReal x52=((1.79582009212774)*(px)*(x11)*(x2));
IKReal x53=((2.93163086796750)*(pz)*(r01)*(r02)*(x3));
IKReal x54=((7.47373324362093)*(r01)*(r02)*(x3)*(x8));
IKReal x55=((39.3354381243207)*(px)*(x11)*(x2)*(x9));
IKReal x56=((39.3354381243207)*(py)*(x11)*(x3)*(x9));
IKReal x57=((19.6677190621603)*(pp)*(px)*(r00)*(r01)*(x3));
IKReal x58=((39.3354381243207)*(pp)*(pz)*(r00)*(r02)*(x2));
IKReal x59=((19.6677190621603)*(pp)*(py)*(x3)*(x7));
IKReal x60=((1.13581077583976)*(px)*(x2)*(x4));
IKReal x61=((7.47373324362093)*(pp)*(r01)*(r02)*(x3));
IKReal x62=((39.3354381243207)*(pp)*(pz)*(r01)*(r02)*(x3));
IKReal x63=((19.6677190621603)*(pp)*(py)*(r00)*(r01)*(x2));
IKReal x64=((1.13581077583976)*(py)*(x3)*(x4));
IKReal x65=((7.47373324362093)*(pp)*(r00)*(r02)*(x2));
IKReal x66=((19.6677190621603)*(pp)*(px)*(x11)*(x2));
IKReal x67=((9.83385953108017)*(pp)*(py)*(r01)*(r02));
IKReal x68=((19.6677190621603)*(px)*(py)*(pz)*(r00)*(r01)*(x10));
IKReal x69=((51.7571554267377)*(pp)*(x4)*(x8));
IKReal x70=((51.7571554267377)*(pp)*(px)*(pz)*(r00)*(r02));
IKReal x71=((51.7571554267377)*(pp)*(px)*(py)*(x2)*(x3)*(x7));
IKReal x72=((51.7571554267377)*(pp)*(py)*(pz)*(r01)*(r02));
IKReal x73=((0.747890895916360)*(py)*(pz)*(r01)*(r02)*(x5));
IKReal x74=((51.7571554267377)*(pp)*(r00)*(r01)*(x2)*(x3)*(x6));
IKReal x75=((0.494487862947052)*(pp)*(x5)*(x7));
IKReal x76=((0.567905387919880)*(pz)*(x10)*(x11));
IKReal x77=((51.7571554267377)*(pp)*(r00)*(r01)*(x2)*(x3)*(x9));
IKReal x78=((0.0313756629574039)*(x10)*(x11));
IKReal x79=((51.7571554267377)*(pp)*(px)*(py)*(r00)*(r01)*(x5));
IKReal x80=((19.6677190621603)*(px)*(r01)*(r02)*(x2)*(x3)*(x8));
IKReal x81=((19.6677190621603)*(py)*(r01)*(r02)*(x5)*(x8));
IKReal x82=((19.6677190621603)*(pz)*(x10)*(x11)*(x9));
IKReal x83=((51.7571554267377)*(pp)*(px)*(py)*(x11)*(x2)*(x3));
IKReal x84=((19.6677190621603)*(py)*(r00)*(r02)*(x2)*(x3)*(x8));
IKReal x85=((19.6677190621603)*(px)*(r00)*(r02)*(x10)*(x8));
IKReal x86=((0.494487862947052)*(pp)*(x10)*(x11));
IKReal x87=((1.13581077583976)*(pz)*(r00)*(r01)*(x2)*(x3));
IKReal x88=((51.7571554267377)*(pp)*(px)*(pz)*(r01)*(r02)*(x2)*(x3));
IKReal x89=((9.83385953108017)*(pp)*(py)*(r00)*(r02)*(x2)*(x3));
IKReal x90=((9.83385953108017)*(pp)*(pz)*(x4));
IKReal x91=((2.36292117385229)*(pp)*(x4));
IKReal x92=((51.7571554267377)*(pp)*(py)*(pz)*(r00)*(r02)*(x2)*(x3));
IKReal x93=((19.6677190621603)*(px)*(py)*(pz)*(r00)*(r01)*(x5));
IKReal x94=((51.7571554267377)*(pp)*(x5)*(x6)*(x7));
IKReal x95=((9.83385953108017)*(pp)*(px)*(r00)*(r02));
IKReal x96=((0.747890895916360)*(px)*(pz)*(r00)*(r02)*(x10));
IKReal x97=((0.0313756629574039)*(x5)*(x7));
IKReal x98=((19.6677190621603)*(pz)*(r00)*(r01)*(x2)*(x3)*(x6));
IKReal x99=((0.747890895916360)*(py)*(pz)*(r00)*(r02)*(x2)*(x3));
IKReal x100=((19.6677190621603)*(pz)*(x5)*(x6)*(x7));
IKReal x101=((x10)*(x95));
IKReal x102=((0.747890895916360)*(px)*(pz)*(r01)*(r02)*(x2)*(x3));
IKReal x103=((51.7571554267377)*(pp)*(px)*(py)*(r00)*(r01)*(x10));
IKReal x104=((0.988975725894105)*(pp)*(r00)*(r01)*(x2)*(x3));
IKReal x105=((0.567905387919880)*(pz)*(x5)*(x7));
IKReal x106=((19.6677190621603)*(px)*(py)*(pz)*(x2)*(x3)*(x7));
IKReal x107=((19.6677190621603)*(pz)*(r00)*(r01)*(x2)*(x3)*(x9));
IKReal x108=((19.6677190621603)*(px)*(py)*(pz)*(x11)*(x2)*(x3));
IKReal x109=((0.0627513259148077)*(r00)*(r01)*(x2)*(x3));
IKReal x110=((x5)*(x72));
IKReal x111=((x5)*(x67));
IKReal x112=((x10)*(x70));
IKReal x113=((51.7571554267377)*(pp)*(x10)*(x11)*(x9));
IKReal x114=((9.83385953108017)*(pp)*(px)*(r01)*(r02)*(x2)*(x3));
IKReal x115=((0.567905387919880)*(px)*(r01)*(r02)*(x2)*(x3));
IKReal x116=((12.9392888566844)*(x13)*(x5)*(x7));
IKReal x117=((103.514310853475)*(px)*(py)*(x2)*(x3)*(x6)*(x7));
IKReal x118=((0.567905387919880)*(py)*(r00)*(r02)*(x2)*(x3));
IKReal x119=((12.9392888566844)*(x10)*(x11)*(x13));
IKReal x120=((51.7571554267377)*(x6)*(x7)*(x8));
IKReal x121=((0.868433310905233)*(x5)*(x7)*(x8));
IKReal x122=((19.6677190621603)*(pz)*(x4)*(x5)*(x6));
IKReal x123=((12.9392888566844)*(x13)*(x4));
IKReal x124=((39.3354381243207)*(px)*(py)*(pz)*(r00)*(r01));
IKReal x125=((103.514310853475)*(px)*(pz)*(r00)*(r02)*(x10)*(x9));
IKReal x126=((103.514310853475)*(py)*(pz)*(r01)*(r02)*(x10)*(x9));
IKReal x127=((103.514310853475)*(px)*(py)*(r00)*(r01)*(x10)*(x9));
IKReal x128=((19.6677190621603)*(pz)*(x6)*(x7));
IKReal x129=((103.514310853475)*(px)*(pz)*(r00)*(r02)*(x8));
IKReal x130=((39.3354381243207)*(py)*(r01)*(r02)*(x8));
IKReal x131=((51.7571554267377)*(x17)*(x4));
IKReal x132=((0.988975725894105)*(x10)*(x11)*(x9));
IKReal x133=((19.6677190621603)*(py)*(r01)*(r02)*(x10)*(x9));
IKReal x134=((19.6677190621603)*(py)*(r01)*(r02)*(x5)*(x6));
IKReal x135=((51.7571554267377)*(x10)*(x11)*(x18));
IKReal x136=((19.6677190621603)*(px)*(r00)*(r02)*(x5)*(x6));
IKReal x137=((103.514310853475)*(px)*(pz)*(r00)*(r02)*(x5)*(x6));
IKReal x138=((103.514310853475)*(py)*(pz)*(r01)*(r02)*(x8));
IKReal x139=((103.514310853475)*(px)*(py)*(x11)*(x2)*(x3)*(x9));
IKReal x140=((207.028621706951)*(r00)*(r01)*(x2)*(x3)*(x6)*(x9));
IKReal x141=((39.3354381243207)*(px)*(r01)*(r02)*(x2)*(x3)*(x6));
IKReal x142=((0.988975725894105)*(r00)*(r01)*(x2)*(x3)*(x6));
IKReal x143=((1.73686662181047)*(r00)*(r01)*(x2)*(x3)*(x8));
IKReal x144=((103.514310853475)*(py)*(pz)*(r01)*(r02)*(x5)*(x6));
IKReal x145=((0.988975725894105)*(px)*(py)*(r00)*(r01)*(x10));
IKReal x146=((207.028621706951)*(py)*(pz)*(r00)*(r02)*(x2)*(x3)*(x9));
IKReal x147=((0.868433310905233)*(x10)*(x4)*(x9));
IKReal x148=((3.73686662181047)*(px)*(py)*(r00)*(r01));
IKReal x149=((0.988975725894105)*(x5)*(x6)*(x7));
IKReal x150=((1.86843331090523)*(x6)*(x7));
IKReal x151=((9.83385953108017)*(pp)*(pz)*(x5)*(x7));
IKReal x152=((9.83385953108017)*(pp)*(pz)*(x10)*(x11));
IKReal x153=((0.107876803271052)*(x4));
IKReal x154=((0.897910046063868)*(px)*(r00)*(r02));
IKReal x155=((19.6677190621603)*(px)*(r00)*(r02)*(x10)*(x9));
IKReal x156=((19.6677190621603)*(pp)*(pz)*(r00)*(r01)*(x2)*(x3));
IKReal x157=((6.59427565860980)*(x4)*(x8));
IKReal x158=((19.6677190621603)*(pz)*(x11)*(x9));
IKReal x159=((0.988975725894105)*(px)*(py)*(x11)*(x2)*(x3));
IKReal x160=((51.7571554267377)*(x16)*(x5)*(x7));
IKReal x161=((0.988975725894105)*(px)*(py)*(r00)*(r01)*(x5));
IKReal x162=((8.46270896951503)*(px)*(pz)*(r00)*(r02));
IKReal x163=((0.988975725894105)*(px)*(py)*(x2)*(x3)*(x7));
IKReal x164=((103.514310853475)*(px)*(py)*(r00)*(r01)*(x8));
IKReal x165=((51.7571554267377)*(x10)*(x4)*(x8)*(x9));
IKReal x166=((51.7571554267377)*(x11)*(x8)*(x9));
IKReal x167=((8.46270896951503)*(py)*(pz)*(r01)*(r02));
IKReal x168=((0.897910046063868)*(pz)*(x4));
IKReal x169=((25.8785777133689)*(r00)*(r01)*(x13)*(x2)*(x3));
IKReal x170=((19.6677190621603)*(pz)*(x4)*(x8));
IKReal x171=((51.7571554267377)*(x11)*(x5)*(x6)*(x9));
IKReal x172=((0.988975725894105)*(r00)*(r01)*(x2)*(x3)*(x9));
IKReal x173=((0.567905387919880)*(px)*(r00)*(r02)*(x10));
IKReal x174=((103.514310853475)*(px)*(py)*(r00)*(r01)*(x5)*(x6));
IKReal x175=((39.3354381243207)*(py)*(r00)*(r02)*(x2)*(x3)*(x9));
IKReal x176=((0.897910046063868)*(py)*(r01)*(r02));
IKReal x177=((1.86843331090523)*(x11)*(x9));
IKReal x178=((0.868433310905233)*(x4)*(x5)*(x6));
IKReal x179=((39.3354381243207)*(px)*(py)*(pz)*(x2)*(x3)*(x4));
IKReal x180=((51.7571554267377)*(x10)*(x6)*(x7)*(x9));
IKReal x181=((103.514310853475)*(px)*(py)*(x2)*(x3)*(x4)*(x8));
IKReal x182=((0.868433310905233)*(x10)*(x11)*(x8));
IKReal x183=((39.3354381243207)*(px)*(r00)*(r02)*(x8));
IKReal x184=((207.028621706951)*(px)*(pz)*(r01)*(r02)*(x2)*(x3)*(x6));
IKReal x185=((51.7571554267377)*(x4)*(x5)*(x6)*(x8));
IKReal x186=((1.73686662181047)*(px)*(py)*(x2)*(x3)*(x4));
IKReal x187=((0.567905387919880)*(py)*(r01)*(r02)*(x5));
IKReal x188=((19.6677190621603)*(pz)*(x10)*(x4)*(x9));
op[0]=((((-1.00000000000000)*(x144)))+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x140)))+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x146)))+(((-1.00000000000000)*(x145)))+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x159)))+(((-1.00000000000000)*(x162)))+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x160)))+(((-1.00000000000000)*(x163)))+(((-1.00000000000000)*(x76)))+(((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x177)))+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x172)))+(((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x186)))+(((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x182)))+(((-1.00000000000000)*(x181)))+(((-1.00000000000000)*(x108)))+(((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x117)))+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x121)))+(((-1.00000000000000)*(x120)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x129)))+(((-1.00000000000000)*(x125)))+(((-1.00000000000000)*(x127)))+(((-1.00000000000000)*(x126)))+(x179)+(x170)+(x173)+(x175)+(x176)+(x168)+(x156)+(x155)+(x154)+(x152)+(x151)+(x158)+(x141)+(x134)+(x136)+(x130)+(x133)+(x124)+(x122)+(x128)+(x113)+(x112)+(x110)+(x115)+(x118)+(x109)+(x104)+(x102)+(x103)+(x187)+(x183)+(x188)+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x131)))+(((-1.00000000000000)*(x138)))+(((-1.00000000000000)*(x139)))+(x77)+(x75)+(x74)+(x73)+(x72)+(x71)+(x70)+(x79)+(x78)+(x69)+(x88)+(x83)+(x86)+(x99)+(x91)+(x92)+(x94)+(x97)+(x96)+(((-1.00000000000000)*(x93)))+(((-1.00000000000000)*(x90)))+(((-1.00000000000000)*(x95)))+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(x68)))+(((-1.00000000000000)*(x67)))+(((-1.00000000000000)*(x89)))+(((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x87)))+(((-1.00000000000000)*(x81)))+(((-1.00000000000000)*(x80)))+(((-1.00000000000000)*(x82)))+(((-1.00000000000000)*(x85))));
op[1]=((((-1.00000000000000)*(x19)))+(((-1.00000000000000)*(x20)))+(((-1.00000000000000)*(x42)))+(((-1.00000000000000)*(x45)))+(((-1.00000000000000)*(x44)))+(((-1.00000000000000)*(x47)))+(((-1.00000000000000)*(x46)))+(((-1.00000000000000)*(x49)))+(((-1.00000000000000)*(x48)))+(((-1.00000000000000)*(x41)))+(((-1.00000000000000)*(x39)))+(((-1.00000000000000)*(x35)))+(((-1.00000000000000)*(x32)))+(x38)+(x33)+(x31)+(x30)+(x37)+(x36)+(x34)+(x43)+(x40)+(x55)+(x56)+(x51)+(x50)+(x53)+(x52)+(x61)+(x65)+(x24)+(x25)+(x26)+(x27)+(x21)+(x22)+(x23)+(x28)+(x29)+(((-1.00000000000000)*(x63)))+(((-1.00000000000000)*(x62)))+(((-1.00000000000000)*(x60)))+(((-1.00000000000000)*(x66)))+(((-1.00000000000000)*(x64)))+(((-1.00000000000000)*(x58)))+(((-1.00000000000000)*(x59)))+(((-1.00000000000000)*(x57)))+(((-1.00000000000000)*(x54))));
op[2]=((((-16.9254179390301)*(x5)*(x6)*(x7)))+(((-207.028621706951)*(px)*(py)*(x2)*(x3)*(x6)*(x7)))+(((-51.7571554267377)*(r00)*(r01)*(x13)*(x2)*(x3)))+(((-3.47373324362093)*(px)*(py)*(x2)*(x3)*(x4)))+(((-414.057243413902)*(r00)*(r01)*(x2)*(x3)*(x6)*(x9)))+(((-1.73686662181047)*(x4)*(x5)*(x6)))+(((-103.514310853475)*(x11)*(x5)*(x6)*(x9)))+(((-3.73686662181047)*(x6)*(x7)))+(((-1.97795145178821)*(py)*(pz)*(r01)*(r02)))+(((8.46270896951503)*(pp)*(x5)*(x7)))+(((103.514310853475)*(pp)*(px)*(pz)*(r00)*(r02)))+(((-103.514310853475)*(x17)*(x4)))+(((-13.4516846954091)*(py)*(pz)*(r01)*(r02)*(x5)))+(((103.514310853475)*(pp)*(x5)*(x6)*(x7)))+(((103.514310853475)*(pp)*(px)*(py)*(x11)*(x2)*(x3)))+(((-207.028621706951)*(px)*(py)*(x2)*(x3)*(x4)*(x8)))+(((-1.73686662181047)*(x10)*(x4)*(x9)))+(((103.514310853475)*(pp)*(x4)*(x8)))+(((-103.514310853475)*(x11)*(x8)*(x9)))+(((-25.8785777133689)*(x10)*(x11)*(x13)))+(((-16.9254179390301)*(x10)*(x11)*(x9)))+(((103.514310853475)*(pp)*(px)*(py)*(r00)*(r01)*(x10)))+(((-207.028621706951)*(px)*(pz)*(r00)*(r02)*(x10)*(x9)))+(((-1.97795145178821)*(px)*(pz)*(r00)*(r02)))+(((-207.028621706951)*(px)*(pz)*(r00)*(r02)*(x5)*(x6)))+(((-414.057243413902)*(px)*(pz)*(r01)*(r02)*(x2)*(x3)*(x6)))+(((-207.028621706951)*(px)*(py)*(x11)*(x2)*(x3)*(x9)))+(((-207.028621706951)*(py)*(pz)*(r01)*(r02)*(x8)))+(((1.75891517002226)*(x4)*(x8)))+(((-0.494258538999017)*(x5)*(x7)))+(((-16.9254179390301)*(px)*(py)*(x11)*(x2)*(x3)))+(((-103.514310853475)*(x16)*(x5)*(x7)))+(((8.46270896951503)*(pp)*(x10)*(x11)))+(((-16.9254179390301)*(px)*(py)*(r00)*(r01)*(x10)))+(((-207.028621706951)*(py)*(pz)*(r01)*(r02)*(x10)*(x9)))+(((-207.028621706951)*(py)*(pz)*(r01)*(r02)*(x5)*(x6)))+(((16.9254179390301)*(pp)*(r00)*(r01)*(x2)*(x3)))+(((-16.9254179390301)*(px)*(py)*(r00)*(r01)*(x5)))+(((103.514310853475)*(pp)*(x10)*(x11)*(x9)))+(((-103.514310853475)*(x6)*(x7)*(x8)))+(((-13.4516846954091)*(px)*(pz)*(r00)*(r02)*(x10)))+(((-103.514310853475)*(x10)*(x4)*(x8)*(x9)))+(((-13.4516846954091)*(px)*(pz)*(r01)*(r02)*(x2)*(x3)))+(((103.514310853475)*(pp)*(px)*(py)*(x2)*(x3)*(x7)))+(((-3.47373324362093)*(r00)*(r01)*(x2)*(x3)*(x8)))+(((-103.514310853475)*(x10)*(x6)*(x7)*(x9)))+(((103.514310853475)*(pp)*(py)*(pz)*(r00)*(r02)*(x2)*(x3)))+(((-207.028621706951)*(px)*(py)*(r00)*(r01)*(x8)))+(((103.514310853475)*(pp)*(px)*(py)*(r00)*(r01)*(x5)))+(((-0.494258538999017)*(x10)*(x11)))+(((-7.47373324362093)*(px)*(py)*(r00)*(r01)))+(((-3.73686662181047)*(x11)*(x9)))+(((-103.514310853475)*(x10)*(x11)*(x18)))+(((103.514310853475)*(pp)*(py)*(pz)*(r01)*(r02)))+(((-207.028621706951)*(px)*(py)*(r00)*(r01)*(x10)*(x9)))+(((103.514310853475)*(pp)*(px)*(pz)*(r01)*(r02)*(x2)*(x3)))+(((-2.74789089591636)*(pp)*(x4)))+(((-1.73686662181047)*(x10)*(x11)*(x8)))+(((-414.057243413902)*(py)*(pz)*(r00)*(r02)*(x2)*(x3)*(x9)))+(((103.514310853475)*(pp)*(r00)*(r01)*(x2)*(x3)*(x6)))+(((103.514310853475)*(pp)*(r00)*(r01)*(x2)*(x3)*(x9)))+(((-207.028621706951)*(px)*(pz)*(r00)*(r02)*(x8)))+(((103.514310853475)*(pp)*(py)*(pz)*(r01)*(r02)*(x5)))+(((-207.028621706951)*(px)*(py)*(r00)*(r01)*(x5)*(x6)))+(((-25.8785777133689)*(x13)*(x4)))+(((-103.514310853475)*(x4)*(x5)*(x6)*(x8)))+(((-0.988517077998033)*(r00)*(r01)*(x2)*(x3)))+(((-25.8785777133689)*(x13)*(x5)*(x7)))+(((-13.4516846954091)*(py)*(pz)*(r00)*(r02)*(x2)*(x3)))+(((0.341256258371720)*(x4)))+(((-16.9254179390301)*(r00)*(r01)*(x2)*(x3)*(x9)))+(((-16.9254179390301)*(r00)*(r01)*(x2)*(x3)*(x6)))+(((103.514310853475)*(pp)*(px)*(pz)*(r00)*(r02)*(x10)))+(((-1.73686662181047)*(x5)*(x7)*(x8)))+(((-16.9254179390301)*(px)*(py)*(x2)*(x3)*(x7))));
op[3]=((x39)+(x38)+(x33)+(x32)+(x31)+(x30)+(x37)+(x36)+(x35)+(x34)+(x48)+(x49)+(x46)+(x47)+(x44)+(x45)+(x42)+(x43)+(x40)+(x41)+(x55)+(x54)+(x56)+(x51)+(x50)+(x53)+(x52)+(x19)+(x24)+(x25)+(x26)+(x27)+(x20)+(x21)+(x22)+(x23)+(x28)+(x29)+(((-1.00000000000000)*(x63)))+(((-1.00000000000000)*(x62)))+(((-1.00000000000000)*(x61)))+(((-1.00000000000000)*(x60)))+(((-1.00000000000000)*(x66)))+(((-1.00000000000000)*(x65)))+(((-1.00000000000000)*(x64)))+(((-1.00000000000000)*(x58)))+(((-1.00000000000000)*(x59)))+(((-1.00000000000000)*(x57))));
op[4]=((((-1.00000000000000)*(x144)))+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(x140)))+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x146)))+(((-1.00000000000000)*(x145)))+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x154)))+(((-1.00000000000000)*(x155)))+(((-1.00000000000000)*(x156)))+(((-1.00000000000000)*(x158)))+(((-1.00000000000000)*(x159)))+(((-1.00000000000000)*(x162)))+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x160)))+(((-1.00000000000000)*(x163)))+(((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x179)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x176)))+(((-1.00000000000000)*(x177)))+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x175)))+(((-1.00000000000000)*(x172)))+(((-1.00000000000000)*(x173)))+(((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x187)))+(((-1.00000000000000)*(x186)))+(((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x183)))+(((-1.00000000000000)*(x182)))+(((-1.00000000000000)*(x181)))+(((-1.00000000000000)*(x188)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x117)))+(((-1.00000000000000)*(x118)))+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x121)))+(((-1.00000000000000)*(x120)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x122)))+(((-1.00000000000000)*(x129)))+(((-1.00000000000000)*(x128)))+(((-1.00000000000000)*(x125)))+(((-1.00000000000000)*(x124)))+(((-1.00000000000000)*(x127)))+(((-1.00000000000000)*(x126)))+(x113)+(x112)+(x111)+(x110)+(x114)+(x108)+(x109)+(x104)+(x105)+(x106)+(x107)+(x100)+(x101)+(x102)+(x103)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131)))+(((-1.00000000000000)*(x138)))+(((-1.00000000000000)*(x139)))+(x77)+(x76)+(x75)+(x74)+(x73)+(x72)+(x71)+(x70)+(x79)+(x78)+(x67)+(x68)+(x69)+(x88)+(x89)+(x82)+(x83)+(x80)+(x81)+(x86)+(x87)+(x84)+(x85)+(x99)+(x98)+(x91)+(x90)+(x93)+(x92)+(x95)+(x94)+(x97)+(x96));
polyroots4(op,zeror,numroots);
IKReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IKReal htj1 = zeror[ij1];
tempj1array[0]=((2.00000000000000)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
bool valid = true;
for( int kj1 = 0; kj1 < numsolutions; ++kj1)
{
    if( IKabs(cj1array[kj1]-cj1array[numsolutions]) < 0.0001 && IKabs(sj1array[kj1]-sj1array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x189=((7.19424460431655)*(cj1)*(px)*(pz)*(r00));
IKReal x190=((3.59712230215827)*(pp)*(r01)*(sj0)*(sj1));
IKReal x191=((1.36690647482014)*(py)*(r01));
IKReal x192=((1.36690647482014)*(pz)*(r02));
IKReal x193=((0.328446043165468)*(cj1)*(r02));
IKReal x194=((1.36690647482014)*(px)*(r00));
IKReal x195=((3.59712230215827)*(cj0)*(pp)*(r00)*(sj1));
IKReal x196=x8;
IKReal x197=((7.19424460431655)*(cj1)*(r02)*(x196));
IKReal x198=((7.19424460431655)*(cj1)*(py)*(pz)*(r01));
IKReal x199=((x198)+(x193)+(x192)+(x191)+(x190)+(x197)+(x195)+(x194)+(x189));
IKReal x200=((7.19424460431655)*(cj0)*(px)*(py)*(r01)*(sj1));
IKReal x201=((3.59712230215827)*(cj1)*(pp)*(r02));
IKReal x202=((7.19424460431655)*(cj0)*(px)*(pz)*(r02)*(sj1));
IKReal x203=x6;
IKReal x204=((7.19424460431655)*(r01)*(sj0)*(sj1)*(x203));
IKReal x205=((7.19424460431655)*(py)*(pz)*(r02)*(sj0)*(sj1));
IKReal x206=((0.328446043165468)*(cj0)*(r00)*(sj1));
IKReal x207=((7.19424460431655)*(px)*(py)*(r00)*(sj0)*(sj1));
IKReal x208=x9;
IKReal x209=((7.19424460431655)*(cj0)*(r00)*(sj1)*(x208));
IKReal x210=((0.328446043165468)*(r01)*(sj0)*(sj1));
IKReal x211=((x210)+(x207)+(x206)+(x205)+(x204)+(x202)+(x201)+(x200)+(x209));
IKReal x212=((x199)+(((-1.00000000000000)*(x211))));
IKReal x213=((IKabs(x212) != 0)?((IKReal)1/(x212)):(IKReal)1.0e30);
j2array[0]=((-2.00000000000000)*(atan(((((-0.121266187050360)*(cj0)*(cj1)*(r00)*(x213)))+(((7.19424460431655)*(cj1)*(px)*(py)*(r00)*(sj0)*(x213)))+(((7.19424460431655)*(r02)*(sj1)*(x196)*(x213)))+(((-3.59712230215827)*(cj0)*(cj1)*(pp)*(r00)*(x213)))+(((-3.59712230215827)*(cj1)*(pp)*(r01)*(sj0)*(x213)))+(((-3.59712230215827)*(pp)*(r02)*(sj1)*(x213)))+(((-0.121266187050360)*(cj1)*(r01)*(sj0)*(x213)))+(((2.36690647482014)*(py)*(r02)*(sj0)*(x213)))+(((7.19424460431655)*(cj0)*(cj1)*(r00)*(x208)*(x213)))+(((2.36690647482014)*(cj0)*(px)*(r02)*(x213)))+(((7.19424460431655)*(cj1)*(r01)*(sj0)*(x203)*(x213)))+(((7.19424460431655)*(cj0)*(cj1)*(px)*(py)*(r01)*(x213)))+(((-2.36690647482014)*(pz)*(r01)*(sj0)*(x213)))+(((7.19424460431655)*(py)*(pz)*(r01)*(sj1)*(x213)))+(((7.19424460431655)*(cj0)*(cj1)*(px)*(pz)*(r02)*(x213)))+(((-2.36690647482014)*(cj0)*(pz)*(r00)*(x213)))+(((-0.121266187050360)*(r02)*(sj1)*(x213)))+(((7.19424460431655)*(cj1)*(py)*(pz)*(r02)*(sj0)*(x213)))+(((7.19424460431655)*(px)*(pz)*(r00)*(sj1)*(x213)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IKReal Noneeval[1];
Noneeval[0]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
if( IKabs(Noneeval[0]) < 0.0000100000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
sj4array[0]=((((r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r01))));
if( sj4array[0] >= -1.0001 && sj4array[0] <= 1.0001 )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
{
    j4valid[1]=false;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=((((cj4)*((cj2)*(cj2))))+(((cj4)*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x214=(cj2)*(cj2);
IKReal x215=((cj4)*(x214));
IKReal x216=(sj2)*(sj2);
IKReal x217=((cj4)*(x216));
IKReal x218=((x215)+(x217));
dummyeval[0]=x218;
dummyeval[1]=x218;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x219=(sj2)*(sj2);
IKReal x220=(cj2)*(cj2);
IKReal x221=((x219)+(x220));
dummyeval[0]=((-1.00000000000000)*(x221));
dummyeval[1]=x221;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
evalcond[2]=((-1.00000000000000)+(((r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r01))));
evalcond[3]=((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((r02)*(sj1))));
evalcond[4]=((((cj1)*(r02)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x222=(sj2)*(sj2);
IKReal x223=(cj2)*(cj2);
IKReal x224=((x223)+(x222));
dummyeval[0]=((-1.00000000000000)*(x224));
dummyeval[1]=x224;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x225=(cj2)*(cj2);
IKReal x226=((273.000000000000)*(x225));
IKReal x227=(sj2)*(sj2);
IKReal x228=((273.000000000000)*(x227));
IKReal x229=((x228)+(x226));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x229) != 0)?((IKReal)1/(x229)):(IKReal)1.0e30))*(((((-1000.00000000000)*(py)*(sj0)*(sj1)*(sj2)))+(((1000.00000000000)*(cj2)*(pz)*(sj1)))+(((1000.00000000000)*(cj1)*(pz)*(sj2)))+(((1000.00000000000)*(cj1)*(cj2)*(py)*(sj0)))+(((190.000000000000)*(sj2)))+(((1000.00000000000)*(cj0)*(cj1)*(cj2)*(px)))+(((-1000.00000000000)*(cj0)*(px)*(sj1)*(sj2)))))), ((((IKabs(x229) != 0)?((IKReal)1/(x229)):(IKReal)1.0e30))*(((((1000.00000000000)*(sj2)*(((((cj1)*(py)*(sj0)))+(((-0.139000000000000)*(sj2)))+(((cj0)*(cj1)*(px)))+(((pz)*(sj1)))))))+(((-1000.00000000000)*(cj2)*(((0.190000000000000)+(((0.139000000000000)*(cj2)))+(((-1.00000000000000)*(py)*(sj0)*(sj1)))+(((cj1)*(pz)))+(((-1.00000000000000)*(cj0)*(px)*(sj1)))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
evalcond[2]=((1.00000000000000)+(((r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r01))));
evalcond[3]=((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((r02)*(sj1))));
evalcond[4]=((((cj1)*(r02)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x230=(sj2)*(sj2);
IKReal x231=(cj2)*(cj2);
IKReal x232=((x230)+(x231));
dummyeval[0]=((-1.00000000000000)*(x232));
dummyeval[1]=x232;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x233=(cj2)*(cj2);
IKReal x234=((273.000000000000)*(x233));
IKReal x235=(sj2)*(sj2);
IKReal x236=((273.000000000000)*(x235));
IKReal x237=((x236)+(x234));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x237) != 0)?((IKReal)1/(x237)):(IKReal)1.0e30))*(((((-1000.00000000000)*(py)*(sj0)*(sj1)*(sj2)))+(((1000.00000000000)*(cj2)*(pz)*(sj1)))+(((1000.00000000000)*(cj1)*(pz)*(sj2)))+(((1000.00000000000)*(cj1)*(cj2)*(py)*(sj0)))+(((190.000000000000)*(sj2)))+(((1000.00000000000)*(cj0)*(cj1)*(cj2)*(px)))+(((-1000.00000000000)*(cj0)*(px)*(sj1)*(sj2)))))), ((((IKabs(x237) != 0)?((IKReal)1/(x237)):(IKReal)1.0e30))*(((((1000.00000000000)*(sj2)*(((((cj1)*(py)*(sj0)))+(((-0.139000000000000)*(sj2)))+(((cj0)*(cj1)*(px)))+(((pz)*(sj1)))))))+(((-1000.00000000000)*(cj2)*(((0.190000000000000)+(((0.139000000000000)*(cj2)))+(((-1.00000000000000)*(py)*(sj0)*(sj1)))+(((cj1)*(pz)))+(((-1.00000000000000)*(cj0)*(px)*(sj1)))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x238=(cj2)*(cj2);
IKReal x239=((273.000000000000)*(x238));
IKReal x240=(sj2)*(sj2);
IKReal x241=((273.000000000000)*(x240));
IKReal x242=((x239)+(x241));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x242) != 0)?((IKReal)1/(x242)):(IKReal)1.0e30))*(((((-1000.00000000000)*(py)*(sj0)*(sj1)*(sj2)))+(((1000.00000000000)*(cj2)*(pz)*(sj1)))+(((1000.00000000000)*(cj1)*(pz)*(sj2)))+(((1000.00000000000)*(cj1)*(cj2)*(py)*(sj0)))+(((190.000000000000)*(sj2)))+(((1000.00000000000)*(cj0)*(cj1)*(cj2)*(px)))+(((-1000.00000000000)*(cj0)*(px)*(sj1)*(sj2)))))), ((((IKabs(x242) != 0)?((IKReal)1/(x242)):(IKReal)1.0e30))*(((((1000.00000000000)*(sj2)*(((((cj1)*(py)*(sj0)))+(((-0.139000000000000)*(sj2)))+(((cj0)*(cj1)*(px)))+(((pz)*(sj1)))))))+(((-1000.00000000000)*(cj2)*(((0.190000000000000)+(((0.139000000000000)*(cj2)))+(((-1.00000000000000)*(py)*(sj0)*(sj1)))+(((cj1)*(pz)))+(((-1.00000000000000)*(cj0)*(px)*(sj1)))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x243=(cj2)*(cj2);
IKReal x244=((273.000000000000)*(cj4)*(x243));
IKReal x245=(sj2)*(sj2);
IKReal x246=((273.000000000000)*(cj4)*(x245));
IKReal x247=((x246)+(x244));
IKReal x248=((IKabs(x247) != 0)?((IKReal)1/(x247)):(IKReal)1.0e30);
IKReal x249=((cj1)*(py)*(sj0));
IKReal x250=((cj0)*(cj1)*(px));
IKReal x251=((pz)*(sj1));
IKReal x252=((x250)+(x251)+(x249));
IKReal x253=((0.139000000000000)*(sj2));
IKReal x254=((x252)+(((-1.00000000000000)*(x253))));
IKReal x255=((cj1)*(r01)*(sj0));
IKReal x256=((cj0)*(cj1)*(r00));
IKReal x257=((r02)*(sj1));
IKReal x258=((x255)+(x256)+(x257));
j3array[0]=IKatan2(((x248)*(((((273.000000000000)*(sj2)*(x258)))+(((-1000.00000000000)*(cj2)*(cj4)*(x254)))))), ((x248)*(((((273.000000000000)*(cj2)*(x258)))+(((1000.00000000000)*(cj4)*(sj2)*(x254)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x259=(cj2)*(cj2);
IKReal x260=((cj4)*(x259));
IKReal x261=(sj2)*(sj2);
IKReal x262=((cj4)*(x261));
IKReal x263=((x260)+(x262));
IKReal x264=((IKabs(x263) != 0)?((IKReal)1/(x263)):(IKReal)1.0e30);
j3array[0]=IKatan2(((x264)*(((((cj1)*(r01)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r02)))+(((cj0)*(cj2)*(r00)*(sj1)))+(((cj2)*(r01)*(sj0)*(sj1)))+(((r02)*(sj1)*(sj2)))+(((cj0)*(cj1)*(r00)*(sj2)))))), ((x264)*(((((cj2)*(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((r02)*(sj1)))))))+(((sj2)*(((((cj1)*(r02)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
continue;

}

}
}
}
    }
}
}
}
return vsolutions.size()>0;
}
/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
