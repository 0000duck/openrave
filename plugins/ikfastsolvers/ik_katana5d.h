/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 34 generated on 2011-02-17 22:52:56.057431
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 5; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x56000007; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
eetrans[0]=((((0.190000000000000)*(x0)*(x1)))+(((x7)*(((((0.273000000000000)*(x0)*(x1)*(x4)))+(((0.273000000000000)*(x0)*(x2)*(x3)))))))+(((x5)*(((((0.273000000000000)*(x0)*(x1)*(x2)))+(((-0.273000000000000)*(x0)*(x3)*(x4)))))))+(((0.139000000000000)*(x0)*(x2)*(x3)))+(((0.139000000000000)*(x0)*(x1)*(x4))));
eetrans[1]=((((x5)*(((((-0.273000000000000)*(x1)*(x2)*(x6)))+(((0.273000000000000)*(x3)*(x4)*(x6)))))))+(((x7)*(((((-0.273000000000000)*(x1)*(x4)*(x6)))+(((-0.273000000000000)*(x2)*(x3)*(x6)))))))+(((-0.139000000000000)*(x2)*(x3)*(x6)))+(((-0.139000000000000)*(x1)*(x4)*(x6)))+(((-0.190000000000000)*(x1)*(x6))));
eetrans[2]=((0.201500000000000)+(((x7)*(((((-0.273000000000000)*(x1)*(x2)))+(((0.273000000000000)*(x3)*(x4)))))))+(((0.190000000000000)*(x3)))+(((x5)*(((((0.273000000000000)*(x2)*(x3)))+(((0.273000000000000)*(x1)*(x4)))))))+(((0.139000000000000)*(x3)*(x4)))+(((-0.139000000000000)*(x1)*(x2))));
eerot[0]=((((x6)*(x8)))+(((x9)*(((((x5)*(((((x0)*(x2)*(x3)))+(((x0)*(x1)*(x4)))))))+(((x7)*(((((x0)*(x3)*(x4)))+(((-1.00000000000000)*(x0)*(x1)*(x2))))))))))));
eerot[1]=((((x0)*(x8)))+(((-1.00000000000000)*(x9)*(((((x5)*(((((x1)*(x4)*(x6)))+(((x2)*(x3)*(x6)))))))+(((x7)*(((((-1.00000000000000)*(x1)*(x2)*(x6)))+(((x3)*(x4)*(x6))))))))))));
eerot[2]=((-1.00000000000000)*(x9)*(((((x5)*(((((x1)*(x2)))+(((-1.00000000000000)*(x3)*(x4)))))))+(((x7)*(((((x1)*(x4)))+(((x2)*(x3))))))))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0, htj0,
j1, cj1, sj1, htj1,
j2, cj2, sj2, htj2,
j3, cj3, sj3, htj3,
j4, cj4, sj4, htj4,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((-1.00000000000000)*(r01));
new_py=((-1.00000000000000)*(py));
new_r02=((-1.00000000000000)*(r02));
new_pz=((0.201500000000000)+(((-1.00000000000000)*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x0=((-1.00000000000000)*(py));
IKReal x1=IKatan2(x0, px);
j0array[0]=((-1.00000000000000)*(x1));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x1))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IKReal op[4+1], zeror[4];
int numroots;
IKReal x2=(sj0)*(sj0);
IKReal x3=(cj0)*(cj0);
IKReal x4=(r01)*(r01);
IKReal x5=(pz)*(pz);
IKReal x6=(py)*(py);
IKReal x7=(r02)*(r02);
IKReal x8=(px)*(px);
IKReal x9=(r00)*(r00);
IKReal x10=(pz)*(pz)*(pz);
IKReal x11=(pp)*(pp);
IKReal x12=(py)*(py)*(py);
IKReal x13=(px)*(px)*(px);
IKReal x14=(px)*(px)*(px)*(px);
IKReal x15=(py)*(py)*(py)*(py);
IKReal x16=(pz)*(pz)*(pz)*(pz);
IKReal x17=((39.3354381243207)*(pz)*(r01)*(r02)*(sj0)*(x5));
IKReal x18=((39.3354381243207)*(cj0)*(px)*(py)*(pz)*(r01)*(r02));
IKReal x19=((19.6677190621603)*(cj0)*(pp)*(px)*(x7));
IKReal x20=((78.6708762486414)*(px)*(r00)*(r01)*(sj0)*(x6));
IKReal x21=((7.47373324362093)*(px)*(pz)*(r00)*(r01)*(sj0));
IKReal x22=((7.47373324362093)*(py)*(pz)*(sj0)*(x4));
IKReal x23=((1.79582009212774)*(cj0)*(px)*(x9));
IKReal x24=((19.6677190621603)*(pp)*(py)*(sj0)*(x7));
IKReal x25=((78.6708762486414)*(cj0)*(py)*(r00)*(r01)*(x8));
IKReal x26=((7.47373324362093)*(r01)*(r02)*(sj0)*(x5));
IKReal x27=((2.93163086796750)*(pz)*(r01)*(r02)*(sj0));
IKReal x28=((2.93163086796750)*(cj0)*(pz)*(r00)*(r02));
IKReal x29=((39.3354381243207)*(py)*(sj0)*(x8)*(x9));
IKReal x30=((39.3354381243207)*(cj0)*(px)*(x5)*(x9));
IKReal x31=((39.3354381243207)*(cj0)*(pz)*(r00)*(r02)*(x5));
IKReal x32=((1.79582009212774)*(py)*(sj0)*(x4));
IKReal x33=((39.3354381243207)*(py)*(sj0)*(x4)*(x5));
IKReal x34=((7.47373324362093)*(py)*(pz)*(sj0)*(x7));
IKReal x35=((7.47373324362093)*(px)*(py)*(r00)*(r02)*(sj0));
IKReal x36=((1.79582009212774)*(cj0)*(py)*(r00)*(r01));
IKReal x37=((7.47373324362093)*(cj0)*(r00)*(r02)*(x8));
IKReal x38=((0.557009864913824)*(r01)*(r02)*(sj0));
IKReal x39=((7.47373324362093)*(r01)*(r02)*(sj0)*(x6));
IKReal x40=((39.3354381243207)*(py)*(sj0)*(x4)*(x6));
IKReal x41=((39.3354381243207)*(pz)*(r01)*(r02)*(sj0)*(x6));
IKReal x42=((7.47373324362093)*(cj0)*(px)*(pz)*(x9));
IKReal x43=((0.557009864913824)*(cj0)*(r00)*(r02));
IKReal x44=((39.3354381243207)*(px)*(py)*(pz)*(r00)*(r02)*(sj0));
IKReal x45=((39.3354381243207)*(px)*(r00)*(r01)*(sj0)*(x5));
IKReal x46=((39.3354381243207)*(cj0)*(px)*(x4)*(x6));
IKReal x47=((7.47373324362093)*(cj0)*(px)*(py)*(r01)*(r02));
IKReal x48=((7.47373324362093)*(cj0)*(py)*(pz)*(r00)*(r01));
IKReal x49=((1.79582009212774)*(px)*(r00)*(r01)*(sj0));
IKReal x50=((39.3354381243207)*(cj0)*(px)*(x8)*(x9));
IKReal x51=((7.47373324362093)*(cj0)*(px)*(pz)*(x7));
IKReal x52=((7.47373324362093)*(cj0)*(r00)*(r02)*(x5));
IKReal x53=((39.3354381243207)*(cj0)*(py)*(r00)*(r01)*(x5));
IKReal x54=((39.3354381243207)*(cj0)*(pz)*(r00)*(r02)*(x8));
IKReal x55=((39.3354381243207)*(cj0)*(pp)*(pz)*(r00)*(r02));
IKReal x56=((39.3354381243207)*(pp)*(pz)*(r01)*(r02)*(sj0));
IKReal x57=((19.6677190621603)*(pp)*(px)*(r00)*(r01)*(sj0));
IKReal x58=((19.6677190621603)*(cj0)*(pp)*(py)*(r00)*(r01));
IKReal x59=((1.13581077583976)*(cj0)*(px)*(x7));
IKReal x60=((19.6677190621603)*(pp)*(py)*(sj0)*(x4));
IKReal x61=((1.13581077583976)*(py)*(sj0)*(x7));
IKReal x62=((7.47373324362093)*(cj0)*(pp)*(r00)*(r02));
IKReal x63=((7.47373324362093)*(pp)*(r01)*(r02)*(sj0));
IKReal x64=((19.6677190621603)*(cj0)*(pp)*(px)*(x9));
IKReal x65=((9.83385953108017)*(pp)*(py)*(r01)*(r02));
IKReal x66=((0.747890895916360)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0));
IKReal x67=((51.7571554267377)*(pp)*(x5)*(x7));
IKReal x68=((51.7571554267377)*(pp)*(px)*(pz)*(r00)*(r02));
IKReal x69=((51.7571554267377)*(pp)*(py)*(pz)*(r01)*(r02)*(x2));
IKReal x70=((51.7571554267377)*(pp)*(py)*(pz)*(r01)*(r02));
IKReal x71=((0.494487862947052)*(pp)*(x2)*(x4));
IKReal x72=((9.83385953108017)*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0));
IKReal x73=((51.7571554267377)*(cj0)*(pp)*(px)*(py)*(sj0)*(x4));
IKReal x74=((9.83385953108017)*(pp)*(px)*(r00)*(r02)*(x3));
IKReal x75=((51.7571554267377)*(pp)*(px)*(py)*(r00)*(r01)*(x2));
IKReal x76=((51.7571554267377)*(cj0)*(pp)*(px)*(py)*(sj0)*(x9));
IKReal x77=((19.6677190621603)*(cj0)*(pz)*(r00)*(r01)*(sj0)*(x8));
IKReal x78=((51.7571554267377)*(pp)*(x3)*(x8)*(x9));
IKReal x79=((19.6677190621603)*(pz)*(x3)*(x8)*(x9));
IKReal x80=((19.6677190621603)*(px)*(r00)*(r02)*(x3)*(x5));
IKReal x81=((19.6677190621603)*(cj0)*(px)*(py)*(pz)*(sj0)*(x9));
IKReal x82=((19.6677190621603)*(cj0)*(py)*(r00)*(r02)*(sj0)*(x5));
IKReal x83=((x3)*(x68));
IKReal x84=((0.494487862947052)*(pp)*(x3)*(x9));
IKReal x85=((51.7571554267377)*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0));
IKReal x86=((0.567905387919880)*(pz)*(x2)*(x4));
IKReal x87=((19.6677190621603)*(px)*(py)*(pz)*(r00)*(r01)*(x3));
IKReal x88=((9.83385953108017)*(pp)*(pz)*(x7));
IKReal x89=((51.7571554267377)*(cj0)*(pp)*(r00)*(r01)*(sj0)*(x6));
IKReal x90=((2.36292117385229)*(pp)*(x7));
IKReal x91=((51.7571554267377)*(pp)*(x2)*(x4)*(x6));
IKReal x92=((19.6677190621603)*(cj0)*(px)*(py)*(pz)*(sj0)*(x4));
IKReal x93=((51.7571554267377)*(pp)*(px)*(py)*(r00)*(r01)*(x3));
IKReal x94=((19.6677190621603)*(pz)*(x2)*(x4)*(x6));
IKReal x95=((0.747890895916360)*(py)*(pz)*(r01)*(r02)*(x2));
IKReal x96=((0.0313756629574039)*(x3)*(x9));
IKReal x97=((51.7571554267377)*(cj0)*(pp)*(r00)*(r01)*(sj0)*(x8));
IKReal x98=((0.988975725894105)*(cj0)*(pp)*(r00)*(r01)*(sj0));
IKReal x99=((9.83385953108017)*(pp)*(px)*(r00)*(r02));
IKReal x100=((19.6677190621603)*(cj0)*(pz)*(r00)*(r01)*(sj0)*(x6));
IKReal x101=((1.13581077583976)*(cj0)*(pz)*(r00)*(r01)*(sj0));
IKReal x102=((0.0313756629574039)*(x2)*(x4));
IKReal x103=((0.747890895916360)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0));
IKReal x104=((19.6677190621603)*(cj0)*(px)*(r01)*(r02)*(sj0)*(x5));
IKReal x105=((19.6677190621603)*(py)*(r01)*(r02)*(x2)*(x5));
IKReal x106=((19.6677190621603)*(px)*(py)*(pz)*(r00)*(r01)*(x2));
IKReal x107=((0.747890895916360)*(px)*(pz)*(r00)*(r02)*(x3));
IKReal x108=((0.0627513259148077)*(cj0)*(r00)*(r01)*(sj0));
IKReal x109=((51.7571554267377)*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0));
IKReal x110=((9.83385953108017)*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0));
IKReal x111=((x2)*(x65));
IKReal x112=((0.567905387919880)*(pz)*(x3)*(x9));
IKReal x113=((0.988975725894105)*(px)*(py)*(r00)*(r01)*(x3));
IKReal x114=((19.6677190621603)*(py)*(r01)*(r02)*(x3)*(x8));
IKReal x115=((0.988975725894105)*(x2)*(x4)*(x6));
IKReal x116=((51.7571554267377)*(x4)*(x5)*(x6));
IKReal x117=((12.9392888566844)*(x11)*(x7));
IKReal x118=((207.028621706951)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*(x8));
IKReal x119=((39.3354381243207)*(px)*(py)*(pz)*(r00)*(r01));
IKReal x120=((0.567905387919880)*(cj0)*(px)*(r01)*(r02)*(sj0));
IKReal x121=((19.6677190621603)*(px)*(r00)*(r02)*(x3)*(x8));
IKReal x122=((19.6677190621603)*(pz)*(x4)*(x6));
IKReal x123=((51.7571554267377)*(x14)*(x3)*(x9));
IKReal x124=((103.514310853475)*(px)*(pz)*(r00)*(r02)*(x5));
IKReal x125=((39.3354381243207)*(py)*(r01)*(r02)*(x5));
IKReal x126=((19.6677190621603)*(pz)*(x2)*(x6)*(x7));
IKReal x127=((0.988975725894105)*(cj0)*(px)*(py)*(sj0)*(x9));
IKReal x128=((12.9392888566844)*(x11)*(x2)*(x4));
IKReal x129=((51.7571554267377)*(x16)*(x7));
IKReal x130=((51.7571554267377)*(x2)*(x5)*(x6)*(x7));
IKReal x131=((19.6677190621603)*(pz)*(x3)*(x7)*(x8));
IKReal x132=((103.514310853475)*(cj0)*(px)*(py)*(sj0)*(x5)*(x7));
IKReal x133=((1.73686662181047)*(cj0)*(r00)*(r01)*(sj0)*(x5));
IKReal x134=((0.567905387919880)*(cj0)*(py)*(r00)*(r02)*(sj0));
IKReal x135=((39.3354381243207)*(cj0)*(px)*(py)*(pz)*(sj0)*(x7));
IKReal x136=((0.988975725894105)*(cj0)*(px)*(py)*(sj0)*(x4));
IKReal x137=((103.514310853475)*(py)*(pz)*(r01)*(r02)*(x5));
IKReal x138=((9.83385953108017)*(pp)*(pz)*(x2)*(x4));
IKReal x139=((0.868433310905233)*(x2)*(x4)*(x5));
IKReal x140=((9.83385953108017)*(pp)*(pz)*(x3)*(x9));
IKReal x141=((12.9392888566844)*(x11)*(x3)*(x9));
IKReal x142=((103.514310853475)*(py)*(pz)*(r01)*(r02)*(x2)*(x6));
IKReal x143=((3.73686662181047)*(px)*(py)*(r00)*(r01));
IKReal x144=((19.6677190621603)*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0));
IKReal x145=((1.86843331090523)*(x4)*(x6));
IKReal x146=((207.028621706951)*(cj0)*(r00)*(r01)*(sj0)*(x6)*(x8));
IKReal x147=((25.8785777133689)*(cj0)*(r00)*(r01)*(sj0)*(x11));
IKReal x148=((0.107876803271052)*(x7));
IKReal x149=((0.988975725894105)*(px)*(py)*(r00)*(r01)*(x2));
IKReal x150=((0.868433310905233)*(x3)*(x7)*(x8));
IKReal x151=((0.897910046063868)*(px)*(r00)*(r02));
IKReal x152=((103.514310853475)*(px)*(py)*(r00)*(r01)*(x2)*(x6));
IKReal x153=((19.6677190621603)*(px)*(r00)*(r02)*(x2)*(x6));
IKReal x154=((39.3354381243207)*(cj0)*(py)*(r00)*(r02)*(sj0)*(x8));
IKReal x155=((0.988975725894105)*(x3)*(x8)*(x9));
IKReal x156=((6.59427565860980)*(x5)*(x7));
IKReal x157=((51.7571554267377)*(x2)*(x6)*(x8)*(x9));
IKReal x158=((19.6677190621603)*(pz)*(x8)*(x9));
IKReal x159=((8.46270896951503)*(px)*(pz)*(r00)*(r02));
IKReal x160=((103.514310853475)*(px)*(py)*(r00)*(r01)*(x5));
IKReal x161=((0.868433310905233)*(x3)*(x5)*(x9));
IKReal x162=((51.7571554267377)*(x5)*(x8)*(x9));
IKReal x163=((19.6677190621603)*(py)*(r01)*(r02)*(x2)*(x6));
IKReal x164=((103.514310853475)*(px)*(pz)*(r00)*(r02)*(x2)*(x6));
IKReal x165=((8.46270896951503)*(py)*(pz)*(r01)*(r02));
IKReal x166=((0.897910046063868)*(pz)*(x7));
IKReal x167=((19.6677190621603)*(pz)*(x5)*(x7));
IKReal x168=((103.514310853475)*(cj0)*(px)*(py)*(sj0)*(x4)*(x6));
IKReal x169=((103.514310853475)*(px)*(pz)*(r00)*(r02)*(x3)*(x8));
IKReal x170=((103.514310853475)*(py)*(pz)*(r01)*(r02)*(x3)*(x8));
IKReal x171=((0.567905387919880)*(py)*(r01)*(r02)*(x2));
IKReal x172=((0.897910046063868)*(py)*(r01)*(r02));
IKReal x173=((51.7571554267377)*(x15)*(x2)*(x4));
IKReal x174=((39.3354381243207)*(cj0)*(px)*(r01)*(r02)*(sj0)*(x6));
IKReal x175=((207.028621706951)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*(x6));
IKReal x176=((1.86843331090523)*(x8)*(x9));
IKReal x177=((0.868433310905233)*(x2)*(x6)*(x7));
IKReal x178=((103.514310853475)*(px)*(py)*(r00)*(r01)*(x3)*(x8));
IKReal x179=((0.567905387919880)*(px)*(r00)*(r02)*(x3));
IKReal x180=((103.514310853475)*(cj0)*(px)*(py)*(sj0)*(x8)*(x9));
IKReal x181=((1.73686662181047)*(cj0)*(px)*(py)*(sj0)*(x7));
IKReal x182=((39.3354381243207)*(px)*(r00)*(r02)*(x5));
IKReal x183=((0.988975725894105)*(cj0)*(r00)*(r01)*(sj0)*(x6));
IKReal x184=((0.988975725894105)*(cj0)*(r00)*(r01)*(sj0)*(x8));
IKReal x185=((51.7571554267377)*(x3)*(x4)*(x6)*(x8));
IKReal x186=((51.7571554267377)*(x3)*(x5)*(x7)*(x8));
op[0]=((((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x146)))+(((-1.00000000000000)*(x145)))+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x155)))+(((-1.00000000000000)*(x156)))+(((-1.00000000000000)*(x159)))+(((-1.00000000000000)*(x162)))+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x160)))+(((-1.00000000000000)*(x72)))+(((-1.00000000000000)*(x74)))+(((-1.00000000000000)*(x77)))+(((-1.00000000000000)*(x79)))+(((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x176)))+(((-1.00000000000000)*(x177)))+(((-1.00000000000000)*(x175)))+(((-1.00000000000000)*(x173)))+(((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x186)))+(((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x183)))+(((-1.00000000000000)*(x181)))+(((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x104)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x112)))+(((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x117)))+(((-1.00000000000000)*(x110)))+(((-1.00000000000000)*(x118)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x129)))+(((-1.00000000000000)*(x128)))+(((-1.00000000000000)*(x124)))+(((-1.00000000000000)*(x127)))+(x179)+(x171)+(x172)+(x174)+(x163)+(x166)+(x167)+(x154)+(x153)+(x151)+(x158)+(x140)+(x144)+(x135)+(x134)+(x131)+(x138)+(x126)+(x125)+(x122)+(x120)+(x121)+(x114)+(x119)+(x108)+(x109)+(x107)+(x102)+(x103)+(x182)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x139)))+(x76)+(x75)+(x73)+(x71)+(x70)+(x78)+(x66)+(x67)+(x68)+(x69)+(x89)+(x83)+(x84)+(x85)+(x98)+(x91)+(x90)+(x93)+(x95)+(x97)+(x96)+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x92)))+(((-1.00000000000000)*(x99)))+(((-1.00000000000000)*(x65)))+(((-1.00000000000000)*(x88)))+(((-1.00000000000000)*(x87)))+(((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x81)))+(((-1.00000000000000)*(x80)))+(((-1.00000000000000)*(x82))));
op[1]=((((-1.00000000000000)*(x26)))+(((-1.00000000000000)*(x22)))+(((-1.00000000000000)*(x21)))+(((-1.00000000000000)*(x42)))+(((-1.00000000000000)*(x47)))+(((-1.00000000000000)*(x48)))+(((-1.00000000000000)*(x43)))+(((-1.00000000000000)*(x38)))+(((-1.00000000000000)*(x39)))+(((-1.00000000000000)*(x34)))+(((-1.00000000000000)*(x35)))+(((-1.00000000000000)*(x37)))+(x33)+(x32)+(x31)+(x30)+(x36)+(x49)+(x46)+(x44)+(x45)+(x40)+(x41)+(x54)+(x50)+(x53)+(x62)+(x63)+(x17)+(x19)+(x18)+(x24)+(x25)+(x27)+(x20)+(x23)+(x28)+(x29)+(((-1.00000000000000)*(x61)))+(((-1.00000000000000)*(x60)))+(((-1.00000000000000)*(x64)))+(((-1.00000000000000)*(x58)))+(((-1.00000000000000)*(x59)))+(((-1.00000000000000)*(x51)))+(((-1.00000000000000)*(x56)))+(((-1.00000000000000)*(x57)))+(((-1.00000000000000)*(x55)))+(((-1.00000000000000)*(x52))));
op[2]=((((-207.028621706951)*(cj0)*(px)*(py)*(sj0)*(x8)*(x9)))+(((16.9254179390301)*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((103.514310853475)*(pp)*(px)*(pz)*(r00)*(r02)*(x3)))+(((103.514310853475)*(pp)*(x2)*(x4)*(x6)))+(((-0.494258538999017)*(x3)*(x9)))+(((-25.8785777133689)*(x11)*(x2)*(x4)))+(((-207.028621706951)*(cj0)*(px)*(py)*(sj0)*(x4)*(x6)))+(((103.514310853475)*(cj0)*(pp)*(r00)*(r01)*(sj0)*(x6)))+(((103.514310853475)*(cj0)*(pp)*(r00)*(r01)*(sj0)*(x8)))+(((-1.97795145178821)*(py)*(pz)*(r01)*(r02)))+(((-0.494258538999017)*(x2)*(x4)))+(((103.514310853475)*(pp)*(px)*(pz)*(r00)*(r02)))+(((-13.4516846954091)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((-103.514310853475)*(x15)*(x2)*(x4)))+(((8.46270896951503)*(pp)*(x3)*(x9)))+(((-3.73686662181047)*(x8)*(x9)))+(((-13.4516846954091)*(py)*(pz)*(r01)*(r02)*(x2)))+(((103.514310853475)*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((103.514310853475)*(pp)*(x5)*(x7)))+(((1.75891517002226)*(x5)*(x7)))+(((-103.514310853475)*(x2)*(x6)*(x8)*(x9)))+(((-207.028621706951)*(px)*(pz)*(r00)*(r02)*(x3)*(x8)))+(((-207.028621706951)*(cj0)*(px)*(py)*(sj0)*(x5)*(x7)))+(((-207.028621706951)*(py)*(pz)*(r01)*(r02)*(x3)*(x8)))+(((-16.9254179390301)*(x3)*(x8)*(x9)))+(((103.514310853475)*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-3.47373324362093)*(cj0)*(r00)*(r01)*(sj0)*(x5)))+(((-1.97795145178821)*(px)*(pz)*(r00)*(r02)))+(((-16.9254179390301)*(cj0)*(r00)*(r01)*(sj0)*(x6)))+(((-16.9254179390301)*(cj0)*(r00)*(r01)*(sj0)*(x8)))+(((-207.028621706951)*(px)*(py)*(r00)*(r01)*(x2)*(x6)))+(((-207.028621706951)*(py)*(pz)*(r01)*(r02)*(x5)))+(((-207.028621706951)*(px)*(py)*(r00)*(r01)*(x3)*(x8)))+(((-207.028621706951)*(px)*(pz)*(r00)*(r02)*(x2)*(x6)))+(((-414.057243413902)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*(x8)))+(((-16.9254179390301)*(px)*(py)*(r00)*(r01)*(x3)))+(((-16.9254179390301)*(px)*(py)*(r00)*(r01)*(x2)))+(((-1.73686662181047)*(x2)*(x6)*(x7)))+(((-13.4516846954091)*(px)*(pz)*(r00)*(r02)*(x3)))+(((-0.988517077998033)*(cj0)*(r00)*(r01)*(sj0)))+(((-3.47373324362093)*(cj0)*(px)*(py)*(sj0)*(x7)))+(((-103.514310853475)*(x4)*(x5)*(x6)))+(((-103.514310853475)*(x2)*(x5)*(x6)*(x7)))+(((-1.73686662181047)*(x3)*(x7)*(x8)))+(((-103.514310853475)*(x14)*(x3)*(x9)))+(((-1.73686662181047)*(x2)*(x4)*(x5)))+(((8.46270896951503)*(pp)*(x2)*(x4)))+(((-207.028621706951)*(px)*(py)*(r00)*(r01)*(x5)))+(((103.514310853475)*(pp)*(px)*(py)*(r00)*(r01)*(x2)))+(((103.514310853475)*(pp)*(px)*(py)*(r00)*(r01)*(x3)))+(((-103.514310853475)*(x3)*(x4)*(x6)*(x8)))+(((-7.47373324362093)*(px)*(py)*(r00)*(r01)))+(((-414.057243413902)*(cj0)*(r00)*(r01)*(sj0)*(x6)*(x8)))+(((103.514310853475)*(pp)*(py)*(pz)*(r01)*(r02)))+(((-13.4516846954091)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-1.73686662181047)*(x3)*(x5)*(x9)))+(((-103.514310853475)*(x3)*(x5)*(x7)*(x8)))+(((103.514310853475)*(pp)*(x3)*(x8)*(x9)))+(((-2.74789089591636)*(pp)*(x7)))+(((-25.8785777133689)*(x11)*(x3)*(x9)))+(((-207.028621706951)*(py)*(pz)*(r01)*(r02)*(x2)*(x6)))+(((-207.028621706951)*(px)*(pz)*(r00)*(r02)*(x5)))+(((103.514310853475)*(pp)*(py)*(pz)*(r01)*(r02)*(x2)))+(((-16.9254179390301)*(cj0)*(px)*(py)*(sj0)*(x9)))+(((-16.9254179390301)*(cj0)*(px)*(py)*(sj0)*(x4)))+(((103.514310853475)*(cj0)*(pp)*(px)*(py)*(sj0)*(x9)))+(((103.514310853475)*(cj0)*(pp)*(px)*(py)*(sj0)*(x4)))+(((-51.7571554267377)*(cj0)*(r00)*(r01)*(sj0)*(x11)))+(((-3.73686662181047)*(x4)*(x6)))+(((-414.057243413902)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*(x6)))+(((-103.514310853475)*(x5)*(x8)*(x9)))+(((-25.8785777133689)*(x11)*(x7)))+(((-16.9254179390301)*(x2)*(x4)*(x6)))+(((0.341256258371720)*(x7)))+(((-103.514310853475)*(x16)*(x7))));
op[3]=((x39)+(x38)+(x33)+(x32)+(x31)+(x30)+(x37)+(x36)+(x35)+(x34)+(x48)+(x49)+(x46)+(x47)+(x44)+(x45)+(x42)+(x43)+(x40)+(x41)+(x54)+(x51)+(x50)+(x53)+(x52)+(x17)+(x19)+(x18)+(x24)+(x25)+(x26)+(x27)+(x20)+(x21)+(x22)+(x23)+(x28)+(x29)+(((-1.00000000000000)*(x63)))+(((-1.00000000000000)*(x62)))+(((-1.00000000000000)*(x61)))+(((-1.00000000000000)*(x60)))+(((-1.00000000000000)*(x64)))+(((-1.00000000000000)*(x58)))+(((-1.00000000000000)*(x59)))+(((-1.00000000000000)*(x56)))+(((-1.00000000000000)*(x57)))+(((-1.00000000000000)*(x55))));
op[4]=((((-1.00000000000000)*(x144)))+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(x140)))+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x146)))+(((-1.00000000000000)*(x145)))+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x154)))+(((-1.00000000000000)*(x155)))+(((-1.00000000000000)*(x156)))+(((-1.00000000000000)*(x158)))+(((-1.00000000000000)*(x159)))+(((-1.00000000000000)*(x162)))+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x160)))+(((-1.00000000000000)*(x163)))+(((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x179)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x176)))+(((-1.00000000000000)*(x177)))+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x175)))+(((-1.00000000000000)*(x172)))+(((-1.00000000000000)*(x173)))+(((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x186)))+(((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x183)))+(((-1.00000000000000)*(x182)))+(((-1.00000000000000)*(x181)))+(((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x117)))+(((-1.00000000000000)*(x118)))+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x121)))+(((-1.00000000000000)*(x120)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x122)))+(((-1.00000000000000)*(x129)))+(((-1.00000000000000)*(x128)))+(((-1.00000000000000)*(x125)))+(((-1.00000000000000)*(x124)))+(((-1.00000000000000)*(x127)))+(((-1.00000000000000)*(x126)))+(x112)+(x111)+(x110)+(x108)+(x109)+(x104)+(x105)+(x106)+(x107)+(x100)+(x101)+(x102)+(x103)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131)))+(((-1.00000000000000)*(x138)))+(((-1.00000000000000)*(x139)))+(x77)+(x76)+(x75)+(x74)+(x73)+(x72)+(x71)+(x70)+(x79)+(x78)+(x65)+(x66)+(x67)+(x68)+(x69)+(x88)+(x89)+(x82)+(x83)+(x80)+(x81)+(x86)+(x87)+(x84)+(x85)+(x99)+(x98)+(x91)+(x90)+(x93)+(x92)+(x95)+(x94)+(x97)+(x96));
polyroots4(op,zeror,numroots);
IKReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IKReal htj1 = zeror[ij1];
tempj1array[0]=((2.00000000000000)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
bool valid = true;
for( int kj1 = 0; kj1 < numsolutions; ++kj1)
{
    if( IKabs(cj1array[kj1]-cj1array[numsolutions]) < 0.0001 && IKabs(sj1array[kj1]-sj1array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x187=((7.19424460431655)*(cj1)*(px)*(pz)*(r00));
IKReal x188=((3.59712230215827)*(pp)*(r01)*(sj0)*(sj1));
IKReal x189=((1.36690647482014)*(py)*(r01));
IKReal x190=((1.36690647482014)*(pz)*(r02));
IKReal x191=((0.328446043165468)*(cj1)*(r02));
IKReal x192=((1.36690647482014)*(px)*(r00));
IKReal x193=((3.59712230215827)*(cj0)*(pp)*(r00)*(sj1));
IKReal x194=x5;
IKReal x195=((7.19424460431655)*(cj1)*(r02)*(x194));
IKReal x196=((7.19424460431655)*(cj1)*(py)*(pz)*(r01));
IKReal x197=((x193)+(x192)+(x191)+(x190)+(x196)+(x195)+(x187)+(x188)+(x189));
IKReal x198=((7.19424460431655)*(cj0)*(px)*(py)*(r01)*(sj1));
IKReal x199=((3.59712230215827)*(cj1)*(pp)*(r02));
IKReal x200=((7.19424460431655)*(cj0)*(px)*(pz)*(r02)*(sj1));
IKReal x201=x6;
IKReal x202=((7.19424460431655)*(r01)*(sj0)*(sj1)*(x201));
IKReal x203=((7.19424460431655)*(py)*(pz)*(r02)*(sj0)*(sj1));
IKReal x204=((0.328446043165468)*(cj0)*(r00)*(sj1));
IKReal x205=((7.19424460431655)*(px)*(py)*(r00)*(sj0)*(sj1));
IKReal x206=x8;
IKReal x207=((7.19424460431655)*(cj0)*(r00)*(sj1)*(x206));
IKReal x208=((0.328446043165468)*(r01)*(sj0)*(sj1));
IKReal x209=((x199)+(x198)+(x207)+(x205)+(x204)+(x203)+(x202)+(x200)+(x208));
IKReal x210=((x197)+(((-1.00000000000000)*(x209))));
IKReal x211=((IKabs(x210) != 0)?((IKReal)1/(x210)):(IKReal)1.0e30);
j2array[0]=((-2.00000000000000)*(atan(((((-0.121266187050360)*(cj0)*(cj1)*(r00)*(x211)))+(((7.19424460431655)*(cj1)*(px)*(py)*(r00)*(sj0)*(x211)))+(((-3.59712230215827)*(cj0)*(cj1)*(pp)*(r00)*(x211)))+(((-3.59712230215827)*(cj1)*(pp)*(r01)*(sj0)*(x211)))+(((-3.59712230215827)*(pp)*(r02)*(sj1)*(x211)))+(((-0.121266187050360)*(cj1)*(r01)*(sj0)*(x211)))+(((2.36690647482014)*(py)*(r02)*(sj0)*(x211)))+(((2.36690647482014)*(cj0)*(px)*(r02)*(x211)))+(((7.19424460431655)*(r02)*(sj1)*(x194)*(x211)))+(((7.19424460431655)*(cj0)*(cj1)*(px)*(py)*(r01)*(x211)))+(((-2.36690647482014)*(pz)*(r01)*(sj0)*(x211)))+(((7.19424460431655)*(py)*(pz)*(r01)*(sj1)*(x211)))+(((7.19424460431655)*(cj0)*(cj1)*(px)*(pz)*(r02)*(x211)))+(((7.19424460431655)*(cj1)*(r01)*(sj0)*(x201)*(x211)))+(((7.19424460431655)*(cj0)*(cj1)*(r00)*(x206)*(x211)))+(((-2.36690647482014)*(cj0)*(pz)*(r00)*(x211)))+(((-0.121266187050360)*(r02)*(sj1)*(x211)))+(((7.19424460431655)*(cj1)*(py)*(pz)*(r02)*(sj0)*(x211)))+(((7.19424460431655)*(px)*(pz)*(r00)*(sj1)*(x211)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((-3.66300366300366)*(cj1)*(py)*(sj0)))+(((-3.66300366300366)*(pz)*(sj1)))+(((-1.34397976124595)*(cj0)*(htj2)*(px)*(sj1)))+(((1.34397976124595)*(cj1)*(htj2)*(pz)))+(((-1.34397976124595)*(htj2)*(py)*(sj0)*(sj1)))+(((-13.1762721690779)*(htj2)*(((0.0577500000000000)+(((-1.00000000000000)*(pp)))))))+(((-3.66300366300366)*(cj0)*(cj1)*(px)))+(((-0.186813186813187)*(htj2)))), ((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((5.00698342424961)*(cj1)*(pz)))+(((-5.00698342424961)*(cj0)*(px)*(sj1)))+(((-5.00698342424961)*(py)*(sj0)*(sj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x212=((0.0361000000000000)*(r00));
IKReal x213=x8;
IKReal x214=((2.00000000000000)*(r00)*(x213));
IKReal x215=((2.00000000000000)*(px)*(py)*(r01));
IKReal x216=((2.00000000000000)*(px)*(pz)*(r02));
IKReal x217=((pp)*(r00));
IKReal x218=((0.0361000000000000)*(r01));
IKReal x219=((2.00000000000000)*(py)*(pz)*(r02));
IKReal x220=((2.00000000000000)*(px)*(py)*(r00));
IKReal x221=x6;
IKReal x222=((2.00000000000000)*(r01)*(x221));
IKReal x223=((pp)*(r01));
IKReal x224=((pp)*(r02));
IKReal x225=((0.0361000000000000)*(r02));
IKReal x226=x5;
IKReal x227=((2.00000000000000)*(r02)*(x226));
IKReal x228=((2.00000000000000)*(py)*(pz)*(r01));
IKReal x229=((2.00000000000000)*(px)*(pz)*(r00));
j4array[0]=IKatan2(((((r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r01)))), ((((13.1762721690779)*(cj0)*(htj2)*(sj1)*(((x212)+(x214)+(x215)+(x216)+(((-1.00000000000000)*(x217)))))))+(((0.540622447097267)*(htj2)*(r01)*(sj0)*(sj1)))+(((13.1762721690779)*(htj2)*(((((-0.380000000000000)*(py)*(r01)))+(((-0.380000000000000)*(pz)*(r02)))+(((-0.380000000000000)*(px)*(r00)))))))+(((-0.540622447097267)*(cj1)*(htj2)*(r02)))+(((-1.23659314306796)*(r02)*(sj1)))+(((13.1762721690779)*(cj0)*(((((0.380000000000000)*(pz)*(r00)))+(((-0.380000000000000)*(px)*(r02)))))))+(((-1.23659314306796)*(cj1)*(r01)*(sj0)))+(((13.1762721690779)*(cj0)*(cj1)*(((x212)+(x217)+(((-1.00000000000000)*(x216)))+(((-1.00000000000000)*(x215)))+(((-1.00000000000000)*(x214)))))))+(((13.1762721690779)*(sj0)*(((((-0.380000000000000)*(py)*(r02)))+(((0.380000000000000)*(pz)*(r01)))))))+(((3.66300366300366)*(htj2)*(((((px)*(r00)))+(((pz)*(r02)))+(((py)*(r01)))))))+(((13.1762721690779)*(cj1)*(sj0)*(((x218)+(x223)+(((-1.00000000000000)*(x219)))+(((-1.00000000000000)*(x220)))+(((-1.00000000000000)*(x222)))))))+(((13.1762721690779)*(htj2)*(sj0)*(sj1)*(((x218)+(x219)+(x220)+(x222)+(((-1.00000000000000)*(x223)))))))+(((-1.23659314306796)*(cj0)*(cj1)*(r00)))+(((13.1762721690779)*(cj1)*(htj2)*(((x224)+(((-1.00000000000000)*(x228)))+(((-1.00000000000000)*(x229)))+(((-1.00000000000000)*(x227)))+(((-1.00000000000000)*(x225)))))))+(((13.1762721690779)*(sj1)*(((x225)+(x224)+(((-1.00000000000000)*(x228)))+(((-1.00000000000000)*(x229)))+(((-1.00000000000000)*(x227)))))))+(((0.540622447097267)*(cj0)*(htj2)*(r00)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[12];
IKReal x230=x5;
IKReal x231=((2.00000000000000)*(r02)*(x230));
IKReal x232=x228;
IKReal x233=x229;
IKReal x234=x224;
IKReal x235=x225;
IKReal x236=x218;
IKReal x237=x219;
IKReal x238=x220;
IKReal x239=x6;
IKReal x240=((2.00000000000000)*(r01)*(x239));
IKReal x241=x223;
IKReal x242=x212;
IKReal x243=x8;
IKReal x244=((2.00000000000000)*(r00)*(x243));
IKReal x245=x215;
IKReal x246=x216;
IKReal x247=x217;
IKReal x248=((py)*(r02));
IKReal x249=((pz)*(r01));
IKReal x250=((x248)+(((-1.00000000000000)*(x249))));
IKReal x251=((py)*(r00));
IKReal x252=((px)*(r01));
IKReal x253=((pz)*(r00));
IKReal x254=((px)*(r02));
IKReal x255=((x253)+(((-1.00000000000000)*(x254))));
IKReal x256=((0.380000000000000)*(x253));
IKReal x257=((0.380000000000000)*(x254));
IKReal x258=((x242)+(x247));
IKReal x259=((x246)+(x245)+(x244));
IKReal x260=((0.380000000000000)*(x248));
IKReal x261=((0.380000000000000)*(x249));
IKReal x262=((x260)+(((-1.00000000000000)*(x261))));
IKReal x263=((x238)+(x237)+(x240));
IKReal x264=((x236)+(x241));
IKReal x265=((x263)+(((-1.00000000000000)*(x264))));
IKReal x266=((0.380000000000000)*(x252));
IKReal x267=((0.380000000000000)*(x251));
IKReal x268=((x266)+(((-1.00000000000000)*(x267))));
IKReal x269=((x258)+(((-1.00000000000000)*(x259))));
IKReal x270=((x256)+(((-1.00000000000000)*(x257))));
IKReal x271=((x251)+(((-1.00000000000000)*(x252))));
IKReal x272=((13.1762721690779)*(cj0)*(cj1)*(x262));
IKReal x273=((13.1762721690779)*(cj0)*(x265));
IKReal x274=((13.1762721690779)*(sj1)*(x268));
IKReal x275=((13.1762721690779)*(sj0)*(x269));
IKReal x276=((13.1762721690779)*(cj1)*(sj0)*(x270));
IKReal x277=((htj2)*(x274));
IKReal x278=((htj2)*(x276));
IKReal x279=((htj2)*(x275));
IKReal x280=((htj2)*(x272));
IKReal x281=((htj2)*(x273));
IKReal x282=((px)*(r00));
IKReal x283=((pz)*(r02));
IKReal x284=((py)*(r01));
IKReal x285=((x284)+(x283)+(x282));
IKReal x286=((7.19424460431655)*(htj2)*(x285));
IKReal x287=((7.19424460431655)*(x283));
IKReal x288=((7.19424460431655)*(x284));
IKReal x289=((7.19424460431655)*(x282));
dummyeval[0]=((((-1.00000000000000)*(htj2)*(r00)*(sj0)))+(((htj2)*(sj4)))+(((cj0)*(htj2)*(r01))));
dummyeval[1]=((((-1.23659314306796)*(htj2)*(r02)*(sj1)))+(((-13.1762721690779)*(htj2)*(sj0)*(x262)))+(((8.66998708725327)*(x282)))+(((8.66998708725327)*(x284)))+(((8.66998708725327)*(x283)))+(((-13.1762721690779)*(sj0)*(sj1)*(((x236)+(x263)+(((-1.00000000000000)*(x241)))))))+(((-13.1762721690779)*(htj2)*(sj1)*(((((-1.00000000000000)*(x235)))+(((-1.00000000000000)*(x234)))+(x232)+(x233)+(x231)))))+(((-13.1762721690779)*(cj0)*(cj1)*(htj2)*(((x259)+(((-1.00000000000000)*(x258)))))))+(((-1.23659314306796)*(cj0)*(cj1)*(htj2)*(r00)))+(((-13.1762721690779)*(cj1)*(htj2)*(sj0)*(x265)))+(((1.93256383903866)*(cj1)*(r02)))+(((-1.23659314306796)*(cj1)*(htj2)*(r01)*(sj0)))+(((cj4)*(htj2)))+(((-1.93256383903866)*(cj0)*(r00)*(sj1)))+(((-1.93256383903866)*(r01)*(sj0)*(sj1)))+(((-13.1762721690779)*(cj0)*(htj2)*(((x257)+(((-1.00000000000000)*(x256)))))))+(((-13.1762721690779)*(cj0)*(sj1)*(((x259)+(x242)+(((-1.00000000000000)*(x247)))))))+(((-13.1762721690779)*(cj1)*(((((-1.00000000000000)*(x233)))+(((-1.00000000000000)*(x232)))+(((-1.00000000000000)*(x235)))+(((-1.00000000000000)*(x231)))+(x234))))));
dummyeval[2]=((0.444198487363955)+(((13.1762721690779)*(pp)))+(((-3.66300366300366)*(htj2)*(pz)*(sj1)))+(((-3.66300366300366)*(cj0)*(cj1)*(htj2)*(px)))+(((-8.66998708725327)*(cj0)*(px)*(sj1)))+(((8.66998708725327)*(cj1)*(pz)))+(((-8.66998708725327)*(py)*(sj0)*(sj1)))+(((htj2)*(sj3)))+(((-3.66300366300366)*(cj1)*(htj2)*(py)*(sj0))));
dummyeval[3]=((((sj3)*(sj4)))+(((3.66300366300366)*(cj1)*(htj2)*(sj0)*(x255)))+(((-1.42340632988115)*(cj0)*(htj2)*(r01)))+(((3.66300366300366)*(sj0)*(sj1)*(x255)))+(((3.66300366300366)*(cj0)*(sj1)*(x250)))+(((3.66300366300366)*(htj2)*(sj1)*(((x252)+(((-1.00000000000000)*(x251)))))))+(((3.66300366300366)*(cj1)*(x271)))+(((3.66300366300366)*(cj0)*(cj1)*(htj2)*(x250)))+(((1.42340632988115)*(htj2)*(r00)*(sj0)))+(((-1.00000000000000)*(x277)))+(((-1.00000000000000)*(x279)))+(((-1.00000000000000)*(x278)))+(((-1.00000000000000)*(x280)))+(((-1.00000000000000)*(x281))));
dummyeval[4]=((((-0.0314649379397581)*(r00)*(sj0)))+(((-3.66300366300366)*(htj2)*(sj0)*(sj1)*(x255)))+(((-3.66300366300366)*(cj0)*(cj1)*(((x249)+(((-1.00000000000000)*(x248)))))))+(((-3.66300366300366)*(cj0)*(htj2)*(sj1)*(x250)))+(x276)+(x274)+(x275)+(x272)+(x273)+(((-3.66300366300366)*(cj1)*(htj2)*(x271)))+(((0.0314649379397581)*(cj0)*(r01)))+(((htj2)*(sj3)*(sj4)))+(((-3.66300366300366)*(sj1)*(x271)))+(((-3.66300366300366)*(cj1)*(sj0)*(((x254)+(((-1.00000000000000)*(x253))))))));
dummyeval[5]=((((1.36690647482014)*(r01)*(sj0)*(sj1)))+(((cj4)*(sj3)))+(((1.36690647482014)*(cj0)*(r00)*(sj1)))+(((-1.36690647482014)*(cj1)*(r02)))+(((-1.00000000000000)*(x287)))+(((-1.00000000000000)*(x288)))+(((-1.00000000000000)*(x289))));
dummyeval[6]=((((cj4)*(htj2)*(sj3)))+(((1.36690647482014)*(htj2)*(r01)*(sj0)*(sj1)))+(((1.36690647482014)*(cj0)*(htj2)*(r00)*(sj1)))+(((-1.36690647482014)*(cj1)*(htj2)*(r02)))+(((-1.00000000000000)*(x286))));
dummyeval[7]=((((-5.00698342424961)*(cj1)*(htj2)*(pz)))+(((cj3)*(htj2)))+(((13.1762721690779)*(htj2)*(((0.0577500000000000)+(((-1.00000000000000)*(pp)))))))+(((5.00698342424961)*(cj0)*(htj2)*(px)*(sj1)))+(((5.00698342424961)*(htj2)*(py)*(sj0)*(sj1))));
dummyeval[8]=((((-1.23659314306796)*(cj0)*(r01)))+(((-1.00000000000000)*(x274)))+(((-1.00000000000000)*(x276)))+(((-1.00000000000000)*(x273)))+(((-1.00000000000000)*(x272)))+(((-1.00000000000000)*(x275)))+(((cj3)*(sj4)))+(((1.23659314306796)*(r00)*(sj0))));
dummyeval[9]=((((cj3)*(htj2)*(sj4)))+(((1.23659314306796)*(htj2)*(r00)*(sj0)))+(((-1.23659314306796)*(cj0)*(htj2)*(r01)))+(((-1.00000000000000)*(x277)))+(((-1.00000000000000)*(x279)))+(((-1.00000000000000)*(x278)))+(((-1.00000000000000)*(x280)))+(((-1.00000000000000)*(x281))));
dummyeval[10]=((((-1.00000000000000)*(cj0)*(cj1)*(r00)))+(((cj3)*(cj4)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)))+(x286)+(((-0.366906474820144)*(cj0)*(htj2)*(r00)*(sj1)))+(((0.366906474820144)*(cj1)*(htj2)*(r02)))+(((-0.366906474820144)*(htj2)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(r02)*(sj1))));
dummyeval[11]=((((2.36690647482014)*(cj0)*(r00)*(sj1)))+(((cj1)*(htj2)*(r01)*(sj0)))+(((-2.36690647482014)*(cj1)*(r02)))+(((cj3)*(cj4)*(htj2)))+(((cj0)*(cj1)*(htj2)*(r00)))+(((2.36690647482014)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(x287)))+(((-1.00000000000000)*(x288)))+(((-1.00000000000000)*(x289)))+(((htj2)*(r02)*(sj1))));
if( IKabs(dummyeval[0]) < 0.001  && IKabs(dummyeval[1]) < 0.001  && IKabs(dummyeval[2]) < 0.001  && IKabs(dummyeval[3]) < 0.001  && IKabs(dummyeval[4]) < 0.001  && IKabs(dummyeval[5]) < 0.001  && IKabs(dummyeval[6]) < 0.001  && IKabs(dummyeval[7]) < 0.001  && IKabs(dummyeval[8]) < 0.001  && IKabs(dummyeval[9]) < 0.001  && IKabs(dummyeval[10]) < 0.001  && IKabs(dummyeval[11]) < 0.001  )
{
{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.vfree.resize(0);
}

} else
{
continue;

}

}
}
}
}
}
}
}
    }
}
}
}
return vsolutions.size()>0;
}
/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
