#define IKFAST_NAMESPACE ik_pr2_rightarm
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 65 generated on 2013-07-18 15:12:02.678159
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==65);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKcos(j[3]);
x8=IKcos(j[1]);
x9=IKsin(j[3]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((IkReal(1.00000000000000))*(x12));
x15=((IkReal(0.180000000000000))*(x7));
x16=((IkReal(0.180000000000000))*(x5));
x17=((IkReal(0.321000000000000))*(x3));
x18=((IkReal(1.00000000000000))*(x1));
x19=((IkReal(0.180000000000000))*(x9));
x20=((IkReal(1.00000000000000))*(x13));
x21=((IkReal(1.00000000000000))*(x9));
x22=((IkReal(0.180000000000000))*(x6));
x23=((IkReal(1.00000000000000))*(x3));
x24=((x8)*(x9));
x25=((x0)*(x8));
x26=((x0)*(x3));
x27=((x0)*(x2));
x28=((x4)*(x7));
x29=((IkReal(-1.00000000000000))*(x7));
x30=((x1)*(x4));
x31=((x1)*(x8));
x32=((x2)*(x8));
x33=((x31)*(x7));
x34=((x21)*(x25));
x35=((x18)*(x24));
x36=((x23)*(x7)*(x8));
x37=((((x27)*(x4)))+(((IkReal(-1.00000000000000))*(x18)*(x3))));
x38=((x27)+(((IkReal(-1.00000000000000))*(x18)*(x3)*(x4))));
x39=((((x2)*(x30)))+(x26));
x40=((((IkReal(-1.00000000000000))*(x36)))+(((x4)*(x9))));
x41=((((IkReal(-1.00000000000000))*(x18)*(x2)))+(((IkReal(-1.00000000000000))*(x0)*(x23)*(x4))));
x42=((x37)*(x5));
x43=((x38)*(x7));
x44=((x39)*(x5));
x45=((((x21)*(x3)*(x8)))+(((IkReal(1.00000000000000))*(x28))));
x46=((x38)*(x9));
x47=((x41)*(x7));
x48=((x41)*(x9));
x49=((((x32)*(x5)))+(((x40)*(x6))));
x50=((((IkReal(-1.00000000000000))*(x1)*(x24)))+(x43));
x51=((((x32)*(x6)))+(((x5)*(((((IkReal(-1.00000000000000))*(x21)*(x4)))+(x36))))));
x52=((((IkReal(-1.00000000000000))*(x18)*(x7)*(x8)))+(((IkReal(-1.00000000000000))*(x21)*(x38))));
x53=((x13)*(x49));
x54=((((IkReal(-1.00000000000000))*(x0)*(x24)))+(x47));
x55=((x50)*(x6));
x56=((((IkReal(-1.00000000000000))*(x48)))+(((x25)*(x29))));
x57=((x54)*(x6));
x58=((x44)+(x55));
x59=((((x6)*(((((IkReal(-1.00000000000000))*(x34)))+(x47)))))+(x42));
x60=((((x5)*(((((x29)*(x38)))+(x35)))))+(((x39)*(x6))));
x61=((((x5)*(((((x29)*(x41)))+(x34)))))+(((x37)*(x6))));
x62=((x13)*(x59));
eerot[0]=((((x11)*(x61)))+(((x10)*(((((x12)*(x56)))+(x62))))));
eerot[1]=((((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x59)))+(((IkReal(-1.00000000000000))*(x14)*(x56)))))))+(((x10)*(x61))));
eerot[2]=((((x13)*(((x48)+(((x25)*(x7)))))))+(((x12)*(((x42)+(x57))))));
eetrans[0]=((((x9)*(((((IkReal(-1.00000000000000))*(x0)*(x17)*(x4)))+(((IkReal(-0.321000000000000))*(x1)*(x2)))))))+(((IkReal(0.100000000000000))*(x0)))+(((IkReal(0.321000000000000))*(x25)*(x7)))+(((IkReal(0.400000000000000))*(x25)))+(((x12)*(((((x16)*(x37)))+(((x22)*(x54)))))))+(((x13)*(((((x19)*(x41)))+(((x15)*(x25))))))));
eerot[3]=((((x11)*(x60)))+(((x10)*(((((x13)*(x58)))+(((x12)*(x52))))))));
eerot[4]=((((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x58)))+(((IkReal(-1.00000000000000))*(x14)*(x52)))))))+(((x10)*(x60))));
eerot[5]=((((x13)*(((x33)+(x46)))))+(((x12)*(((((x6)*(((((IkReal(-1.00000000000000))*(x35)))+(x43)))))+(x44))))));
eetrans[1]=((IkReal(-0.188000000000000))+(((IkReal(0.100000000000000))*(x1)))+(((x13)*(((((x19)*(x38)))+(((x15)*(x31)))))))+(((IkReal(0.321000000000000))*(x33)))+(((IkReal(0.400000000000000))*(x31)))+(((x9)*(((((IkReal(-1.00000000000000))*(x17)*(x30)))+(((IkReal(0.321000000000000))*(x27)))))))+(((x12)*(((((x16)*(x39)))+(((x22)*(x50))))))));
eerot[6]=((((x11)*(x51)))+(((x10)*(((x53)+(((x12)*(x45))))))));
eerot[7]=((((x10)*(x51)))+(((x11)*(((((IkReal(-1.00000000000000))*(x20)*(x49)))+(((IkReal(-1.00000000000000))*(x14)*(x45))))))));
eerot[8]=((((x12)*(x49)))+(((IkReal(-1.00000000000000))*(x13)*(x45))));
eetrans[2]=((((x13)*(((((IkReal(-1.00000000000000))*(x19)*(x3)*(x8)))+(((IkReal(-1.00000000000000))*(x15)*(x4)))))))+(((x12)*(((((x16)*(x32)))+(((x22)*(x40)))))))+(((IkReal(-1.00000000000000))*(x17)*(x24)))+(((IkReal(-0.400000000000000))*(x4)))+(((IkReal(-0.321000000000000))*(x28))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j27,cj27,sj27,htj27,j28,cj28,sj28,htj28,j30,cj30,sj30,htj30,j31,cj31,sj31,htj31,j32,cj32,sj32,htj32,j33,cj33,sj33,htj33,j29,cj29,sj29,htj29,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij27[2], _nj27,_ij28[2], _nj28,_ij30[2], _nj30,_ij31[2], _nj31,_ij32[2], _nj32,_ij33[2], _nj33,_ij29[2], _nj29;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j27=numeric_limits<IkReal>::quiet_NaN(); _ij27[0] = -1; _ij27[1] = -1; _nj27 = -1; j28=numeric_limits<IkReal>::quiet_NaN(); _ij28[0] = -1; _ij28[1] = -1; _nj28 = -1; j30=numeric_limits<IkReal>::quiet_NaN(); _ij30[0] = -1; _ij30[1] = -1; _nj30 = -1; j31=numeric_limits<IkReal>::quiet_NaN(); _ij31[0] = -1; _ij31[1] = -1; _nj31 = -1; j32=numeric_limits<IkReal>::quiet_NaN(); _ij32[0] = -1; _ij32[1] = -1; _nj32 = -1; j33=numeric_limits<IkReal>::quiet_NaN(); _ij33[0] = -1; _ij33[1] = -1; _nj33 = -1;  _ij29[0] = -1; _ij29[1] = -1; _nj29 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j29=pfree[0]; cj29=cos(pfree[0]); sj29=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((IkReal(-0.180000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(0.188000000000000))+(((IkReal(-0.180000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((pz)+(((IkReal(-0.180000000000000))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
CheckValue<IkReal> x63 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x63.valid ) {
    continue;
}
CheckValue<IkReal> x64 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x64.valid ) {
    continue;
}
CheckValue<IkReal> x65 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x65.valid ) {
    continue;
}
pp=((x63.value)+(x64.value)+(x65.value));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=((IkReal(-1.00000000000000))*(py));
IkReal gconst1;
gconst1=((IkReal(0.642000000000000))*(sj29));
IkReal gconst2;
gconst2=((IkReal(-1.00000000000000))*(py));
IkReal gconst3;
gconst3=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst4;
gconst4=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst5;
gconst5=((IkReal(-1.00000000000000))*(py));
IkReal gconst6;
gconst6=((IkReal(0.642000000000000))*(sj29));
IkReal gconst7;
gconst7=((IkReal(-1.00000000000000))*(py));
IkReal gconst8;
gconst8=((IkReal(0.509841000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst9;
gconst9=((IkReal(-0.00375900000000000))+(((IkReal(0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst10;
gconst10=((IkReal(2.00000000000000))*(px));
IkReal gconst11;
gconst11=((IkReal(2.00000000000000))*(px));
IkReal gconst12;
gconst12=((IkReal(0.400000000000000))*(py));
IkReal gconst13;
gconst13=((IkReal(0.400000000000000))*(py));
IkReal gconst14;
gconst14=((IkReal(2.00000000000000))*(px));
IkReal gconst15;
gconst15=((IkReal(2.00000000000000))*(px));
IkReal gconst16;
gconst16=((IkReal(0.400000000000000))*(py));
IkReal gconst17;
gconst17=((IkReal(0.400000000000000))*(py));
IkReal gconst18;
gconst18=py;
IkReal gconst19;
gconst19=((IkReal(0.642000000000000))*(sj29));
IkReal gconst20;
gconst20=py;
IkReal gconst21;
gconst21=((IkReal(0.509841000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst22;
gconst22=((IkReal(-0.00375900000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst23;
gconst23=py;
IkReal gconst24;
gconst24=((IkReal(0.642000000000000))*(sj29));
IkReal gconst25;
gconst25=py;
IkReal gconst26;
gconst26=((IkReal(0.509841000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal gconst27;
gconst27=((IkReal(-0.00375900000000000))+(((IkReal(-0.200000000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp))));
IkReal x66=((gconst20)*(gconst21));
IkReal x67=((gconst23)*(gconst27));
IkReal x68=((gconst25)*(gconst26));
IkReal x69=((gconst18)*(gconst22));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x66)*(x68)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst22)*(gconst24)*(gconst26)))+(((x68)*(x69)))+(((IkReal(-1.00000000000000))*(x67)*(x69)))+(((x66)*(x67))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x70=((IkReal(1.00000000000000))*(gconst8));
IkReal x71=((gconst3)*(gconst7));
IkReal x72=((gconst0)*(gconst8));
IkReal x73=((gconst13)*(gconst15));
IkReal x74=((IkReal(1.00000000000000))*(gconst22));
IkReal x75=((gconst19)*(gconst24));
IkReal x76=((gconst0)*(gconst9));
IkReal x77=((gconst1)*(gconst6));
IkReal x78=((gconst27)*(gconst5));
IkReal x79=((gconst2)*(gconst3));
IkReal x80=((IkReal(1.00000000000000))*(gconst4));
IkReal x81=((gconst17)*(gconst5));
IkReal x82=((gconst12)*(gconst14));
IkReal x83=((gconst2)*(gconst9));
IkReal x84=((IkReal(1.00000000000000))*(gconst16));
IkReal x85=((gconst18)*(gconst25));
IkReal x86=((gconst12)*(gconst7));
IkReal x87=((gconst18)*(gconst9));
IkReal x88=((gconst20)*(gconst27));
IkReal x89=((gconst26)*(gconst4));
IkReal x90=((gconst1)*(gconst24));
IkReal x91=((gconst11)*(gconst3));
IkReal x92=((IkReal(1.00000000000000))*(gconst26));
IkReal x93=((gconst20)*(gconst21));
IkReal x94=((gconst13)*(gconst16));
IkReal x95=((gconst18)*(gconst23));
IkReal x96=((gconst21)*(gconst25));
IkReal x97=((gconst2)*(gconst21));
IkReal x98=((gconst12)*(gconst2));
IkReal x99=((gconst5)*(gconst9));
IkReal x100=((gconst20)*(gconst3));
IkReal x101=((gconst4)*(gconst7));
IkReal x102=((gconst11)*(gconst12));
IkReal x103=((gconst14)*(gconst17));
IkReal x104=((gconst15)*(gconst4));
IkReal x105=((IkReal(1.00000000000000))*(gconst13));
IkReal x106=((gconst10)*(gconst8));
IkReal x107=((gconst0)*(gconst16));
IkReal x108=((gconst23)*(gconst27));
IkReal x109=((gconst22)*(gconst25));
IkReal x110=((gconst10)*(gconst16));
IkReal x111=((gconst19)*(gconst6));
IkReal x112=((gconst22)*(gconst7));
IkReal x113=((gconst0)*(gconst7));
IkReal x114=((gconst17)*(gconst23));
IkReal x115=((gconst10)*(gconst14));
IkReal x116=((gconst11)*(gconst21));
IkReal x117=((gconst12)*(gconst20));
IkReal x118=((gconst18)*(gconst26));
IkReal x119=((gconst14)*(gconst9));
IkReal x120=((gconst13)*(gconst7));
IkReal x121=((gconst16)*(gconst22));
IkReal x122=((gconst23)*(x93));
IkReal x123=((gconst10)*(gconst25)*(gconst26));
IkReal x124=((gconst15)*(gconst22)*(gconst26));
IkReal x125=((gconst14)*(gconst18)*(gconst27));
op[0]=((((IkReal(-1.00000000000000))*(gconst26)*(x74)*(x75)))+(((IkReal(-1.00000000000000))*(gconst25)*(x92)*(x93)))+(((gconst22)*(gconst26)*(x85)))+(((IkReal(-1.00000000000000))*(gconst27)*(x74)*(x95)))+(((gconst21)*(gconst23)*(x88))));
op[1]=((((IkReal(-1.00000000000000))*(gconst11)*(x92)*(x96)))+(((IkReal(-1.00000000000000))*(gconst27)*(x105)*(x95)))+(((IkReal(-1.00000000000000))*(gconst25)*(x84)*(x93)))+(((gconst13)*(gconst26)*(x85)))+(((gconst10)*(gconst26)*(x109)))+(((IkReal(-1.00000000000000))*(gconst25)*(x117)*(x92)))+(((gconst14)*(gconst21)*(x88)))+(((IkReal(-1.00000000000000))*(gconst13)*(x75)*(x92)))+(((x114)*(x93)))+(((IkReal(-1.00000000000000))*(gconst10)*(x108)*(x74)))+(((x121)*(x85)))+(((IkReal(-1.00000000000000))*(gconst16)*(x74)*(x75)))+(((x108)*(x116)))+(((IkReal(-1.00000000000000))*(x125)*(x74)))+(((gconst15)*(gconst22)*(x118)))+(((IkReal(-1.00000000000000))*(gconst17)*(x74)*(x95)))+(((gconst12)*(gconst23)*(x88)))+(((IkReal(-1.00000000000000))*(gconst15)*(x92)*(x93))));
op[2]=((((IkReal(-1.00000000000000))*(gconst10)*(x114)*(x74)))+(((IkReal(-1.00000000000000))*(gconst0)*(x108)*(x74)))+(((x112)*(x118)))+(((x82)*(x88)))+(((gconst23)*(gconst3)*(x88)))+(((gconst9)*(x122)))+(((IkReal(-1.00000000000000))*(gconst10)*(x105)*(x108)))+(((gconst14)*(gconst27)*(x116)))+(((x114)*(x116)))+(((x114)*(x117)))+(((IkReal(-1.00000000000000))*(gconst13)*(x75)*(x84)))+(((gconst15)*(gconst18)*(x121)))+(((x78)*(x93)))+(((x103)*(x93)))+(((x85)*(x89)))+(((IkReal(-1.00000000000000))*(gconst25)*(x100)*(x92)))+(((IkReal(-1.00000000000000))*(gconst25)*(x117)*(x84)))+(((x109)*(x110)))+(((IkReal(-1.00000000000000))*(gconst25)*(x102)*(x92)))+(((x85)*(x94)))+(((IkReal(-1.00000000000000))*(gconst25)*(x70)*(x93)))+(((IkReal(-1.00000000000000))*(gconst27)*(x115)*(x74)))+(((x102)*(x108)))+(((IkReal(-1.00000000000000))*(gconst15)*(x84)*(x93)))+(((x118)*(x73)))+(((x108)*(x97)))+(((IkReal(-1.00000000000000))*(gconst27)*(x80)*(x95)))+(((IkReal(-1.00000000000000))*(gconst7)*(x92)*(x93)))+(((IkReal(-1.00000000000000))*(gconst26)*(x74)*(x90)))+(((gconst22)*(gconst8)*(x85)))+(((IkReal(-1.00000000000000))*(gconst22)*(x70)*(x75)))+(((IkReal(-1.00000000000000))*(gconst15)*(x117)*(x92)))+(((gconst13)*(x123)))+(((IkReal(-1.00000000000000))*(gconst26)*(x111)*(x74)))+(((IkReal(-1.00000000000000))*(gconst17)*(x105)*(x95)))+(((gconst0)*(gconst26)*(x109)))+(((IkReal(-1.00000000000000))*(gconst18)*(x74)*(x78)))+(((IkReal(-1.00000000000000))*(gconst23)*(x74)*(x87)))+(((gconst10)*(x124)))+(((IkReal(-1.00000000000000))*(gconst2)*(x92)*(x96)))+(((IkReal(-1.00000000000000))*(gconst11)*(x84)*(x96)))+(((IkReal(-1.00000000000000))*(x105)*(x125)))+(((IkReal(-1.00000000000000))*(gconst26)*(x75)*(x80)))+(((IkReal(-1.00000000000000))*(gconst18)*(x103)*(x74)))+(((IkReal(-1.00000000000000))*(gconst15)*(x116)*(x92))));
op[3]=((((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst23)*(gconst4)))+(((gconst16)*(gconst18)*(gconst25)*(gconst4)))+(((gconst15)*(gconst18)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst22)*(gconst6)))+(((gconst11)*(gconst12)*(gconst14)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst21)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst27)))+(((gconst0)*(gconst16)*(gconst22)*(gconst25)))+(((gconst0)*(gconst15)*(gconst22)*(gconst26)))+(((gconst14)*(gconst2)*(gconst21)*(gconst27)))+(((gconst10)*(gconst13)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst21)*(gconst25)))+(((gconst11)*(gconst23)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst17)*(gconst23)))+(((gconst11)*(gconst14)*(gconst17)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst26)*(gconst3)))+(((gconst12)*(gconst14)*(gconst17)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst22)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst25)*(gconst3)))+(((gconst11)*(gconst21)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst26)*(gconst7)))+(((gconst14)*(gconst20)*(gconst21)*(gconst9)))+(((gconst16)*(gconst18)*(gconst22)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst22)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst21)*(gconst26)))+(((gconst12)*(gconst20)*(gconst23)*(gconst9)))+(((gconst13)*(gconst18)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst20)))+(((gconst10)*(gconst25)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst27)*(gconst5)))+(((gconst14)*(gconst20)*(gconst27)*(gconst3)))+(((gconst15)*(gconst18)*(gconst26)*(gconst4)))+(((gconst13)*(gconst15)*(gconst16)*(gconst18)))+(((gconst10)*(gconst22)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst22)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst21)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst17)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst24)*(gconst8)))+(((gconst11)*(gconst12)*(gconst17)*(gconst23)))+(((gconst12)*(gconst2)*(gconst23)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst17)*(gconst18)))+(((gconst17)*(gconst20)*(gconst23)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst26)*(gconst6)))+(((gconst17)*(gconst20)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst25)*(gconst26)))+(((gconst10)*(gconst15)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst22)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst23)*(gconst27)))+(((gconst11)*(gconst21)*(gconst27)*(gconst5)))+(((gconst13)*(gconst18)*(gconst26)*(gconst7)))+(((gconst17)*(gconst2)*(gconst21)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst23)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst22)*(gconst27)))+(((gconst0)*(gconst13)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst24)*(gconst26)))+(((gconst10)*(gconst22)*(gconst26)*(gconst7)))+(((gconst12)*(gconst20)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst24)*(gconst4)))+(((gconst10)*(gconst13)*(gconst16)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst25)*(gconst8))));
op[4]=((((gconst12)*(gconst14)*(gconst2)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst23)*(gconst4)))+(((gconst10)*(gconst15)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst5)))+(((gconst2)*(gconst23)*(gconst27)*(gconst3)))+(((gconst18)*(gconst22)*(gconst7)*(gconst8)))+(((gconst14)*(gconst17)*(gconst2)*(gconst21)))+(((gconst20)*(gconst27)*(gconst3)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst21)*(gconst25)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst27)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst21)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst2)*(gconst26)))+(((gconst10)*(gconst16)*(gconst22)*(gconst7)))+(((gconst13)*(gconst15)*(gconst18)*(gconst8)))+(((gconst12)*(gconst17)*(gconst2)*(gconst23)))+(((gconst10)*(gconst13)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst16)*(gconst24)))+(((gconst11)*(gconst14)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst14)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst24)*(gconst8)))+(((gconst18)*(gconst25)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst20)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst14)*(gconst18)*(gconst9)))+(((gconst0)*(gconst13)*(gconst16)*(gconst25)))+(((gconst13)*(gconst16)*(gconst18)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst26)*(gconst3)*(gconst7)))+(((gconst11)*(gconst12)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst17)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst25)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst20)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst26)*(gconst4)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst2)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst22)*(gconst9)))+(((gconst10)*(gconst13)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst5)*(gconst9)))+(((gconst10)*(gconst13)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst16)))+(((gconst0)*(gconst13)*(gconst15)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst2)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst21)*(gconst7)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst25)*(gconst26)*(gconst3)))+(((gconst2)*(gconst21)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst18)*(gconst4)))+(((gconst2)*(gconst21)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst19)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst22)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst25)*(gconst8)))+(((gconst12)*(gconst14)*(gconst20)*(gconst9)))+(((gconst18)*(gconst26)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst23)*(gconst27)*(gconst4)))+(((gconst20)*(gconst21)*(gconst5)*(gconst9)))+(((gconst11)*(gconst12)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst22)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst26)*(gconst6)))+(((gconst10)*(gconst15)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst23)*(gconst9)))+(((gconst11)*(gconst17)*(gconst23)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst22)*(gconst5)))+(((gconst0)*(gconst15)*(gconst16)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst21)*(gconst7)))+(((gconst0)*(gconst25)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst24)*(gconst4)*(gconst8)))+(((gconst0)*(gconst22)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst23)*(gconst4)*(gconst9)))+(((gconst11)*(gconst14)*(gconst21)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst25)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst21)*(gconst8)))+(((gconst14)*(gconst17)*(gconst20)*(gconst3)))+(((gconst12)*(gconst17)*(gconst20)*(gconst5)))+(((gconst11)*(gconst17)*(gconst21)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst22)*(gconst6)*(gconst8)))+(((gconst15)*(gconst16)*(gconst18)*(gconst4)))+(((gconst0)*(gconst22)*(gconst26)*(gconst7)))+(((gconst20)*(gconst23)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst24)*(gconst26)*(gconst4)))+(((gconst10)*(gconst16)*(gconst25)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst17)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst16)*(gconst20)*(gconst3))));
op[5]=((((gconst0)*(gconst13)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst25)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst19)*(gconst4)*(gconst6)))+(((gconst17)*(gconst20)*(gconst3)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst27)*(gconst4)))+(((gconst10)*(gconst15)*(gconst16)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst23)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst14)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst20)*(gconst3)*(gconst7)))+(((gconst12)*(gconst20)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst14)*(gconst22)*(gconst9)))+(((gconst11)*(gconst14)*(gconst17)*(gconst3)))+(((gconst0)*(gconst15)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst14)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst21)*(gconst8)))+(((gconst10)*(gconst25)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst22)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst2)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst26)*(gconst3)*(gconst7)))+(((gconst17)*(gconst2)*(gconst23)*(gconst3)))+(((gconst0)*(gconst16)*(gconst25)*(gconst4)))+(((gconst10)*(gconst26)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst15)*(gconst8)))+(((gconst14)*(gconst2)*(gconst21)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst27)*(gconst5)))+(((gconst17)*(gconst2)*(gconst21)*(gconst5)))+(((gconst12)*(gconst14)*(gconst17)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst2)*(gconst21)*(gconst7)))+(((gconst11)*(gconst23)*(gconst3)*(gconst9)))+(((gconst10)*(gconst13)*(gconst16)*(gconst7)))+(((gconst11)*(gconst12)*(gconst17)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst25)*(gconst8)))+(((gconst12)*(gconst2)*(gconst27)*(gconst5)))+(((gconst11)*(gconst21)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst19)*(gconst6)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst23)*(gconst4)*(gconst9)))+(((gconst0)*(gconst13)*(gconst15)*(gconst16)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst16)*(gconst24)*(gconst4)))+(((gconst14)*(gconst20)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst15)*(gconst16)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst13)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst16)*(gconst3)))+(((gconst16)*(gconst18)*(gconst4)*(gconst7)))+(((gconst12)*(gconst2)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst2)*(gconst26)*(gconst7)))+(((gconst10)*(gconst22)*(gconst7)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst24)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst20)*(gconst7)*(gconst8)))+(((gconst11)*(gconst12)*(gconst14)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst17)*(gconst4)))+(((gconst13)*(gconst18)*(gconst7)*(gconst8)))+(((gconst10)*(gconst13)*(gconst15)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst22)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst21)*(gconst7)*(gconst8)))+(((gconst14)*(gconst2)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst13)*(gconst26)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst27)*(gconst4)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst4)*(gconst9)))+(((gconst0)*(gconst15)*(gconst26)*(gconst4)))+(((gconst15)*(gconst18)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst13)*(gconst17)*(gconst5)))+(((gconst0)*(gconst13)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst0)*(gconst17)*(gconst22)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst12)*(gconst16)*(gconst7)))+(((gconst11)*(gconst27)*(gconst3)*(gconst5)))+(((gconst0)*(gconst16)*(gconst22)*(gconst7))));
op[6]=((((x113)*(x94)))+(((IkReal(-1.00000000000000))*(gconst11)*(x70)*(x86)))+(((IkReal(-1.00000000000000))*(gconst9)*(x115)*(x80)))+(((IkReal(-1.00000000000000))*(gconst15)*(x70)*(x98)))+(((IkReal(-1.00000000000000))*(gconst15)*(x70)*(x91)))+(((x113)*(x89)))+(((x112)*(x72)))+(((x100)*(x99)))+(((x81)*(x98)))+(((x81)*(x91)))+(((IkReal(-1.00000000000000))*(gconst5)*(x74)*(x76)))+(((x82)*(x83)))+(((IkReal(-1.00000000000000))*(gconst2)*(x84)*(x86)))+(((gconst23)*(gconst9)*(x79)))+(((IkReal(-1.00000000000000))*(gconst14)*(x105)*(x76)))+(((x78)*(x79)))+(((x102)*(x99)))+(((x106)*(x120)))+(((IkReal(-1.00000000000000))*(gconst7)*(x70)*(x97)))+(((IkReal(-1.00000000000000))*(gconst0)*(x105)*(x81)))+(((gconst25)*(gconst4)*(x72)))+(((IkReal(-1.00000000000000))*(gconst4)*(x111)*(x70)))+(((IkReal(-1.00000000000000))*(gconst13)*(x77)*(x84)))+(((IkReal(-1.00000000000000))*(gconst10)*(x105)*(x99)))+(((IkReal(-1.00000000000000))*(gconst22)*(x70)*(x77)))+(((IkReal(-1.00000000000000))*(gconst20)*(x70)*(x71)))+(((IkReal(-1.00000000000000))*(gconst10)*(x80)*(x81)))+(((IkReal(-1.00000000000000))*(gconst11)*(x71)*(x84)))+(((IkReal(-1.00000000000000))*(gconst15)*(x79)*(x84)))+(((x119)*(x91)))+(((gconst21)*(gconst5)*(x83)))+(((IkReal(-1.00000000000000))*(gconst5)*(x80)*(x87)))+(((IkReal(-1.00000000000000))*(gconst26)*(x77)*(x80)))+(((IkReal(-1.00000000000000))*(gconst0)*(x78)*(x80)))+(((IkReal(-1.00000000000000))*(gconst23)*(x76)*(x80)))+(((IkReal(-1.00000000000000))*(gconst2)*(x71)*(x92)))+(((IkReal(-1.00000000000000))*(gconst4)*(x70)*(x90)))+(((x104)*(x107)))+(((x104)*(x106)))+(((x72)*(x73)))+(((IkReal(-1.00000000000000))*(gconst25)*(x70)*(x79)))+(((gconst18)*(gconst8)*(x101)))+(((x101)*(x110)))+(((IkReal(-1.00000000000000))*(gconst0)*(x103)*(x80)))+(((x103)*(x79))));
op[7]=((((x79)*(x81)))+(((IkReal(-1.00000000000000))*(gconst11)*(x70)*(x71)))+(((IkReal(-1.00000000000000))*(gconst13)*(x70)*(x77)))+(((IkReal(-1.00000000000000))*(gconst5)*(x105)*(x76)))+(((x120)*(x72)))+(((IkReal(-1.00000000000000))*(gconst0)*(x80)*(x81)))+(((IkReal(-1.00000000000000))*(gconst2)*(x70)*(x86)))+(((gconst12)*(gconst5)*(x83)))+(((x104)*(x72)))+(((IkReal(-1.00000000000000))*(gconst15)*(x70)*(x79)))+(((x119)*(x79)))+(((IkReal(-1.00000000000000))*(gconst16)*(x77)*(x80)))+(((IkReal(-1.00000000000000))*(gconst10)*(x80)*(x99)))+(((IkReal(-1.00000000000000))*(gconst2)*(x71)*(x84)))+(((x101)*(x106)))+(((x101)*(x107)))+(((IkReal(-1.00000000000000))*(gconst14)*(x76)*(x80)))+(((x91)*(x99))));
op[8]=((((IkReal(-1.00000000000000))*(gconst2)*(x70)*(x71)))+(((x79)*(x99)))+(((x101)*(x72)))+(((IkReal(-1.00000000000000))*(gconst4)*(x70)*(x77)))+(((IkReal(-1.00000000000000))*(gconst5)*(x76)*(x80))));
polyroots8(op,zeror,numroots);
IkReal j27array[8], cj27array[8], sj27array[8], tempj27array[1];
int numsolutions = 0;
for(int ij27 = 0; ij27 < numroots; ++ij27)
{
IkReal htj27 = zeror[ij27];
tempj27array[0]=((IkReal(2.00000000000000))*(atan(htj27)));
for(int kj27 = 0; kj27 < 1; ++kj27)
{
j27array[numsolutions] = tempj27array[kj27];
if( j27array[numsolutions] > IKPI )
{
    j27array[numsolutions]-=IK2PI;
}
else if( j27array[numsolutions] < -IKPI )
{
    j27array[numsolutions]+=IK2PI;
}
sj27array[numsolutions] = IKsin(j27array[numsolutions]);
cj27array[numsolutions] = IKcos(j27array[numsolutions]);
numsolutions++;
}
}
bool j27valid[8]={true,true,true,true,true,true,true,true};
_nj27 = 8;
for(int ij27 = 0; ij27 < numsolutions; ++ij27)
    {
if( !j27valid[ij27] )
{
    continue;
}
    j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
htj27 = IKtan(j27/2);

_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < numsolutions; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst44;
IkReal x126=((IkReal(0.800000000000000))*(sj29));
IkReal x127=((cj27)*(px));
IkReal x128=((py)*(sj27));
IkReal x129=((IkReal(4.00000000000000))*(sj29));
CheckValue<IkReal> x130 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x130.valid ) {
    continue;
}
CheckValue<IkReal> x131 = IKPowWithIntegerCheck(x128,2.00000000000000);
if( !x131.valid ) {
    continue;
}
CheckValue<IkReal> x132 = IKPowWithIntegerCheck(x127,2.00000000000000);
if( !x132.valid ) {
    continue;
}
gconst44=IKsign(((((IkReal(-8.00000000000000))*(sj29)*(x127)*(x128)))+(((IkReal(-1.00000000000000))*(x129)*(x130.value)))+(((IkReal(-1.00000000000000))*(x129)*(x131.value)))+(((IkReal(-0.0400000000000000))*(sj29)))+(((x126)*(x127)))+(((x126)*(x128)))+(((IkReal(-1.00000000000000))*(x129)*(x132.value)))));
IkReal x133=((py)*(sj27));
IkReal x134=((IkReal(100.000000000000))*(sj29));
IkReal x135=((cj27)*(px)*(sj29));
CheckValue<IkReal> x136 = IKPowWithIntegerCheck(x133,2.00000000000000);
if( !x136.valid ) {
    continue;
}
CheckValue<IkReal> x137 = IKPowWithIntegerCheck(cj27,2.00000000000000);
if( !x137.valid ) {
    continue;
}
CheckValue<IkReal> x138 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x138.valid ) {
    continue;
}
CheckValue<IkReal> x139 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x139.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(20.0000000000000))*(sj29)*(x133)))+(((IkReal(-1.00000000000000))*(x134)*(x136.value)))+(((IkReal(-200.000000000000))*(x133)*(x135)))+(((IkReal(-1.00000000000000))*(x134)*(x137.value)*(x138.value)))+(((IkReal(-1.00000000000000))*(sj29)))+(((IkReal(20.0000000000000))*(x135)))+(((IkReal(-1.00000000000000))*(x134)*(x139.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x140=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j29))), IkReal(6.28318530717959))));
evalcond[1]=x140;
evalcond[2]=x140;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
cj30array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))));
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x141=((py)*(sj27));
IkReal x142=((IkReal(321.000000000000))*(cj30));
IkReal x143=((cj27)*(px));
gconst49=IKsign(((IkReal(40.0000000000000))+(((IkReal(-1.00000000000000))*(x142)*(x143)))+(((IkReal(-400.000000000000))*(x141)))+(((IkReal(-400.000000000000))*(x143)))+(((IkReal(-321.000000000000))*(pz)*(sj30)))+(((IkReal(-1.00000000000000))*(x141)*(x142)))+(((IkReal(32.1000000000000))*(cj30)))));
IkReal x144=((py)*(sj27));
IkReal x145=((IkReal(10.0000000000000))*(cj30));
IkReal x146=((cj27)*(px));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-12.4610591900312))*(x146)))+(((IkReal(-12.4610591900312))*(x144)))+(((IkReal(-1.00000000000000))*(x144)*(x145)))+(((IkReal(-10.0000000000000))*(pz)*(sj30)))+(cj30)+(((IkReal(-1.00000000000000))*(x145)*(x146))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x147=((IkReal(10.0000000000000))*(sj30));
dummyeval[0]=((sj30)+(((IkReal(-1.00000000000000))*(py)*(sj27)*(x147)))+(((IkReal(10.0000000000000))*(cj30)*(pz)))+(((IkReal(-1.00000000000000))*(cj27)*(px)*(x147)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x148=x140;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j30)), IkReal(6.28318530717959)))))));
evalcond[1]=x148;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=x148;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj27)))+(((IkReal(1.38696255201110))*(cj27)*(px))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x149=IKsin(j28);
IkReal x150=IKcos(j28);
IkReal x151=((cj27)*(px));
IkReal x152=((py)*(sj27));
IkReal x153=((x150)*(x152));
evalcond[0]=((IkReal(0.721000000000000))*(x149));
evalcond[1]=((((x149)*(x152)))+(((x149)*(x151)))+(((IkReal(-0.100000000000000))*(x149))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(-1.00000000000000))*(x150)*(x151)))+(((IkReal(0.100000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x153))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x150)))+(((IkReal(0.200000000000000))*(x151)))+(((IkReal(0.200000000000000))*(x152)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x153)))+(((IkReal(0.800000000000000))*(x150)*(x151))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x779=x140;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j30, IkReal(6.28318530717959)))))));
evalcond[1]=x779;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=x779;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(py)*(sj27)))+(((IkReal(12.6582278481013))*(cj27)*(px))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x780=IKsin(j28);
IkReal x781=IKcos(j28);
IkReal x782=((cj27)*(px));
IkReal x783=((py)*(sj27));
IkReal x784=((x781)*(x783));
evalcond[0]=((IkReal(0.0790000000000000))*(x780));
evalcond[1]=((((IkReal(-0.100000000000000))*(x780)))+(((x780)*(x782)))+(((x780)*(x783))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(-1.00000000000000))*(x781)*(x782)))+(((IkReal(0.100000000000000))*(x781)))+(((IkReal(-1.00000000000000))*(x784))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x781)*(x782)))+(((IkReal(-0.0800000000000000))*(x781)))+(((IkReal(0.200000000000000))*(x783)))+(((IkReal(0.200000000000000))*(x782)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x784))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x785=((cj30)*(pz));
IkReal x786=((IkReal(1000.00000000000))*(pz));
IkReal x787=((py)*(sj27)*(sj30));
IkReal x788=((cj27)*(px)*(sj30));
CheckValue<IkReal> x789 = IKPowWithIntegerCheck(((((IkReal(321000.000000000))*(x785)))+(((IkReal(32100.0000000000))*(sj30)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-321000.000000000))*(x787)))+(((IkReal(-321000.000000000))*(x788)))),-1.00000000000000);
if( !x789.valid ) {
    continue;
}
CheckValue<IkReal> x790 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x790.valid ) {
    continue;
}
CheckValue<IkReal> x791 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x791.valid ) {
    continue;
}
CheckValue<IkReal> x792 = IKPowWithIntegerCheck(((((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x785)))+(((IkReal(32.1000000000000))*(sj30)))+(((IkReal(-321.000000000000))*(x788)))+(((IkReal(-321.000000000000))*(x787)))),-1.00000000000000);
if( !x792.valid ) {
    continue;
}
if( IKabs(((x789.value)*(((((IkReal(103041.000000000))*(x790.value)))+(((IkReal(-1000000.00000000))*(x791.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x792.value)*(((((IkReal(-100.000000000000))*(pz)))+(((py)*(sj27)*(x786)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))+(((cj27)*(px)*(x786))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x789.value)*(((((IkReal(103041.000000000))*(x790.value)))+(((IkReal(-1000000.00000000))*(x791.value)))))))+IKsqr(((x792.value)*(((((IkReal(-100.000000000000))*(pz)))+(((py)*(sj27)*(x786)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))+(((cj27)*(px)*(x786)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x789.value)*(((((IkReal(103041.000000000))*(x790.value)))+(((IkReal(-1000000.00000000))*(x791.value)))))), ((x792.value)*(((((IkReal(-100.000000000000))*(pz)))+(((py)*(sj27)*(x786)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))+(((cj27)*(px)*(x786)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x793=IKsin(j28);
IkReal x794=IKcos(j28);
IkReal x795=((IkReal(0.321000000000000))*(cj30));
IkReal x796=((IkReal(0.321000000000000))*(sj30));
IkReal x797=((cj27)*(px));
IkReal x798=((py)*(sj27));
IkReal x799=((IkReal(1.00000000000000))*(x798));
IkReal x800=((pz)*(x793));
IkReal x801=((IkReal(0.800000000000000))*(x794));
evalcond[0]=((((x793)*(x795)))+(pz)+(((x794)*(x796)))+(((IkReal(0.400000000000000))*(x793))));
evalcond[1]=((((x793)*(x797)))+(((x793)*(x798)))+(((pz)*(x794)))+(((IkReal(-0.100000000000000))*(x793)))+(x796));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x799)))+(((IkReal(-1.00000000000000))*(x793)*(x796)))+(((IkReal(-1.00000000000000))*(x797)))+(((x794)*(x795)))+(((IkReal(0.400000000000000))*(x794))));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x794)*(x799)))+(((IkReal(0.100000000000000))*(x794)))+(((IkReal(-1.00000000000000))*(x794)*(x797)))+(x795)+(x800));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x797)*(x801)))+(((IkReal(-0.0800000000000000))*(x794)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x797)))+(((IkReal(0.200000000000000))*(x798)))+(((x798)*(x801)))+(((IkReal(-0.800000000000000))*(x800))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x802=((IkReal(1000.00000000000))*(pz));
CheckValue<IkReal> x804 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x804.valid ) {
    continue;
}
CheckValue<IkReal> x803 = IKatan2WithCheck(((gconst49)*(((((IkReal(-100.000000000000))*(pz)))+(((cj27)*(px)*(x802)))+(((py)*(sj27)*(x802)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))),((gconst49)*(((IkReal(-160.000000000000))+(((pz)*(x802)))+(((IkReal(-103.041000000000))*(x804.value)))+(((IkReal(-256.800000000000))*(cj30)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x803.valid ) {
    continue;
}
j28array[0]=x803.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x805=IKsin(j28);
IkReal x806=IKcos(j28);
IkReal x807=((IkReal(0.321000000000000))*(cj30));
IkReal x808=((IkReal(0.321000000000000))*(sj30));
IkReal x809=((cj27)*(px));
IkReal x810=((py)*(sj27));
IkReal x811=((IkReal(1.00000000000000))*(x810));
IkReal x812=((pz)*(x805));
IkReal x813=((IkReal(0.800000000000000))*(x806));
evalcond[0]=((((x806)*(x808)))+(((x805)*(x807)))+(pz)+(((IkReal(0.400000000000000))*(x805))));
evalcond[1]=((((x805)*(x809)))+(((IkReal(-0.100000000000000))*(x805)))+(((pz)*(x806)))+(x808)+(((x805)*(x810))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x809)))+(((IkReal(-1.00000000000000))*(x805)*(x808)))+(((x806)*(x807)))+(((IkReal(-1.00000000000000))*(x811)))+(((IkReal(0.400000000000000))*(x806))));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x806)*(x809)))+(((IkReal(0.100000000000000))*(x806)))+(x812)+(x807)+(((IkReal(-1.00000000000000))*(x806)*(x811))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x809)*(x813)))+(((IkReal(0.200000000000000))*(x809)))+(((IkReal(-0.800000000000000))*(x812)))+(((x810)*(x813)))+(((IkReal(-0.0800000000000000))*(x806)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x810))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x814=((px)*(sj27));
IkReal x815=((cj27)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j29))))), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x815)))+(x814));
evalcond[2]=((((IkReal(-1.00000000000000))*(x814)))+(x815));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
cj30array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))));
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IkReal dummyeval[1];
IkReal gconst50;
IkReal x816=((py)*(sj27));
IkReal x817=((IkReal(321.000000000000))*(cj30));
IkReal x818=((cj27)*(px));
gconst50=IKsign(((IkReal(-40.0000000000000))+(((x816)*(x817)))+(((IkReal(-321.000000000000))*(pz)*(sj30)))+(((IkReal(400.000000000000))*(x816)))+(((IkReal(400.000000000000))*(x818)))+(((x817)*(x818)))+(((IkReal(-32.1000000000000))*(cj30)))));
IkReal x819=((cj27)*(px));
IkReal x820=((py)*(sj27));
IkReal x821=((IkReal(10.0000000000000))*(cj30));
dummyeval[0]=((IkReal(-1.24610591900312))+(((x820)*(x821)))+(((IkReal(12.4610591900312))*(x819)))+(((IkReal(-10.0000000000000))*(pz)*(sj30)))+(((x819)*(x821)))+(((IkReal(12.4610591900312))*(x820)))+(((IkReal(-1.00000000000000))*(cj30))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x822=((IkReal(10.0000000000000))*(sj30));
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj30)))+(((IkReal(10.0000000000000))*(cj30)*(pz)))+(((py)*(sj27)*(x822)))+(((cj27)*(px)*(x822)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x823=((cj27)*(py));
IkReal x824=((px)*(sj27));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j30)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x823)))+(x824));
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x824)))+(x823));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj27)))+(((IkReal(1.38696255201110))*(cj27)*(px))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x825=IKsin(j28);
IkReal x826=IKcos(j28);
IkReal x827=((cj27)*(px));
IkReal x828=((py)*(sj27));
IkReal x829=((IkReal(1.00000000000000))*(x825));
IkReal x830=((x826)*(x828));
evalcond[0]=((IkReal(0.721000000000000))*(x825));
evalcond[1]=((((IkReal(0.100000000000000))*(x825)))+(((IkReal(-1.00000000000000))*(x828)*(x829)))+(((IkReal(-1.00000000000000))*(x827)*(x829))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(0.100000000000000))*(x826)))+(((IkReal(-1.00000000000000))*(x830)))+(((IkReal(-1.00000000000000))*(x826)*(x827))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x826)))+(((IkReal(0.800000000000000))*(x830)))+(((IkReal(0.800000000000000))*(x826)*(x827)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x828)))+(((IkReal(0.200000000000000))*(x827))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x831=((cj27)*(py));
IkReal x832=((px)*(sj27));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j30, IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x831)))+(x832));
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x832)))+(x831));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(py)*(sj27)))+(((IkReal(12.6582278481013))*(cj27)*(px))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x833=IKsin(j28);
IkReal x834=IKcos(j28);
IkReal x835=((cj27)*(px));
IkReal x836=((py)*(sj27));
IkReal x837=((IkReal(1.00000000000000))*(x833));
IkReal x838=((x834)*(x836));
evalcond[0]=((IkReal(0.0790000000000000))*(x833));
evalcond[1]=((((IkReal(-1.00000000000000))*(x835)*(x837)))+(((IkReal(-1.00000000000000))*(x836)*(x837)))+(((IkReal(0.100000000000000))*(x833))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(-1.00000000000000))*(x834)*(x835)))+(((IkReal(-1.00000000000000))*(x838)))+(((IkReal(0.100000000000000))*(x834))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x834)*(x835)))+(((IkReal(0.800000000000000))*(x838)))+(((IkReal(-0.0800000000000000))*(x834)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x836)))+(((IkReal(0.200000000000000))*(x835))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x839=((cj30)*(pz));
IkReal x840=((py)*(sj27));
IkReal x841=((IkReal(321000.000000000))*(sj30));
IkReal x842=((IkReal(1000.00000000000))*(pz));
IkReal x843=((IkReal(321.000000000000))*(sj30));
IkReal x844=((cj27)*(px));
CheckValue<IkReal> x845 = IKPowWithIntegerCheck(((((IkReal(321000.000000000))*(x839)))+(((x840)*(x841)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj30)))+(((x841)*(x844)))),-1.00000000000000);
if( !x845.valid ) {
    continue;
}
CheckValue<IkReal> x846 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x846.valid ) {
    continue;
}
CheckValue<IkReal> x847 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x847.valid ) {
    continue;
}
CheckValue<IkReal> x848 = IKPowWithIntegerCheck(((((x840)*(x843)))+(((IkReal(400.000000000000))*(pz)))+(((x843)*(x844)))+(((IkReal(321.000000000000))*(x839)))+(((IkReal(-32.1000000000000))*(sj30)))),-1.00000000000000);
if( !x848.valid ) {
    continue;
}
if( IKabs(((x845.value)*(((((IkReal(103041.000000000))*(x846.value)))+(((IkReal(-1000000.00000000))*(x847.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x848.value)*(((((IkReal(-100.000000000000))*(pz)))+(((x840)*(x842)))+(((IkReal(128.400000000000))*(sj30)))+(((x842)*(x844)))+(((IkReal(103.041000000000))*(cj30)*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x845.value)*(((((IkReal(103041.000000000))*(x846.value)))+(((IkReal(-1000000.00000000))*(x847.value)))))))+IKsqr(((x848.value)*(((((IkReal(-100.000000000000))*(pz)))+(((x840)*(x842)))+(((IkReal(128.400000000000))*(sj30)))+(((x842)*(x844)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x845.value)*(((((IkReal(103041.000000000))*(x846.value)))+(((IkReal(-1000000.00000000))*(x847.value)))))), ((x848.value)*(((((IkReal(-100.000000000000))*(pz)))+(((x840)*(x842)))+(((IkReal(128.400000000000))*(sj30)))+(((x842)*(x844)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x849=IKsin(j28);
IkReal x850=IKcos(j28);
IkReal x851=((IkReal(0.321000000000000))*(cj30));
IkReal x852=((IkReal(0.321000000000000))*(sj30));
IkReal x853=((py)*(sj27));
IkReal x854=((cj27)*(px));
IkReal x855=((IkReal(1.00000000000000))*(x853));
IkReal x856=((pz)*(x849));
IkReal x857=((IkReal(1.00000000000000))*(x850));
IkReal x858=((IkReal(0.800000000000000))*(x850));
evalcond[0]=((((IkReal(0.400000000000000))*(x849)))+(((IkReal(-1.00000000000000))*(x850)*(x852)))+(pz)+(((x849)*(x851))));
evalcond[1]=((IkReal(0.100000000000000))+(((x850)*(x851)))+(((IkReal(-1.00000000000000))*(x855)))+(((IkReal(-1.00000000000000))*(x854)))+(((IkReal(0.400000000000000))*(x850)))+(((x849)*(x852))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x850)))+(((IkReal(-1.00000000000000))*(x850)*(x855)))+(x851)+(x856)+(((IkReal(-1.00000000000000))*(x854)*(x857))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x849)*(x855)))+(((IkReal(-1.00000000000000))*(x849)*(x854)))+(((IkReal(0.100000000000000))*(x849)))+(((IkReal(-1.00000000000000))*(pz)*(x857)))+(x852));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x856)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x850)))+(((x854)*(x858)))+(((x853)*(x858)))+(((IkReal(0.200000000000000))*(x853)))+(((IkReal(0.200000000000000))*(x854))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x859=((IkReal(1000.00000000000))*(pz));
CheckValue<IkReal> x861 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x861.valid ) {
    continue;
}
CheckValue<IkReal> x860 = IKatan2WithCheck(((gconst50)*(((((IkReal(-1.00000000000000))*(cj27)*(px)*(x859)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))+(((IkReal(-1.00000000000000))*(py)*(sj27)*(x859)))))),((gconst50)*(((IkReal(160.000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x859)))+(((IkReal(103.041000000000))*(x861.value)))+(((IkReal(256.800000000000))*(cj30)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x860.valid ) {
    continue;
}
j28array[0]=x860.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x862=IKsin(j28);
IkReal x863=IKcos(j28);
IkReal x864=((IkReal(0.321000000000000))*(cj30));
IkReal x865=((IkReal(0.321000000000000))*(sj30));
IkReal x866=((py)*(sj27));
IkReal x867=((cj27)*(px));
IkReal x868=((IkReal(1.00000000000000))*(x866));
IkReal x869=((pz)*(x862));
IkReal x870=((IkReal(1.00000000000000))*(x863));
IkReal x871=((IkReal(0.800000000000000))*(x863));
evalcond[0]=((pz)+(((x862)*(x864)))+(((IkReal(0.400000000000000))*(x862)))+(((IkReal(-1.00000000000000))*(x863)*(x865))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x868)))+(((x863)*(x864)))+(((IkReal(-1.00000000000000))*(x867)))+(((x862)*(x865)))+(((IkReal(0.400000000000000))*(x863))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x863)))+(((IkReal(-1.00000000000000))*(x867)*(x870)))+(x869)+(x864)+(((IkReal(-1.00000000000000))*(x863)*(x868))));
evalcond[3]=((((IkReal(0.100000000000000))*(x862)))+(((IkReal(-1.00000000000000))*(x862)*(x868)))+(((IkReal(-1.00000000000000))*(pz)*(x870)))+(x865)+(((IkReal(-1.00000000000000))*(x862)*(x867))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x867)*(x871)))+(((IkReal(-0.800000000000000))*(x869)))+(((IkReal(0.200000000000000))*(x866)))+(((IkReal(0.200000000000000))*(x867)))+(((x866)*(x871)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x863))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x872=((IkReal(-1.00000000000000))*(cj27)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j29)), IkReal(6.28318530717959)))))));
evalcond[1]=x872;
evalcond[2]=x872;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
cj30array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27))));
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x873=((py)*(sj27));
gconst51=IKsign(((IkReal(40.0000000000000))+(((IkReal(-321.000000000000))*(cj30)*(x873)))+(((IkReal(-321.000000000000))*(pz)*(sj30)))+(((IkReal(32.1000000000000))*(cj30)))+(((IkReal(-400.000000000000))*(x873)))));
IkReal x874=((py)*(sj27));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj30)))+(cj30)+(((IkReal(-12.4610591900312))*(x874)))+(((IkReal(-10.0000000000000))*(cj30)*(x874))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-10.0000000000000))*(py)*(sj27)*(sj30)))+(sj30)+(((IkReal(10.0000000000000))*(cj30)*(pz)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x875=x872;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j30)), IkReal(6.28318530717959)))))));
evalcond[1]=x875;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27))));
evalcond[3]=x875;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj27))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x876=IKsin(j28);
IkReal x877=IKcos(j28);
IkReal x878=((py)*(sj27));
IkReal x879=((x877)*(x878));
evalcond[0]=((IkReal(0.721000000000000))*(x876));
evalcond[1]=((((x876)*(x878)))+(((IkReal(-0.100000000000000))*(x876))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(0.100000000000000))*(x877)))+(((IkReal(-1.00000000000000))*(x879))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x878)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x877)))+(((IkReal(0.800000000000000))*(x879))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x880=x872;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j30, IkReal(6.28318530717959)))))));
evalcond[1]=x880;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27))));
evalcond[3]=x880;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(py)*(sj27))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x881=IKsin(j28);
IkReal x882=IKcos(j28);
IkReal x883=((py)*(sj27));
IkReal x884=((x882)*(x883));
evalcond[0]=((IkReal(0.0790000000000000))*(x881));
evalcond[1]=((((x881)*(x883)))+(((IkReal(-0.100000000000000))*(x881))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(-1.00000000000000))*(x884)))+(((IkReal(0.100000000000000))*(x882))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x884)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x883)))+(((IkReal(-0.0800000000000000))*(x882))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x885=((cj30)*(pz));
IkReal x886=((py)*(sj27)*(sj30));
CheckValue<IkReal> x887 = IKPowWithIntegerCheck(((((IkReal(32100.0000000000))*(sj30)))+(((IkReal(321000.000000000))*(x885)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-321000.000000000))*(x886)))),-1.00000000000000);
if( !x887.valid ) {
    continue;
}
CheckValue<IkReal> x888 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x888.valid ) {
    continue;
}
CheckValue<IkReal> x889 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x889.valid ) {
    continue;
}
CheckValue<IkReal> x890 = IKPowWithIntegerCheck(((((IkReal(-321.000000000000))*(x886)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(32.1000000000000))*(sj30)))+(((IkReal(321.000000000000))*(x885)))),-1.00000000000000);
if( !x890.valid ) {
    continue;
}
if( IKabs(((x887.value)*(((((IkReal(103041.000000000))*(x888.value)))+(((IkReal(-1000000.00000000))*(x889.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x890.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x887.value)*(((((IkReal(103041.000000000))*(x888.value)))+(((IkReal(-1000000.00000000))*(x889.value)))))))+IKsqr(((x890.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj27)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x887.value)*(((((IkReal(103041.000000000))*(x888.value)))+(((IkReal(-1000000.00000000))*(x889.value)))))), ((x890.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj27)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x891=IKsin(j28);
IkReal x892=IKcos(j28);
IkReal x893=((py)*(sj27));
IkReal x894=((IkReal(0.321000000000000))*(x891));
IkReal x895=((pz)*(x891));
IkReal x896=((IkReal(0.321000000000000))*(x892));
evalcond[0]=((((cj30)*(x894)))+(((IkReal(0.400000000000000))*(x891)))+(((sj30)*(x896)))+(pz));
evalcond[1]=((((IkReal(-0.100000000000000))*(x891)))+(((IkReal(0.321000000000000))*(sj30)))+(((pz)*(x892)))+(((x891)*(x893))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))+(((IkReal(-1.00000000000000))*(x892)*(x893)))+(x895)+(((IkReal(0.100000000000000))*(x892))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(sj30)*(x894)))+(((cj30)*(x896)))+(((IkReal(0.400000000000000))*(x892)))+(((IkReal(-1.00000000000000))*(x893))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x892)*(x893)))+(((IkReal(-0.800000000000000))*(x895)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x893)))+(((IkReal(-0.0800000000000000))*(x892))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
CheckValue<IkReal> x898 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x898.valid ) {
    continue;
}
CheckValue<IkReal> x899 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x899.valid ) {
    continue;
}
CheckValue<IkReal> x897 = IKatan2WithCheck(((gconst51)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))+(((IkReal(1000.00000000000))*(py)*(pz)*(sj27)))))),((gconst51)*(((IkReal(-160.000000000000))+(((IkReal(1000.00000000000))*(x898.value)))+(((IkReal(-103.041000000000))*(x899.value)))+(((IkReal(-256.800000000000))*(cj30)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x897.valid ) {
    continue;
}
j28array[0]=x897.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x900=IKsin(j28);
IkReal x901=IKcos(j28);
IkReal x902=((py)*(sj27));
IkReal x903=((IkReal(0.321000000000000))*(x900));
IkReal x904=((pz)*(x900));
IkReal x905=((IkReal(0.321000000000000))*(x901));
evalcond[0]=((((sj30)*(x905)))+(((IkReal(0.400000000000000))*(x900)))+(pz)+(((cj30)*(x903))));
evalcond[1]=((((IkReal(0.321000000000000))*(sj30)))+(((x900)*(x902)))+(((IkReal(-0.100000000000000))*(x900)))+(((pz)*(x901))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))+(((IkReal(-1.00000000000000))*(x901)*(x902)))+(x904)+(((IkReal(0.100000000000000))*(x901))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x901)))+(((IkReal(-1.00000000000000))*(x902)))+(((cj30)*(x905)))+(((IkReal(-1.00000000000000))*(sj30)*(x903))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x902)))+(((IkReal(0.800000000000000))*(x901)*(x902)))+(((IkReal(-0.0800000000000000))*(x901)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(x904))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x906=((cj27)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j29, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-1.00000000000000))*(x906));
evalcond[2]=x906;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
cj30array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27))));
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IkReal dummyeval[1];
IkReal gconst52;
IkReal x907=((py)*(sj27));
gconst52=IKsign(((IkReal(-40.0000000000000))+(((IkReal(321.000000000000))*(cj30)*(x907)))+(((IkReal(-321.000000000000))*(pz)*(sj30)))+(((IkReal(400.000000000000))*(x907)))+(((IkReal(-32.1000000000000))*(cj30)))));
IkReal x908=((py)*(sj27));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj30)))+(((IkReal(-1.00000000000000))*(cj30)))+(((IkReal(12.4610591900312))*(x908)))+(((IkReal(10.0000000000000))*(cj30)*(x908))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj30)))+(((IkReal(10.0000000000000))*(py)*(sj27)*(sj30)))+(((IkReal(10.0000000000000))*(cj30)*(pz)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x909=((cj27)*(py));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j30)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-1.00000000000000))*(x909));
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27))));
evalcond[3]=x909;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(py)*(sj27))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x910=IKsin(j28);
IkReal x911=IKcos(j28);
IkReal x912=((py)*(sj27));
IkReal x913=((x911)*(x912));
evalcond[0]=((IkReal(0.721000000000000))*(x910));
evalcond[1]=((((IkReal(-1.00000000000000))*(x910)*(x912)))+(((IkReal(0.100000000000000))*(x910))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(-1.00000000000000))*(x913)))+(((IkReal(0.100000000000000))*(x911))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x912)))+(((IkReal(-0.0800000000000000))*(x911)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x913))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x914=((cj27)*(py));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j30, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-1.00000000000000))*(x914));
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27))));
evalcond[3]=x914;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(py)*(sj27))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x915=IKsin(j28);
IkReal x916=IKcos(j28);
IkReal x917=((py)*(sj27));
IkReal x918=((x916)*(x917));
evalcond[0]=((IkReal(0.0790000000000000))*(x915));
evalcond[1]=((((IkReal(-1.00000000000000))*(x915)*(x917)))+(((IkReal(0.100000000000000))*(x915))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(-1.00000000000000))*(x918)))+(((IkReal(0.100000000000000))*(x916))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x917)))+(((IkReal(-0.0800000000000000))*(x916)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x918))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x919=((cj30)*(pz));
IkReal x920=((py)*(sj27));
CheckValue<IkReal> x921 = IKPowWithIntegerCheck(((((IkReal(321000.000000000))*(x919)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(321000.000000000))*(sj30)*(x920)))+(((IkReal(-32100.0000000000))*(sj30)))),-1.00000000000000);
if( !x921.valid ) {
    continue;
}
CheckValue<IkReal> x922 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x922.valid ) {
    continue;
}
CheckValue<IkReal> x923 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x923.valid ) {
    continue;
}
CheckValue<IkReal> x924 = IKPowWithIntegerCheck(((((IkReal(321.000000000000))*(x919)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(sj30)*(x920)))+(((IkReal(-32.1000000000000))*(sj30)))),-1.00000000000000);
if( !x924.valid ) {
    continue;
}
if( IKabs(((x921.value)*(((((IkReal(103041.000000000))*(x922.value)))+(((IkReal(-1000000.00000000))*(x923.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x924.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(1000.00000000000))*(pz)*(x920)))+(((IkReal(103.041000000000))*(cj30)*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x921.value)*(((((IkReal(103041.000000000))*(x922.value)))+(((IkReal(-1000000.00000000))*(x923.value)))))))+IKsqr(((x924.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(1000.00000000000))*(pz)*(x920)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x921.value)*(((((IkReal(103041.000000000))*(x922.value)))+(((IkReal(-1000000.00000000))*(x923.value)))))), ((x924.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(1000.00000000000))*(pz)*(x920)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x925=IKsin(j28);
IkReal x926=IKcos(j28);
IkReal x927=((py)*(sj27));
IkReal x928=((IkReal(0.321000000000000))*(cj30));
IkReal x929=((IkReal(0.321000000000000))*(sj30));
IkReal x930=((IkReal(1.00000000000000))*(x926));
IkReal x931=((IkReal(0.321000000000000))*(x925));
IkReal x932=((pz)*(x925));
evalcond[0]=((((IkReal(-1.00000000000000))*(x926)*(x929)))+(pz)+(((IkReal(0.400000000000000))*(x925)))+(((x925)*(x928))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x926)))+(((IkReal(-1.00000000000000))*(x927)*(x930)))+(x932)+(x928));
evalcond[2]=((((IkReal(0.100000000000000))*(x925)))+(((IkReal(-1.00000000000000))*(x925)*(x927)))+(((IkReal(-1.00000000000000))*(pz)*(x930)))+(x929));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x927)))+(((IkReal(0.400000000000000))*(x926)))+(((x925)*(x929)))+(((x926)*(x928))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x926)))+(((IkReal(0.200000000000000))*(x927)))+(((IkReal(-0.800000000000000))*(x932)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x926)*(x927))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
CheckValue<IkReal> x934 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x934.valid ) {
    continue;
}
CheckValue<IkReal> x935 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x935.valid ) {
    continue;
}
CheckValue<IkReal> x933 = IKatan2WithCheck(((gconst52)*(((((IkReal(100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(-1000.00000000000))*(py)*(pz)*(sj27)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))),((gconst52)*(((IkReal(160.000000000000))+(((IkReal(-1000.00000000000))*(x934.value)))+(((IkReal(103.041000000000))*(x935.value)))+(((IkReal(256.800000000000))*(cj30)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x933.valid ) {
    continue;
}
j28array[0]=x933.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x936=IKsin(j28);
IkReal x937=IKcos(j28);
IkReal x938=((py)*(sj27));
IkReal x939=((IkReal(0.321000000000000))*(cj30));
IkReal x940=((IkReal(0.321000000000000))*(sj30));
IkReal x941=((IkReal(1.00000000000000))*(x937));
IkReal x942=((IkReal(0.321000000000000))*(x936));
IkReal x943=((pz)*(x936));
evalcond[0]=((((x936)*(x939)))+(pz)+(((IkReal(0.400000000000000))*(x936)))+(((IkReal(-1.00000000000000))*(x937)*(x940))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x937)))+(((IkReal(-1.00000000000000))*(x938)*(x941)))+(x939)+(x943));
evalcond[2]=((((IkReal(0.100000000000000))*(x936)))+(((IkReal(-1.00000000000000))*(pz)*(x941)))+(((IkReal(-1.00000000000000))*(x936)*(x938)))+(x940));
evalcond[3]=((IkReal(0.100000000000000))+(((x937)*(x939)))+(((x936)*(x940)))+(((IkReal(-1.00000000000000))*(x938)))+(((IkReal(0.400000000000000))*(x937))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x937)))+(((IkReal(-0.800000000000000))*(x943)))+(((IkReal(0.200000000000000))*(x938)))+(((IkReal(0.800000000000000))*(x937)*(x938)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x944=((px)*(sj27));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j29)), IkReal(6.28318530717959)))))));
evalcond[1]=x944;
evalcond[2]=x944;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
cj30array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj27)*(px))));
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IkReal dummyeval[1];
IkReal gconst53;
IkReal x945=((cj27)*(px));
gconst53=IKsign(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x945)))+(((IkReal(-321.000000000000))*(pz)*(sj30)))+(((IkReal(-321.000000000000))*(cj30)*(x945)))+(((IkReal(32.1000000000000))*(cj30)))));
IkReal x946=((cj27)*(px));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj30)))+(((IkReal(-10.0000000000000))*(cj30)*(x946)))+(cj30)+(((IkReal(-12.4610591900312))*(x946))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-10.0000000000000))*(cj27)*(px)*(sj30)))+(sj30)+(((IkReal(10.0000000000000))*(cj30)*(pz)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x947=((px)*(sj27));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j30)), IkReal(6.28318530717959)))))));
evalcond[1]=x947;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=x947;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(cj27)*(px))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x948=IKsin(j28);
IkReal x949=IKcos(j28);
IkReal x950=((cj27)*(px));
evalcond[0]=((IkReal(0.721000000000000))*(x948));
evalcond[1]=((((x948)*(x950)))+(((IkReal(-0.100000000000000))*(x948))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(-1.00000000000000))*(x949)*(x950)))+(((IkReal(0.100000000000000))*(x949))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x949)))+(((IkReal(0.800000000000000))*(x949)*(x950)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x950))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x951=((px)*(sj27));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j30, IkReal(6.28318530717959)))))));
evalcond[1]=x951;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=x951;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(cj27)*(px))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x952=IKsin(j28);
IkReal x953=IKcos(j28);
IkReal x954=((cj27)*(px));
evalcond[0]=((IkReal(0.0790000000000000))*(x952));
evalcond[1]=((((x952)*(x954)))+(((IkReal(-0.100000000000000))*(x952))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x953)))+(((IkReal(-1.00000000000000))*(x953)*(x954))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x953)*(x954)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x954)))+(((IkReal(-0.0800000000000000))*(x953))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x955=((cj30)*(pz));
IkReal x956=((cj27)*(px)*(sj30));
CheckValue<IkReal> x957 = IKPowWithIntegerCheck(((((IkReal(32100.0000000000))*(sj30)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-321000.000000000))*(x956)))+(((IkReal(321000.000000000))*(x955)))),-1.00000000000000);
if( !x957.valid ) {
    continue;
}
CheckValue<IkReal> x958 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x958.valid ) {
    continue;
}
CheckValue<IkReal> x959 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x959.valid ) {
    continue;
}
CheckValue<IkReal> x960 = IKPowWithIntegerCheck(((((IkReal(-321.000000000000))*(x956)))+(((IkReal(321.000000000000))*(x955)))+(((IkReal(400.000000000000))*(pz)))+(((IkReal(32.1000000000000))*(sj30)))),-1.00000000000000);
if( !x960.valid ) {
    continue;
}
if( IKabs(((x957.value)*(((((IkReal(103041.000000000))*(x958.value)))+(((IkReal(-1000000.00000000))*(x959.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x960.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(1000.00000000000))*(cj27)*(px)*(pz)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x957.value)*(((((IkReal(103041.000000000))*(x958.value)))+(((IkReal(-1000000.00000000))*(x959.value)))))))+IKsqr(((x960.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(1000.00000000000))*(cj27)*(px)*(pz)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x957.value)*(((((IkReal(103041.000000000))*(x958.value)))+(((IkReal(-1000000.00000000))*(x959.value)))))), ((x960.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(1000.00000000000))*(cj27)*(px)*(pz)))+(((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x961=IKsin(j28);
IkReal x962=IKcos(j28);
IkReal x963=((IkReal(0.321000000000000))*(cj30));
IkReal x964=((IkReal(0.321000000000000))*(sj30));
IkReal x965=((cj27)*(px));
IkReal x966=((IkReal(1.00000000000000))*(x965));
IkReal x967=((pz)*(x961));
evalcond[0]=((((x961)*(x963)))+(((x962)*(x964)))+(pz)+(((IkReal(0.400000000000000))*(x961))));
evalcond[1]=((((IkReal(-0.100000000000000))*(x961)))+(((x961)*(x965)))+(((pz)*(x962)))+(x964));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x962)*(x966)))+(((IkReal(0.100000000000000))*(x962)))+(x963)+(x967));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x961)*(x964)))+(((x962)*(x963)))+(((IkReal(-1.00000000000000))*(x966)))+(((IkReal(0.400000000000000))*(x962))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x967)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x962)*(x965)))+(((IkReal(0.200000000000000))*(x965)))+(((IkReal(-0.0800000000000000))*(x962))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
CheckValue<IkReal> x969 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x969.valid ) {
    continue;
}
CheckValue<IkReal> x970 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x970.valid ) {
    continue;
}
CheckValue<IkReal> x968 = IKatan2WithCheck(((gconst53)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(1000.00000000000))*(cj27)*(px)*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))),((gconst53)*(((IkReal(-160.000000000000))+(((IkReal(1000.00000000000))*(x969.value)))+(((IkReal(-103.041000000000))*(x970.value)))+(((IkReal(-256.800000000000))*(cj30)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x968.valid ) {
    continue;
}
j28array[0]=x968.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x971=IKsin(j28);
IkReal x972=IKcos(j28);
IkReal x973=((IkReal(0.321000000000000))*(cj30));
IkReal x974=((IkReal(0.321000000000000))*(sj30));
IkReal x975=((cj27)*(px));
IkReal x976=((IkReal(1.00000000000000))*(x975));
IkReal x977=((pz)*(x971));
evalcond[0]=((pz)+(((x971)*(x973)))+(((IkReal(0.400000000000000))*(x971)))+(((x972)*(x974))));
evalcond[1]=((((IkReal(-0.100000000000000))*(x971)))+(((pz)*(x972)))+(((x971)*(x975)))+(x974));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x972)))+(((IkReal(-1.00000000000000))*(x972)*(x976)))+(x973)+(x977));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x971)*(x974)))+(((IkReal(0.400000000000000))*(x972)))+(((IkReal(-1.00000000000000))*(x976)))+(((x972)*(x973))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(x977)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x975)))+(((IkReal(0.800000000000000))*(x972)*(x975)))+(((IkReal(-0.0800000000000000))*(x972))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x978=((px)*(sj27));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j29, IkReal(6.28318530717959)))))));
evalcond[1]=x978;
evalcond[2]=((IkReal(-1.00000000000000))*(x978));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
cj30array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(cj27)*(px))));
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IkReal dummyeval[1];
IkReal gconst54;
IkReal x979=((cj27)*(px));
gconst54=IKsign(((IkReal(-40.0000000000000))+(((IkReal(-321.000000000000))*(pz)*(sj30)))+(((IkReal(400.000000000000))*(x979)))+(((IkReal(-32.1000000000000))*(cj30)))+(((IkReal(321.000000000000))*(cj30)*(x979)))));
IkReal x980=((cj27)*(px));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(-10.0000000000000))*(pz)*(sj30)))+(((IkReal(-1.00000000000000))*(cj30)))+(((IkReal(10.0000000000000))*(cj30)*(x980)))+(((IkReal(12.4610591900312))*(x980))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj30)))+(((IkReal(10.0000000000000))*(cj27)*(px)*(sj30)))+(((IkReal(10.0000000000000))*(cj30)*(pz)))+(((IkReal(12.4610591900312))*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x981=((px)*(sj27));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j30)), IkReal(6.28318530717959)))))));
evalcond[1]=x981;
evalcond[2]=((IkReal(0.509841000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=((IkReal(-1.00000000000000))*(x981));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-0.138696255201110))+(((IkReal(1.38696255201110))*(cj27)*(px))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x982=IKsin(j28);
IkReal x983=IKcos(j28);
IkReal x984=((cj27)*(px));
evalcond[0]=((IkReal(0.721000000000000))*(x982));
evalcond[1]=((((IkReal(-1.00000000000000))*(x982)*(x984)))+(((IkReal(0.100000000000000))*(x982))));
evalcond[2]=((IkReal(0.721000000000000))+(((IkReal(0.100000000000000))*(x983)))+(((IkReal(-1.00000000000000))*(x983)*(x984))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x983)*(x984)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x984)))+(((IkReal(-0.0800000000000000))*(x983))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x985=((px)*(sj27));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j30, IkReal(6.28318530717959)))))));
evalcond[1]=x985;
evalcond[2]=((IkReal(-0.00375900000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=((IkReal(-1.00000000000000))*(x985));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
_nj28 = 2;
cj28array[0]=((IkReal(-1.26582278481013))+(((IkReal(12.6582278481013))*(cj27)*(px))));
if( cj28array[0] >= -1-IKFAST_SINCOS_THRESH && cj28array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 2; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[4];
IkReal x986=IKsin(j28);
IkReal x987=IKcos(j28);
IkReal x988=((cj27)*(px));
evalcond[0]=((IkReal(0.0790000000000000))*(x986));
evalcond[1]=((((IkReal(-1.00000000000000))*(x986)*(x988)))+(((IkReal(0.100000000000000))*(x986))));
evalcond[2]=((IkReal(0.0790000000000000))+(((IkReal(0.100000000000000))*(x987)))+(((IkReal(-1.00000000000000))*(x987)*(x988))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x987)*(x988)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x988)))+(((IkReal(-0.0800000000000000))*(x987))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x989=((cj30)*(pz));
IkReal x990=((cj27)*(px)*(sj30));
CheckValue<IkReal> x991 = IKPowWithIntegerCheck(((((IkReal(321000.000000000))*(x990)))+(((IkReal(400000.000000000))*(pz)))+(((IkReal(-32100.0000000000))*(sj30)))+(((IkReal(321000.000000000))*(x989)))),-1.00000000000000);
if( !x991.valid ) {
    continue;
}
CheckValue<IkReal> x992 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x992.valid ) {
    continue;
}
CheckValue<IkReal> x993 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x993.valid ) {
    continue;
}
CheckValue<IkReal> x994 = IKPowWithIntegerCheck(((((IkReal(400.000000000000))*(pz)))+(((IkReal(321.000000000000))*(x989)))+(((IkReal(321.000000000000))*(x990)))+(((IkReal(-32.1000000000000))*(sj30)))),-1.00000000000000);
if( !x994.valid ) {
    continue;
}
if( IKabs(((x991.value)*(((((IkReal(103041.000000000))*(x992.value)))+(((IkReal(-1000000.00000000))*(x993.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x994.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(1000.00000000000))*(cj27)*(px)*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(103.041000000000))*(cj30)*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x991.value)*(((((IkReal(103041.000000000))*(x992.value)))+(((IkReal(-1000000.00000000))*(x993.value)))))))+IKsqr(((x994.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(1000.00000000000))*(cj27)*(px)*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x991.value)*(((((IkReal(103041.000000000))*(x992.value)))+(((IkReal(-1000000.00000000))*(x993.value)))))), ((x994.value)*(((((IkReal(-100.000000000000))*(pz)))+(((IkReal(1000.00000000000))*(cj27)*(px)*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x995=IKsin(j28);
IkReal x996=IKcos(j28);
IkReal x997=((cj27)*(px));
IkReal x998=((IkReal(0.321000000000000))*(cj30));
IkReal x999=((IkReal(0.321000000000000))*(sj30));
IkReal x1000=((pz)*(x995));
IkReal x1001=((IkReal(0.321000000000000))*(x995));
IkReal x1002=((IkReal(1.00000000000000))*(x996));
evalcond[0]=((((IkReal(0.400000000000000))*(x995)))+(((IkReal(-1.00000000000000))*(x996)*(x999)))+(pz)+(((x995)*(x998))));
evalcond[1]=((IkReal(0.400000000000000))+(x1000)+(((IkReal(-1.00000000000000))*(x1002)*(x997)))+(((IkReal(0.100000000000000))*(x996)))+(x998));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x1002)))+(((IkReal(0.100000000000000))*(x995)))+(x999)+(((IkReal(-1.00000000000000))*(x995)*(x997))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x997)))+(((IkReal(0.400000000000000))*(x996)))+(((x995)*(x999)))+(((x996)*(x998))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x996)))+(((IkReal(0.800000000000000))*(x996)*(x997)))+(((IkReal(-0.800000000000000))*(x1000)))+(((IkReal(0.200000000000000))*(x997))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
CheckValue<IkReal> x1004 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x1004.valid ) {
    continue;
}
CheckValue<IkReal> x1005 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1005.valid ) {
    continue;
}
CheckValue<IkReal> x1003 = IKatan2WithCheck(((gconst54)*(((((IkReal(100.000000000000))*(pz)))+(((IkReal(128.400000000000))*(sj30)))+(((IkReal(-1000.00000000000))*(cj27)*(px)*(pz)))+(((IkReal(103.041000000000))*(cj30)*(sj30)))))),((gconst54)*(((IkReal(160.000000000000))+(((IkReal(-1000.00000000000))*(x1004.value)))+(((IkReal(103.041000000000))*(x1005.value)))+(((IkReal(256.800000000000))*(cj30)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1003.valid ) {
    continue;
}
j28array[0]=x1003.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1006=IKsin(j28);
IkReal x1007=IKcos(j28);
IkReal x1008=((cj27)*(px));
IkReal x1009=((IkReal(0.321000000000000))*(cj30));
IkReal x1010=((IkReal(0.321000000000000))*(sj30));
IkReal x1011=((pz)*(x1006));
IkReal x1012=((IkReal(0.321000000000000))*(x1006));
IkReal x1013=((IkReal(1.00000000000000))*(x1007));
evalcond[0]=((((IkReal(0.400000000000000))*(x1006)))+(pz)+(((x1006)*(x1009)))+(((IkReal(-1.00000000000000))*(x1007)*(x1010))));
evalcond[1]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x1007)))+(x1011)+(x1009)+(((IkReal(-1.00000000000000))*(x1008)*(x1013))));
evalcond[2]=((((IkReal(0.100000000000000))*(x1006)))+(x1010)+(((IkReal(-1.00000000000000))*(x1006)*(x1008)))+(((IkReal(-1.00000000000000))*(pz)*(x1013))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1008)))+(((IkReal(0.400000000000000))*(x1007)))+(((x1006)*(x1010)))+(((x1007)*(x1009))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1008)))+(((IkReal(0.800000000000000))*(x1007)*(x1008)))+(((IkReal(-0.0800000000000000))*(x1007)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(x1011))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1014=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27))));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j29)), IkReal(6.28318530717959)))))));
evalcond[1]=x1014;
evalcond[2]=x1014;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
cj30array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))));
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IkReal dummyeval[1];
IkReal gconst55;
CheckValue<IkReal> x1015 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1015.valid ) {
    continue;
}
CheckValue<IkReal> x1016 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1016.valid ) {
    continue;
}
gconst55=IKsign(((IkReal(160000.000000000))+(((IkReal(256800.000000000))*(cj30)))+(((IkReal(103041.000000000))*(x1015.value)))+(((IkReal(103041.000000000))*(x1016.value)))));
CheckValue<IkReal> x1017 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1017.valid ) {
    continue;
}
CheckValue<IkReal> x1018 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1018.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(x1017.value)+(((IkReal(2.49221183800623))*(cj30)))+(x1018.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(cj27)*(px)))+(((IkReal(10.0000000000000))*(py)*(sj27))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(cj27)*(px)))+(((IkReal(10.0000000000000))*(py)*(sj27))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst56;
CheckValue<IkReal> x1019 = IKatan2WithCheck(((IkReal(10.0000000000000))*(px)),((IkReal(10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1019.valid ) {
    continue;
}
CheckValue<IkReal> x1021 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1021.valid ) {
    continue;
}
CheckValue<IkReal> x1022 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1022.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1021.value)))+(((IkReal(100.000000000000))*(x1022.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1020 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1021.value)))+(((IkReal(100.000000000000))*(x1022.value)))))),-1.00000000000000);
if( !x1020.valid ) {
    continue;
}
if( (x1020.value) < -1-IKFAST_SINCOS_THRESH || (x1020.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
gconst56=((((IkReal(-1.00000000000000))*(x1019.value)))+(IKasin(x1020.value)));
IkReal gconst57;
gconst57=IKsin(gconst56);
IkReal gconst58;
gconst58=IKcos(gconst56);
IkReal x1023=((((gconst57)*(px)))+(((IkReal(-1.00000000000000))*(gconst58)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst56)))+(j27))))), IkReal(6.28318530717959))));
evalcond[1]=x1023;
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(gconst58)*(px)))+(((IkReal(0.256800000000000))*(cj30)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(gconst57)*(py))));
evalcond[3]=x1023;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst68;
CheckValue<IkReal> x1024 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1024.valid ) {
    continue;
}
CheckValue<IkReal> x1025 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1025.valid ) {
    continue;
}
gconst68=IKsign(((IkReal(160000.000000000))+(((IkReal(256800.000000000))*(cj30)))+(((IkReal(103041.000000000))*(x1024.value)))+(((IkReal(103041.000000000))*(x1025.value)))));
CheckValue<IkReal> x1026 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1026.valid ) {
    continue;
}
CheckValue<IkReal> x1027 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1027.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(x1026.value)+(((IkReal(2.49221183800623))*(cj30)))+(x1027.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst58)*(px)))+(((IkReal(10.0000000000000))*(gconst57)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst58)*(px)))+(((IkReal(10.0000000000000))*(gconst57)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1028=((gconst58)*(px));
IkReal x1029=((gconst57)*(py));
CheckValue<IkReal> x1030 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1028)))+(((IkReal(1000.00000000000))*(x1029)))),-1.00000000000000);
if( !x1030.valid ) {
    continue;
}
CheckValue<IkReal> x1031 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1029)))+(((IkReal(-1.00000000000000))*(x1028)))),-1.00000000000000);
if( !x1031.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1030.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1031.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1030.value)))+IKsqr(((x1031.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1030.value)), ((x1031.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1032=IKsin(j28);
IkReal x1033=IKcos(j28);
IkReal x1034=((gconst58)*(px));
IkReal x1035=((IkReal(0.321000000000000))*(cj30));
IkReal x1036=((gconst57)*(py));
IkReal x1037=((IkReal(0.321000000000000))*(sj30));
IkReal x1038=((IkReal(1.00000000000000))*(x1033));
IkReal x1039=((IkReal(0.800000000000000))*(x1033));
evalcond[0]=((((IkReal(0.400000000000000))*(x1032)))+(((x1033)*(x1037)))+(((x1032)*(x1035))));
evalcond[1]=((((IkReal(-0.100000000000000))*(x1032)))+(x1037)+(((x1032)*(x1034)))+(((x1032)*(x1036))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x1033)))+(x1035)+(((IkReal(-1.00000000000000))*(x1034)*(x1038)))+(((IkReal(-1.00000000000000))*(x1036)*(x1038))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1033)))+(((IkReal(-1.00000000000000))*(x1034)))+(((IkReal(-1.00000000000000))*(x1036)))+(((IkReal(-1.00000000000000))*(x1032)*(x1037)))+(((x1033)*(x1035))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1036)*(x1039)))+(((IkReal(-0.0800000000000000))*(x1033)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1034)*(x1039)))+(((IkReal(0.200000000000000))*(x1036)))+(((IkReal(0.200000000000000))*(x1034))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1040=((gconst57)*(py));
IkReal x1041=((gconst58)*(px));
CheckValue<IkReal> x1042 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1040)))+(((IkReal(1000.00000000000))*(x1041)))),-1.00000000000000);
if( !x1042.valid ) {
    continue;
}
CheckValue<IkReal> x1043 = IKPowWithIntegerCheck(((IkReal(-0.100000000000000))+(x1041)+(x1040)),-1.00000000000000);
if( !x1043.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1042.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1043.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1042.value)))+IKsqr(((x1043.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1042.value)), ((x1043.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1044=IKsin(j28);
IkReal x1045=IKcos(j28);
IkReal x1046=((gconst58)*(px));
IkReal x1047=((IkReal(0.321000000000000))*(cj30));
IkReal x1048=((gconst57)*(py));
IkReal x1049=((IkReal(0.321000000000000))*(sj30));
IkReal x1050=((IkReal(1.00000000000000))*(x1045));
IkReal x1051=((IkReal(0.800000000000000))*(x1045));
evalcond[0]=((((IkReal(0.400000000000000))*(x1044)))+(((x1045)*(x1049)))+(((x1044)*(x1047))));
evalcond[1]=((x1049)+(((IkReal(-0.100000000000000))*(x1044)))+(((x1044)*(x1046)))+(((x1044)*(x1048))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1046)*(x1050)))+(x1047)+(((IkReal(0.100000000000000))*(x1045)))+(((IkReal(-1.00000000000000))*(x1048)*(x1050))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1044)*(x1049)))+(((IkReal(0.400000000000000))*(x1045)))+(((IkReal(-1.00000000000000))*(x1048)))+(((IkReal(-1.00000000000000))*(x1046)))+(((x1045)*(x1047))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1046)))+(((IkReal(0.200000000000000))*(x1048)))+(((x1048)*(x1051)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1046)*(x1051)))+(((IkReal(-0.0800000000000000))*(x1045))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1052=((gconst57)*(py));
IkReal x1053=((IkReal(321000.000000000))*(cj30));
IkReal x1054=((gconst58)*(px));
IkReal x1055=((IkReal(321000.000000000))*(sj30));
CheckValue<IkReal> x1056 = IKatan2WithCheck(((gconst68)*(((((IkReal(-1.00000000000000))*(x1052)*(x1055)))+(((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-1.00000000000000))*(x1054)*(x1055)))))),((gconst68)*(((IkReal(-40000.0000000000))+(((IkReal(-32100.0000000000))*(cj30)))+(((x1052)*(x1053)))+(((x1053)*(x1054)))+(((IkReal(400000.000000000))*(x1052)))+(((IkReal(400000.000000000))*(x1054)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1056.valid ) {
    continue;
}
j28array[0]=x1056.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1057=IKsin(j28);
IkReal x1058=IKcos(j28);
IkReal x1059=((gconst58)*(px));
IkReal x1060=((IkReal(0.321000000000000))*(cj30));
IkReal x1061=((gconst57)*(py));
IkReal x1062=((IkReal(0.321000000000000))*(sj30));
IkReal x1063=((IkReal(1.00000000000000))*(x1058));
IkReal x1064=((IkReal(0.800000000000000))*(x1058));
evalcond[0]=((((IkReal(0.400000000000000))*(x1057)))+(((x1057)*(x1060)))+(((x1058)*(x1062))));
evalcond[1]=((x1062)+(((IkReal(-0.100000000000000))*(x1057)))+(((x1057)*(x1059)))+(((x1057)*(x1061))));
evalcond[2]=((IkReal(0.400000000000000))+(x1060)+(((IkReal(-1.00000000000000))*(x1059)*(x1063)))+(((IkReal(0.100000000000000))*(x1058)))+(((IkReal(-1.00000000000000))*(x1061)*(x1063))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1058)))+(((IkReal(-1.00000000000000))*(x1057)*(x1062)))+(((IkReal(-1.00000000000000))*(x1059)))+(((IkReal(-1.00000000000000))*(x1061)))+(((x1058)*(x1060))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1058)))+(((x1061)*(x1064)))+(((IkReal(0.200000000000000))*(x1059)))+(((IkReal(0.200000000000000))*(x1061)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1059)*(x1064))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst59;
CheckValue<IkReal> x1065 = IKatan2WithCheck(((IkReal(10.0000000000000))*(px)),((IkReal(10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1065.valid ) {
    continue;
}
CheckValue<IkReal> x1067 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1067.valid ) {
    continue;
}
CheckValue<IkReal> x1068 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1068.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1067.value)))+(((IkReal(100.000000000000))*(x1068.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1066 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1067.value)))+(((IkReal(100.000000000000))*(x1068.value)))))),-1.00000000000000);
if( !x1066.valid ) {
    continue;
}
if( (x1066.value) < -1-IKFAST_SINCOS_THRESH || (x1066.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
gconst59=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1065.value)))+(((IkReal(-1.00000000000000))*(IKasin(x1066.value)))));
IkReal gconst60;
gconst60=IKsin(gconst59);
IkReal gconst61;
gconst61=IKcos(gconst59);
IkReal x1069=((((gconst60)*(px)))+(((IkReal(-1.00000000000000))*(gconst61)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst59)))+(j27))))), IkReal(6.28318530717959))));
evalcond[1]=x1069;
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(cj30)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(gconst61)*(px)))+(((IkReal(0.200000000000000))*(gconst60)*(py))));
evalcond[3]=x1069;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst69;
CheckValue<IkReal> x1070 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1070.valid ) {
    continue;
}
CheckValue<IkReal> x1071 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1071.valid ) {
    continue;
}
gconst69=IKsign(((IkReal(160000.000000000))+(((IkReal(256800.000000000))*(cj30)))+(((IkReal(103041.000000000))*(x1070.value)))+(((IkReal(103041.000000000))*(x1071.value)))));
CheckValue<IkReal> x1072 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1072.valid ) {
    continue;
}
CheckValue<IkReal> x1073 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1073.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(x1072.value)+(((IkReal(2.49221183800623))*(cj30)))+(x1073.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst60)*(py)))+(((IkReal(10.0000000000000))*(gconst61)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst60)*(py)))+(((IkReal(10.0000000000000))*(gconst61)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1074=((gconst61)*(px));
IkReal x1075=((gconst60)*(py));
CheckValue<IkReal> x1076 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1075)))+(((IkReal(1000.00000000000))*(x1074)))),-1.00000000000000);
if( !x1076.valid ) {
    continue;
}
CheckValue<IkReal> x1077 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1075)))+(((IkReal(-1.00000000000000))*(x1074)))),-1.00000000000000);
if( !x1077.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1076.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1077.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1076.value)))+IKsqr(((x1077.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1076.value)), ((x1077.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1078=IKsin(j28);
IkReal x1079=IKcos(j28);
IkReal x1080=((IkReal(0.321000000000000))*(cj30));
IkReal x1081=((gconst60)*(py));
IkReal x1082=((gconst61)*(px));
IkReal x1083=((IkReal(0.321000000000000))*(sj30));
IkReal x1084=((IkReal(1.00000000000000))*(x1079));
IkReal x1085=((IkReal(0.800000000000000))*(x1079));
evalcond[0]=((((x1079)*(x1083)))+(((x1078)*(x1080)))+(((IkReal(0.400000000000000))*(x1078))));
evalcond[1]=((x1083)+(((x1078)*(x1081)))+(((x1078)*(x1082)))+(((IkReal(-0.100000000000000))*(x1078))));
evalcond[2]=((IkReal(0.400000000000000))+(x1080)+(((IkReal(-1.00000000000000))*(x1081)*(x1084)))+(((IkReal(0.100000000000000))*(x1079)))+(((IkReal(-1.00000000000000))*(x1082)*(x1084))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1079)*(x1080)))+(((IkReal(-1.00000000000000))*(x1078)*(x1083)))+(((IkReal(0.400000000000000))*(x1079)))+(((IkReal(-1.00000000000000))*(x1082)))+(((IkReal(-1.00000000000000))*(x1081))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1082)*(x1085)))+(((IkReal(-0.0800000000000000))*(x1079)))+(((x1081)*(x1085)))+(((IkReal(0.200000000000000))*(x1082)))+(((IkReal(0.200000000000000))*(x1081)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1086=((gconst61)*(px));
IkReal x1087=((gconst60)*(py));
CheckValue<IkReal> x1088 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1086)))+(((IkReal(1000.00000000000))*(x1087)))),-1.00000000000000);
if( !x1088.valid ) {
    continue;
}
CheckValue<IkReal> x1089 = IKPowWithIntegerCheck(((IkReal(-0.100000000000000))+(x1087)+(x1086)),-1.00000000000000);
if( !x1089.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1088.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1089.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1088.value)))+IKsqr(((x1089.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1088.value)), ((x1089.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1090=IKsin(j28);
IkReal x1091=IKcos(j28);
IkReal x1092=((IkReal(0.321000000000000))*(cj30));
IkReal x1093=((gconst60)*(py));
IkReal x1094=((gconst61)*(px));
IkReal x1095=((IkReal(0.321000000000000))*(sj30));
IkReal x1096=((IkReal(1.00000000000000))*(x1091));
IkReal x1097=((IkReal(0.800000000000000))*(x1091));
evalcond[0]=((((x1091)*(x1095)))+(((IkReal(0.400000000000000))*(x1090)))+(((x1090)*(x1092))));
evalcond[1]=((x1095)+(((IkReal(-0.100000000000000))*(x1090)))+(((x1090)*(x1093)))+(((x1090)*(x1094))));
evalcond[2]=((IkReal(0.400000000000000))+(x1092)+(((IkReal(-1.00000000000000))*(x1094)*(x1096)))+(((IkReal(-1.00000000000000))*(x1093)*(x1096)))+(((IkReal(0.100000000000000))*(x1091))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1090)*(x1095)))+(((IkReal(-1.00000000000000))*(x1093)))+(((IkReal(-1.00000000000000))*(x1094)))+(((x1091)*(x1092)))+(((IkReal(0.400000000000000))*(x1091))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1094)*(x1097)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1091)))+(((x1093)*(x1097)))+(((IkReal(0.200000000000000))*(x1094)))+(((IkReal(0.200000000000000))*(x1093))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1098=((IkReal(321000.000000000))*(gconst60)*(py));
IkReal x1099=((IkReal(321000.000000000))*(gconst61)*(px));
CheckValue<IkReal> x1100 = IKatan2WithCheck(((gconst69)*(((((IkReal(-1.00000000000000))*(sj30)*(x1098)))+(((IkReal(-1.00000000000000))*(sj30)*(x1099)))+(((IkReal(32100.0000000000))*(sj30)))))),((gconst69)*(((IkReal(-40000.0000000000))+(((IkReal(400000.000000000))*(gconst61)*(px)))+(((IkReal(-32100.0000000000))*(cj30)))+(((IkReal(400000.000000000))*(gconst60)*(py)))+(((cj30)*(x1098)))+(((cj30)*(x1099)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1100.valid ) {
    continue;
}
j28array[0]=x1100.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1101=IKsin(j28);
IkReal x1102=IKcos(j28);
IkReal x1103=((IkReal(0.321000000000000))*(cj30));
IkReal x1104=((gconst60)*(py));
IkReal x1105=((gconst61)*(px));
IkReal x1106=((IkReal(0.321000000000000))*(sj30));
IkReal x1107=((IkReal(1.00000000000000))*(x1102));
IkReal x1108=((IkReal(0.800000000000000))*(x1102));
evalcond[0]=((((x1102)*(x1106)))+(((x1101)*(x1103)))+(((IkReal(0.400000000000000))*(x1101))));
evalcond[1]=((x1106)+(((x1101)*(x1104)))+(((x1101)*(x1105)))+(((IkReal(-0.100000000000000))*(x1101))));
evalcond[2]=((IkReal(0.400000000000000))+(x1103)+(((IkReal(-1.00000000000000))*(x1104)*(x1107)))+(((IkReal(0.100000000000000))*(x1102)))+(((IkReal(-1.00000000000000))*(x1105)*(x1107))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1102)*(x1103)))+(((IkReal(-1.00000000000000))*(x1105)))+(((IkReal(-1.00000000000000))*(x1104)))+(((IkReal(0.400000000000000))*(x1102)))+(((IkReal(-1.00000000000000))*(x1101)*(x1106))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1105)*(x1108)))+(((IkReal(-0.0800000000000000))*(x1102)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1104)*(x1108)))+(((IkReal(0.200000000000000))*(x1105)))+(((IkReal(0.200000000000000))*(x1104))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst62;
CheckValue<IkReal> x1109 = IKatan2WithCheck(((IkReal(10.0000000000000))*(px)),((IkReal(10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1109.valid ) {
    continue;
}
CheckValue<IkReal> x1111 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1111.valid ) {
    continue;
}
CheckValue<IkReal> x1112 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1112.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1111.value)))+(((IkReal(100.000000000000))*(x1112.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1110 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1111.value)))+(((IkReal(100.000000000000))*(x1112.value)))))),-1.00000000000000);
if( !x1110.valid ) {
    continue;
}
if( (x1110.value) < -1-IKFAST_SINCOS_THRESH || (x1110.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
gconst62=((((IkReal(-1.00000000000000))*(x1109.value)))+(IKasin(x1110.value)));
IkReal gconst63;
gconst63=IKsin(gconst62);
IkReal gconst64;
gconst64=IKcos(gconst62);
IkReal x1113=((((IkReal(-1.00000000000000))*(gconst64)*(py)))+(((gconst63)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst62)))+(j27))))), IkReal(6.28318530717959))));
evalcond[1]=x1113;
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(cj30)))+(((IkReal(0.200000000000000))*(gconst63)*(py)))+(((IkReal(0.200000000000000))*(gconst64)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x1113;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst70;
CheckValue<IkReal> x1114 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1114.valid ) {
    continue;
}
CheckValue<IkReal> x1115 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1115.valid ) {
    continue;
}
gconst70=IKsign(((IkReal(160000.000000000))+(((IkReal(256800.000000000))*(cj30)))+(((IkReal(103041.000000000))*(x1114.value)))+(((IkReal(103041.000000000))*(x1115.value)))));
CheckValue<IkReal> x1116 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1116.valid ) {
    continue;
}
CheckValue<IkReal> x1117 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1117.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(x1116.value)+(((IkReal(2.49221183800623))*(cj30)))+(x1117.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst64)*(px)))+(((IkReal(10.0000000000000))*(gconst63)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst64)*(px)))+(((IkReal(10.0000000000000))*(gconst63)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1118=((gconst63)*(py));
IkReal x1119=((gconst64)*(px));
CheckValue<IkReal> x1120 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1118)))+(((IkReal(1000.00000000000))*(x1119)))),-1.00000000000000);
if( !x1120.valid ) {
    continue;
}
CheckValue<IkReal> x1121 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1119)))+(((IkReal(-1.00000000000000))*(x1118)))),-1.00000000000000);
if( !x1121.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1120.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1121.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1120.value)))+IKsqr(((x1121.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1120.value)), ((x1121.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1122=IKsin(j28);
IkReal x1123=IKcos(j28);
IkReal x1124=((gconst64)*(px));
IkReal x1125=((IkReal(0.321000000000000))*(cj30));
IkReal x1126=((IkReal(0.321000000000000))*(sj30));
IkReal x1127=((gconst63)*(py));
IkReal x1128=((IkReal(0.800000000000000))*(x1123));
IkReal x1129=((IkReal(1.00000000000000))*(x1127));
evalcond[0]=((((IkReal(0.400000000000000))*(x1122)))+(((x1122)*(x1125)))+(((x1123)*(x1126))));
evalcond[1]=((x1126)+(((IkReal(-0.100000000000000))*(x1122)))+(((x1122)*(x1127)))+(((x1122)*(x1124))));
evalcond[2]=((IkReal(0.400000000000000))+(x1125)+(((IkReal(-1.00000000000000))*(x1123)*(x1129)))+(((IkReal(-1.00000000000000))*(x1123)*(x1124)))+(((IkReal(0.100000000000000))*(x1123))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1122)*(x1126)))+(((IkReal(0.400000000000000))*(x1123)))+(((IkReal(-1.00000000000000))*(x1124)))+(((IkReal(-1.00000000000000))*(x1129)))+(((x1123)*(x1125))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1127)*(x1128)))+(((x1124)*(x1128)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1124)))+(((IkReal(0.200000000000000))*(x1127)))+(((IkReal(-0.0800000000000000))*(x1123))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1130=((gconst64)*(px));
IkReal x1131=((gconst63)*(py));
CheckValue<IkReal> x1132 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1130)))+(((IkReal(1000.00000000000))*(x1131)))),-1.00000000000000);
if( !x1132.valid ) {
    continue;
}
CheckValue<IkReal> x1133 = IKPowWithIntegerCheck(((IkReal(-0.100000000000000))+(x1131)+(x1130)),-1.00000000000000);
if( !x1133.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1132.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1133.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1132.value)))+IKsqr(((x1133.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1132.value)), ((x1133.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1134=IKsin(j28);
IkReal x1135=IKcos(j28);
IkReal x1136=((gconst64)*(px));
IkReal x1137=((IkReal(0.321000000000000))*(cj30));
IkReal x1138=((IkReal(0.321000000000000))*(sj30));
IkReal x1139=((gconst63)*(py));
IkReal x1140=((IkReal(0.800000000000000))*(x1135));
IkReal x1141=((IkReal(1.00000000000000))*(x1139));
evalcond[0]=((((x1135)*(x1138)))+(((x1134)*(x1137)))+(((IkReal(0.400000000000000))*(x1134))));
evalcond[1]=((x1138)+(((IkReal(-0.100000000000000))*(x1134)))+(((x1134)*(x1136)))+(((x1134)*(x1139))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1135)*(x1141)))+(x1137)+(((IkReal(-1.00000000000000))*(x1135)*(x1136)))+(((IkReal(0.100000000000000))*(x1135))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1135)*(x1137)))+(((IkReal(-1.00000000000000))*(x1141)))+(((IkReal(-1.00000000000000))*(x1134)*(x1138)))+(((IkReal(0.400000000000000))*(x1135)))+(((IkReal(-1.00000000000000))*(x1136))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1139)))+(((IkReal(0.200000000000000))*(x1136)))+(((x1139)*(x1140)))+(((IkReal(-0.0800000000000000))*(x1135)))+(((x1136)*(x1140))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1142=((gconst64)*(px));
IkReal x1143=((IkReal(321000.000000000))*(cj30));
IkReal x1144=((IkReal(321000.000000000))*(sj30));
IkReal x1145=((gconst63)*(py));
CheckValue<IkReal> x1146 = IKatan2WithCheck(((gconst70)*(((((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-1.00000000000000))*(x1144)*(x1145)))+(((IkReal(-1.00000000000000))*(x1142)*(x1144)))))),((gconst70)*(((IkReal(-40000.0000000000))+(((x1143)*(x1145)))+(((IkReal(-32100.0000000000))*(cj30)))+(((x1142)*(x1143)))+(((IkReal(400000.000000000))*(x1145)))+(((IkReal(400000.000000000))*(x1142)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1146.valid ) {
    continue;
}
j28array[0]=x1146.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1147=IKsin(j28);
IkReal x1148=IKcos(j28);
IkReal x1149=((gconst64)*(px));
IkReal x1150=((IkReal(0.321000000000000))*(cj30));
IkReal x1151=((IkReal(0.321000000000000))*(sj30));
IkReal x1152=((gconst63)*(py));
IkReal x1153=((IkReal(0.800000000000000))*(x1148));
IkReal x1154=((IkReal(1.00000000000000))*(x1152));
evalcond[0]=((((x1147)*(x1150)))+(((x1148)*(x1151)))+(((IkReal(0.400000000000000))*(x1147))));
evalcond[1]=((x1151)+(((IkReal(-0.100000000000000))*(x1147)))+(((x1147)*(x1152)))+(((x1147)*(x1149))));
evalcond[2]=((IkReal(0.400000000000000))+(x1150)+(((IkReal(-1.00000000000000))*(x1148)*(x1149)))+(((IkReal(-1.00000000000000))*(x1148)*(x1154)))+(((IkReal(0.100000000000000))*(x1148))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1154)))+(((IkReal(-1.00000000000000))*(x1149)))+(((IkReal(-1.00000000000000))*(x1147)*(x1151)))+(((x1148)*(x1150)))+(((IkReal(0.400000000000000))*(x1148))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1152)))+(((x1149)*(x1153)))+(((x1152)*(x1153)))+(((IkReal(-0.0800000000000000))*(x1148)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1149))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst65;
CheckValue<IkReal> x1155 = IKatan2WithCheck(((IkReal(10.0000000000000))*(px)),((IkReal(10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1155.valid ) {
    continue;
}
CheckValue<IkReal> x1157 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1157.valid ) {
    continue;
}
CheckValue<IkReal> x1158 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1158.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1157.value)))+(((IkReal(100.000000000000))*(x1158.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1156 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1157.value)))+(((IkReal(100.000000000000))*(x1158.value)))))),-1.00000000000000);
if( !x1156.valid ) {
    continue;
}
if( (x1156.value) < -1-IKFAST_SINCOS_THRESH || (x1156.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
gconst65=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1155.value)))+(((IkReal(-1.00000000000000))*(IKasin(x1156.value)))));
IkReal gconst66;
gconst66=IKsin(gconst65);
IkReal gconst67;
gconst67=IKcos(gconst65);
IkReal x1159=((((IkReal(-1.00000000000000))*(gconst67)*(py)))+(((gconst66)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst65)))+(j27))))), IkReal(6.28318530717959))));
evalcond[1]=x1159;
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(gconst67)*(px)))+(((IkReal(0.256800000000000))*(cj30)))+(((IkReal(0.200000000000000))*(gconst66)*(py)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=x1159;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst71;
CheckValue<IkReal> x1160 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1160.valid ) {
    continue;
}
CheckValue<IkReal> x1161 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1161.valid ) {
    continue;
}
gconst71=IKsign(((IkReal(160000.000000000))+(((IkReal(256800.000000000))*(cj30)))+(((IkReal(103041.000000000))*(x1160.value)))+(((IkReal(103041.000000000))*(x1161.value)))));
CheckValue<IkReal> x1162 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1162.valid ) {
    continue;
}
CheckValue<IkReal> x1163 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1163.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(x1162.value)+(((IkReal(2.49221183800623))*(cj30)))+(x1163.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst66)*(py)))+(((IkReal(10.0000000000000))*(gconst67)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(10.0000000000000))*(gconst66)*(py)))+(((IkReal(10.0000000000000))*(gconst67)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1164=((gconst67)*(px));
IkReal x1165=((gconst66)*(py));
CheckValue<IkReal> x1166 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1165)))+(((IkReal(1000.00000000000))*(x1164)))),-1.00000000000000);
if( !x1166.valid ) {
    continue;
}
CheckValue<IkReal> x1167 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1164)))+(((IkReal(-1.00000000000000))*(x1165)))),-1.00000000000000);
if( !x1167.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1166.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1167.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1166.value)))+IKsqr(((x1167.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1166.value)), ((x1167.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1168=IKsin(j28);
IkReal x1169=IKcos(j28);
IkReal x1170=((IkReal(0.321000000000000))*(cj30));
IkReal x1171=((gconst67)*(px));
IkReal x1172=((gconst66)*(py));
IkReal x1173=((IkReal(0.321000000000000))*(sj30));
IkReal x1174=((IkReal(0.800000000000000))*(x1169));
IkReal x1175=((IkReal(1.00000000000000))*(x1169));
evalcond[0]=((((x1168)*(x1170)))+(((IkReal(0.400000000000000))*(x1168)))+(((x1169)*(x1173))));
evalcond[1]=((x1173)+(((x1168)*(x1171)))+(((x1168)*(x1172)))+(((IkReal(-0.100000000000000))*(x1168))));
evalcond[2]=((IkReal(0.400000000000000))+(x1170)+(((IkReal(-1.00000000000000))*(x1172)*(x1175)))+(((IkReal(0.100000000000000))*(x1169)))+(((IkReal(-1.00000000000000))*(x1171)*(x1175))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1168)*(x1173)))+(((IkReal(0.400000000000000))*(x1169)))+(((x1169)*(x1170)))+(((IkReal(-1.00000000000000))*(x1171)))+(((IkReal(-1.00000000000000))*(x1172))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1169)))+(((IkReal(0.200000000000000))*(x1171)))+(((IkReal(0.200000000000000))*(x1172)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1172)*(x1174)))+(((x1171)*(x1174))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1176=((gconst66)*(py));
IkReal x1177=((gconst67)*(px));
CheckValue<IkReal> x1178 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1176)))+(((IkReal(1000.00000000000))*(x1177)))),-1.00000000000000);
if( !x1178.valid ) {
    continue;
}
CheckValue<IkReal> x1179 = IKPowWithIntegerCheck(((IkReal(-0.100000000000000))+(x1177)+(x1176)),-1.00000000000000);
if( !x1179.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1178.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1179.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1178.value)))+IKsqr(((x1179.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1178.value)), ((x1179.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1180=IKsin(j28);
IkReal x1181=IKcos(j28);
IkReal x1182=((IkReal(0.321000000000000))*(cj30));
IkReal x1183=((gconst67)*(px));
IkReal x1184=((gconst66)*(py));
IkReal x1185=((IkReal(0.321000000000000))*(sj30));
IkReal x1186=((IkReal(0.800000000000000))*(x1181));
IkReal x1187=((IkReal(1.00000000000000))*(x1181));
evalcond[0]=((((x1180)*(x1182)))+(((IkReal(0.400000000000000))*(x1180)))+(((x1181)*(x1185))));
evalcond[1]=((x1185)+(((x1180)*(x1183)))+(((x1180)*(x1184)))+(((IkReal(-0.100000000000000))*(x1180))));
evalcond[2]=((IkReal(0.400000000000000))+(x1182)+(((IkReal(-1.00000000000000))*(x1184)*(x1187)))+(((IkReal(-1.00000000000000))*(x1183)*(x1187)))+(((IkReal(0.100000000000000))*(x1181))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1181)))+(((IkReal(-1.00000000000000))*(x1180)*(x1185)))+(((x1181)*(x1182)))+(((IkReal(-1.00000000000000))*(x1183)))+(((IkReal(-1.00000000000000))*(x1184))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1184)*(x1186)))+(((x1183)*(x1186)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1183)))+(((IkReal(0.200000000000000))*(x1184)))+(((IkReal(-0.0800000000000000))*(x1181))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1188=((gconst67)*(px));
IkReal x1189=((IkReal(321000.000000000))*(sj30));
IkReal x1190=((gconst66)*(py));
IkReal x1191=((IkReal(321000.000000000))*(cj30));
CheckValue<IkReal> x1192 = IKatan2WithCheck(((gconst71)*(((((IkReal(-1.00000000000000))*(x1189)*(x1190)))+(((IkReal(-1.00000000000000))*(x1188)*(x1189)))+(((IkReal(32100.0000000000))*(sj30)))))),((gconst71)*(((IkReal(-40000.0000000000))+(((IkReal(-32100.0000000000))*(cj30)))+(((IkReal(400000.000000000))*(x1188)))+(((IkReal(400000.000000000))*(x1190)))+(((x1188)*(x1191)))+(((x1190)*(x1191)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1192.valid ) {
    continue;
}
j28array[0]=x1192.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1193=IKsin(j28);
IkReal x1194=IKcos(j28);
IkReal x1195=((IkReal(0.321000000000000))*(cj30));
IkReal x1196=((gconst67)*(px));
IkReal x1197=((gconst66)*(py));
IkReal x1198=((IkReal(0.321000000000000))*(sj30));
IkReal x1199=((IkReal(0.800000000000000))*(x1194));
IkReal x1200=((IkReal(1.00000000000000))*(x1194));
evalcond[0]=((((x1194)*(x1198)))+(((IkReal(0.400000000000000))*(x1193)))+(((x1193)*(x1195))));
evalcond[1]=((x1198)+(((IkReal(-0.100000000000000))*(x1193)))+(((x1193)*(x1196)))+(((x1193)*(x1197))));
evalcond[2]=((IkReal(0.400000000000000))+(x1195)+(((IkReal(-1.00000000000000))*(x1196)*(x1200)))+(((IkReal(0.100000000000000))*(x1194)))+(((IkReal(-1.00000000000000))*(x1197)*(x1200))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1193)*(x1198)))+(((x1194)*(x1195)))+(((IkReal(0.400000000000000))*(x1194)))+(((IkReal(-1.00000000000000))*(x1196)))+(((IkReal(-1.00000000000000))*(x1197))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1197)*(x1199)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1196)*(x1199)))+(((IkReal(0.200000000000000))*(x1196)))+(((IkReal(0.200000000000000))*(x1197)))+(((IkReal(-0.0800000000000000))*(x1194))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1201=((py)*(sj27));
IkReal x1202=((cj27)*(px));
CheckValue<IkReal> x1203 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1201)))+(((IkReal(1000.00000000000))*(x1202)))),-1.00000000000000);
if( !x1203.valid ) {
    continue;
}
CheckValue<IkReal> x1204 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1202)))+(((IkReal(-1.00000000000000))*(x1201)))),-1.00000000000000);
if( !x1204.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1203.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1204.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1203.value)))+IKsqr(((x1204.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1203.value)), ((x1204.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1205=IKsin(j28);
IkReal x1206=IKcos(j28);
IkReal x1207=((IkReal(0.321000000000000))*(cj30));
IkReal x1208=((IkReal(0.321000000000000))*(sj30));
IkReal x1209=((cj27)*(px));
IkReal x1210=((py)*(sj27));
IkReal x1211=((IkReal(1.00000000000000))*(x1210));
IkReal x1212=((IkReal(0.800000000000000))*(x1206));
evalcond[0]=((((IkReal(0.400000000000000))*(x1205)))+(((x1205)*(x1207)))+(((x1206)*(x1208))));
evalcond[1]=((x1208)+(((IkReal(-0.100000000000000))*(x1205)))+(((x1205)*(x1209)))+(((x1205)*(x1210))));
evalcond[2]=((IkReal(0.400000000000000))+(x1207)+(((IkReal(-1.00000000000000))*(x1206)*(x1211)))+(((IkReal(0.100000000000000))*(x1206)))+(((IkReal(-1.00000000000000))*(x1206)*(x1209))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1206)))+(((IkReal(-1.00000000000000))*(x1205)*(x1208)))+(((IkReal(-1.00000000000000))*(x1209)))+(((IkReal(-1.00000000000000))*(x1211)))+(((x1206)*(x1207))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1210)*(x1212)))+(((IkReal(-0.0800000000000000))*(x1206)))+(((IkReal(0.200000000000000))*(x1210)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1209)*(x1212)))+(((IkReal(0.200000000000000))*(x1209))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1213=((py)*(sj27));
IkReal x1214=((cj27)*(px));
CheckValue<IkReal> x1215 = IKPowWithIntegerCheck(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(x1214)))+(((IkReal(1000.00000000000))*(x1213)))),-1.00000000000000);
if( !x1215.valid ) {
    continue;
}
CheckValue<IkReal> x1216 = IKPowWithIntegerCheck(((IkReal(-0.100000000000000))+(x1213)+(x1214)),-1.00000000000000);
if( !x1216.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1215.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1216.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1215.value)))+IKsqr(((x1216.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1215.value)), ((x1216.value)*(((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1217=IKsin(j28);
IkReal x1218=IKcos(j28);
IkReal x1219=((IkReal(0.321000000000000))*(cj30));
IkReal x1220=((IkReal(0.321000000000000))*(sj30));
IkReal x1221=((cj27)*(px));
IkReal x1222=((py)*(sj27));
IkReal x1223=((IkReal(1.00000000000000))*(x1222));
IkReal x1224=((IkReal(0.800000000000000))*(x1218));
evalcond[0]=((((x1218)*(x1220)))+(((x1217)*(x1219)))+(((IkReal(0.400000000000000))*(x1217))));
evalcond[1]=((x1220)+(((x1217)*(x1222)))+(((x1217)*(x1221)))+(((IkReal(-0.100000000000000))*(x1217))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1218)*(x1221)))+(x1219)+(((IkReal(0.100000000000000))*(x1218)))+(((IkReal(-1.00000000000000))*(x1218)*(x1223))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1221)))+(((x1218)*(x1219)))+(((IkReal(-1.00000000000000))*(x1223)))+(((IkReal(-1.00000000000000))*(x1217)*(x1220)))+(((IkReal(0.400000000000000))*(x1218))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1221)))+(((IkReal(0.200000000000000))*(x1222)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1221)*(x1224)))+(((x1222)*(x1224)))+(((IkReal(-0.0800000000000000))*(x1218))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1225=((cj27)*(px));
IkReal x1226=((IkReal(321000.000000000))*(py)*(sj27));
CheckValue<IkReal> x1227 = IKatan2WithCheck(((gconst55)*(((((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-321000.000000000))*(sj30)*(x1225)))+(((IkReal(-1.00000000000000))*(sj30)*(x1226)))))),((gconst55)*(((IkReal(-40000.0000000000))+(((IkReal(-32100.0000000000))*(cj30)))+(((cj30)*(x1226)))+(((IkReal(321000.000000000))*(cj30)*(x1225)))+(((IkReal(400000.000000000))*(x1225)))+(((IkReal(400000.000000000))*(py)*(sj27)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1227.valid ) {
    continue;
}
j28array[0]=x1227.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1228=IKsin(j28);
IkReal x1229=IKcos(j28);
IkReal x1230=((IkReal(0.321000000000000))*(cj30));
IkReal x1231=((IkReal(0.321000000000000))*(sj30));
IkReal x1232=((cj27)*(px));
IkReal x1233=((py)*(sj27));
IkReal x1234=((IkReal(1.00000000000000))*(x1233));
IkReal x1235=((IkReal(0.800000000000000))*(x1229));
evalcond[0]=((((IkReal(0.400000000000000))*(x1228)))+(((x1228)*(x1230)))+(((x1229)*(x1231))));
evalcond[1]=((x1231)+(((IkReal(-0.100000000000000))*(x1228)))+(((x1228)*(x1233)))+(((x1228)*(x1232))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x1229)))+(x1230)+(((IkReal(-1.00000000000000))*(x1229)*(x1234)))+(((IkReal(-1.00000000000000))*(x1229)*(x1232))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1232)))+(((IkReal(-1.00000000000000))*(x1234)))+(((IkReal(-1.00000000000000))*(x1228)*(x1231)))+(((IkReal(0.400000000000000))*(x1229)))+(((x1229)*(x1230))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1232)))+(((IkReal(0.200000000000000))*(x1233)))+(((x1233)*(x1235)))+(((IkReal(-0.0800000000000000))*(x1229)))+(((x1232)*(x1235))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1236=((px)*(sj27));
IkReal x1237=((cj27)*(py));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j29, IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1237)))+(x1236));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1236)))+(x1237));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
cj30array[0]=((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))));
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IkReal dummyeval[1];
IkReal gconst72;
CheckValue<IkReal> x1238 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1238.valid ) {
    continue;
}
CheckValue<IkReal> x1239 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1239.valid ) {
    continue;
}
gconst72=IKsign(((IkReal(-160000.000000000))+(((IkReal(-256800.000000000))*(cj30)))+(((IkReal(-103041.000000000))*(x1238.value)))+(((IkReal(-103041.000000000))*(x1239.value)))));
CheckValue<IkReal> x1240 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1240.valid ) {
    continue;
}
CheckValue<IkReal> x1241 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1241.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-2.49221183800623))*(cj30)))+(((IkReal(-1.00000000000000))*(x1240.value)))+(((IkReal(-1.00000000000000))*(x1241.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(cj27)*(px)))+(((IkReal(-10.0000000000000))*(py)*(sj27))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1242=((cj27)*(px));
IkReal x1243=((py)*(sj27));
IkReal x1244=((IkReal(10.0000000000000))*(cj30));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-1.00000000000000))*(x1243)*(x1244)))+(cj30)+(((IkReal(-1.00000000000000))*(x1242)*(x1244)))+(((IkReal(-12.4610591900312))*(x1242)))+(((IkReal(-12.4610591900312))*(x1243))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(x1242)))+(((IkReal(-10.0000000000000))*(x1243))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst73;
CheckValue<IkReal> x1246 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1246.valid ) {
    continue;
}
CheckValue<IkReal> x1247 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1247.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1246.value)))+(((IkReal(100.000000000000))*(x1247.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1245 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1246.value)))+(((IkReal(100.000000000000))*(x1247.value)))))),-1.00000000000000);
if( !x1245.valid ) {
    continue;
}
if( (x1245.value) < -1-IKFAST_SINCOS_THRESH || (x1245.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1248 = IKatan2WithCheck(((IkReal(-10.0000000000000))*(px)),((IkReal(-10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1248.valid ) {
    continue;
}
gconst73=((((IkReal(-1.00000000000000))*(IKasin(x1245.value))))+(((IkReal(-1.00000000000000))*(x1248.value))));
IkReal gconst74;
gconst74=IKsin(gconst73);
IkReal gconst75;
gconst75=IKcos(gconst73);
IkReal x1249=((gconst74)*(px));
IkReal x1250=((gconst75)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst73)))+(j27))))), IkReal(6.28318530717959))));
evalcond[1]=((x1249)+(((IkReal(-1.00000000000000))*(x1250))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(cj30)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(gconst75)*(px)))+(((IkReal(0.200000000000000))*(gconst74)*(py))));
evalcond[3]=((x1250)+(((IkReal(-1.00000000000000))*(x1249))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst85;
CheckValue<IkReal> x1251 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1251.valid ) {
    continue;
}
CheckValue<IkReal> x1252 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1252.valid ) {
    continue;
}
gconst85=IKsign(((IkReal(-160000.000000000))+(((IkReal(-256800.000000000))*(cj30)))+(((IkReal(-103041.000000000))*(x1251.value)))+(((IkReal(-103041.000000000))*(x1252.value)))));
CheckValue<IkReal> x1253 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1253.valid ) {
    continue;
}
CheckValue<IkReal> x1254 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1254.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-2.49221183800623))*(cj30)))+(((IkReal(-1.00000000000000))*(x1253.value)))+(((IkReal(-1.00000000000000))*(x1254.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(gconst74)*(py)))+(((IkReal(-10.0000000000000))*(gconst75)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1255=((gconst75)*(px));
IkReal x1256=((IkReal(10.0000000000000))*(cj30));
IkReal x1257=((gconst74)*(py));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-1.00000000000000))*(x1255)*(x1256)))+(((IkReal(-1.00000000000000))*(x1256)*(x1257)))+(cj30)+(((IkReal(-12.4610591900312))*(x1255)))+(((IkReal(-12.4610591900312))*(x1257))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(x1255)))+(((IkReal(-10.0000000000000))*(x1257))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1258=((gconst75)*(px));
IkReal x1259=((gconst74)*(py));
IkReal x1260=((IkReal(321.000000000000))*(cj30));
CheckValue<IkReal> x1261 = IKPowWithIntegerCheck(((IkReal(40.0000000000000))+(((IkReal(-1.00000000000000))*(x1258)*(x1260)))+(((IkReal(-400.000000000000))*(x1259)))+(((IkReal(-400.000000000000))*(x1258)))+(((IkReal(-1.00000000000000))*(x1259)*(x1260)))+(((IkReal(32.1000000000000))*(cj30)))),-1.00000000000000);
if( !x1261.valid ) {
    continue;
}
CheckValue<IkReal> x1262 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1258)))+(((IkReal(-1.00000000000000))*(x1259)))),-1.00000000000000);
if( !x1262.valid ) {
    continue;
}
if( IKabs(((x1261.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1262.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1261.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))))+IKsqr(((x1262.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x1261.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))), ((x1262.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1263=IKsin(j28);
IkReal x1264=IKcos(j28);
IkReal x1265=((IkReal(0.321000000000000))*(cj30));
IkReal x1266=((gconst74)*(py));
IkReal x1267=((IkReal(0.321000000000000))*(sj30));
IkReal x1268=((gconst75)*(px));
IkReal x1269=((IkReal(0.800000000000000))*(x1264));
IkReal x1270=((IkReal(1.00000000000000))*(x1263));
IkReal x1271=((IkReal(1.00000000000000))*(x1264));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1264)*(x1267)))+(((x1263)*(x1265)))+(((IkReal(0.400000000000000))*(x1263))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1268)*(x1270)))+(x1267)+(((IkReal(-1.00000000000000))*(x1266)*(x1270)))+(((IkReal(0.100000000000000))*(x1263))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1268)*(x1271)))+(x1265)+(((IkReal(-1.00000000000000))*(x1266)*(x1271)))+(((IkReal(0.100000000000000))*(x1264))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1264)*(x1265)))+(((x1263)*(x1267)))+(((IkReal(-1.00000000000000))*(x1266)))+(((IkReal(-1.00000000000000))*(x1268)))+(((IkReal(0.400000000000000))*(x1264))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1264)))+(((x1268)*(x1269)))+(((x1266)*(x1269)))+(((IkReal(0.200000000000000))*(x1268)))+(((IkReal(0.200000000000000))*(x1266))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1272=((gconst75)*(px));
IkReal x1273=((gconst74)*(py));
CheckValue<IkReal> x1274 = IKPowWithIntegerCheck(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1273)))+(((IkReal(-1000.00000000000))*(x1272)))),-1.00000000000000);
if( !x1274.valid ) {
    continue;
}
CheckValue<IkReal> x1275 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1272)))+(((IkReal(-1.00000000000000))*(x1273)))),-1.00000000000000);
if( !x1275.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1274.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1275.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1274.value)))+IKsqr(((x1275.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1274.value)), ((x1275.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1276=IKsin(j28);
IkReal x1277=IKcos(j28);
IkReal x1278=((IkReal(0.321000000000000))*(cj30));
IkReal x1279=((gconst74)*(py));
IkReal x1280=((IkReal(0.321000000000000))*(sj30));
IkReal x1281=((gconst75)*(px));
IkReal x1282=((IkReal(0.800000000000000))*(x1277));
IkReal x1283=((IkReal(1.00000000000000))*(x1276));
IkReal x1284=((IkReal(1.00000000000000))*(x1277));
evalcond[0]=((((x1276)*(x1278)))+(((IkReal(0.400000000000000))*(x1276)))+(((IkReal(-1.00000000000000))*(x1277)*(x1280))));
evalcond[1]=((x1280)+(((IkReal(0.100000000000000))*(x1276)))+(((IkReal(-1.00000000000000))*(x1279)*(x1283)))+(((IkReal(-1.00000000000000))*(x1281)*(x1283))));
evalcond[2]=((IkReal(0.400000000000000))+(x1278)+(((IkReal(0.100000000000000))*(x1277)))+(((IkReal(-1.00000000000000))*(x1279)*(x1284)))+(((IkReal(-1.00000000000000))*(x1281)*(x1284))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1281)))+(((x1277)*(x1278)))+(((IkReal(0.400000000000000))*(x1277)))+(((x1276)*(x1280)))+(((IkReal(-1.00000000000000))*(x1279))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1279)*(x1282)))+(((IkReal(0.200000000000000))*(x1281)))+(((IkReal(-0.0800000000000000))*(x1277)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1279)))+(((x1281)*(x1282))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1285=((gconst74)*(py));
IkReal x1286=((IkReal(321000.000000000))*(cj30));
IkReal x1287=((IkReal(321000.000000000))*(sj30));
IkReal x1288=((gconst75)*(px));
CheckValue<IkReal> x1289 = IKatan2WithCheck(((gconst85)*(((((IkReal(-1.00000000000000))*(x1285)*(x1287)))+(((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-1.00000000000000))*(x1287)*(x1288)))))),((gconst85)*(((IkReal(40000.0000000000))+(((IkReal(-1.00000000000000))*(x1285)*(x1286)))+(((IkReal(32100.0000000000))*(cj30)))+(((IkReal(-1.00000000000000))*(x1286)*(x1288)))+(((IkReal(-400000.000000000))*(x1288)))+(((IkReal(-400000.000000000))*(x1285)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1289.valid ) {
    continue;
}
j28array[0]=x1289.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1290=IKsin(j28);
IkReal x1291=IKcos(j28);
IkReal x1292=((IkReal(0.321000000000000))*(cj30));
IkReal x1293=((gconst74)*(py));
IkReal x1294=((IkReal(0.321000000000000))*(sj30));
IkReal x1295=((gconst75)*(px));
IkReal x1296=((IkReal(0.800000000000000))*(x1291));
IkReal x1297=((IkReal(1.00000000000000))*(x1290));
IkReal x1298=((IkReal(1.00000000000000))*(x1291));
evalcond[0]=((((x1290)*(x1292)))+(((IkReal(0.400000000000000))*(x1290)))+(((IkReal(-1.00000000000000))*(x1291)*(x1294))));
evalcond[1]=((x1294)+(((IkReal(-1.00000000000000))*(x1295)*(x1297)))+(((IkReal(-1.00000000000000))*(x1293)*(x1297)))+(((IkReal(0.100000000000000))*(x1290))));
evalcond[2]=((IkReal(0.400000000000000))+(x1292)+(((IkReal(-1.00000000000000))*(x1295)*(x1298)))+(((IkReal(-1.00000000000000))*(x1293)*(x1298)))+(((IkReal(0.100000000000000))*(x1291))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1290)*(x1294)))+(((IkReal(0.400000000000000))*(x1291)))+(((x1291)*(x1292)))+(((IkReal(-1.00000000000000))*(x1295)))+(((IkReal(-1.00000000000000))*(x1293))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1291)))+(((x1295)*(x1296)))+(((x1293)*(x1296)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1295)))+(((IkReal(0.200000000000000))*(x1293))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst76;
CheckValue<IkReal> x1300 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1300.valid ) {
    continue;
}
CheckValue<IkReal> x1301 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1301.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1300.value)))+(((IkReal(100.000000000000))*(x1301.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1299 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1300.value)))+(((IkReal(100.000000000000))*(x1301.value)))))),-1.00000000000000);
if( !x1299.valid ) {
    continue;
}
if( (x1299.value) < -1-IKFAST_SINCOS_THRESH || (x1299.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1302 = IKatan2WithCheck(((IkReal(-10.0000000000000))*(px)),((IkReal(-10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1302.valid ) {
    continue;
}
gconst76=((IkReal(3.14159265358979))+(IKasin(x1299.value))+(((IkReal(-1.00000000000000))*(x1302.value))));
IkReal gconst77;
gconst77=IKsin(gconst76);
IkReal gconst78;
gconst78=IKcos(gconst76);
IkReal x1303=((gconst78)*(py));
IkReal x1304=((gconst77)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst76)))+(j27))))), IkReal(6.28318530717959))));
evalcond[1]=((x1304)+(((IkReal(-1.00000000000000))*(x1303))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(gconst77)*(py)))+(((IkReal(0.256800000000000))*(cj30)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(gconst78)*(px))));
evalcond[3]=((x1303)+(((IkReal(-1.00000000000000))*(x1304))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst86;
CheckValue<IkReal> x1305 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1305.valid ) {
    continue;
}
CheckValue<IkReal> x1306 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1306.valid ) {
    continue;
}
gconst86=IKsign(((IkReal(-160000.000000000))+(((IkReal(-256800.000000000))*(cj30)))+(((IkReal(-103041.000000000))*(x1305.value)))+(((IkReal(-103041.000000000))*(x1306.value)))));
CheckValue<IkReal> x1307 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1307.valid ) {
    continue;
}
CheckValue<IkReal> x1308 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1308.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-2.49221183800623))*(cj30)))+(((IkReal(-1.00000000000000))*(x1307.value)))+(((IkReal(-1.00000000000000))*(x1308.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(gconst77)*(py)))+(((IkReal(-10.0000000000000))*(gconst78)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1309=((gconst77)*(py));
IkReal x1310=((IkReal(10.0000000000000))*(cj30));
IkReal x1311=((gconst78)*(px));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-12.4610591900312))*(x1309)))+(((IkReal(-12.4610591900312))*(x1311)))+(cj30)+(((IkReal(-1.00000000000000))*(x1310)*(x1311)))+(((IkReal(-1.00000000000000))*(x1309)*(x1310))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(x1311)))+(((IkReal(-10.0000000000000))*(x1309))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1312=((gconst77)*(py));
IkReal x1313=((IkReal(321.000000000000))*(cj30));
IkReal x1314=((gconst78)*(px));
CheckValue<IkReal> x1315 = IKPowWithIntegerCheck(((IkReal(40.0000000000000))+(((IkReal(-1.00000000000000))*(x1313)*(x1314)))+(((IkReal(32.1000000000000))*(cj30)))+(((IkReal(-400.000000000000))*(x1312)))+(((IkReal(-400.000000000000))*(x1314)))+(((IkReal(-1.00000000000000))*(x1312)*(x1313)))),-1.00000000000000);
if( !x1315.valid ) {
    continue;
}
CheckValue<IkReal> x1316 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1314)))+(((IkReal(-1.00000000000000))*(x1312)))),-1.00000000000000);
if( !x1316.valid ) {
    continue;
}
if( IKabs(((x1315.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1316.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1315.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))))+IKsqr(((x1316.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x1315.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))), ((x1316.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1317=IKsin(j28);
IkReal x1318=IKcos(j28);
IkReal x1319=((IkReal(0.321000000000000))*(cj30));
IkReal x1320=((IkReal(0.321000000000000))*(sj30));
IkReal x1321=((gconst77)*(py));
IkReal x1322=((gconst78)*(px));
IkReal x1323=((IkReal(1.00000000000000))*(x1322));
IkReal x1324=((IkReal(0.800000000000000))*(x1318));
evalcond[0]=((((x1317)*(x1319)))+(((IkReal(0.400000000000000))*(x1317)))+(((IkReal(-1.00000000000000))*(x1318)*(x1320))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1317)*(x1321)))+(x1320)+(((IkReal(0.100000000000000))*(x1317)))+(((IkReal(-1.00000000000000))*(x1317)*(x1323))));
evalcond[2]=((IkReal(0.400000000000000))+(x1319)+(((IkReal(-1.00000000000000))*(x1318)*(x1321)))+(((IkReal(0.100000000000000))*(x1318)))+(((IkReal(-1.00000000000000))*(x1318)*(x1323))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1318)*(x1319)))+(((IkReal(0.400000000000000))*(x1318)))+(((IkReal(-1.00000000000000))*(x1323)))+(((IkReal(-1.00000000000000))*(x1321)))+(((x1317)*(x1320))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1321)))+(((IkReal(0.200000000000000))*(x1322)))+(((x1322)*(x1324)))+(((IkReal(-0.0800000000000000))*(x1318)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1321)*(x1324))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1325=((gconst78)*(px));
IkReal x1326=((gconst77)*(py));
CheckValue<IkReal> x1327 = IKPowWithIntegerCheck(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1326)))+(((IkReal(-1000.00000000000))*(x1325)))),-1.00000000000000);
if( !x1327.valid ) {
    continue;
}
CheckValue<IkReal> x1328 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1325)))+(((IkReal(-1.00000000000000))*(x1326)))),-1.00000000000000);
if( !x1328.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1327.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1328.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1327.value)))+IKsqr(((x1328.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1327.value)), ((x1328.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1329=IKsin(j28);
IkReal x1330=IKcos(j28);
IkReal x1331=((IkReal(0.321000000000000))*(cj30));
IkReal x1332=((IkReal(0.321000000000000))*(sj30));
IkReal x1333=((gconst77)*(py));
IkReal x1334=((gconst78)*(px));
IkReal x1335=((IkReal(1.00000000000000))*(x1334));
IkReal x1336=((IkReal(0.800000000000000))*(x1330));
evalcond[0]=((((x1329)*(x1331)))+(((IkReal(0.400000000000000))*(x1329)))+(((IkReal(-1.00000000000000))*(x1330)*(x1332))));
evalcond[1]=((x1332)+(((IkReal(-1.00000000000000))*(x1329)*(x1333)))+(((IkReal(-1.00000000000000))*(x1329)*(x1335)))+(((IkReal(0.100000000000000))*(x1329))));
evalcond[2]=((IkReal(0.400000000000000))+(x1331)+(((IkReal(-1.00000000000000))*(x1330)*(x1333)))+(((IkReal(-1.00000000000000))*(x1330)*(x1335)))+(((IkReal(0.100000000000000))*(x1330))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1329)*(x1332)))+(((IkReal(-1.00000000000000))*(x1333)))+(((x1330)*(x1331)))+(((IkReal(-1.00000000000000))*(x1335)))+(((IkReal(0.400000000000000))*(x1330))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1330)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1333)*(x1336)))+(((IkReal(0.200000000000000))*(x1334)))+(((IkReal(0.200000000000000))*(x1333)))+(((x1334)*(x1336))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1337=((IkReal(321000.000000000))*(cj30));
IkReal x1338=((gconst77)*(py));
IkReal x1339=((gconst78)*(px));
IkReal x1340=((IkReal(321000.000000000))*(sj30));
CheckValue<IkReal> x1341 = IKatan2WithCheck(((gconst86)*(((((IkReal(-1.00000000000000))*(x1338)*(x1340)))+(((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-1.00000000000000))*(x1339)*(x1340)))))),((gconst86)*(((IkReal(40000.0000000000))+(((IkReal(-400000.000000000))*(x1339)))+(((IkReal(-400000.000000000))*(x1338)))+(((IkReal(-1.00000000000000))*(x1337)*(x1338)))+(((IkReal(-1.00000000000000))*(x1337)*(x1339)))+(((IkReal(32100.0000000000))*(cj30)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1341.valid ) {
    continue;
}
j28array[0]=x1341.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1342=IKsin(j28);
IkReal x1343=IKcos(j28);
IkReal x1344=((IkReal(0.321000000000000))*(cj30));
IkReal x1345=((IkReal(0.321000000000000))*(sj30));
IkReal x1346=((gconst77)*(py));
IkReal x1347=((gconst78)*(px));
IkReal x1348=((IkReal(1.00000000000000))*(x1347));
IkReal x1349=((IkReal(0.800000000000000))*(x1343));
evalcond[0]=((((x1342)*(x1344)))+(((IkReal(0.400000000000000))*(x1342)))+(((IkReal(-1.00000000000000))*(x1343)*(x1345))));
evalcond[1]=((x1345)+(((IkReal(-1.00000000000000))*(x1342)*(x1346)))+(((IkReal(-1.00000000000000))*(x1342)*(x1348)))+(((IkReal(0.100000000000000))*(x1342))));
evalcond[2]=((IkReal(0.400000000000000))+(x1344)+(((IkReal(-1.00000000000000))*(x1343)*(x1348)))+(((IkReal(-1.00000000000000))*(x1343)*(x1346)))+(((IkReal(0.100000000000000))*(x1343))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1348)))+(((x1342)*(x1345)))+(((IkReal(0.400000000000000))*(x1343)))+(((x1343)*(x1344)))+(((IkReal(-1.00000000000000))*(x1346))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1343)))+(((IkReal(0.200000000000000))*(x1347)))+(((IkReal(0.200000000000000))*(x1346)))+(((x1346)*(x1349)))+(((x1347)*(x1349)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst79;
CheckValue<IkReal> x1351 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1351.valid ) {
    continue;
}
CheckValue<IkReal> x1352 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1352.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1351.value)))+(((IkReal(100.000000000000))*(x1352.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1350 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1351.value)))+(((IkReal(100.000000000000))*(x1352.value)))))),-1.00000000000000);
if( !x1350.valid ) {
    continue;
}
if( (x1350.value) < -1-IKFAST_SINCOS_THRESH || (x1350.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1353 = IKatan2WithCheck(((IkReal(-10.0000000000000))*(px)),((IkReal(-10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1353.valid ) {
    continue;
}
gconst79=((((IkReal(-1.00000000000000))*(IKasin(x1350.value))))+(((IkReal(-1.00000000000000))*(x1353.value))));
IkReal gconst80;
gconst80=IKsin(gconst79);
IkReal gconst81;
gconst81=IKcos(gconst79);
IkReal x1354=((gconst80)*(px));
IkReal x1355=((gconst81)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst79)))+(j27))))), IkReal(6.28318530717959))));
evalcond[1]=((x1354)+(((IkReal(-1.00000000000000))*(x1355))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(gconst81)*(px)))+(((IkReal(0.256800000000000))*(cj30)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(gconst80)*(py))));
evalcond[3]=((x1355)+(((IkReal(-1.00000000000000))*(x1354))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst87;
CheckValue<IkReal> x1356 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1356.valid ) {
    continue;
}
CheckValue<IkReal> x1357 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1357.valid ) {
    continue;
}
gconst87=IKsign(((IkReal(-160000.000000000))+(((IkReal(-256800.000000000))*(cj30)))+(((IkReal(-103041.000000000))*(x1356.value)))+(((IkReal(-103041.000000000))*(x1357.value)))));
CheckValue<IkReal> x1358 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1358.valid ) {
    continue;
}
CheckValue<IkReal> x1359 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1359.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-2.49221183800623))*(cj30)))+(((IkReal(-1.00000000000000))*(x1358.value)))+(((IkReal(-1.00000000000000))*(x1359.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(gconst81)*(px)))+(((IkReal(-10.0000000000000))*(gconst80)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1360=((gconst81)*(px));
IkReal x1361=((IkReal(10.0000000000000))*(gconst80)*(py));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-12.4610591900312))*(gconst80)*(py)))+(((IkReal(-10.0000000000000))*(cj30)*(x1360)))+(cj30)+(((IkReal(-1.00000000000000))*(cj30)*(x1361)))+(((IkReal(-12.4610591900312))*(x1360))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(x1360)))+(((IkReal(-1.00000000000000))*(x1361))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1362=((gconst81)*(px));
IkReal x1363=((gconst80)*(py));
IkReal x1364=((IkReal(321.000000000000))*(cj30));
CheckValue<IkReal> x1365 = IKPowWithIntegerCheck(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x1362)))+(((IkReal(-400.000000000000))*(x1363)))+(((IkReal(-1.00000000000000))*(x1362)*(x1364)))+(((IkReal(32.1000000000000))*(cj30)))+(((IkReal(-1.00000000000000))*(x1363)*(x1364)))),-1.00000000000000);
if( !x1365.valid ) {
    continue;
}
CheckValue<IkReal> x1366 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1363)))+(((IkReal(-1.00000000000000))*(x1362)))),-1.00000000000000);
if( !x1366.valid ) {
    continue;
}
if( IKabs(((x1365.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1366.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1365.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))))+IKsqr(((x1366.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x1365.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))), ((x1366.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1367=IKsin(j28);
IkReal x1368=IKcos(j28);
IkReal x1369=((gconst80)*(py));
IkReal x1370=((IkReal(0.321000000000000))*(cj30));
IkReal x1371=((gconst81)*(px));
IkReal x1372=((IkReal(0.321000000000000))*(sj30));
IkReal x1373=((IkReal(1.00000000000000))*(x1368));
IkReal x1374=((IkReal(0.800000000000000))*(x1368));
IkReal x1375=((IkReal(1.00000000000000))*(x1367));
evalcond[0]=((((x1367)*(x1370)))+(((IkReal(0.400000000000000))*(x1367)))+(((IkReal(-1.00000000000000))*(x1368)*(x1372))));
evalcond[1]=((x1372)+(((IkReal(0.100000000000000))*(x1367)))+(((IkReal(-1.00000000000000))*(x1371)*(x1375)))+(((IkReal(-1.00000000000000))*(x1369)*(x1375))));
evalcond[2]=((IkReal(0.400000000000000))+(x1370)+(((IkReal(0.100000000000000))*(x1368)))+(((IkReal(-1.00000000000000))*(x1371)*(x1373)))+(((IkReal(-1.00000000000000))*(x1369)*(x1373))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1369)))+(((IkReal(-1.00000000000000))*(x1371)))+(((x1367)*(x1372)))+(((IkReal(0.400000000000000))*(x1368)))+(((x1368)*(x1370))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1371)))+(((IkReal(-0.0800000000000000))*(x1368)))+(((IkReal(0.200000000000000))*(x1369)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1371)*(x1374)))+(((x1369)*(x1374))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1376=((gconst81)*(px));
IkReal x1377=((gconst80)*(py));
CheckValue<IkReal> x1378 = IKPowWithIntegerCheck(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1377)))+(((IkReal(-1000.00000000000))*(x1376)))),-1.00000000000000);
if( !x1378.valid ) {
    continue;
}
CheckValue<IkReal> x1379 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1377)))+(((IkReal(-1.00000000000000))*(x1376)))),-1.00000000000000);
if( !x1379.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1378.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1379.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1378.value)))+IKsqr(((x1379.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1378.value)), ((x1379.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1380=IKsin(j28);
IkReal x1381=IKcos(j28);
IkReal x1382=((gconst80)*(py));
IkReal x1383=((IkReal(0.321000000000000))*(cj30));
IkReal x1384=((gconst81)*(px));
IkReal x1385=((IkReal(0.321000000000000))*(sj30));
IkReal x1386=((IkReal(1.00000000000000))*(x1381));
IkReal x1387=((IkReal(0.800000000000000))*(x1381));
IkReal x1388=((IkReal(1.00000000000000))*(x1380));
evalcond[0]=((((x1380)*(x1383)))+(((IkReal(0.400000000000000))*(x1380)))+(((IkReal(-1.00000000000000))*(x1381)*(x1385))));
evalcond[1]=((x1385)+(((IkReal(-1.00000000000000))*(x1384)*(x1388)))+(((IkReal(0.100000000000000))*(x1380)))+(((IkReal(-1.00000000000000))*(x1382)*(x1388))));
evalcond[2]=((IkReal(0.400000000000000))+(x1383)+(((IkReal(-1.00000000000000))*(x1384)*(x1386)))+(((IkReal(0.100000000000000))*(x1381)))+(((IkReal(-1.00000000000000))*(x1382)*(x1386))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1380)*(x1385)))+(((x1381)*(x1383)))+(((IkReal(0.400000000000000))*(x1381)))+(((IkReal(-1.00000000000000))*(x1382)))+(((IkReal(-1.00000000000000))*(x1384))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1382)))+(((IkReal(0.200000000000000))*(x1384)))+(((x1384)*(x1387)))+(((IkReal(-0.0800000000000000))*(x1381)))+(((x1382)*(x1387))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1389=((IkReal(321000.000000000))*(cj30));
IkReal x1390=((gconst80)*(py));
IkReal x1391=((gconst81)*(px));
IkReal x1392=((IkReal(321000.000000000))*(sj30));
CheckValue<IkReal> x1393 = IKatan2WithCheck(((gconst87)*(((((IkReal(-1.00000000000000))*(x1391)*(x1392)))+(((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-1.00000000000000))*(x1390)*(x1392)))))),((gconst87)*(((IkReal(40000.0000000000))+(((IkReal(-1.00000000000000))*(x1389)*(x1391)))+(((IkReal(-1.00000000000000))*(x1389)*(x1390)))+(((IkReal(32100.0000000000))*(cj30)))+(((IkReal(-400000.000000000))*(x1391)))+(((IkReal(-400000.000000000))*(x1390)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1393.valid ) {
    continue;
}
j28array[0]=x1393.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1394=IKsin(j28);
IkReal x1395=IKcos(j28);
IkReal x1396=((gconst80)*(py));
IkReal x1397=((IkReal(0.321000000000000))*(cj30));
IkReal x1398=((gconst81)*(px));
IkReal x1399=((IkReal(0.321000000000000))*(sj30));
IkReal x1400=((IkReal(1.00000000000000))*(x1395));
IkReal x1401=((IkReal(0.800000000000000))*(x1395));
IkReal x1402=((IkReal(1.00000000000000))*(x1394));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1395)*(x1399)))+(((x1394)*(x1397)))+(((IkReal(0.400000000000000))*(x1394))));
evalcond[1]=((x1399)+(((IkReal(0.100000000000000))*(x1394)))+(((IkReal(-1.00000000000000))*(x1398)*(x1402)))+(((IkReal(-1.00000000000000))*(x1396)*(x1402))));
evalcond[2]=((IkReal(0.400000000000000))+(x1397)+(((IkReal(0.100000000000000))*(x1395)))+(((IkReal(-1.00000000000000))*(x1398)*(x1400)))+(((IkReal(-1.00000000000000))*(x1396)*(x1400))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1394)*(x1399)))+(((IkReal(0.400000000000000))*(x1395)))+(((x1395)*(x1397)))+(((IkReal(-1.00000000000000))*(x1396)))+(((IkReal(-1.00000000000000))*(x1398))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((x1396)*(x1401)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1396)))+(((IkReal(0.200000000000000))*(x1398)))+(((x1398)*(x1401)))+(((IkReal(-0.0800000000000000))*(x1395))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst82;
CheckValue<IkReal> x1404 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1404.valid ) {
    continue;
}
CheckValue<IkReal> x1405 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1405.valid ) {
    continue;
}
if( (((((IkReal(100.000000000000))*(x1404.value)))+(((IkReal(100.000000000000))*(x1405.value))))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x1403 = IKPowWithIntegerCheck(IKabs(IKsqrt(((((IkReal(100.000000000000))*(x1404.value)))+(((IkReal(100.000000000000))*(x1405.value)))))),-1.00000000000000);
if( !x1403.valid ) {
    continue;
}
if( (x1403.value) < -1-IKFAST_SINCOS_THRESH || (x1403.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1406 = IKatan2WithCheck(((IkReal(-10.0000000000000))*(px)),((IkReal(-10.0000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x1406.valid ) {
    continue;
}
gconst82=((IkReal(3.14159265358979))+(IKasin(x1403.value))+(((IkReal(-1.00000000000000))*(x1406.value))));
IkReal gconst83;
gconst83=IKsin(gconst82);
IkReal gconst84;
gconst84=IKcos(gconst82);
IkReal x1407=((gconst83)*(px));
IkReal x1408=((gconst84)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst82)))+(j27))))), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1408)))+(x1407));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(cj30)))+(((IkReal(0.200000000000000))*(gconst83)*(py)))+(((IkReal(0.200000000000000))*(gconst84)*(px)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1407)))+(x1408));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst88;
CheckValue<IkReal> x1409 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1409.valid ) {
    continue;
}
CheckValue<IkReal> x1410 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1410.valid ) {
    continue;
}
gconst88=IKsign(((IkReal(-160000.000000000))+(((IkReal(-256800.000000000))*(cj30)))+(((IkReal(-103041.000000000))*(x1409.value)))+(((IkReal(-103041.000000000))*(x1410.value)))));
CheckValue<IkReal> x1411 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1411.valid ) {
    continue;
}
CheckValue<IkReal> x1412 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1412.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.55277996137460))+(((IkReal(-2.49221183800623))*(cj30)))+(((IkReal(-1.00000000000000))*(x1411.value)))+(((IkReal(-1.00000000000000))*(x1412.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-10.0000000000000))*(gconst83)*(py)))+(((IkReal(-10.0000000000000))*(gconst84)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1413=((gconst84)*(px));
IkReal x1414=((IkReal(10.0000000000000))*(gconst83)*(py));
dummyeval[0]=((IkReal(1.24610591900312))+(((IkReal(-1.00000000000000))*(cj30)*(x1414)))+(cj30)+(((IkReal(-12.4610591900312))*(x1413)))+(((IkReal(-12.4610591900312))*(gconst83)*(py)))+(((IkReal(-10.0000000000000))*(cj30)*(x1413))));
dummyeval[1]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x1414)))+(((IkReal(-10.0000000000000))*(x1413))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1415=((gconst84)*(px));
IkReal x1416=((IkReal(321.000000000000))*(cj30));
IkReal x1417=((gconst83)*(py));
CheckValue<IkReal> x1418 = IKPowWithIntegerCheck(((IkReal(40.0000000000000))+(((IkReal(-1.00000000000000))*(x1415)*(x1416)))+(((IkReal(-400.000000000000))*(x1415)))+(((IkReal(-400.000000000000))*(x1417)))+(((IkReal(-1.00000000000000))*(x1416)*(x1417)))+(((IkReal(32.1000000000000))*(cj30)))),-1.00000000000000);
if( !x1418.valid ) {
    continue;
}
CheckValue<IkReal> x1419 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1417)))+(((IkReal(-1.00000000000000))*(x1415)))),-1.00000000000000);
if( !x1419.valid ) {
    continue;
}
if( IKabs(((x1418.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1419.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1418.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))))+IKsqr(((x1419.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x1418.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))), ((x1419.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1420=IKsin(j28);
IkReal x1421=IKcos(j28);
IkReal x1422=((IkReal(0.321000000000000))*(cj30));
IkReal x1423=((gconst84)*(px));
IkReal x1424=((IkReal(0.321000000000000))*(sj30));
IkReal x1425=((gconst83)*(py));
IkReal x1426=((IkReal(1.00000000000000))*(x1420));
IkReal x1427=((x1421)*(x1423));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1421)*(x1424)))+(((x1420)*(x1422)))+(((IkReal(0.400000000000000))*(x1420))));
evalcond[1]=((((IkReal(0.100000000000000))*(x1420)))+(((IkReal(-1.00000000000000))*(x1425)*(x1426)))+(((IkReal(-1.00000000000000))*(x1423)*(x1426)))+(x1424));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(0.100000000000000))*(x1421)))+(((IkReal(-1.00000000000000))*(x1427)))+(((IkReal(-1.00000000000000))*(x1421)*(x1425)))+(x1422));
evalcond[3]=((IkReal(0.100000000000000))+(((x1420)*(x1424)))+(((IkReal(0.400000000000000))*(x1421)))+(((IkReal(-1.00000000000000))*(x1425)))+(((IkReal(-1.00000000000000))*(x1423)))+(((x1421)*(x1422))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(x1427)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x1421)*(x1425)))+(((IkReal(0.200000000000000))*(x1425)))+(((IkReal(0.200000000000000))*(x1423)))+(((IkReal(-0.0800000000000000))*(x1421))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1428=((gconst84)*(px));
IkReal x1429=((gconst83)*(py));
CheckValue<IkReal> x1430 = IKPowWithIntegerCheck(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1428)))+(((IkReal(-1000.00000000000))*(x1429)))),-1.00000000000000);
if( !x1430.valid ) {
    continue;
}
CheckValue<IkReal> x1431 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1429)))+(((IkReal(-1.00000000000000))*(x1428)))),-1.00000000000000);
if( !x1431.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1430.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1431.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1430.value)))+IKsqr(((x1431.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1430.value)), ((x1431.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1432=IKsin(j28);
IkReal x1433=IKcos(j28);
IkReal x1434=((IkReal(0.321000000000000))*(cj30));
IkReal x1435=((gconst84)*(px));
IkReal x1436=((IkReal(0.321000000000000))*(sj30));
IkReal x1437=((gconst83)*(py));
IkReal x1438=((IkReal(1.00000000000000))*(x1432));
IkReal x1439=((x1433)*(x1435));
evalcond[0]=((((x1432)*(x1434)))+(((IkReal(-1.00000000000000))*(x1433)*(x1436)))+(((IkReal(0.400000000000000))*(x1432))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1437)*(x1438)))+(((IkReal(-1.00000000000000))*(x1435)*(x1438)))+(((IkReal(0.100000000000000))*(x1432)))+(x1436));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1439)))+(((IkReal(0.100000000000000))*(x1433)))+(x1434)+(((IkReal(-1.00000000000000))*(x1433)*(x1437))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1432)*(x1436)))+(((IkReal(-1.00000000000000))*(x1437)))+(((IkReal(-1.00000000000000))*(x1435)))+(((x1433)*(x1434)))+(((IkReal(0.400000000000000))*(x1433))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1437)))+(((IkReal(0.200000000000000))*(x1435)))+(((IkReal(-0.0800000000000000))*(x1433)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.800000000000000))*(x1439)))+(((IkReal(0.800000000000000))*(x1433)*(x1437))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1440=((gconst84)*(px));
IkReal x1441=((IkReal(321000.000000000))*(gconst83)*(py));
CheckValue<IkReal> x1442 = IKatan2WithCheck(((gconst88)*(((((IkReal(-321000.000000000))*(sj30)*(x1440)))+(((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-1.00000000000000))*(sj30)*(x1441)))))),((gconst88)*(((IkReal(40000.0000000000))+(((IkReal(-321000.000000000))*(cj30)*(x1440)))+(((IkReal(32100.0000000000))*(cj30)))+(((IkReal(-400000.000000000))*(x1440)))+(((IkReal(-1.00000000000000))*(cj30)*(x1441)))+(((IkReal(-400000.000000000))*(gconst83)*(py)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1442.valid ) {
    continue;
}
j28array[0]=x1442.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1443=IKsin(j28);
IkReal x1444=IKcos(j28);
IkReal x1445=((IkReal(0.321000000000000))*(cj30));
IkReal x1446=((gconst84)*(px));
IkReal x1447=((IkReal(0.321000000000000))*(sj30));
IkReal x1448=((gconst83)*(py));
IkReal x1449=((IkReal(1.00000000000000))*(x1443));
IkReal x1450=((x1444)*(x1446));
evalcond[0]=((((x1443)*(x1445)))+(((IkReal(0.400000000000000))*(x1443)))+(((IkReal(-1.00000000000000))*(x1444)*(x1447))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1446)*(x1449)))+(((IkReal(0.100000000000000))*(x1443)))+(x1447)+(((IkReal(-1.00000000000000))*(x1448)*(x1449))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1450)))+(((IkReal(0.100000000000000))*(x1444)))+(x1445)+(((IkReal(-1.00000000000000))*(x1444)*(x1448))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1444)*(x1445)))+(((x1443)*(x1447)))+(((IkReal(-1.00000000000000))*(x1448)))+(((IkReal(-1.00000000000000))*(x1446)))+(((IkReal(0.400000000000000))*(x1444))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1444)))+(((IkReal(0.800000000000000))*(x1444)*(x1448)))+(((IkReal(0.800000000000000))*(x1450)))+(((IkReal(0.200000000000000))*(x1446)))+(((IkReal(0.200000000000000))*(x1448))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1451=((py)*(sj27));
IkReal x1452=((IkReal(321.000000000000))*(cj30));
IkReal x1453=((cj27)*(px));
CheckValue<IkReal> x1454 = IKPowWithIntegerCheck(((IkReal(40.0000000000000))+(((IkReal(-400.000000000000))*(x1453)))+(((IkReal(-400.000000000000))*(x1451)))+(((IkReal(-1.00000000000000))*(x1452)*(x1453)))+(((IkReal(-1.00000000000000))*(x1451)*(x1452)))+(((IkReal(32.1000000000000))*(cj30)))),-1.00000000000000);
if( !x1454.valid ) {
    continue;
}
CheckValue<IkReal> x1455 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1451)))+(((IkReal(-1.00000000000000))*(x1453)))),-1.00000000000000);
if( !x1455.valid ) {
    continue;
}
if( IKabs(((x1454.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1455.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1454.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))))+IKsqr(((x1455.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((x1454.value)*(((((IkReal(-103.041000000000))*(cj30)*(sj30)))+(((IkReal(-128.400000000000))*(sj30)))))), ((x1455.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1456=IKsin(j28);
IkReal x1457=IKcos(j28);
IkReal x1458=((IkReal(0.321000000000000))*(cj30));
IkReal x1459=((IkReal(0.321000000000000))*(sj30));
IkReal x1460=((py)*(sj27));
IkReal x1461=((cj27)*(px));
IkReal x1462=((IkReal(1.00000000000000))*(x1460));
IkReal x1463=((IkReal(0.800000000000000))*(x1457));
evalcond[0]=((((x1456)*(x1458)))+(((IkReal(-1.00000000000000))*(x1457)*(x1459)))+(((IkReal(0.400000000000000))*(x1456))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1456)*(x1462)))+(((IkReal(-1.00000000000000))*(x1456)*(x1461)))+(x1459)+(((IkReal(0.100000000000000))*(x1456))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1457)*(x1461)))+(((IkReal(-1.00000000000000))*(x1457)*(x1462)))+(x1458)+(((IkReal(0.100000000000000))*(x1457))));
evalcond[3]=((IkReal(0.100000000000000))+(((x1456)*(x1459)))+(((IkReal(-1.00000000000000))*(x1462)))+(((IkReal(0.400000000000000))*(x1457)))+(((IkReal(-1.00000000000000))*(x1461)))+(((x1457)*(x1458))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(0.200000000000000))*(x1460)))+(((IkReal(0.200000000000000))*(x1461)))+(((IkReal(-0.0800000000000000))*(x1457)))+(((x1461)*(x1463)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1460)*(x1463))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1464=((py)*(sj27));
IkReal x1465=((cj27)*(px));
CheckValue<IkReal> x1466 = IKPowWithIntegerCheck(((IkReal(100.000000000000))+(((IkReal(-1000.00000000000))*(x1465)))+(((IkReal(-1000.00000000000))*(x1464)))),-1.00000000000000);
if( !x1466.valid ) {
    continue;
}
CheckValue<IkReal> x1467 = IKPowWithIntegerCheck(((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1465)))+(((IkReal(-1.00000000000000))*(x1464)))),-1.00000000000000);
if( !x1467.valid ) {
    continue;
}
if( IKabs(((IkReal(-321.000000000000))*(sj30)*(x1466.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1467.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-321.000000000000))*(sj30)*(x1466.value)))+IKsqr(((x1467.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j28array[0]=IKatan2(((IkReal(-321.000000000000))*(sj30)*(x1466.value)), ((x1467.value)*(((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(cj30)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1468=IKsin(j28);
IkReal x1469=IKcos(j28);
IkReal x1470=((IkReal(0.321000000000000))*(cj30));
IkReal x1471=((IkReal(0.321000000000000))*(sj30));
IkReal x1472=((py)*(sj27));
IkReal x1473=((cj27)*(px));
IkReal x1474=((IkReal(1.00000000000000))*(x1472));
IkReal x1475=((IkReal(0.800000000000000))*(x1469));
evalcond[0]=((((IkReal(0.400000000000000))*(x1468)))+(((IkReal(-1.00000000000000))*(x1469)*(x1471)))+(((x1468)*(x1470))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1468)*(x1474)))+(x1471)+(((IkReal(0.100000000000000))*(x1468)))+(((IkReal(-1.00000000000000))*(x1468)*(x1473))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1469)*(x1474)))+(((IkReal(-1.00000000000000))*(x1469)*(x1473)))+(x1470)+(((IkReal(0.100000000000000))*(x1469))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(x1469)))+(((IkReal(-1.00000000000000))*(x1473)))+(((IkReal(-1.00000000000000))*(x1474)))+(((x1468)*(x1471)))+(((x1469)*(x1470))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1469)))+(((x1473)*(x1475)))+(((x1472)*(x1475)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1472)))+(((IkReal(0.200000000000000))*(x1473))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1476=((cj27)*(px));
IkReal x1477=((IkReal(321000.000000000))*(py)*(sj27));
CheckValue<IkReal> x1478 = IKatan2WithCheck(((gconst72)*(((((IkReal(-321000.000000000))*(sj30)*(x1476)))+(((IkReal(32100.0000000000))*(sj30)))+(((IkReal(-1.00000000000000))*(sj30)*(x1477)))))),((gconst72)*(((IkReal(40000.0000000000))+(((IkReal(-400000.000000000))*(py)*(sj27)))+(((IkReal(-321000.000000000))*(cj30)*(x1476)))+(((IkReal(32100.0000000000))*(cj30)))+(((IkReal(-400000.000000000))*(x1476)))+(((IkReal(-1.00000000000000))*(cj30)*(x1477)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1478.valid ) {
    continue;
}
j28array[0]=x1478.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[5];
IkReal x1479=IKsin(j28);
IkReal x1480=IKcos(j28);
IkReal x1481=((IkReal(0.321000000000000))*(cj30));
IkReal x1482=((IkReal(0.321000000000000))*(sj30));
IkReal x1483=((py)*(sj27));
IkReal x1484=((cj27)*(px));
IkReal x1485=((IkReal(1.00000000000000))*(x1483));
IkReal x1486=((IkReal(0.800000000000000))*(x1480));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1480)*(x1482)))+(((IkReal(0.400000000000000))*(x1479)))+(((x1479)*(x1481))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1479)*(x1485)))+(((IkReal(-1.00000000000000))*(x1479)*(x1484)))+(((IkReal(0.100000000000000))*(x1479)))+(x1482));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1480)*(x1485)))+(((IkReal(0.100000000000000))*(x1480)))+(((IkReal(-1.00000000000000))*(x1480)*(x1484)))+(x1481));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1485)))+(((x1480)*(x1481)))+(((IkReal(-1.00000000000000))*(x1484)))+(((IkReal(0.400000000000000))*(x1480)))+(((x1479)*(x1482))));
evalcond[4]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(x1480)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1483)*(x1486)))+(((x1484)*(x1486)))+(((IkReal(0.200000000000000))*(x1484)))+(((IkReal(0.200000000000000))*(x1483))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
CheckValue<IkReal> x1487 = IKPowWithIntegerCheck(sj29,-1.00000000000000);
if( !x1487.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1487.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1487.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1487.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27)))+(((IkReal(0.321000000000000))*(sj29)*(IKsin(j30)))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(IKcos(j30))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst45;
IkReal x1488=((py)*(sj27));
IkReal x1489=((IkReal(321.000000000000))*(cj30));
IkReal x1490=((cj27)*(px));
gconst45=IKsign(((IkReal(-40.0000000000000))+(((x1489)*(x1490)))+(((IkReal(321.000000000000))*(cj29)*(pz)*(sj30)))+(((x1488)*(x1489)))+(((IkReal(400.000000000000))*(x1488)))+(((IkReal(-32.1000000000000))*(cj30)))+(((IkReal(400.000000000000))*(x1490)))));
IkReal x1491=((cj27)*(px));
IkReal x1492=((py)*(sj27));
IkReal x1493=((IkReal(10.0000000000000))*(cj30));
dummyeval[0]=((IkReal(-1.24610591900312))+(((IkReal(12.4610591900312))*(x1492)))+(((IkReal(12.4610591900312))*(x1491)))+(((x1491)*(x1493)))+(((IkReal(-1.00000000000000))*(cj30)))+(((x1492)*(x1493)))+(((IkReal(10.0000000000000))*(cj29)*(pz)*(sj30))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
CheckValue<IkReal> x1494 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1494.valid ) {
    continue;
}
CheckValue<IkReal> x1495 = IKPowWithIntegerCheck(cj29,2.00000000000000);
if( !x1495.valid ) {
    continue;
}
CheckValue<IkReal> x1496 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1496.valid ) {
    continue;
}
gconst46=IKsign(((IkReal(160000.000000000))+(((IkReal(256800.000000000))*(cj30)))+(((IkReal(103041.000000000))*(x1494.value)))+(((IkReal(103041.000000000))*(x1495.value)*(x1496.value)))));
CheckValue<IkReal> x1497 = IKPowWithIntegerCheck(cj29,2.00000000000000);
if( !x1497.valid ) {
    continue;
}
CheckValue<IkReal> x1498 = IKPowWithIntegerCheck(sj30,2.00000000000000);
if( !x1498.valid ) {
    continue;
}
CheckValue<IkReal> x1499 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1499.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.55277996137460))+(((x1497.value)*(x1498.value)))+(((IkReal(2.49221183800623))*(cj30)))+(x1499.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1500=((cj27)*(px));
IkReal x1501=((IkReal(321000.000000000))*(cj30));
IkReal x1502=((py)*(sj27));
IkReal x1503=((IkReal(321000.000000000))*(cj29)*(sj30));
CheckValue<IkReal> x1504 = IKatan2WithCheck(((gconst46)*(((((IkReal(32100.0000000000))*(cj29)*(sj30)))+(((IkReal(-400000.000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1500)*(x1503)))+(((IkReal(-1.00000000000000))*(pz)*(x1501)))+(((IkReal(-1.00000000000000))*(x1502)*(x1503)))))),((gconst46)*(((IkReal(-40000.0000000000))+(((IkReal(-32100.0000000000))*(cj30)))+(((x1501)*(x1502)))+(((x1500)*(x1501)))+(((IkReal(-1.00000000000000))*(pz)*(x1503)))+(((IkReal(400000.000000000))*(x1500)))+(((IkReal(400000.000000000))*(x1502)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1504.valid ) {
    continue;
}
j28array[0]=x1504.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[6];
IkReal x1505=IKsin(j28);
IkReal x1506=IKcos(j28);
IkReal x1507=((IkReal(0.321000000000000))*(cj30));
IkReal x1508=((py)*(sj27));
IkReal x1509=((IkReal(0.321000000000000))*(sj30));
IkReal x1510=((IkReal(1.00000000000000))*(sj29));
IkReal x1511=((px)*(sj27));
IkReal x1512=((cj27)*(px));
IkReal x1513=((cj27)*(py));
IkReal x1514=((IkReal(1.00000000000000))*(x1508));
IkReal x1515=((pz)*(x1505));
IkReal x1516=((cj29)*(x1505));
IkReal x1517=((pz)*(x1506));
IkReal x1518=((IkReal(0.800000000000000))*(x1506));
IkReal x1519=((sj29)*(x1505));
evalcond[0]=((((cj29)*(x1506)*(x1509)))+(pz)+(((x1505)*(x1507)))+(((IkReal(0.400000000000000))*(x1505))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1514)))+(((IkReal(-1.00000000000000))*(x1512)))+(((x1506)*(x1507)))+(((IkReal(-1.00000000000000))*(x1509)*(x1516)))+(((IkReal(0.400000000000000))*(x1506))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1506)*(x1514)))+(x1507)+(x1515)+(((IkReal(0.100000000000000))*(x1506)))+(((IkReal(-1.00000000000000))*(x1506)*(x1512))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x1508)*(x1518)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.800000000000000))*(x1515)))+(((IkReal(-0.0800000000000000))*(x1506)))+(((IkReal(0.200000000000000))*(x1512)))+(((IkReal(0.200000000000000))*(x1508)))+(((x1512)*(x1518))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1510)*(x1517)))+(((cj29)*(x1511)))+(((IkReal(-1.00000000000000))*(x1505)*(x1510)*(x1512)))+(((IkReal(0.100000000000000))*(x1519)))+(((IkReal(-1.00000000000000))*(cj29)*(x1513)))+(((IkReal(-1.00000000000000))*(x1505)*(x1508)*(x1510))));
evalcond[5]=((((x1508)*(x1516)))+(((IkReal(-1.00000000000000))*(x1510)*(x1513)))+(((cj29)*(x1517)))+(x1509)+(((IkReal(-0.100000000000000))*(x1516)))+(((x1512)*(x1516)))+(((sj29)*(x1511))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
IkReal x1520=((cj29)*(sj30));
IkReal x1521=((IkReal(1000.00000000000))*(pz));
CheckValue<IkReal> x1523 = IKPowWithIntegerCheck(cj30,2.00000000000000);
if( !x1523.valid ) {
    continue;
}
CheckValue<IkReal> x1522 = IKatan2WithCheck(((gconst45)*(((((IkReal(-103.041000000000))*(cj30)*(x1520)))+(((IkReal(100.000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj27)*(x1521)))+(((IkReal(-128.400000000000))*(x1520)))+(((IkReal(-1.00000000000000))*(cj27)*(px)*(x1521)))))),((gconst45)*(((IkReal(160.000000000000))+(((IkReal(103.041000000000))*(x1523.value)))+(((IkReal(-1.00000000000000))*(pz)*(x1521)))+(((IkReal(256.800000000000))*(cj30)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1522.valid ) {
    continue;
}
j28array[0]=x1522.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[6];
IkReal x1524=IKsin(j28);
IkReal x1525=IKcos(j28);
IkReal x1526=((IkReal(0.321000000000000))*(cj30));
IkReal x1527=((py)*(sj27));
IkReal x1528=((IkReal(0.321000000000000))*(sj30));
IkReal x1529=((IkReal(1.00000000000000))*(sj29));
IkReal x1530=((px)*(sj27));
IkReal x1531=((cj27)*(px));
IkReal x1532=((cj27)*(py));
IkReal x1533=((IkReal(1.00000000000000))*(x1527));
IkReal x1534=((pz)*(x1524));
IkReal x1535=((cj29)*(x1524));
IkReal x1536=((pz)*(x1525));
IkReal x1537=((IkReal(0.800000000000000))*(x1525));
IkReal x1538=((sj29)*(x1524));
evalcond[0]=((((x1524)*(x1526)))+(((IkReal(0.400000000000000))*(x1524)))+(pz)+(((cj29)*(x1525)*(x1528))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1531)))+(((x1525)*(x1526)))+(((IkReal(0.400000000000000))*(x1525)))+(((IkReal(-1.00000000000000))*(x1533)))+(((IkReal(-1.00000000000000))*(x1528)*(x1535))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1525)*(x1531)))+(((IkReal(-1.00000000000000))*(x1525)*(x1533)))+(x1526)+(x1534)+(((IkReal(0.100000000000000))*(x1525))));
evalcond[3]=((IkReal(-0.0669590000000000))+(((x1531)*(x1537)))+(((IkReal(-0.800000000000000))*(x1534)))+(((x1527)*(x1537)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0800000000000000))*(x1525)))+(((IkReal(0.200000000000000))*(x1531)))+(((IkReal(0.200000000000000))*(x1527))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1529)*(x1536)))+(((IkReal(-1.00000000000000))*(x1524)*(x1529)*(x1531)))+(((cj29)*(x1530)))+(((IkReal(0.100000000000000))*(x1538)))+(((IkReal(-1.00000000000000))*(cj29)*(x1532)))+(((IkReal(-1.00000000000000))*(x1524)*(x1527)*(x1529))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1529)*(x1532)))+(((sj29)*(x1530)))+(((x1531)*(x1535)))+(((x1527)*(x1535)))+(((cj29)*(x1536)))+(x1528)+(((IkReal(-0.100000000000000))*(x1535))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
_nj28 = 1;
CheckValue<IkReal> x1552 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1552.valid ) {
    continue;
}
IkReal x1539=x1552.value;
CheckValue<IkReal> x1553 = IKPowWithIntegerCheck(sj27,2.00000000000000);
if( !x1553.valid ) {
    continue;
}
IkReal x1540=x1553.value;
CheckValue<IkReal> x1554 = IKPowWithIntegerCheck(cj27,2.00000000000000);
if( !x1554.valid ) {
    continue;
}
IkReal x1541=x1554.value;
CheckValue<IkReal> x1555 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1555.valid ) {
    continue;
}
IkReal x1542=x1555.value;
IkReal x1543=((pz)*(sj27));
IkReal x1544=((py)*(sj29));
IkReal x1545=((IkReal(5.00000000000000))*(pp));
IkReal x1546=((pz)*(sj29));
IkReal x1547=((IkReal(0.400000000000000))*(cj29));
IkReal x1548=((px)*(sj27));
IkReal x1549=((IkReal(4.00000000000000))*(cj29)*(px));
IkReal x1550=((cj27)*(px)*(sj29));
IkReal x1551=((IkReal(4.00000000000000))*(cj27)*(cj29));
CheckValue<IkReal> x1556 = IKatan2WithCheck(((gconst44)*(((((x1547)*(x1548)))+(((IkReal(-1.00000000000000))*(cj27)*(px)*(x1546)))+(((IkReal(0.334795000000000))*(x1546)))+(((IkReal(-1.00000000000000))*(py)*(x1540)*(x1549)))+(((IkReal(-1.00000000000000))*(cj27)*(py)*(x1547)))+(((py)*(x1541)*(x1549)))+(((IkReal(-1.00000000000000))*(sj27)*(x1542)*(x1551)))+(((sj27)*(x1539)*(x1551)))+(((IkReal(-1.00000000000000))*(x1543)*(x1544)))+(((x1545)*(x1546)))))),((gconst44)*(((((IkReal(-1.00000000000000))*(x1543)*(x1549)))+(((py)*(pz)*(x1551)))+(((IkReal(0.500000000000000))*(pp)*(sj29)))+(((IkReal(-0.434795000000000))*(sj27)*(x1544)))+(((IkReal(0.0334795000000000))*(sj29)))+(((IkReal(-0.434795000000000))*(x1550)))+(((IkReal(-1.00000000000000))*(x1545)*(x1550)))+(((sj29)*(x1541)*(x1542)))+(((sj29)*(x1539)*(x1540)))+(((IkReal(2.00000000000000))*(cj27)*(x1544)*(x1548)))+(((IkReal(-1.00000000000000))*(sj27)*(x1544)*(x1545)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1556.valid ) {
    continue;
}
j28array[0]=x1556.value;
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
{
    j28array[0]-=IK2PI;
}
else if( j28array[0] < -IKPI )
{    j28array[0]+=IK2PI;
}
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] )
{
    continue;
}
_ij28[0] = ij28; _ij28[1] = -1;
for(int iij28 = ij28+1; iij28 < 1; ++iij28)
{
if( j28valid[iij28] && IKabs(cj28array[ij28]-cj28array[iij28]) < IKFAST_SOLUTION_THRESH && IKabs(sj28array[ij28]-sj28array[iij28]) < IKFAST_SOLUTION_THRESH )
{
    j28valid[iij28]=false; _ij28[1] = iij28; break; 
}
}
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];
{
IkReal evalcond[2];
IkReal x1557=IKcos(j28);
IkReal x1558=IKsin(j28);
IkReal x1559=((py)*(sj27));
IkReal x1560=((IkReal(1.00000000000000))*(cj27));
IkReal x1561=((cj27)*(px));
IkReal x1562=((IkReal(0.800000000000000))*(x1557));
IkReal x1563=((sj29)*(x1558));
evalcond[0]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)*(x1558)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1561)*(x1562)))+(((IkReal(-0.0800000000000000))*(x1557)))+(((IkReal(0.200000000000000))*(x1561)))+(((x1559)*(x1562)))+(((IkReal(0.200000000000000))*(x1559))));
evalcond[1]=((((IkReal(0.100000000000000))*(x1563)))+(((cj29)*(px)*(sj27)))+(((IkReal(-1.00000000000000))*(pz)*(sj29)*(x1557)))+(((IkReal(-1.00000000000000))*(cj29)*(py)*(x1560)))+(((IkReal(-1.00000000000000))*(px)*(x1560)*(x1563)))+(((IkReal(-1.00000000000000))*(x1559)*(x1563))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj28;
dummyeval[1]=cj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1564=((cj27)*(px));
IkReal x1565=((IkReal(1.00000000000000))*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j28))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(x1564))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj27)*(sj29)*(x1565)))+(((cj29)*(px)*(sj27)))+(((IkReal(-1.00000000000000))*(cj27)*(cj29)*(x1565)))+(((IkReal(0.100000000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(sj29)*(x1564))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x1566=((IkReal(3.11526479750779))*(cj29));
IkReal x1567=((IkReal(3.11526479750779))*(sj29));
if( IKabs(((((IkReal(-1.00000000000000))*(cj27)*(px)*(x1566)))+(((cj27)*(py)*(x1567)))+(((IkReal(0.311526479750779))*(cj29)))+(((IkReal(-1.00000000000000))*(py)*(sj27)*(x1566)))+(((IkReal(-1.00000000000000))*(px)*(sj27)*(x1567))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj27)*(px)*(x1566)))+(((cj27)*(py)*(x1567)))+(((IkReal(0.311526479750779))*(cj29)))+(((IkReal(-1.00000000000000))*(py)*(sj27)*(x1566)))+(((IkReal(-1.00000000000000))*(px)*(sj27)*(x1567)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj27)*(px)*(x1566)))+(((cj27)*(py)*(x1567)))+(((IkReal(0.311526479750779))*(cj29)))+(((IkReal(-1.00000000000000))*(py)*(sj27)*(x1566)))+(((IkReal(-1.00000000000000))*(px)*(sj27)*(x1567)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1568=IKsin(j30);
IkReal x1569=IKcos(j30);
IkReal x1570=((IkReal(1.00000000000000))*(py));
IkReal x1571=((cj27)*(px));
IkReal x1572=((px)*(sj27));
IkReal x1573=((py)*(sj27));
IkReal x1574=((IkReal(0.321000000000000))*(x1568));
evalcond[0]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x1569))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(x1570)))+(((sj29)*(x1574)))+(x1572));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(cj29)*(x1574)))+(((IkReal(-1.00000000000000))*(sj27)*(x1570)))+(((IkReal(-1.00000000000000))*(x1571))));
evalcond[3]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1569)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1573)))+(((IkReal(0.200000000000000))*(x1571))));
evalcond[4]=((((cj29)*(x1571)))+(((cj29)*(x1573)))+(((sj29)*(x1572)))+(x1574)+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x1570)))+(((IkReal(-0.100000000000000))*(cj29))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1575=((py)*(sj27));
IkReal x1576=((cj27)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j28))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1575)))+(((IkReal(0.200000000000000))*(x1576))));
evalcond[2]=((((cj29)*(px)*(sj27)))+(((IkReal(-1.00000000000000))*(cj27)*(cj29)*(py)))+(((sj29)*(x1575)))+(((sj29)*(x1576)))+(((IkReal(-0.100000000000000))*(sj29))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj29;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1577=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j29))), IkReal(6.28318530717959))));
evalcond[1]=x1577;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=x1577;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x1578=IKcos(j30);
IkReal x1579=((py)*(sj27));
IkReal x1580=((cj27)*(px));
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1578)))+(pz));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1580)))+(((IkReal(-1.00000000000000))*(x1579)))+(((IkReal(0.321000000000000))*(IKsin(j30)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1578)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1579)))+(((IkReal(0.200000000000000))*(x1580))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1581=((cj27)*(py));
IkReal x1582=((px)*(sj27));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j29))))), IkReal(6.28318530717959))));
evalcond[1]=((x1582)+(((IkReal(-1.00000000000000))*(x1581))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=((x1581)+(((IkReal(-1.00000000000000))*(x1582))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x1583=IKcos(j30);
IkReal x1584=((py)*(sj27));
IkReal x1585=((cj27)*(px));
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1583)))+(pz));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-0.321000000000000))*(IKsin(j30))))+(((IkReal(-1.00000000000000))*(x1585)))+(((IkReal(-1.00000000000000))*(x1584))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1583)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1585)))+(((IkReal(0.200000000000000))*(x1584))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1586=((py)*(sj27));
IkReal x1587=((cj27)*(px));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j29))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1586)))+(((IkReal(-1.00000000000000))*(x1587))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1586)))+(((IkReal(0.200000000000000))*(x1587))));
evalcond[3]=((IkReal(-0.100000000000000))+(x1586)+(x1587));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x1588=IKcos(j30);
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1588)))+(pz));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27)))+(((IkReal(0.321000000000000))*(IKsin(j30)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1588)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1589=((py)*(sj27));
IkReal x1590=((cj27)*(px));
IkReal x1591=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1589)))+(((IkReal(-1.00000000000000))*(x1590))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j29))))), IkReal(6.28318530717959))));
evalcond[1]=x1591;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1590)))+(((IkReal(0.200000000000000))*(x1589))));
evalcond[3]=x1591;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x1592=IKcos(j30);
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1592)))+(pz));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((IkReal(-0.321000000000000))*(IKsin(j30))))+(((px)*(sj27))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1592)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
CheckValue<IkReal> x1593 = IKPowWithIntegerCheck(sj29,-1.00000000000000);
if( !x1593.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1593.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1593.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1593.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1594=IKsin(j30);
IkReal x1595=IKcos(j30);
IkReal x1596=((IkReal(1.00000000000000))*(py));
IkReal x1597=((px)*(sj27));
IkReal x1598=((IkReal(1.00000000000000))*(cj27)*(px));
IkReal x1599=((IkReal(0.321000000000000))*(x1594));
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1595)))+(pz));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(x1596)))+(((sj29)*(x1599)))+(x1597));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1598)))+(((cj29)*(x1599)))+(((IkReal(-1.00000000000000))*(sj27)*(x1596))));
evalcond[3]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1595)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[4]=((((sj29)*(x1597)))+(x1599)+(((IkReal(0.100000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(cj29)*(sj27)*(x1596)))+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x1596)))+(((IkReal(-1.00000000000000))*(cj29)*(x1598))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
CheckValue<IkReal> x1600 = IKPowWithIntegerCheck(cj29,-1.00000000000000);
if( !x1600.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1600.value)*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(cj27)*(px)))+(((IkReal(1000.00000000000))*(py)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1600.value)*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(cj27)*(px)))+(((IkReal(1000.00000000000))*(py)*(sj27)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1600.value)*(((IkReal(-100.000000000000))+(((IkReal(1000.00000000000))*(cj27)*(px)))+(((IkReal(1000.00000000000))*(py)*(sj27)))))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1601=IKsin(j30);
IkReal x1602=IKcos(j30);
IkReal x1603=((IkReal(1.00000000000000))*(py));
IkReal x1604=((px)*(sj27));
IkReal x1605=((IkReal(1.00000000000000))*(cj27)*(px));
IkReal x1606=((IkReal(0.321000000000000))*(x1601));
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1602)))+(pz));
evalcond[1]=((((sj29)*(x1606)))+(x1604)+(((IkReal(-1.00000000000000))*(cj27)*(x1603))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1605)))+(((cj29)*(x1606)))+(((IkReal(-1.00000000000000))*(sj27)*(x1603))));
evalcond[3]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1602)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[4]=((((sj29)*(x1604)))+(((IkReal(-1.00000000000000))*(cj29)*(x1605)))+(x1606)+(((IkReal(-1.00000000000000))*(cj29)*(sj27)*(x1603)))+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x1603)))+(((IkReal(0.100000000000000))*(cj29))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
CheckValue<IkReal> x1607 = IKPowWithIntegerCheck(sj29,-1.00000000000000);
if( !x1607.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1607.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1607.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1607.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1608=IKsin(j30);
IkReal x1609=IKcos(j30);
IkReal x1610=((IkReal(1.00000000000000))*(py));
IkReal x1611=((px)*(sj27));
IkReal x1612=((IkReal(1.00000000000000))*(cj27)*(px));
IkReal x1613=((IkReal(0.321000000000000))*(x1608));
evalcond[0]=((IkReal(-0.400000000000000))+(((IkReal(-0.321000000000000))*(x1609)))+(pz));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(x1610)))+(x1611)+(((sj29)*(x1613))));
evalcond[2]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1612)))+(((cj29)*(x1613)))+(((IkReal(-1.00000000000000))*(sj27)*(x1610))));
evalcond[3]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1609)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[4]=((x1613)+(((sj29)*(x1611)))+(((IkReal(-1.00000000000000))*(cj29)*(sj27)*(x1610)))+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x1610)))+(((IkReal(0.100000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(cj29)*(x1612))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1614=((cj27)*(px));
IkReal x1615=((IkReal(0.800000000000000))*(cj28));
IkReal x1616=((py)*(sj27));
IkReal x1617=((IkReal(1.00000000000000))*(sj28));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j29))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((IkReal(-0.0800000000000000))*(cj28)))+(((x1614)*(x1615)))+(((x1615)*(x1616)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1614)))+(((IkReal(0.200000000000000))*(x1616)))+(((IkReal(-0.800000000000000))*(pz)*(sj28))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1616)*(x1617)))+(((IkReal(0.100000000000000))*(sj28)))+(((IkReal(-1.00000000000000))*(x1614)*(x1617)))+(((IkReal(-1.00000000000000))*(cj28)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(3.11526479750779))*(cj27)*(py)))+(((IkReal(-3.11526479750779))*(px)*(sj27)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1618=IKcos(j30);
IkReal x1619=((IkReal(1.00000000000000))*(py));
IkReal x1620=((cj27)*(px));
IkReal x1621=((IkReal(0.321000000000000))*(x1618));
evalcond[0]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x1621)))+(pz));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(x1619)))+(((px)*(sj27)))+(((IkReal(0.321000000000000))*(IKsin(j30)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1618)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1620)))+(((IkReal(0.200000000000000))*(py)*(sj27))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1620)))+(((IkReal(0.400000000000000))*(cj28)))+(((cj28)*(x1621)))+(((IkReal(-1.00000000000000))*(sj27)*(x1619))));
evalcond[4]=((IkReal(0.400000000000000))+(x1621)+(((IkReal(-1.00000000000000))*(cj28)*(sj27)*(x1619)))+(((IkReal(-1.00000000000000))*(cj28)*(x1620)))+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1622=((cj27)*(px));
IkReal x1623=((IkReal(0.800000000000000))*(cj28));
IkReal x1624=((py)*(sj27));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j29))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0669590000000000))+(((x1623)*(x1624)))+(((x1622)*(x1623)))+(((IkReal(-0.0800000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1622)))+(((IkReal(0.200000000000000))*(x1624)))+(((IkReal(-0.800000000000000))*(pz)*(sj28))));
evalcond[2]=((((sj28)*(x1622)))+(((sj28)*(x1624)))+(((cj28)*(pz)))+(((IkReal(-0.100000000000000))*(sj28))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27)))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((((IkReal(-3.11526479750779))*(cj27)*(py)))+(((IkReal(3.11526479750779))*(px)*(sj27)))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1625=IKcos(j30);
IkReal x1626=((IkReal(1.00000000000000))*(py));
IkReal x1627=((cj27)*(px));
IkReal x1628=((IkReal(0.321000000000000))*(x1625));
evalcond[0]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x1628)))+(pz));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj27)*(x1626)))+(((IkReal(-0.321000000000000))*(IKsin(j30))))+(((px)*(sj27))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1625)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1627)))+(((IkReal(0.200000000000000))*(py)*(sj27))));
evalcond[3]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1627)))+(((IkReal(0.400000000000000))*(cj28)))+(((cj28)*(x1628)))+(((IkReal(-1.00000000000000))*(sj27)*(x1626))));
evalcond[4]=((IkReal(0.400000000000000))+(x1628)+(((IkReal(-1.00000000000000))*(cj28)*(sj27)*(x1626)))+(((IkReal(-1.00000000000000))*(cj28)*(x1627)))+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1629=((cj27)*(px));
IkReal x1630=((IkReal(0.800000000000000))*(cj28));
IkReal x1631=((py)*(sj27));
IkReal x1632=((((IkReal(-1.00000000000000))*(cj27)*(py)))+(((px)*(sj27))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j29))), IkReal(6.28318530717959))));
evalcond[1]=x1632;
evalcond[2]=((IkReal(-0.0669590000000000))+(((x1629)*(x1630)))+(((IkReal(0.200000000000000))*(x1631)))+(((IkReal(-0.0800000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1629)))+(((x1630)*(x1631)))+(((IkReal(-0.800000000000000))*(pz)*(sj28))));
evalcond[3]=x1632;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst47;
CheckValue<IkReal> x1633 = IKPowWithIntegerCheck(cj28,2.00000000000000);
if( !x1633.valid ) {
    continue;
}
CheckValue<IkReal> x1634 = IKPowWithIntegerCheck(sj28,2.00000000000000);
if( !x1634.valid ) {
    continue;
}
gconst47=IKsign(((((IkReal(321.000000000000))*(x1633.value)))+(((IkReal(321.000000000000))*(x1634.value)))));
CheckValue<IkReal> x1635 = IKPowWithIntegerCheck(cj28,2.00000000000000);
if( !x1635.valid ) {
    continue;
}
CheckValue<IkReal> x1636 = IKPowWithIntegerCheck(sj28,2.00000000000000);
if( !x1636.valid ) {
    continue;
}
dummyeval[0]=((x1635.value)+(x1636.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj28;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj28;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1637=x1632;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j28))))), IkReal(6.28318530717959))));
evalcond[1]=x1637;
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=x1637;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.311526479750779))+(((IkReal(-3.11526479750779))*(cj27)*(px)))+(((IkReal(-3.11526479750779))*(py)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x1638=IKcos(j30);
IkReal x1639=((py)*(sj27));
IkReal x1640=((cj27)*(px));
evalcond[0]=((IkReal(0.400000000000000))+(pz)+(((IkReal(0.321000000000000))*(x1638))));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-0.321000000000000))*(IKsin(j30))))+(((IkReal(-1.00000000000000))*(x1640)))+(((IkReal(-1.00000000000000))*(x1639))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1639)))+(((IkReal(0.200000000000000))*(x1640)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1638))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x1641=((cj28)*(sj28));
IkReal x1642=((IkReal(1000.00000000000))*(pz));
IkReal x1643=((cj27)*(px));
IkReal x1644=((cj28)*(py)*(sj27));
CheckValue<IkReal> x1645 = IKPowWithIntegerCheck(cj28,-1.00000000000000);
if( !x1645.valid ) {
    continue;
}
CheckValue<IkReal> x1646 = IKPowWithIntegerCheck(sj28,2.00000000000000);
if( !x1646.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1645.value)*(((((x1642)*(x1646.value)))+(((IkReal(-1000.00000000000))*(x1641)*(x1643)))+(((IkReal(100.000000000000))*(x1641)))+(((IkReal(-1.00000000000000))*(x1642)))+(((IkReal(-1000.00000000000))*(py)*(sj27)*(x1641))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(3.11526479750779))*(cj28)*(x1643)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((IkReal(3.11526479750779))*(x1644))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1645.value)*(((((x1642)*(x1646.value)))+(((IkReal(-1000.00000000000))*(x1641)*(x1643)))+(((IkReal(100.000000000000))*(x1641)))+(((IkReal(-1.00000000000000))*(x1642)))+(((IkReal(-1000.00000000000))*(py)*(sj27)*(x1641)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(3.11526479750779))*(cj28)*(x1643)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((IkReal(3.11526479750779))*(x1644)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1645.value)*(((((x1642)*(x1646.value)))+(((IkReal(-1000.00000000000))*(x1641)*(x1643)))+(((IkReal(100.000000000000))*(x1641)))+(((IkReal(-1.00000000000000))*(x1642)))+(((IkReal(-1000.00000000000))*(py)*(sj27)*(x1641)))))), ((IkReal(-1.24610591900312))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(3.11526479750779))*(cj28)*(x1643)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((IkReal(3.11526479750779))*(x1644)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1647=IKcos(j30);
IkReal x1648=IKsin(j30);
IkReal x1649=((py)*(sj27));
IkReal x1650=((cj27)*(px));
IkReal x1651=((IkReal(1.00000000000000))*(cj28));
IkReal x1652=((IkReal(0.321000000000000))*(x1648));
IkReal x1653=((IkReal(0.321000000000000))*(x1647));
evalcond[0]=((((sj28)*(x1653)))+(((IkReal(0.400000000000000))*(sj28)))+(((cj28)*(x1652)))+(pz));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.256800000000000))*(x1647)))+(((IkReal(0.200000000000000))*(x1650)))+(((IkReal(0.200000000000000))*(x1649)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((sj28)*(x1650)))+(x1652)+(((cj28)*(pz)))+(((sj28)*(x1649)))+(((IkReal(-0.100000000000000))*(sj28))));
evalcond[3]=((IkReal(0.400000000000000))+(x1653)+(((IkReal(-1.00000000000000))*(x1650)*(x1651)))+(((IkReal(0.100000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x1649)*(x1651)))+(((pz)*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((cj28)*(x1653)))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x1650)))+(((IkReal(-1.00000000000000))*(x1649)))+(((IkReal(-1.00000000000000))*(sj28)*(x1652))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x1654=((IkReal(250.000000000000))*(sj28));
IkReal x1655=((py)*(sj27));
IkReal x1656=((cj27)*(px));
CheckValue<IkReal> x1657 = IKPowWithIntegerCheck(cj28,-1.00000000000000);
if( !x1657.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1657.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-83.6987500000000))*(sj28)))+(((x1654)*(x1655)))+(((x1654)*(x1656)))+(((IkReal(-1250.00000000000))*(pp)*(sj28))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1655)))+(((IkReal(-0.778816199376947))*(x1656))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1657.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-83.6987500000000))*(sj28)))+(((x1654)*(x1655)))+(((x1654)*(x1656)))+(((IkReal(-1250.00000000000))*(pp)*(sj28)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1655)))+(((IkReal(-0.778816199376947))*(x1656)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1657.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-83.6987500000000))*(sj28)))+(((x1654)*(x1655)))+(((x1654)*(x1656)))+(((IkReal(-1250.00000000000))*(pp)*(sj28)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1655)))+(((IkReal(-0.778816199376947))*(x1656)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1658=IKcos(j30);
IkReal x1659=IKsin(j30);
IkReal x1660=((py)*(sj27));
IkReal x1661=((cj27)*(px));
IkReal x1662=((IkReal(1.00000000000000))*(cj28));
IkReal x1663=((IkReal(0.321000000000000))*(x1659));
IkReal x1664=((IkReal(0.321000000000000))*(x1658));
evalcond[0]=((((IkReal(0.400000000000000))*(sj28)))+(pz)+(((sj28)*(x1664)))+(((cj28)*(x1663))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1661)))+(((IkReal(0.200000000000000))*(x1660)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1658))));
evalcond[2]=((x1663)+(((cj28)*(pz)))+(((IkReal(-0.100000000000000))*(sj28)))+(((sj28)*(x1661)))+(((sj28)*(x1660))));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1661)*(x1662)))+(x1664)+(((IkReal(0.100000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x1660)*(x1662)))+(((pz)*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x1661)))+(((IkReal(-1.00000000000000))*(x1660)))+(((IkReal(-1.00000000000000))*(sj28)*(x1663)))+(((cj28)*(x1664))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x1665=((IkReal(1000.00000000000))*(cj28));
IkReal x1666=((py)*(sj27));
IkReal x1667=((IkReal(1000.00000000000))*(sj28));
IkReal x1668=((cj27)*(px));
CheckValue<IkReal> x1670 = IKPowWithIntegerCheck(sj28,2.00000000000000);
if( !x1670.valid ) {
    continue;
}
CheckValue<IkReal> x1671 = IKPowWithIntegerCheck(cj28,2.00000000000000);
if( !x1671.valid ) {
    continue;
}
CheckValue<IkReal> x1669 = IKatan2WithCheck(((gconst47)*(((((IkReal(-1.00000000000000))*(pz)*(x1665)))+(((IkReal(-1.00000000000000))*(x1667)*(x1668)))+(((IkReal(100.000000000000))*(sj28)))+(((IkReal(-1.00000000000000))*(x1666)*(x1667)))))),((gconst47)*(((((IkReal(-1.00000000000000))*(pz)*(x1667)))+(((IkReal(-400.000000000000))*(x1670.value)))+(((IkReal(-400.000000000000))*(x1671.value)))+(((IkReal(-100.000000000000))*(cj28)))+(((x1665)*(x1668)))+(((x1665)*(x1666)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1669.valid ) {
    continue;
}
j30array[0]=x1669.value;
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1672=IKcos(j30);
IkReal x1673=IKsin(j30);
IkReal x1674=((py)*(sj27));
IkReal x1675=((cj27)*(px));
IkReal x1676=((IkReal(1.00000000000000))*(cj28));
IkReal x1677=((IkReal(0.321000000000000))*(x1673));
IkReal x1678=((IkReal(0.321000000000000))*(x1672));
evalcond[0]=((((IkReal(0.400000000000000))*(sj28)))+(((cj28)*(x1677)))+(pz)+(((sj28)*(x1678))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1674)))+(((IkReal(0.200000000000000))*(x1675)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1672))));
evalcond[2]=((x1677)+(((cj28)*(pz)))+(((sj28)*(x1674)))+(((sj28)*(x1675)))+(((IkReal(-0.100000000000000))*(sj28))));
evalcond[3]=((IkReal(0.400000000000000))+(x1678)+(((IkReal(0.100000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x1674)*(x1676)))+(((pz)*(sj28)))+(((IkReal(-1.00000000000000))*(x1675)*(x1676))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(cj28)))+(((cj28)*(x1678)))+(((IkReal(-1.00000000000000))*(x1674)))+(((IkReal(-1.00000000000000))*(x1675)))+(((IkReal(-1.00000000000000))*(sj28)*(x1677))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1679=((cj27)*(px));
IkReal x1680=((IkReal(0.800000000000000))*(cj28));
IkReal x1681=((cj27)*(py));
IkReal x1682=((px)*(sj27));
IkReal x1683=((py)*(sj27));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j29))))), IkReal(6.28318530717959))));
evalcond[1]=((x1682)+(((IkReal(-1.00000000000000))*(x1681))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((x1680)*(x1683)))+(((IkReal(0.200000000000000))*(x1679)))+(((IkReal(-0.0800000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1683)))+(((x1679)*(x1680)))+(((IkReal(-0.800000000000000))*(pz)*(sj28))));
evalcond[3]=((x1681)+(((IkReal(-1.00000000000000))*(x1682))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst48;
CheckValue<IkReal> x1684 = IKPowWithIntegerCheck(cj28,2.00000000000000);
if( !x1684.valid ) {
    continue;
}
CheckValue<IkReal> x1685 = IKPowWithIntegerCheck(sj28,2.00000000000000);
if( !x1685.valid ) {
    continue;
}
gconst48=IKsign(((((IkReal(321.000000000000))*(x1684.value)))+(((IkReal(321.000000000000))*(x1685.value)))));
CheckValue<IkReal> x1686 = IKPowWithIntegerCheck(cj28,2.00000000000000);
if( !x1686.valid ) {
    continue;
}
CheckValue<IkReal> x1687 = IKPowWithIntegerCheck(sj28,2.00000000000000);
if( !x1687.valid ) {
    continue;
}
dummyeval[0]=((x1686.value)+(x1687.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj28;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj28;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1688=((cj27)*(py));
IkReal x1689=((px)*(sj27));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j28))))), IkReal(6.28318530717959))));
evalcond[1]=((x1689)+(((IkReal(-1.00000000000000))*(x1688))));
evalcond[2]=((IkReal(-0.0669590000000000))+(((IkReal(-0.800000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(py)*(sj27)))+(((IkReal(0.200000000000000))*(cj27)*(px))));
evalcond[3]=((x1688)+(((IkReal(-1.00000000000000))*(x1689))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27)))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(-0.311526479750779))+(((IkReal(3.11526479750779))*(cj27)*(px)))+(((IkReal(3.11526479750779))*(py)*(sj27)))), ((IkReal(-1.24610591900312))+(((IkReal(-3.11526479750779))*(pz)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[3];
IkReal x1690=IKcos(j30);
IkReal x1691=((py)*(sj27));
IkReal x1692=((cj27)*(px));
evalcond[0]=((IkReal(0.400000000000000))+(((IkReal(0.321000000000000))*(x1690)))+(pz));
evalcond[1]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1691)))+(((IkReal(-1.00000000000000))*(x1692)))+(((IkReal(0.321000000000000))*(IKsin(j30)))));
evalcond[2]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1692)))+(((IkReal(0.200000000000000))*(x1691)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1690))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x1693=((IkReal(1000.00000000000))*(pz));
IkReal x1694=((cj28)*(sj28));
IkReal x1695=((cj27)*(px));
IkReal x1696=((cj28)*(py)*(sj27));
CheckValue<IkReal> x1697 = IKPowWithIntegerCheck(cj28,-1.00000000000000);
if( !x1697.valid ) {
    continue;
}
CheckValue<IkReal> x1698 = IKPowWithIntegerCheck(sj28,2.00000000000000);
if( !x1698.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1697.value)*(((x1693)+(((IkReal(-100.000000000000))*(x1694)))+(((IkReal(-1.00000000000000))*(x1693)*(x1698.value)))+(((IkReal(1000.00000000000))*(py)*(sj27)*(x1694)))+(((IkReal(1000.00000000000))*(x1694)*(x1695))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(cj28)*(x1695)))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((IkReal(3.11526479750779))*(x1696))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1697.value)*(((x1693)+(((IkReal(-100.000000000000))*(x1694)))+(((IkReal(-1.00000000000000))*(x1693)*(x1698.value)))+(((IkReal(1000.00000000000))*(py)*(sj27)*(x1694)))+(((IkReal(1000.00000000000))*(x1694)*(x1695)))))))+IKsqr(((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(cj28)*(x1695)))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((IkReal(3.11526479750779))*(x1696)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1697.value)*(((x1693)+(((IkReal(-100.000000000000))*(x1694)))+(((IkReal(-1.00000000000000))*(x1693)*(x1698.value)))+(((IkReal(1000.00000000000))*(py)*(sj27)*(x1694)))+(((IkReal(1000.00000000000))*(x1694)*(x1695)))))), ((IkReal(-1.24610591900312))+(((IkReal(3.11526479750779))*(cj28)*(x1695)))+(((IkReal(-0.311526479750779))*(cj28)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))+(((IkReal(3.11526479750779))*(x1696)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1699=IKcos(j30);
IkReal x1700=IKsin(j30);
IkReal x1701=((py)*(sj27));
IkReal x1702=((IkReal(1.00000000000000))*(cj28));
IkReal x1703=((cj27)*(px));
IkReal x1704=((IkReal(1.00000000000000))*(sj28));
IkReal x1705=((IkReal(0.321000000000000))*(x1700));
IkReal x1706=((IkReal(0.321000000000000))*(x1699));
evalcond[0]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x1706)))+(pz)+(((IkReal(-1.00000000000000))*(cj28)*(x1705))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1701)))+(((IkReal(0.200000000000000))*(x1703)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1699))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1702)*(x1703)))+(x1706)+(((IkReal(0.100000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x1701)*(x1702)))+(((pz)*(sj28))));
evalcond[3]=((((IkReal(-1.00000000000000))*(pz)*(x1702)))+(x1705)+(((IkReal(0.100000000000000))*(sj28)))+(((IkReal(-1.00000000000000))*(x1703)*(x1704)))+(((IkReal(-1.00000000000000))*(x1701)*(x1704))));
evalcond[4]=((IkReal(0.100000000000000))+(((sj28)*(x1705)))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x1703)))+(((IkReal(-1.00000000000000))*(x1701)))+(((cj28)*(x1706))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x1707=((IkReal(250.000000000000))*(sj28));
IkReal x1708=((py)*(sj27));
IkReal x1709=((cj27)*(px));
CheckValue<IkReal> x1710 = IKPowWithIntegerCheck(cj28,-1.00000000000000);
if( !x1710.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1710.value)*(((((IkReal(1250.00000000000))*(pp)*(sj28)))+(((IkReal(-1.00000000000000))*(x1707)*(x1709)))+(((IkReal(-1.00000000000000))*(x1707)*(x1708)))+(((IkReal(83.6987500000000))*(sj28)))+(((IkReal(1000.00000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1708)))+(((IkReal(-0.778816199376947))*(x1709))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1710.value)*(((((IkReal(1250.00000000000))*(pp)*(sj28)))+(((IkReal(-1.00000000000000))*(x1707)*(x1709)))+(((IkReal(-1.00000000000000))*(x1707)*(x1708)))+(((IkReal(83.6987500000000))*(sj28)))+(((IkReal(1000.00000000000))*(pz)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1708)))+(((IkReal(-0.778816199376947))*(x1709)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1710.value)*(((((IkReal(1250.00000000000))*(pp)*(sj28)))+(((IkReal(-1.00000000000000))*(x1707)*(x1709)))+(((IkReal(-1.00000000000000))*(x1707)*(x1708)))+(((IkReal(83.6987500000000))*(sj28)))+(((IkReal(1000.00000000000))*(pz)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(x1708)))+(((IkReal(-0.778816199376947))*(x1709)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1711=IKcos(j30);
IkReal x1712=IKsin(j30);
IkReal x1713=((py)*(sj27));
IkReal x1714=((IkReal(1.00000000000000))*(cj28));
IkReal x1715=((cj27)*(px));
IkReal x1716=((IkReal(1.00000000000000))*(sj28));
IkReal x1717=((IkReal(0.321000000000000))*(x1712));
IkReal x1718=((IkReal(0.321000000000000))*(x1711));
evalcond[0]=((((IkReal(0.400000000000000))*(sj28)))+(pz)+(((IkReal(-1.00000000000000))*(cj28)*(x1717)))+(((sj28)*(x1718))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1715)))+(((IkReal(0.200000000000000))*(x1713)))+(((IkReal(0.256800000000000))*(x1711)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(x1714)*(x1715)))+(x1718)+(((IkReal(-1.00000000000000))*(x1713)*(x1714)))+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
evalcond[3]=((x1717)+(((IkReal(-1.00000000000000))*(x1713)*(x1716)))+(((IkReal(0.100000000000000))*(sj28)))+(((IkReal(-1.00000000000000))*(x1715)*(x1716)))+(((IkReal(-1.00000000000000))*(pz)*(x1714))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x1713)))+(((IkReal(-1.00000000000000))*(x1715)))+(((cj28)*(x1718)))+(((sj28)*(x1717))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x1719=((IkReal(1000.00000000000))*(cj28));
IkReal x1720=((py)*(sj27));
IkReal x1721=((IkReal(1000.00000000000))*(sj28));
IkReal x1722=((cj27)*(px));
CheckValue<IkReal> x1724 = IKPowWithIntegerCheck(sj28,2.00000000000000);
if( !x1724.valid ) {
    continue;
}
CheckValue<IkReal> x1725 = IKPowWithIntegerCheck(cj28,2.00000000000000);
if( !x1725.valid ) {
    continue;
}
CheckValue<IkReal> x1723 = IKatan2WithCheck(((gconst48)*(((((IkReal(-100.000000000000))*(sj28)))+(((x1721)*(x1722)))+(((x1720)*(x1721)))+(((pz)*(x1719)))))),((gconst48)*(((((IkReal(-400.000000000000))*(x1724.value)))+(((IkReal(-400.000000000000))*(x1725.value)))+(((IkReal(-1.00000000000000))*(pz)*(x1721)))+(((IkReal(-100.000000000000))*(cj28)))+(((x1719)*(x1720)))+(((x1719)*(x1722)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1723.valid ) {
    continue;
}
j30array[0]=x1723.value;
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[5];
IkReal x1726=IKcos(j30);
IkReal x1727=IKsin(j30);
IkReal x1728=((py)*(sj27));
IkReal x1729=((IkReal(1.00000000000000))*(cj28));
IkReal x1730=((cj27)*(px));
IkReal x1731=((IkReal(1.00000000000000))*(sj28));
IkReal x1732=((IkReal(0.321000000000000))*(x1727));
IkReal x1733=((IkReal(0.321000000000000))*(x1726));
evalcond[0]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x1733)))+(((IkReal(-1.00000000000000))*(cj28)*(x1732)))+(pz));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.200000000000000))*(x1730)))+(((IkReal(0.200000000000000))*(x1728)))+(((IkReal(0.256800000000000))*(x1726))));
evalcond[2]=((IkReal(0.400000000000000))+(x1733)+(((IkReal(-1.00000000000000))*(x1728)*(x1729)))+(((IkReal(-1.00000000000000))*(x1729)*(x1730)))+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1728)*(x1731)))+(x1732)+(((IkReal(-1.00000000000000))*(pz)*(x1729)))+(((IkReal(-1.00000000000000))*(x1730)*(x1731)))+(((IkReal(0.100000000000000))*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((cj28)*(x1733)))+(((IkReal(0.400000000000000))*(cj28)))+(((sj28)*(x1732)))+(((IkReal(-1.00000000000000))*(x1728)))+(((IkReal(-1.00000000000000))*(x1730))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x1734=((IkReal(250.000000000000))*(sj28));
IkReal x1735=((py)*(sj27));
IkReal x1736=((cj27)*(px));
CheckValue<IkReal> x1737 = IKPowWithIntegerCheck(cj28,-1.00000000000000);
if( !x1737.valid ) {
    continue;
}
CheckValue<IkReal> x1738 = IKPowWithIntegerCheck(cj29,-1.00000000000000);
if( !x1738.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1737.value)*(x1738.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-83.6987500000000))*(sj28)))+(((IkReal(-1250.00000000000))*(pp)*(sj28)))+(((x1734)*(x1735)))+(((x1734)*(x1736))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1736)))+(((IkReal(-0.778816199376947))*(x1735)))+(((IkReal(3.89408099688474))*(pp))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1737.value)*(x1738.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-83.6987500000000))*(sj28)))+(((IkReal(-1250.00000000000))*(pp)*(sj28)))+(((x1734)*(x1735)))+(((x1734)*(x1736)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1736)))+(((IkReal(-0.778816199376947))*(x1735)))+(((IkReal(3.89408099688474))*(pp)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1737.value)*(x1738.value)*(((((IkReal(-1000.00000000000))*(pz)))+(((IkReal(-83.6987500000000))*(sj28)))+(((IkReal(-1250.00000000000))*(pp)*(sj28)))+(((x1734)*(x1735)))+(((x1734)*(x1736)))))), ((IkReal(-0.985362149532710))+(((IkReal(-0.778816199376947))*(x1736)))+(((IkReal(-0.778816199376947))*(x1735)))+(((IkReal(3.89408099688474))*(pp)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x1739=IKsin(j30);
IkReal x1740=IKcos(j30);
IkReal x1741=((IkReal(1.00000000000000))*(py));
IkReal x1742=((cj29)*(sj28));
IkReal x1743=((cj27)*(px));
IkReal x1744=((cj28)*(cj29));
IkReal x1745=((py)*(sj27));
IkReal x1746=((px)*(sj27));
IkReal x1747=((IkReal(0.321000000000000))*(x1739));
IkReal x1748=((IkReal(0.321000000000000))*(x1740));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(x1741)))+(x1746)+(((sj29)*(x1747))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1745)))+(((IkReal(0.200000000000000))*(x1743)))+(((IkReal(0.256800000000000))*(x1740)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj28)))+(((x1744)*(x1747)))+(pz)+(((sj28)*(x1748))));
evalcond[3]=((IkReal(0.400000000000000))+(x1748)+(((IkReal(-1.00000000000000))*(cj28)*(sj27)*(x1741)))+(((IkReal(-1.00000000000000))*(cj28)*(x1743)))+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(sj27)*(x1741)))+(((IkReal(-1.00000000000000))*(x1743)))+(((cj28)*(x1748)))+(((IkReal(-1.00000000000000))*(x1742)*(x1747))));
evalcond[5]=((((pz)*(x1744)))+(x1747)+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x1741)))+(((sj29)*(x1746)))+(((x1742)*(x1745)))+(((x1742)*(x1743)))+(((IkReal(-0.100000000000000))*(x1742))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x1749=((IkReal(3.11526479750779))*(cj28));
CheckValue<IkReal> x1750 = IKPowWithIntegerCheck(sj29,-1.00000000000000);
if( !x1750.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1750.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.24610591900312))+(((py)*(sj27)*(x1749)))+(((IkReal(-0.311526479750779))*(cj28)))+(((cj27)*(px)*(x1749)))+(((IkReal(-3.11526479750779))*(pz)*(sj28))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1750.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-1.24610591900312))+(((py)*(sj27)*(x1749)))+(((IkReal(-0.311526479750779))*(cj28)))+(((cj27)*(px)*(x1749)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1750.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-1.24610591900312))+(((py)*(sj27)*(x1749)))+(((IkReal(-0.311526479750779))*(cj28)))+(((cj27)*(px)*(x1749)))+(((IkReal(-3.11526479750779))*(pz)*(sj28)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x1751=IKsin(j30);
IkReal x1752=IKcos(j30);
IkReal x1753=((IkReal(1.00000000000000))*(py));
IkReal x1754=((cj29)*(sj28));
IkReal x1755=((cj27)*(px));
IkReal x1756=((cj28)*(cj29));
IkReal x1757=((py)*(sj27));
IkReal x1758=((px)*(sj27));
IkReal x1759=((IkReal(0.321000000000000))*(x1751));
IkReal x1760=((IkReal(0.321000000000000))*(x1752));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj27)*(x1753)))+(x1758)+(((sj29)*(x1759))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1757)))+(((IkReal(0.200000000000000))*(x1755)))+(((IkReal(0.256800000000000))*(x1752)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x1760)))+(pz)+(((x1756)*(x1759))));
evalcond[3]=((IkReal(0.400000000000000))+(x1760)+(((IkReal(-1.00000000000000))*(cj28)*(sj27)*(x1753)))+(((IkReal(-1.00000000000000))*(cj28)*(x1755)))+(((IkReal(0.100000000000000))*(cj28)))+(((pz)*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(sj27)*(x1753)))+(((cj28)*(x1760)))+(((IkReal(-1.00000000000000))*(x1755)))+(((IkReal(-1.00000000000000))*(x1754)*(x1759))));
evalcond[5]=((((pz)*(x1756)))+(((x1754)*(x1757)))+(((x1754)*(x1755)))+(x1759)+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x1753)))+(((sj29)*(x1758)))+(((IkReal(-0.100000000000000))*(x1754))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
CheckValue<IkReal> x1761 = IKPowWithIntegerCheck(sj29,-1.00000000000000);
if( !x1761.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00311526479750779))*(x1761.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00311526479750779))*(x1761.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))))+IKsqr(((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j30array[0]=IKatan2(((IkReal(0.00311526479750779))*(x1761.value)*(((((IkReal(1000.00000000000))*(cj27)*(py)))+(((IkReal(-1000.00000000000))*(px)*(sj27)))))), ((IkReal(-0.985362149532710))+(((IkReal(3.89408099688474))*(pp)))+(((IkReal(-0.778816199376947))*(py)*(sj27)))+(((IkReal(-0.778816199376947))*(cj27)*(px)))));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x1762=IKsin(j30);
IkReal x1763=IKcos(j30);
IkReal x1764=((IkReal(1.00000000000000))*(py));
IkReal x1765=((cj29)*(sj28));
IkReal x1766=((cj27)*(px));
IkReal x1767=((cj28)*(cj29));
IkReal x1768=((py)*(sj27));
IkReal x1769=((px)*(sj27));
IkReal x1770=((IkReal(0.321000000000000))*(x1762));
IkReal x1771=((IkReal(0.321000000000000))*(x1763));
evalcond[0]=((((sj29)*(x1770)))+(x1769)+(((IkReal(-1.00000000000000))*(cj27)*(x1764))));
evalcond[1]=((IkReal(0.253041000000000))+(((IkReal(0.200000000000000))*(x1768)))+(((IkReal(0.200000000000000))*(x1766)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.256800000000000))*(x1763))));
evalcond[2]=((((IkReal(0.400000000000000))*(sj28)))+(((sj28)*(x1771)))+(((x1767)*(x1770)))+(pz));
evalcond[3]=((IkReal(0.400000000000000))+(((IkReal(-1.00000000000000))*(cj28)*(x1766)))+(x1771)+(((IkReal(0.100000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(cj28)*(sj27)*(x1764)))+(((pz)*(sj28))));
evalcond[4]=((IkReal(0.100000000000000))+(((IkReal(-1.00000000000000))*(x1766)))+(((IkReal(0.400000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x1765)*(x1770)))+(((cj28)*(x1771)))+(((IkReal(-1.00000000000000))*(sj27)*(x1764))));
evalcond[5]=((((sj29)*(x1769)))+(x1770)+(((x1765)*(x1768)))+(((x1765)*(x1766)))+(((IkReal(-0.100000000000000))*(x1765)))+(((pz)*(x1767)))+(((IkReal(-1.00000000000000))*(cj27)*(sj29)*(x1764))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x154=((sj27)*(sj29));
IkReal x155=((cj27)*(sj29));
IkReal x156=((cj28)*(sj29));
IkReal x157=((cj28)*(cj30));
IkReal x158=((IkReal(1.00000000000000))*(sj30));
IkReal x159=((IkReal(1.00000000000000))*(cj29));
IkReal x160=((cj29)*(x158));
IkReal x161=((IkReal(1.00000000000000))*(cj30)*(sj28));
IkReal x162=((((IkReal(-1.00000000000000))*(x157)*(x159)))+(((sj28)*(sj30))));
IkReal x163=((((IkReal(-1.00000000000000))*(sj27)*(x159)))+(((sj28)*(x155))));
IkReal x164=((((sj28)*(x154)))+(((cj27)*(cj29))));
IkReal x165=((((IkReal(-1.00000000000000))*(sj28)*(x160)))+(x157));
IkReal x166=((cj27)*(x165));
IkReal x167=((((IkReal(-1.00000000000000))*(cj30)*(sj28)*(x159)))+(((IkReal(-1.00000000000000))*(cj28)*(x158))));
IkReal x168=((((IkReal(-1.00000000000000))*(x161)))+(((IkReal(-1.00000000000000))*(cj28)*(x160))));
IkReal x169=((cj27)*(x167));
IkReal x170=((((sj27)*(x165)))+(((sj30)*(x155))));
IkReal x171=((x166)+(((IkReal(-1.00000000000000))*(sj30)*(x154))));
IkReal x172=((((sj27)*(x167)))+(((cj30)*(x155))));
IkReal x173=((((IkReal(-1.00000000000000))*(cj30)*(x154)))+(x169));
new_r00=((((r20)*(x162)))+(((r10)*(x172)))+(((r00)*(((((IkReal(-1.00000000000000))*(cj30)*(x154)))+(x169))))));
new_r01=((((r01)*(x173)))+(((r21)*(x162)))+(((r11)*(x172))));
new_r02=((((r22)*(x162)))+(((r12)*(x172)))+(((r02)*(x173))));
new_r10=((((r00)*(x163)))+(((r20)*(x156)))+(((r10)*(x164))));
new_r11=((((r01)*(x163)))+(((r21)*(x156)))+(((r11)*(x164))));
new_r12=((((r12)*(x164)))+(((r22)*(x156)))+(((r02)*(x163))));
new_r20=((((r00)*(x171)))+(((r20)*(x168)))+(((r10)*(x170))));
new_r21=((((r01)*(x171)))+(((r21)*(x168)))+(((r11)*(x170))));
new_r22=((((r22)*(x168)))+(((r02)*(((((IkReal(-1.00000000000000))*(x154)*(x158)))+(x166)))))+(((r12)*(x170))));
{
IkReal j32array[2], cj32array[2], sj32array[2];
bool j32valid[2]={false};
_nj32 = 2;
cj32array[0]=new_r22;
if( cj32array[0] >= -1-IKFAST_SINCOS_THRESH && cj32array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j32valid[0] = j32valid[1] = true;
    j32array[0] = IKacos(cj32array[0]);
    sj32array[0] = IKsin(j32array[0]);
    cj32array[1] = cj32array[0];
    j32array[1] = -j32array[0];
    sj32array[1] = -sj32array[0];
}
else if( isnan(cj32array[0]) )
{
    // probably any value will work
    j32valid[0] = true;
    cj32array[0] = 1; sj32array[0] = 0; j32array[0] = 0;
}
for(int ij32 = 0; ij32 < 2; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 2; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];

{
IkReal dummyeval[1];
IkReal gconst89;
gconst89=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst90;
gconst90=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst91;
gconst91=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x174=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j32))), IkReal(6.28318530717959))));
evalcond[1]=x174;
evalcond[2]=x174;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x174;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
IkReal j33mul = 1;
j33=0;
IkReal j31mul=IkReal(-1.00000000000000);
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j31=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].fmul = j31mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].fmul = j33mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x175=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=x175;
evalcond[2]=x175;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j31array[2], cj31array[2], sj31array[2];
bool j31valid[2]={false};
_nj31 = 2;
CheckValue<IkReal> x177 = IKatan2WithCheck(new_r02,new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x177.valid ) {
    continue;
}
IkReal x176=x177.value;
j31array[0]=((IkReal(-1.00000000000000))*(x176));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
j31array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x176))));
sj31array[1]=IKsin(j31array[1]);
cj31array[1]=IKcos(j31array[1]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
if( j31array[1] > IKPI )
{
    j31array[1]-=IK2PI;
}
else if( j31array[1] < -IKPI )
{    j31array[1]+=IK2PI;
}
j31valid[1] = true;
for(int ij31 = 0; ij31 < 2; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 2; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j31))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j31)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst125;
CheckValue<IkReal> x178 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x178.valid ) {
    continue;
}
CheckValue<IkReal> x179 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x179.valid ) {
    continue;
}
gconst125=IKsign(((x178.value)+(x179.value)));
CheckValue<IkReal> x180 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x180.valid ) {
    continue;
}
CheckValue<IkReal> x181 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x181.valid ) {
    continue;
}
dummyeval[0]=((x180.value)+(x181.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst126;
CheckValue<IkReal> x182 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x182.valid ) {
    continue;
}
CheckValue<IkReal> x183 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x183.valid ) {
    continue;
}
gconst126=IKsign(((x182.value)+(x183.value)));
CheckValue<IkReal> x184 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x184.valid ) {
    continue;
}
CheckValue<IkReal> x185 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x185.valid ) {
    continue;
}
dummyeval[0]=((x184.value)+(x185.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
IkReal x186=((IkReal(1.00000000000000))*(sj31));
CheckValue<IkReal> x187 = IKatan2WithCheck(((gconst126)*(((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x186)))))),((gconst126)*(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x186)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x187.valid ) {
    continue;
}
j33array[0]=x187.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x188=IKsin(j33);
IkReal x189=IKcos(j33);
IkReal x190=((IkReal(1.00000000000000))*(sj31));
IkReal x191=((IkReal(1.00000000000000))*(x188));
IkReal x192=((sj31)*(x189));
IkReal x193=((IkReal(1.00000000000000))*(x189));
IkReal x194=((cj31)*(x191));
evalcond[0]=((((cj31)*(new_r00)))+(x189)+(((new_r10)*(sj31))));
evalcond[1]=((((cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(x191)))+(((new_r11)*(sj31))));
evalcond[2]=((((cj31)*(x189)))+(((sj31)*(x188)))+(new_r00));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(new_r00)*(x190))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x193)))+(((IkReal(-1.00000000000000))*(new_r01)*(x190))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x194)))+(x192)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x194)))+(x192)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x188)*(x190)))+(((IkReal(-1.00000000000000))*(cj31)*(x193)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
IkReal x195=((IkReal(1.00000000000000))*(new_r00));
CheckValue<IkReal> x196 = IKatan2WithCheck(((gconst125)*(((((IkReal(-1.00000000000000))*(sj31)*(x195)))+(((cj31)*(new_r01)))))),((gconst125)*(((((IkReal(-1.00000000000000))*(cj31)*(x195)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj31)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x196.valid ) {
    continue;
}
j33array[0]=x196.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x197=IKsin(j33);
IkReal x198=IKcos(j33);
IkReal x199=((IkReal(1.00000000000000))*(sj31));
IkReal x200=((IkReal(1.00000000000000))*(x197));
IkReal x201=((sj31)*(x198));
IkReal x202=((IkReal(1.00000000000000))*(x198));
IkReal x203=((cj31)*(x200));
evalcond[0]=((((cj31)*(new_r00)))+(x198)+(((new_r10)*(sj31))));
evalcond[1]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(((IkReal(-1.00000000000000))*(x200))));
evalcond[2]=((((sj31)*(x197)))+(new_r00)+(((cj31)*(x198))));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x200)))+(((IkReal(-1.00000000000000))*(new_r00)*(x199))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x202)))+(((IkReal(-1.00000000000000))*(new_r01)*(x199))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x203)))+(x201)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x203)))+(x201)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x197)*(x199)))+(((IkReal(-1.00000000000000))*(cj31)*(x202)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x204 = IKatan2WithCheck(((gconst91)*(new_r21)),((IkReal(-1.00000000000000))*(gconst91)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x204.valid ) {
    continue;
}
j33array[0]=x204.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[2];
evalcond[0]=((((sj32)*(IKcos(j33))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj32)*(IKsin(j33))))+(new_r21));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst92;
gconst92=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst93;
gconst93=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x205=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j32))), IkReal(6.28318530717959))));
evalcond[1]=x205;
evalcond[2]=x205;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x205;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst94;
gconst94=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst95;
gconst95=IKsign(((((new_r12)*(sj33)))+(((IkReal(-1.00000000000000))*(cj33)*(new_r02)))));
dummyeval[0]=((((new_r12)*(sj33)))+(((IkReal(-1.00000000000000))*(cj33)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal gconst96;
CheckValue<IkReal> x206 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x206.valid ) {
    continue;
}
gconst96=((IkReal(-1.00000000000000))*(x206.value));
IkReal gconst97;
gconst97=IKsin(gconst96);
IkReal gconst98;
gconst98=IKcos(gconst96);
IkReal x207=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst96)))+(j33))))), IkReal(6.28318530717959))));
evalcond[1]=x207;
evalcond[2]=x207;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x207;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst102;
gconst102=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst103;
gconst103=IKsign(((((IkReal(-1.00000000000000))*(gconst98)*(new_r02)))+(((gconst97)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(gconst98)*(new_r02)))+(((gconst97)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x208=((gconst103)*(new_r01));
CheckValue<IkReal> x209 = IKatan2WithCheck(((new_r02)*(x208)),((IkReal(-1.00000000000000))*(new_r12)*(x208)),IKFAST_ATAN2_MAGTHRESH);
if( !x209.valid ) {
    continue;
}
j31array[0]=x209.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x210=IKcos(j31);
IkReal x211=IKsin(j31);
IkReal x212=((IkReal(1.00000000000000))*(gconst98));
IkReal x213=((IkReal(1.00000000000000))*(gconst97));
IkReal x214=((gconst97)*(x211));
IkReal x215=((IkReal(1.00000000000000))*(x211));
IkReal x216=((x210)*(x212));
evalcond[0]=((((new_r02)*(x210)))+(((new_r12)*(x211))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x215)))+(((new_r12)*(x210))));
evalcond[2]=((gconst97)+(((new_r01)*(x210)))+(((new_r11)*(x211))));
evalcond[3]=((((gconst97)*(x210)))+(new_r01)+(((gconst98)*(x211))));
evalcond[4]=((x214)+(new_r00)+(((IkReal(-1.00000000000000))*(x216))));
evalcond[5]=((x214)+(new_r11)+(((IkReal(-1.00000000000000))*(x216))));
evalcond[6]=((((new_r00)*(x210)))+(((IkReal(-1.00000000000000))*(x212)))+(((new_r10)*(x211))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x210)*(x213)))+(((IkReal(-1.00000000000000))*(x211)*(x212)))+(new_r10));
evalcond[8]=((((IkReal(-1.00000000000000))*(x213)))+(((IkReal(-1.00000000000000))*(new_r00)*(x215)))+(((new_r10)*(x210))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x215)))+(((IkReal(-1.00000000000000))*(x212)))+(((new_r11)*(x210))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x217=((gconst102)*(gconst97));
CheckValue<IkReal> x218 = IKatan2WithCheck(((new_r02)*(x217)),((IkReal(-1.00000000000000))*(new_r12)*(x217)),IKFAST_ATAN2_MAGTHRESH);
if( !x218.valid ) {
    continue;
}
j31array[0]=x218.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x219=IKcos(j31);
IkReal x220=IKsin(j31);
IkReal x221=((IkReal(1.00000000000000))*(gconst98));
IkReal x222=((IkReal(1.00000000000000))*(gconst97));
IkReal x223=((gconst97)*(x220));
IkReal x224=((IkReal(1.00000000000000))*(x220));
IkReal x225=((x219)*(x221));
evalcond[0]=((((new_r12)*(x220)))+(((new_r02)*(x219))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x224)))+(((new_r12)*(x219))));
evalcond[2]=((gconst97)+(((new_r11)*(x220)))+(((new_r01)*(x219))));
evalcond[3]=((((gconst97)*(x219)))+(new_r01)+(((gconst98)*(x220))));
evalcond[4]=((x223)+(new_r00)+(((IkReal(-1.00000000000000))*(x225))));
evalcond[5]=((x223)+(new_r11)+(((IkReal(-1.00000000000000))*(x225))));
evalcond[6]=((((new_r00)*(x219)))+(((new_r10)*(x220)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x219)*(x222)))+(((IkReal(-1.00000000000000))*(x220)*(x221)))+(new_r10));
evalcond[8]=((((new_r10)*(x219)))+(((IkReal(-1.00000000000000))*(x222)))+(((IkReal(-1.00000000000000))*(new_r00)*(x224))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x224)))+(((new_r11)*(x219)))+(((IkReal(-1.00000000000000))*(x221))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst99;
CheckValue<IkReal> x226 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x226.valid ) {
    continue;
}
gconst99=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x226.value))));
IkReal gconst100;
gconst100=IKsin(gconst99);
IkReal gconst101;
gconst101=IKcos(gconst99);
IkReal x227=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst99)))+(j33))))), IkReal(6.28318530717959))));
evalcond[1]=x227;
evalcond[2]=x227;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x227;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst104;
gconst104=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst105;
gconst105=IKsign(((((gconst100)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst101)*(new_r02)))));
dummyeval[0]=((((gconst100)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst101)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x228=((gconst105)*(new_r01));
CheckValue<IkReal> x229 = IKatan2WithCheck(((new_r02)*(x228)),((IkReal(-1.00000000000000))*(new_r12)*(x228)),IKFAST_ATAN2_MAGTHRESH);
if( !x229.valid ) {
    continue;
}
j31array[0]=x229.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x230=IKcos(j31);
IkReal x231=IKsin(j31);
IkReal x232=((IkReal(1.00000000000000))*(gconst101));
IkReal x233=((gconst100)*(x231));
IkReal x234=((gconst101)*(x231));
IkReal x235=((IkReal(1.00000000000000))*(x231));
IkReal x236=((gconst100)*(x230));
IkReal x237=((x230)*(x232));
evalcond[0]=((((new_r02)*(x230)))+(((new_r12)*(x231))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x235)))+(((new_r12)*(x230))));
evalcond[2]=((((new_r11)*(x231)))+(((new_r01)*(x230)))+(gconst100));
evalcond[3]=((x236)+(x234)+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x237)))+(x233)+(new_r00));
evalcond[5]=((((IkReal(-1.00000000000000))*(x237)))+(x233)+(new_r11));
evalcond[6]=((((new_r10)*(x231)))+(((new_r00)*(x230)))+(((IkReal(-1.00000000000000))*(x232))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x231)*(x232)))+(new_r10)+(((IkReal(-1.00000000000000))*(x236))));
evalcond[8]=((((new_r10)*(x230)))+(((IkReal(-1.00000000000000))*(gconst100)))+(((IkReal(-1.00000000000000))*(new_r00)*(x235))));
evalcond[9]=((((new_r11)*(x230)))+(((IkReal(-1.00000000000000))*(x232)))+(((IkReal(-1.00000000000000))*(new_r01)*(x235))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x238=((gconst100)*(gconst104));
CheckValue<IkReal> x239 = IKatan2WithCheck(((new_r02)*(x238)),((IkReal(-1.00000000000000))*(new_r12)*(x238)),IKFAST_ATAN2_MAGTHRESH);
if( !x239.valid ) {
    continue;
}
j31array[0]=x239.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x240=IKcos(j31);
IkReal x241=IKsin(j31);
IkReal x242=((IkReal(1.00000000000000))*(gconst101));
IkReal x243=((gconst100)*(x241));
IkReal x244=((gconst101)*(x241));
IkReal x245=((IkReal(1.00000000000000))*(x241));
IkReal x246=((gconst100)*(x240));
IkReal x247=((x240)*(x242));
evalcond[0]=((((new_r12)*(x241)))+(((new_r02)*(x240))));
evalcond[1]=((((new_r12)*(x240)))+(((IkReal(-1.00000000000000))*(new_r02)*(x245))));
evalcond[2]=((((new_r01)*(x240)))+(gconst100)+(((new_r11)*(x241))));
evalcond[3]=((x246)+(x244)+(new_r01));
evalcond[4]=((x243)+(((IkReal(-1.00000000000000))*(x247)))+(new_r00));
evalcond[5]=((x243)+(((IkReal(-1.00000000000000))*(x247)))+(new_r11));
evalcond[6]=((((new_r00)*(x240)))+(((IkReal(-1.00000000000000))*(x242)))+(((new_r10)*(x241))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x246)))+(((IkReal(-1.00000000000000))*(x241)*(x242)))+(new_r10));
evalcond[8]=((((IkReal(-1.00000000000000))*(gconst100)))+(((IkReal(-1.00000000000000))*(new_r00)*(x245)))+(((new_r10)*(x240))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x245)))+(((IkReal(-1.00000000000000))*(x242)))+(((new_r11)*(x240))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x248=((gconst95)*(new_r01));
CheckValue<IkReal> x249 = IKatan2WithCheck(((new_r02)*(x248)),((IkReal(-1.00000000000000))*(new_r12)*(x248)),IKFAST_ATAN2_MAGTHRESH);
if( !x249.valid ) {
    continue;
}
j31array[0]=x249.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x250=IKcos(j31);
IkReal x251=IKsin(j31);
IkReal x252=((IkReal(1.00000000000000))*(cj33));
IkReal x253=((IkReal(1.00000000000000))*(sj33));
IkReal x254=((sj33)*(x251));
IkReal x255=((IkReal(1.00000000000000))*(x251));
IkReal x256=((x250)*(x252));
evalcond[0]=((((new_r02)*(x250)))+(((new_r12)*(x251))));
evalcond[1]=((((new_r12)*(x250)))+(((IkReal(-1.00000000000000))*(new_r02)*(x255))));
evalcond[2]=((((new_r01)*(x250)))+(sj33)+(((new_r11)*(x251))));
evalcond[3]=((((cj33)*(x251)))+(((sj33)*(x250)))+(new_r01));
evalcond[4]=((x254)+(new_r00)+(((IkReal(-1.00000000000000))*(x256))));
evalcond[5]=((x254)+(new_r11)+(((IkReal(-1.00000000000000))*(x256))));
evalcond[6]=((((new_r00)*(x250)))+(((new_r10)*(x251)))+(((IkReal(-1.00000000000000))*(x252))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x250)*(x253)))+(((IkReal(-1.00000000000000))*(x251)*(x252)))+(new_r10));
evalcond[8]=((((new_r10)*(x250)))+(((IkReal(-1.00000000000000))*(new_r00)*(x255)))+(((IkReal(-1.00000000000000))*(x253))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x255)))+(((new_r11)*(x250)))+(((IkReal(-1.00000000000000))*(x252))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x257=((gconst94)*(sj33));
CheckValue<IkReal> x258 = IKatan2WithCheck(((new_r02)*(x257)),((IkReal(-1.00000000000000))*(new_r12)*(x257)),IKFAST_ATAN2_MAGTHRESH);
if( !x258.valid ) {
    continue;
}
j31array[0]=x258.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x259=IKcos(j31);
IkReal x260=IKsin(j31);
IkReal x261=((IkReal(1.00000000000000))*(cj33));
IkReal x262=((IkReal(1.00000000000000))*(sj33));
IkReal x263=((sj33)*(x260));
IkReal x264=((IkReal(1.00000000000000))*(x260));
IkReal x265=((x259)*(x261));
evalcond[0]=((((new_r12)*(x260)))+(((new_r02)*(x259))));
evalcond[1]=((((new_r12)*(x259)))+(((IkReal(-1.00000000000000))*(new_r02)*(x264))));
evalcond[2]=((((new_r01)*(x259)))+(sj33)+(((new_r11)*(x260))));
evalcond[3]=((((sj33)*(x259)))+(((cj33)*(x260)))+(new_r01));
evalcond[4]=((x263)+(new_r00)+(((IkReal(-1.00000000000000))*(x265))));
evalcond[5]=((x263)+(new_r11)+(((IkReal(-1.00000000000000))*(x265))));
evalcond[6]=((((new_r00)*(x259)))+(((IkReal(-1.00000000000000))*(x261)))+(((new_r10)*(x260))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x259)*(x262)))+(new_r10)+(((IkReal(-1.00000000000000))*(x260)*(x261))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x264)))+(((new_r10)*(x259)))+(((IkReal(-1.00000000000000))*(x262))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x264)))+(((new_r11)*(x259)))+(((IkReal(-1.00000000000000))*(x261))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x266=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=x266;
evalcond[2]=x266;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst106;
gconst106=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst107;
gconst107=IKsign(((((cj33)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj33)))));
dummyeval[0]=((((cj33)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj33))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal gconst108;
CheckValue<IkReal> x267 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x267.valid ) {
    continue;
}
gconst108=((IkReal(-1.00000000000000))*(x267.value));
IkReal gconst109;
gconst109=IKsin(gconst108);
IkReal gconst110;
gconst110=IKcos(gconst108);
IkReal x268=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((j33)+(((IkReal(-1.00000000000000))*(gconst108))))))), IkReal(6.28318530717959))));
evalcond[1]=x268;
evalcond[2]=x268;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst114;
gconst114=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst115;
gconst115=IKsign(((((gconst110)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst109)*(new_r02)))));
dummyeval[0]=((((gconst110)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst109)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x269=((gconst115)*(new_r00));
CheckValue<IkReal> x270 = IKatan2WithCheck(((new_r02)*(x269)),((IkReal(-1.00000000000000))*(new_r12)*(x269)),IKFAST_ATAN2_MAGTHRESH);
if( !x270.valid ) {
    continue;
}
j31array[0]=x270.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x271=IKcos(j31);
IkReal x272=IKsin(j31);
IkReal x273=((IkReal(1.00000000000000))*(gconst109));
IkReal x274=((IkReal(1.00000000000000))*(gconst110));
IkReal x275=((gconst110)*(x272));
IkReal x276=((IkReal(1.00000000000000))*(x272));
IkReal x277=((x271)*(x273));
evalcond[0]=((((new_r02)*(x271)))+(((new_r12)*(x272))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x276)))+(((new_r12)*(x271))));
evalcond[2]=((((new_r00)*(x271)))+(gconst110)+(((new_r10)*(x272))));
evalcond[3]=((((gconst109)*(x272)))+(new_r00)+(((gconst110)*(x271))));
evalcond[4]=((x275)+(((IkReal(-1.00000000000000))*(x277)))+(new_r01));
evalcond[5]=((x275)+(((IkReal(-1.00000000000000))*(x277)))+(new_r10));
evalcond[6]=((((new_r01)*(x271)))+(((IkReal(-1.00000000000000))*(x273)))+(((new_r11)*(x272))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x272)*(x273)))+(((IkReal(-1.00000000000000))*(x271)*(x274)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x276)))+(((IkReal(-1.00000000000000))*(x273)))+(((new_r10)*(x271))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x276)))+(((IkReal(-1.00000000000000))*(x274)))+(((new_r11)*(x271))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x278=((gconst110)*(gconst114));
CheckValue<IkReal> x279 = IKatan2WithCheck(((new_r02)*(x278)),((IkReal(-1.00000000000000))*(new_r12)*(x278)),IKFAST_ATAN2_MAGTHRESH);
if( !x279.valid ) {
    continue;
}
j31array[0]=x279.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x280=IKcos(j31);
IkReal x281=IKsin(j31);
IkReal x282=((IkReal(1.00000000000000))*(gconst109));
IkReal x283=((IkReal(1.00000000000000))*(gconst110));
IkReal x284=((gconst110)*(x281));
IkReal x285=((IkReal(1.00000000000000))*(x281));
IkReal x286=((x280)*(x282));
evalcond[0]=((((new_r02)*(x280)))+(((new_r12)*(x281))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x285)))+(((new_r12)*(x280))));
evalcond[2]=((gconst110)+(((new_r00)*(x280)))+(((new_r10)*(x281))));
evalcond[3]=((((gconst110)*(x280)))+(((gconst109)*(x281)))+(new_r00));
evalcond[4]=((x284)+(((IkReal(-1.00000000000000))*(x286)))+(new_r01));
evalcond[5]=((x284)+(((IkReal(-1.00000000000000))*(x286)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(x282)))+(((new_r11)*(x281)))+(((new_r01)*(x280))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x280)*(x283)))+(((IkReal(-1.00000000000000))*(x281)*(x282)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x285)))+(((IkReal(-1.00000000000000))*(x282)))+(((new_r10)*(x280))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x285)))+(((IkReal(-1.00000000000000))*(x283)))+(((new_r11)*(x280))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst111;
CheckValue<IkReal> x287 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x287.valid ) {
    continue;
}
gconst111=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x287.value))));
IkReal gconst112;
gconst112=IKsin(gconst111);
IkReal gconst113;
gconst113=IKcos(gconst111);
IkReal x288=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((j33)+(((IkReal(-1.00000000000000))*(gconst111))))))), IkReal(6.28318530717959))));
evalcond[1]=x288;
evalcond[2]=x288;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst116;
gconst116=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst117;
gconst117=IKsign(((((gconst113)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst112)*(new_r02)))));
dummyeval[0]=((((gconst113)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst112)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x289=((gconst117)*(new_r00));
CheckValue<IkReal> x290 = IKatan2WithCheck(((new_r02)*(x289)),((IkReal(-1.00000000000000))*(new_r12)*(x289)),IKFAST_ATAN2_MAGTHRESH);
if( !x290.valid ) {
    continue;
}
j31array[0]=x290.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x291=IKcos(j31);
IkReal x292=IKsin(j31);
IkReal x293=((IkReal(1.00000000000000))*(gconst112));
IkReal x294=((gconst113)*(x292));
IkReal x295=((gconst112)*(x292));
IkReal x296=((IkReal(1.00000000000000))*(x291));
IkReal x297=((IkReal(1.00000000000000))*(x292));
IkReal x298=((x291)*(x293));
evalcond[0]=((((new_r02)*(x291)))+(((new_r12)*(x292))));
evalcond[1]=((((new_r12)*(x291)))+(((IkReal(-1.00000000000000))*(new_r02)*(x297))));
evalcond[2]=((((new_r10)*(x292)))+(((new_r00)*(x291)))+(gconst113));
evalcond[3]=((((gconst113)*(x291)))+(x295)+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(x298)))+(x294)+(new_r01));
evalcond[5]=((((IkReal(-1.00000000000000))*(x298)))+(x294)+(new_r10));
evalcond[6]=((((new_r11)*(x292)))+(((IkReal(-1.00000000000000))*(x293)))+(((new_r01)*(x291))));
evalcond[7]=((((IkReal(-1.00000000000000))*(gconst113)*(x296)))+(new_r11)+(((IkReal(-1.00000000000000))*(x292)*(x293))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x293)))+(((new_r10)*(x291)))+(((IkReal(-1.00000000000000))*(new_r00)*(x297))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x297)))+(((new_r11)*(x291)))+(((IkReal(-1.00000000000000))*(gconst113))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x299=((gconst113)*(gconst116));
CheckValue<IkReal> x300 = IKatan2WithCheck(((new_r02)*(x299)),((IkReal(-1.00000000000000))*(new_r12)*(x299)),IKFAST_ATAN2_MAGTHRESH);
if( !x300.valid ) {
    continue;
}
j31array[0]=x300.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x301=IKcos(j31);
IkReal x302=IKsin(j31);
IkReal x303=((IkReal(1.00000000000000))*(gconst112));
IkReal x304=((gconst113)*(x302));
IkReal x305=((gconst112)*(x302));
IkReal x306=((IkReal(1.00000000000000))*(x301));
IkReal x307=((IkReal(1.00000000000000))*(x302));
IkReal x308=((x301)*(x303));
evalcond[0]=((((new_r12)*(x302)))+(((new_r02)*(x301))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x307)))+(((new_r12)*(x301))));
evalcond[2]=((((new_r00)*(x301)))+(((new_r10)*(x302)))+(gconst113));
evalcond[3]=((((gconst113)*(x301)))+(x305)+(new_r00));
evalcond[4]=((x304)+(new_r01)+(((IkReal(-1.00000000000000))*(x308))));
evalcond[5]=((x304)+(new_r10)+(((IkReal(-1.00000000000000))*(x308))));
evalcond[6]=((((new_r01)*(x301)))+(((new_r11)*(x302)))+(((IkReal(-1.00000000000000))*(x303))));
evalcond[7]=((((IkReal(-1.00000000000000))*(gconst113)*(x306)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(new_r11));
evalcond[8]=((((new_r10)*(x301)))+(((IkReal(-1.00000000000000))*(new_r00)*(x307)))+(((IkReal(-1.00000000000000))*(x303))));
evalcond[9]=((((new_r11)*(x301)))+(((IkReal(-1.00000000000000))*(new_r01)*(x307)))+(((IkReal(-1.00000000000000))*(gconst113))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x309=((gconst107)*(new_r00));
CheckValue<IkReal> x310 = IKatan2WithCheck(((new_r02)*(x309)),((IkReal(-1.00000000000000))*(new_r12)*(x309)),IKFAST_ATAN2_MAGTHRESH);
if( !x310.valid ) {
    continue;
}
j31array[0]=x310.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x311=IKcos(j31);
IkReal x312=IKsin(j31);
IkReal x313=((IkReal(1.00000000000000))*(sj33));
IkReal x314=((cj33)*(x312));
IkReal x315=((cj33)*(x311));
IkReal x316=((IkReal(1.00000000000000))*(x312));
IkReal x317=((x311)*(x313));
evalcond[0]=((((new_r02)*(x311)))+(((new_r12)*(x312))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x316)))+(((new_r12)*(x311))));
evalcond[2]=((((new_r00)*(x311)))+(cj33)+(((new_r10)*(x312))));
evalcond[3]=((((sj33)*(x312)))+(x315)+(new_r00));
evalcond[4]=((x314)+(((IkReal(-1.00000000000000))*(x317)))+(new_r01));
evalcond[5]=((x314)+(((IkReal(-1.00000000000000))*(x317)))+(new_r10));
evalcond[6]=((((new_r01)*(x311)))+(((IkReal(-1.00000000000000))*(x313)))+(((new_r11)*(x312))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x312)*(x313)))+(((IkReal(-1.00000000000000))*(x315)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x316)))+(((IkReal(-1.00000000000000))*(x313)))+(((new_r10)*(x311))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj33)))+(((new_r11)*(x311)))+(((IkReal(-1.00000000000000))*(new_r01)*(x316))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
IkReal x318=((cj33)*(gconst106));
CheckValue<IkReal> x319 = IKatan2WithCheck(((new_r02)*(x318)),((IkReal(-1.00000000000000))*(new_r12)*(x318)),IKFAST_ATAN2_MAGTHRESH);
if( !x319.valid ) {
    continue;
}
j31array[0]=x319.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[10];
IkReal x320=IKcos(j31);
IkReal x321=IKsin(j31);
IkReal x322=((IkReal(1.00000000000000))*(sj33));
IkReal x323=((cj33)*(x321));
IkReal x324=((cj33)*(x320));
IkReal x325=((IkReal(1.00000000000000))*(x321));
IkReal x326=((x320)*(x322));
evalcond[0]=((((new_r12)*(x321)))+(((new_r02)*(x320))));
evalcond[1]=((((new_r12)*(x320)))+(((IkReal(-1.00000000000000))*(new_r02)*(x325))));
evalcond[2]=((((new_r00)*(x320)))+(cj33)+(((new_r10)*(x321))));
evalcond[3]=((((sj33)*(x321)))+(x324)+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(x326)))+(x323)+(new_r01));
evalcond[5]=((((IkReal(-1.00000000000000))*(x326)))+(x323)+(new_r10));
evalcond[6]=((((new_r01)*(x320)))+(((IkReal(-1.00000000000000))*(x322)))+(((new_r11)*(x321))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x321)*(x322)))+(((IkReal(-1.00000000000000))*(x324)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(x322)))+(((IkReal(-1.00000000000000))*(new_r00)*(x325)))+(((new_r10)*(x320))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj33)))+(((IkReal(-1.00000000000000))*(new_r01)*(x325)))+(((new_r11)*(x320))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
CheckValue<IkReal> x327 = IKatan2WithCheck(((gconst93)*(new_r12)),((gconst93)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x327.valid ) {
    continue;
}
j31array[0]=x327.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[18];
IkReal x328=IKcos(j31);
IkReal x329=IKsin(j31);
IkReal x330=((IkReal(1.00000000000000))*(cj33));
IkReal x331=((IkReal(1.00000000000000))*(sj33));
IkReal x332=((cj32)*(sj33));
IkReal x333=((IkReal(1.00000000000000))*(sj32));
IkReal x334=((new_r10)*(x329));
IkReal x335=((cj32)*(x328));
IkReal x336=((sj32)*(x328));
IkReal x337=((new_r11)*(x329));
IkReal x338=((new_r12)*(x329));
IkReal x339=((IkReal(1.00000000000000))*(x329));
evalcond[0]=((((IkReal(-1.00000000000000))*(x328)*(x333)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x329)*(x333)))+(new_r12));
evalcond[2]=((((new_r12)*(x328)))+(((IkReal(-1.00000000000000))*(new_r02)*(x339))));
evalcond[3]=((((x328)*(x332)))+(new_r01)+(((cj33)*(x329))));
evalcond[4]=((x338)+(((IkReal(-1.00000000000000))*(x333)))+(((new_r02)*(x328))));
evalcond[5]=((((new_r01)*(x328)))+(x332)+(x337));
evalcond[6]=((((sj33)*(x329)))+(((IkReal(-1.00000000000000))*(x330)*(x335)))+(new_r00));
evalcond[7]=((((IkReal(-1.00000000000000))*(x328)*(x330)))+(((x329)*(x332)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x339)))+(((IkReal(-1.00000000000000))*(x331)))+(((new_r10)*(x328))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x330)))+(((IkReal(-1.00000000000000))*(new_r01)*(x339)))+(((new_r11)*(x328))));
evalcond[10]=((((new_r00)*(x328)))+(x334)+(((IkReal(-1.00000000000000))*(cj32)*(x330))));
evalcond[11]=((((IkReal(-1.00000000000000))*(cj32)*(x329)*(x330)))+(((IkReal(-1.00000000000000))*(x328)*(x331)))+(new_r10));
evalcond[12]=((((new_r00)*(x336)))+(((cj32)*(new_r20)))+(((sj32)*(x334))));
evalcond[13]=((((new_r01)*(x336)))+(((cj32)*(new_r21)))+(((sj32)*(x337))));
evalcond[14]=((IkReal(-1.00000000000000))+(((new_r02)*(x336)))+(((cj32)*(new_r22)))+(((sj32)*(x338))));
evalcond[15]=((((IkReal(-1.00000000000000))*(new_r22)*(x333)))+(((new_r02)*(x335)))+(((cj32)*(x338))));
evalcond[16]=((((new_r01)*(x335)))+(((IkReal(-1.00000000000000))*(new_r21)*(x333)))+(sj33)+(((cj32)*(x337))));
evalcond[17]=((((new_r00)*(x335)))+(((IkReal(-1.00000000000000))*(new_r20)*(x333)))+(((IkReal(-1.00000000000000))*(x330)))+(((cj32)*(x334))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
CheckValue<IkReal> x340 = IKatan2WithCheck(((gconst92)*(new_r12)),((gconst92)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x340.valid ) {
    continue;
}
j31array[0]=x340.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[18];
IkReal x341=IKcos(j31);
IkReal x342=IKsin(j31);
IkReal x343=((IkReal(1.00000000000000))*(cj33));
IkReal x344=((IkReal(1.00000000000000))*(sj33));
IkReal x345=((cj32)*(sj33));
IkReal x346=((IkReal(1.00000000000000))*(sj32));
IkReal x347=((new_r10)*(x342));
IkReal x348=((cj32)*(x341));
IkReal x349=((sj32)*(x341));
IkReal x350=((new_r11)*(x342));
IkReal x351=((new_r12)*(x342));
IkReal x352=((IkReal(1.00000000000000))*(x342));
evalcond[0]=((((IkReal(-1.00000000000000))*(x341)*(x346)))+(new_r02));
evalcond[1]=((new_r12)+(((IkReal(-1.00000000000000))*(x342)*(x346))));
evalcond[2]=((((new_r12)*(x341)))+(((IkReal(-1.00000000000000))*(new_r02)*(x352))));
evalcond[3]=((((cj33)*(x342)))+(((x341)*(x345)))+(new_r01));
evalcond[4]=((((new_r02)*(x341)))+(x351)+(((IkReal(-1.00000000000000))*(x346))));
evalcond[5]=((((new_r01)*(x341)))+(x350)+(x345));
evalcond[6]=((((sj33)*(x342)))+(((IkReal(-1.00000000000000))*(x343)*(x348)))+(new_r00));
evalcond[7]=((((IkReal(-1.00000000000000))*(x341)*(x343)))+(new_r11)+(((x342)*(x345))));
evalcond[8]=((((new_r10)*(x341)))+(((IkReal(-1.00000000000000))*(new_r00)*(x352)))+(((IkReal(-1.00000000000000))*(x344))));
evalcond[9]=((((new_r11)*(x341)))+(((IkReal(-1.00000000000000))*(new_r01)*(x352)))+(((IkReal(-1.00000000000000))*(x343))));
evalcond[10]=((((new_r00)*(x341)))+(x347)+(((IkReal(-1.00000000000000))*(cj32)*(x343))));
evalcond[11]=((((IkReal(-1.00000000000000))*(cj32)*(x342)*(x343)))+(((IkReal(-1.00000000000000))*(x341)*(x344)))+(new_r10));
evalcond[12]=((((new_r00)*(x349)))+(((cj32)*(new_r20)))+(((sj32)*(x347))));
evalcond[13]=((((new_r01)*(x349)))+(((sj32)*(x350)))+(((cj32)*(new_r21))));
evalcond[14]=((IkReal(-1.00000000000000))+(((new_r02)*(x349)))+(((sj32)*(x351)))+(((cj32)*(new_r22))));
evalcond[15]=((((new_r02)*(x348)))+(((cj32)*(x351)))+(((IkReal(-1.00000000000000))*(new_r22)*(x346))));
evalcond[16]=((((cj32)*(x350)))+(((new_r01)*(x348)))+(sj33)+(((IkReal(-1.00000000000000))*(new_r21)*(x346))));
evalcond[17]=((((cj32)*(x347)))+(((new_r00)*(x348)))+(((IkReal(-1.00000000000000))*(new_r20)*(x346)))+(((IkReal(-1.00000000000000))*(x343))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
CheckValue<IkReal> x353 = IKatan2WithCheck(((gconst90)*(new_r12)),((gconst90)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x353.valid ) {
    continue;
}
j31array[0]=x353.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[8];
IkReal x354=IKcos(j31);
IkReal x355=IKsin(j31);
IkReal x356=((IkReal(1.00000000000000))*(sj32));
IkReal x357=((new_r02)*(x354));
IkReal x358=((new_r12)*(x355));
IkReal x359=((sj32)*(x354));
IkReal x360=((sj32)*(x355));
evalcond[0]=((new_r02)+(((IkReal(-1.00000000000000))*(x354)*(x356))));
evalcond[1]=((new_r12)+(((IkReal(-1.00000000000000))*(x355)*(x356))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r02)*(x355)))+(((new_r12)*(x354))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x356)))+(x357)+(x358));
evalcond[4]=((((cj32)*(new_r20)))+(((new_r10)*(x360)))+(((new_r00)*(x359))));
evalcond[5]=((((new_r01)*(x359)))+(((cj32)*(new_r21)))+(((new_r11)*(x360))));
evalcond[6]=((IkReal(-1.00000000000000))+(((sj32)*(x357)))+(((sj32)*(x358)))+(((cj32)*(new_r22))));
evalcond[7]=((((cj32)*(x357)))+(((cj32)*(x358)))+(((IkReal(-1.00000000000000))*(new_r22)*(x356))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst118;
gconst118=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj31;
dummyeval[1]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj31;
dummyeval[1]=cj32;
dummyeval[2]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
bool bgotonextstatement = true;
do
{
IkReal x361=((((IkReal(-1.00000000000000))*(cj32)))+(new_r22));
IkReal x362=((((IkReal(-1.00000000000000))*(sj32)))+(new_r12));
IkReal x363=((IkReal(1.00000000000000))*(sj32));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j31))))), IkReal(6.28318530717959))));
evalcond[1]=x361;
evalcond[2]=x361;
evalcond[3]=new_r02;
evalcond[4]=x362;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x362;
evalcond[7]=((((new_r10)*(sj32)))+(((cj32)*(new_r20))));
evalcond[8]=((((new_r11)*(sj32)))+(((cj32)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((new_r12)*(sj32)))+(((cj32)*(new_r22))));
evalcond[10]=((((cj32)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x363))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst119;
gconst119=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj32;
dummyeval[1]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
bool bgotonextstatement = true;
do
{
IkReal x364=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x364;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x364;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r10;
evalcond[12]=new_r11;
evalcond[13]=x364;
evalcond[14]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x365=IKcos(j33);
IkReal x366=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x365)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x366)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x366)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x365)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x367=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x367;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x367;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[14]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x368=IKsin(j33);
IkReal x369=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x368)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x369)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x368)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x369)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x370=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j32))), IkReal(6.28318530717959))));
evalcond[1]=x370;
evalcond[2]=x370;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x370;
evalcond[14]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x371=IKsin(j33);
IkReal x372=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x371)+(new_r11));
evalcond[1]=((((IkReal(-1.00000000000000))*(x372)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x371)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x372)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x373=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=x373;
evalcond[2]=x373;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r12));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x374=IKcos(j33);
IkReal x375=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x374)+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x375)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x375)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x376 = IKPowWithIntegerCheck(cj32,-1.00000000000000);
if( !x376.valid ) {
    continue;
}
CheckValue<IkReal> x377 = IKPowWithIntegerCheck(sj32,-1.00000000000000);
if( !x377.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(x376.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x377.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(x376.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x377.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(x376.value)), ((IkReal(-1.00000000000000))*(new_r20)*(x377.value)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x378=IKsin(j33);
IkReal x379=IKcos(j33);
IkReal x380=((IkReal(1.00000000000000))*(sj32));
IkReal x381=((IkReal(1.00000000000000))*(x379));
evalcond[0]=((new_r20)+(((sj32)*(x379))));
evalcond[1]=((((cj32)*(x378)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x378)*(x380)))+(new_r21));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj32)*(x381)))+(new_r10));
evalcond[4]=((((IkReal(-1.00000000000000))*(x378)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x381)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((cj32)*(new_r11)))+(x378)+(((IkReal(-1.00000000000000))*(new_r21)*(x380))));
evalcond[7]=((((cj32)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x380)))+(((IkReal(-1.00000000000000))*(x381))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x382 = IKatan2WithCheck(((gconst119)*(new_r21)),((IkReal(-1.00000000000000))*(gconst119)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x382.valid ) {
    continue;
}
j33array[0]=x382.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x383=IKsin(j33);
IkReal x384=IKcos(j33);
IkReal x385=((IkReal(1.00000000000000))*(sj32));
IkReal x386=((IkReal(1.00000000000000))*(x384));
evalcond[0]=((((sj32)*(x384)))+(new_r20));
evalcond[1]=((new_r11)+(((cj32)*(x383))));
evalcond[2]=((new_r21)+(((IkReal(-1.00000000000000))*(x383)*(x385))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj32)*(x386)))+(new_r10));
evalcond[4]=((((IkReal(-1.00000000000000))*(x383)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x386)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((cj32)*(new_r11)))+(x383)+(((IkReal(-1.00000000000000))*(new_r21)*(x385))));
evalcond[7]=((((cj32)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x385)))+(((IkReal(-1.00000000000000))*(x386))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x387=((((IkReal(-1.00000000000000))*(cj32)))+(new_r22));
IkReal x388=((IkReal(1.00000000000000))*(sj32));
IkReal x389=((IkReal(1.00000000000000))*(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j31))))), IkReal(6.28318530717959))));
evalcond[1]=x387;
evalcond[2]=x387;
evalcond[3]=new_r02;
evalcond[4]=((sj32)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x389)))+(((IkReal(-1.00000000000000))*(x388))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x388)))+(((cj32)*(new_r20))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x388)))+(((cj32)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x388)))+(((cj32)*(new_r22))));
evalcond[11]=((((IkReal(-1.00000000000000))*(cj32)*(x389)))+(((IkReal(-1.00000000000000))*(new_r22)*(x388))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r00, new_r01);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x390=IKcos(j33);
IkReal x391=IKsin(j33);
IkReal x392=((IkReal(1.00000000000000))*(sj32));
IkReal x393=((IkReal(1.00000000000000))*(new_r11));
IkReal x394=((IkReal(1.00000000000000))*(new_r10));
IkReal x395=((IkReal(1.00000000000000))*(x390));
evalcond[0]=((((sj32)*(x390)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x391)))+(new_r00));
evalcond[2]=((((IkReal(-1.00000000000000))*(x395)))+(new_r01));
evalcond[3]=((((IkReal(-1.00000000000000))*(x391)*(x392)))+(new_r21));
evalcond[4]=((((IkReal(-1.00000000000000))*(x393)))+(((cj32)*(x391))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x394)))+(((IkReal(-1.00000000000000))*(cj32)*(x395))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x392)))+(x391)+(((IkReal(-1.00000000000000))*(cj32)*(x393))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x395)))+(((IkReal(-1.00000000000000))*(cj32)*(x394)))+(((IkReal(-1.00000000000000))*(new_r20)*(x392))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x396=((IkReal(1.00000000000000))*(sj31));
IkReal x397=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(x396))));
IkReal x398=((((cj31)*(new_r00)))+(((new_r10)*(sj31))));
IkReal x399=((((cj31)*(new_r01)))+(((new_r11)*(sj31))));
IkReal x400=((IkReal(-1.00000000000000))+(((cj31)*(new_r02)))+(((new_r12)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((((IkReal(-1.00000000000000))*(cj31)))+(new_r02));
evalcond[4]=((((IkReal(-1.00000000000000))*(x396)))+(new_r12));
evalcond[5]=x397;
evalcond[6]=x397;
evalcond[7]=x400;
evalcond[8]=x399;
evalcond[9]=x398;
evalcond[10]=x398;
evalcond[11]=x399;
evalcond[12]=x400;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x401=IKcos(j33);
IkReal x402=IKsin(j33);
IkReal x403=((IkReal(1.00000000000000))*(sj31));
IkReal x404=((IkReal(1.00000000000000))*(x402));
IkReal x405=((IkReal(1.00000000000000))*(x401));
evalcond[0]=((x401)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x404))));
evalcond[2]=((((sj31)*(x401)))+(new_r01));
evalcond[3]=((((sj31)*(x402)))+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj31)*(x405)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj31)*(x404)))+(new_r10));
evalcond[6]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x403)))+(((IkReal(-1.00000000000000))*(x404))));
evalcond[7]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x403)))+(((IkReal(-1.00000000000000))*(x405))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x406=((new_r10)*(sj31));
IkReal x407=((cj31)*(new_r00));
IkReal x408=((cj31)*(new_r02));
IkReal x409=((new_r11)*(sj31));
IkReal x410=((new_r12)*(sj31));
IkReal x411=((cj31)*(new_r01));
IkReal x412=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((cj31)+(new_r02));
evalcond[4]=((sj31)+(new_r12));
evalcond[5]=x412;
evalcond[6]=x412;
evalcond[7]=((IkReal(1.00000000000000))+(x408)+(x410));
evalcond[8]=((x409)+(x411));
evalcond[9]=((x407)+(x406));
evalcond[10]=((((IkReal(-1.00000000000000))*(x406)))+(((IkReal(-1.00000000000000))*(x407))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x409)))+(((IkReal(-1.00000000000000))*(x411))));
evalcond[12]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x408)))+(((IkReal(-1.00000000000000))*(x410))));
evalcond[13]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x413=IKcos(j33);
IkReal x414=IKsin(j33);
IkReal x415=((IkReal(1.00000000000000))*(sj31));
IkReal x416=((IkReal(1.00000000000000))*(x413));
IkReal x417=((IkReal(1.00000000000000))*(x414));
evalcond[0]=((x414)+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x416))));
evalcond[2]=((((sj31)*(x413)))+(new_r01));
evalcond[3]=((((sj31)*(x414)))+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj31)*(x416)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj31)*(x417)))+(new_r10));
evalcond[6]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x415)))+(((IkReal(-1.00000000000000))*(x417))));
evalcond[7]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x416)))+(((IkReal(-1.00000000000000))*(new_r01)*(x415))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x418=((IkReal(-1.00000000000000))+(new_r22));
IkReal x419=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj31))));
IkReal x420=((((cj31)*(new_r02)))+(((new_r12)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j32))), IkReal(6.28318530717959))));
evalcond[1]=x418;
evalcond[2]=x418;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x419;
evalcond[10]=x419;
evalcond[11]=x420;
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x418;
evalcond[15]=x420;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst120;
CheckValue<IkReal> x421 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x421.valid ) {
    continue;
}
CheckValue<IkReal> x422 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x422.valid ) {
    continue;
}
gconst120=IKsign(((((IkReal(-1.00000000000000))*(x421.value)))+(((IkReal(-1.00000000000000))*(x422.value)))));
CheckValue<IkReal> x423 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x423.valid ) {
    continue;
}
CheckValue<IkReal> x424 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x424.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x423.value)))+(((IkReal(-1.00000000000000))*(x424.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst121;
CheckValue<IkReal> x425 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x425.valid ) {
    continue;
}
CheckValue<IkReal> x426 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x426.valid ) {
    continue;
}
gconst121=IKsign(((((IkReal(-1.00000000000000))*(x425.value)))+(((IkReal(-1.00000000000000))*(x426.value)))));
CheckValue<IkReal> x427 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x427.valid ) {
    continue;
}
CheckValue<IkReal> x428 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x428.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x427.value)))+(((IkReal(-1.00000000000000))*(x428.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x429 = IKatan2WithCheck(((gconst121)*(((((cj31)*(new_r01)))+(((new_r11)*(sj31)))))),((gconst121)*(((((IkReal(-1.00000000000000))*(cj31)*(new_r11)))+(((new_r01)*(sj31)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x429.valid ) {
    continue;
}
j33array[0]=x429.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x430=IKsin(j33);
IkReal x431=IKcos(j33);
IkReal x432=((IkReal(1.00000000000000))*(sj31));
IkReal x433=((IkReal(1.00000000000000))*(x431));
IkReal x434=((sj31)*(x430));
IkReal x435=((IkReal(1.00000000000000))*(x430));
IkReal x436=((cj31)*(x433));
evalcond[0]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(x430));
evalcond[1]=((((cj31)*(x430)))+(((sj31)*(x431)))+(new_r01));
evalcond[2]=((((IkReal(-1.00000000000000))*(x433)))+(((cj31)*(new_r00)))+(((new_r10)*(sj31))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x432)))+(((IkReal(-1.00000000000000))*(x435)))+(((cj31)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x433)))+(((IkReal(-1.00000000000000))*(new_r01)*(x432)))+(((cj31)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x436)))+(x434)+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x436)))+(x434)+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x431)*(x432)))+(((IkReal(-1.00000000000000))*(cj31)*(x435)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x437 = IKatan2WithCheck(((gconst120)*(((((new_r00)*(sj31)))+(((cj31)*(new_r01)))))),((gconst120)*(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((new_r01)*(sj31)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x437.valid ) {
    continue;
}
j33array[0]=x437.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x438=IKsin(j33);
IkReal x439=IKcos(j33);
IkReal x440=((IkReal(1.00000000000000))*(sj31));
IkReal x441=((IkReal(1.00000000000000))*(x439));
IkReal x442=((sj31)*(x438));
IkReal x443=((IkReal(1.00000000000000))*(x438));
IkReal x444=((cj31)*(x441));
evalcond[0]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(x438));
evalcond[1]=((((cj31)*(x438)))+(((sj31)*(x439)))+(new_r01));
evalcond[2]=((((IkReal(-1.00000000000000))*(x441)))+(((cj31)*(new_r00)))+(((new_r10)*(sj31))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x443)))+(((IkReal(-1.00000000000000))*(new_r00)*(x440)))+(((cj31)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x441)))+(((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x440))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x444)))+(x442)+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x444)))+(x442)+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x439)*(x440)))+(((IkReal(-1.00000000000000))*(cj31)*(x443)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x445=((IkReal(1.00000000000000))+(new_r22));
IkReal x446=((cj31)*(new_r02));
IkReal x447=((new_r12)*(sj31));
IkReal x448=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=x445;
evalcond[2]=x445;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x448;
evalcond[10]=x448;
evalcond[11]=((x447)+(x446));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[15]=((((IkReal(-1.00000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(x446))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst122;
CheckValue<IkReal> x449 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x449.valid ) {
    continue;
}
CheckValue<IkReal> x450 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x450.valid ) {
    continue;
}
gconst122=IKsign(((x449.value)+(x450.value)));
CheckValue<IkReal> x451 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x451.valid ) {
    continue;
}
CheckValue<IkReal> x452 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x452.valid ) {
    continue;
}
dummyeval[0]=((x451.value)+(x452.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst123;
CheckValue<IkReal> x453 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x453.valid ) {
    continue;
}
CheckValue<IkReal> x454 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x454.valid ) {
    continue;
}
gconst123=IKsign(((x453.value)+(x454.value)));
CheckValue<IkReal> x455 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x455.valid ) {
    continue;
}
CheckValue<IkReal> x456 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x456.valid ) {
    continue;
}
dummyeval[0]=((x455.value)+(x456.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
IkReal x457=((IkReal(1.00000000000000))*(sj31));
CheckValue<IkReal> x458 = IKatan2WithCheck(((gconst123)*(((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x457)))))),((gconst123)*(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x457)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x458.valid ) {
    continue;
}
j33array[0]=x458.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x459=IKsin(j33);
IkReal x460=IKcos(j33);
IkReal x461=((IkReal(1.00000000000000))*(sj31));
IkReal x462=((IkReal(1.00000000000000))*(x459));
IkReal x463=((sj31)*(x460));
IkReal x464=((IkReal(1.00000000000000))*(x460));
IkReal x465=((cj31)*(x462));
evalcond[0]=((((cj31)*(new_r00)))+(((new_r10)*(sj31)))+(x460));
evalcond[1]=((((cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(x462)))+(((new_r11)*(sj31))));
evalcond[2]=((((cj31)*(x460)))+(new_r00)+(((sj31)*(x459))));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x462)))+(((IkReal(-1.00000000000000))*(new_r00)*(x461))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x461)))+(((IkReal(-1.00000000000000))*(x464))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x465)))+(x463)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x465)))+(x463)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x459)*(x461)))+(new_r11)+(((IkReal(-1.00000000000000))*(cj31)*(x464))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
IkReal x466=((IkReal(1.00000000000000))*(new_r00));
CheckValue<IkReal> x467 = IKatan2WithCheck(((gconst122)*(((((cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(sj31)*(x466)))))),((gconst122)*(((((IkReal(-1.00000000000000))*(new_r01)*(sj31)))+(((IkReal(-1.00000000000000))*(cj31)*(x466)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x467.valid ) {
    continue;
}
j33array[0]=x467.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x468=IKsin(j33);
IkReal x469=IKcos(j33);
IkReal x470=((IkReal(1.00000000000000))*(sj31));
IkReal x471=((IkReal(1.00000000000000))*(x468));
IkReal x472=((sj31)*(x469));
IkReal x473=((IkReal(1.00000000000000))*(x469));
IkReal x474=((cj31)*(x471));
evalcond[0]=((((cj31)*(new_r00)))+(((new_r10)*(sj31)))+(x469));
evalcond[1]=((((cj31)*(new_r01)))+(((IkReal(-1.00000000000000))*(x471)))+(((new_r11)*(sj31))));
evalcond[2]=((((sj31)*(x468)))+(((cj31)*(x469)))+(new_r00));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x470)))+(((IkReal(-1.00000000000000))*(x471))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x473)))+(((IkReal(-1.00000000000000))*(new_r01)*(x470))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x474)))+(x472)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x474)))+(x472)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x468)*(x470)))+(((IkReal(-1.00000000000000))*(cj31)*(x473)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x475=((((IkReal(-1.00000000000000))*(cj32)))+(new_r22));
IkReal x476=((((IkReal(-1.00000000000000))*(sj32)))+(new_r02));
IkReal x477=((IkReal(1.00000000000000))*(sj32));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j31))), IkReal(6.28318530717959))));
evalcond[1]=x475;
evalcond[2]=x475;
evalcond[3]=x476;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x476;
evalcond[8]=((((new_r00)*(sj32)))+(((cj32)*(new_r20))));
evalcond[9]=((((new_r01)*(sj32)))+(((cj32)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((new_r02)*(sj32)))+(((cj32)*(new_r22))));
evalcond[11]=((((cj32)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r22)*(x477))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r10, new_r11);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x478=IKcos(j33);
IkReal x479=IKsin(j33);
IkReal x480=((IkReal(1.00000000000000))*(sj32));
IkReal x481=((IkReal(1.00000000000000))*(x478));
evalcond[0]=((((sj32)*(x478)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x479)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x481)))+(new_r11));
evalcond[3]=((((cj32)*(x479)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x479)*(x480)))+(new_r21));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x481)))+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x480)))+(((cj32)*(new_r01)))+(x479));
evalcond[7]=((((cj32)*(new_r00)))+(((IkReal(-1.00000000000000))*(x481)))+(((IkReal(-1.00000000000000))*(new_r20)*(x480))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x482=((((IkReal(-1.00000000000000))*(cj32)))+(new_r22));
IkReal x483=((IkReal(1.00000000000000))*(sj32));
IkReal x484=((IkReal(1.00000000000000))*(new_r02));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j31))))), IkReal(6.28318530717959))));
evalcond[1]=x482;
evalcond[2]=x482;
evalcond[3]=((sj32)+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((((IkReal(-1.00000000000000))*(x484)))+(((IkReal(-1.00000000000000))*(x483))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r00)*(x483)))+(((cj32)*(new_r20))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r01)*(x483)))+(((cj32)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x483)))+(((cj32)*(new_r22))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj32)*(x484)))+(((IkReal(-1.00000000000000))*(new_r22)*(x483))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst124;
gconst124=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[14];
bool bgotonextstatement = true;
do
{
IkReal x485=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j32))), IkReal(6.28318530717959))));
evalcond[1]=x485;
evalcond[2]=x485;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x485;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x486=IKsin(j33);
IkReal x487=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x486)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x486)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x487)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x487)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x488=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=x488;
evalcond[2]=x488;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x489=IKcos(j33);
IkReal x490=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x489)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x490)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x489)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x490)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x491 = IKPowWithIntegerCheck(sj32,-1.00000000000000);
if( !x491.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x491.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x491.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), ((IkReal(-1.00000000000000))*(new_r20)*(x491.value)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x492=IKsin(j33);
IkReal x493=IKcos(j33);
IkReal x494=((IkReal(1.00000000000000))*(new_r00));
IkReal x495=((IkReal(1.00000000000000))*(sj32));
IkReal x496=((IkReal(1.00000000000000))*(new_r01));
IkReal x497=((IkReal(1.00000000000000))*(x493));
evalcond[0]=((((sj32)*(x493)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x492)*(x495))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x492)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x497)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj32)*(x492)))+(((IkReal(-1.00000000000000))*(x496))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x494)))+(((IkReal(-1.00000000000000))*(cj32)*(x497))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x495)))+(((IkReal(-1.00000000000000))*(cj32)*(x496)))+(x492));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x495)))+(((IkReal(-1.00000000000000))*(x497)))+(((IkReal(-1.00000000000000))*(cj32)*(x494))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x498 = IKPowWithIntegerCheck(sj32,-1.00000000000000);
if( !x498.valid ) {
    continue;
}
if( IKabs(((new_r21)*(x498.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(x498.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((new_r21)*(x498.value)), ((IkReal(-1.00000000000000))*(new_r11)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x499=IKsin(j33);
IkReal x500=IKcos(j33);
IkReal x501=((IkReal(1.00000000000000))*(new_r00));
IkReal x502=((IkReal(1.00000000000000))*(sj32));
IkReal x503=((IkReal(1.00000000000000))*(new_r01));
IkReal x504=((IkReal(1.00000000000000))*(x500));
evalcond[0]=((new_r20)+(((sj32)*(x500))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x499)*(x502)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x499)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x504)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj32)*(x499)))+(((IkReal(-1.00000000000000))*(x503))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x504)))+(((IkReal(-1.00000000000000))*(x501))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x502)))+(((IkReal(-1.00000000000000))*(cj32)*(x503)))+(x499));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj32)*(x501)))+(((IkReal(-1.00000000000000))*(new_r20)*(x502)))+(((IkReal(-1.00000000000000))*(x504))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x505 = IKatan2WithCheck(((gconst124)*(new_r21)),((IkReal(-1.00000000000000))*(gconst124)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x505.valid ) {
    continue;
}
j33array[0]=x505.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x506=IKsin(j33);
IkReal x507=IKcos(j33);
IkReal x508=((IkReal(1.00000000000000))*(new_r00));
IkReal x509=((IkReal(1.00000000000000))*(sj32));
IkReal x510=((IkReal(1.00000000000000))*(new_r01));
IkReal x511=((IkReal(1.00000000000000))*(x507));
evalcond[0]=((new_r20)+(((sj32)*(x507))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x506)*(x509)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x506))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x511))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x510)))+(((cj32)*(x506))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x508)))+(((IkReal(-1.00000000000000))*(cj32)*(x511))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x509)))+(((IkReal(-1.00000000000000))*(cj32)*(x510)))+(x506));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj32)*(x508)))+(((IkReal(-1.00000000000000))*(new_r20)*(x509)))+(((IkReal(-1.00000000000000))*(x511))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x512=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j32))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j31))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x512;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x512;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r00;
evalcond[13]=new_r01;
evalcond[14]=x512;
evalcond[15]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x513=IKcos(j33);
IkReal x514=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x513)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x514))));
evalcond[2]=((new_r10)+(((IkReal(-1.00000000000000))*(x514))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x513)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j31))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j32))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x515=IKcos(j33);
IkReal x516=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x515)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x516))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x516))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x515)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x517=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j31))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j32))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x517;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x517;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[15]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x518=IKsin(j33);
IkReal x519=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x518)+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x519))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x518)))+(new_r10));
evalcond[3]=((new_r11)+(((IkReal(-1.00000000000000))*(x519))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j31))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j32))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x520=IKsin(j33);
IkReal x521=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x520)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x521)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x520)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x521)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x522=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j31))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j32))), IkReal(6.28318530717959)))))));
evalcond[1]=x522;
evalcond[2]=x522;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x522;
evalcond[15]=new_r02;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x523=IKsin(j33);
IkReal x524=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x523)+(new_r01));
evalcond[1]=((((IkReal(-1.00000000000000))*(x523)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x524)))+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x524)))+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x525=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j31))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j32))))), IkReal(6.28318530717959)))))));
evalcond[1]=x525;
evalcond[2]=x525;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[15]=((IkReal(-1.00000000000000))*(new_r02));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x526=IKcos(j33);
IkReal x527=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x526)+(new_r00));
evalcond[1]=((((IkReal(-1.00000000000000))*(x527)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x526)))+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x527)))+(new_r01));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x529 = IKPowWithIntegerCheck(sj32,-1.00000000000000);
if( !x529.valid ) {
    continue;
}
IkReal x528=x529.value;
CheckValue<IkReal> x530 = IKPowWithIntegerCheck(cj31,-1.00000000000000);
if( !x530.valid ) {
    continue;
}
CheckValue<IkReal> x531 = IKPowWithIntegerCheck(cj32,-1.00000000000000);
if( !x531.valid ) {
    continue;
}
if( IKabs(((x528)*(x530.value)*(x531.value)*(((((new_r20)*(sj31)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj32))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x528))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x528)*(x530.value)*(x531.value)*(((((new_r20)*(sj31)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj32)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x528)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((x528)*(x530.value)*(x531.value)*(((((new_r20)*(sj31)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj32)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x528)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[12];
IkReal x532=IKsin(j33);
IkReal x533=IKcos(j33);
IkReal x534=((cj31)*(cj32));
IkReal x535=((IkReal(1.00000000000000))*(sj31));
IkReal x536=((new_r11)*(sj31));
IkReal x537=((new_r10)*(sj31));
IkReal x538=((IkReal(1.00000000000000))*(sj32));
IkReal x539=((IkReal(1.00000000000000))*(x533));
IkReal x540=((IkReal(1.00000000000000))*(x532));
IkReal x541=((sj31)*(x532));
evalcond[0]=((((sj32)*(x533)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x532)*(x538)))+(new_r21));
evalcond[2]=((((cj32)*(x532)))+(((cj31)*(new_r01)))+(x536));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x535)))+(((IkReal(-1.00000000000000))*(x540))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x539)))+(((IkReal(-1.00000000000000))*(new_r01)*(x535))));
evalcond[5]=((((sj31)*(x533)))+(new_r01)+(((x532)*(x534))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj32)*(x539)))+(((cj31)*(new_r00)))+(x537));
evalcond[7]=((((IkReal(-1.00000000000000))*(x534)*(x539)))+(x541)+(new_r00));
evalcond[8]=((((cj32)*(x541)))+(((IkReal(-1.00000000000000))*(cj31)*(x539)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj32)*(x533)*(x535)))+(((IkReal(-1.00000000000000))*(cj31)*(x540)))+(new_r10));
evalcond[10]=((((new_r01)*(x534)))+(((cj32)*(x536)))+(((IkReal(-1.00000000000000))*(new_r21)*(x538)))+(x532));
evalcond[11]=((((cj32)*(x537)))+(((IkReal(-1.00000000000000))*(x539)))+(((IkReal(-1.00000000000000))*(new_r20)*(x538)))+(((new_r00)*(x534))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x543 = IKPowWithIntegerCheck(sj32,-1.00000000000000);
if( !x543.valid ) {
    continue;
}
IkReal x542=x543.value;
CheckValue<IkReal> x544 = IKPowWithIntegerCheck(sj31,-1.00000000000000);
if( !x544.valid ) {
    continue;
}
if( IKabs(((x542)*(x544.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj32)))+(((IkReal(-1.00000000000000))*(cj31)*(cj32)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x542))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x542)*(x544.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj32)))+(((IkReal(-1.00000000000000))*(cj31)*(cj32)*(new_r20)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x542)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((x542)*(x544.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj32)))+(((IkReal(-1.00000000000000))*(cj31)*(cj32)*(new_r20)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x542)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[12];
IkReal x545=IKsin(j33);
IkReal x546=IKcos(j33);
IkReal x547=((cj31)*(cj32));
IkReal x548=((IkReal(1.00000000000000))*(sj31));
IkReal x549=((new_r11)*(sj31));
IkReal x550=((new_r10)*(sj31));
IkReal x551=((IkReal(1.00000000000000))*(sj32));
IkReal x552=((IkReal(1.00000000000000))*(x546));
IkReal x553=((IkReal(1.00000000000000))*(x545));
IkReal x554=((sj31)*(x545));
evalcond[0]=((((sj32)*(x546)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x545)*(x551)))+(new_r21));
evalcond[2]=((((cj32)*(x545)))+(((cj31)*(new_r01)))+(x549));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x548)))+(((IkReal(-1.00000000000000))*(x553))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x548)))+(((IkReal(-1.00000000000000))*(x552))));
evalcond[5]=((((sj31)*(x546)))+(new_r01)+(((x545)*(x547))));
evalcond[6]=((((cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(cj32)*(x552)))+(x550));
evalcond[7]=((((IkReal(-1.00000000000000))*(x547)*(x552)))+(x554)+(new_r00));
evalcond[8]=((((cj32)*(x554)))+(new_r11)+(((IkReal(-1.00000000000000))*(cj31)*(x552))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj32)*(x546)*(x548)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj31)*(x553))));
evalcond[10]=((((cj32)*(x549)))+(((IkReal(-1.00000000000000))*(new_r21)*(x551)))+(x545)+(((new_r01)*(x547))));
evalcond[11]=((((new_r00)*(x547)))+(((cj32)*(x550)))+(((IkReal(-1.00000000000000))*(x552)))+(((IkReal(-1.00000000000000))*(new_r20)*(x551))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x555 = IKatan2WithCheck(((gconst118)*(new_r21)),((IkReal(-1.00000000000000))*(gconst118)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x555.valid ) {
    continue;
}
j33array[0]=x555.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[12];
IkReal x556=IKsin(j33);
IkReal x557=IKcos(j33);
IkReal x558=((cj31)*(cj32));
IkReal x559=((IkReal(1.00000000000000))*(sj31));
IkReal x560=((new_r11)*(sj31));
IkReal x561=((new_r10)*(sj31));
IkReal x562=((IkReal(1.00000000000000))*(sj32));
IkReal x563=((IkReal(1.00000000000000))*(x557));
IkReal x564=((IkReal(1.00000000000000))*(x556));
IkReal x565=((sj31)*(x556));
evalcond[0]=((((sj32)*(x557)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x556)*(x562)))+(new_r21));
evalcond[2]=((((cj31)*(new_r01)))+(((cj32)*(x556)))+(x560));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x559)))+(((IkReal(-1.00000000000000))*(x564))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x559)))+(((IkReal(-1.00000000000000))*(x563))));
evalcond[5]=((((sj31)*(x557)))+(new_r01)+(((x556)*(x558))));
evalcond[6]=((((cj31)*(new_r00)))+(x561)+(((IkReal(-1.00000000000000))*(cj32)*(x563))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x558)*(x563)))+(x565)+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj31)*(x563)))+(new_r11)+(((cj32)*(x565))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj31)*(x564)))+(((IkReal(-1.00000000000000))*(cj32)*(x557)*(x559)))+(new_r10));
evalcond[10]=((x556)+(((cj32)*(x560)))+(((IkReal(-1.00000000000000))*(new_r21)*(x562)))+(((new_r01)*(x558))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x562)))+(((cj32)*(x561)))+(((new_r00)*(x558)))+(((IkReal(-1.00000000000000))*(x563))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
_nj31 = 1;
CheckValue<IkReal> x566 = IKatan2WithCheck(((gconst89)*(new_r12)),((gconst89)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x566.valid ) {
    continue;
}
j31array[0]=x566.value;
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 1; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];
{
IkReal evalcond[8];
IkReal x567=IKcos(j31);
IkReal x568=IKsin(j31);
IkReal x569=((IkReal(1.00000000000000))*(sj32));
IkReal x570=((new_r02)*(x567));
IkReal x571=((new_r12)*(x568));
IkReal x572=((sj32)*(x567));
IkReal x573=((sj32)*(x568));
evalcond[0]=((((IkReal(-1.00000000000000))*(x567)*(x569)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x568)*(x569)))+(new_r12));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r02)*(x568)))+(((new_r12)*(x567))));
evalcond[3]=((x571)+(x570)+(((IkReal(-1.00000000000000))*(x569))));
evalcond[4]=((((new_r00)*(x572)))+(((new_r10)*(x573)))+(((cj32)*(new_r20))));
evalcond[5]=((((new_r11)*(x573)))+(((new_r01)*(x572)))+(((cj32)*(new_r21))));
evalcond[6]=((IkReal(-1.00000000000000))+(((sj32)*(x571)))+(((sj32)*(x570)))+(((cj32)*(new_r22))));
evalcond[7]=((((cj32)*(x571)))+(((cj32)*(x570)))+(((IkReal(-1.00000000000000))*(new_r22)*(x569))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst118;
gconst118=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj31;
dummyeval[1]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj31;
dummyeval[1]=cj32;
dummyeval[2]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
bool bgotonextstatement = true;
do
{
IkReal x574=((((IkReal(-1.00000000000000))*(cj32)))+(new_r22));
IkReal x575=((((IkReal(-1.00000000000000))*(sj32)))+(new_r12));
IkReal x576=((IkReal(1.00000000000000))*(sj32));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j31))))), IkReal(6.28318530717959))));
evalcond[1]=x574;
evalcond[2]=x574;
evalcond[3]=new_r02;
evalcond[4]=x575;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x575;
evalcond[7]=((((new_r10)*(sj32)))+(((cj32)*(new_r20))));
evalcond[8]=((((new_r11)*(sj32)))+(((cj32)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((new_r12)*(sj32)))+(((cj32)*(new_r22))));
evalcond[10]=((((cj32)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x576))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst119;
gconst119=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj32;
dummyeval[1]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
bool bgotonextstatement = true;
do
{
IkReal x577=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x577;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x577;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r10;
evalcond[12]=new_r11;
evalcond[13]=x577;
evalcond[14]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x578=IKcos(j33);
IkReal x579=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x578)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x579)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x579)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x578)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x580=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x580;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x580;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[14]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x581=IKsin(j33);
IkReal x582=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x581)+(new_r21));
evalcond[1]=((new_r20)+(((IkReal(-1.00000000000000))*(x582))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x581)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x582))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x583=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j32))), IkReal(6.28318530717959))));
evalcond[1]=x583;
evalcond[2]=x583;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x583;
evalcond[14]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x584=IKsin(j33);
IkReal x585=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x584)+(new_r11));
evalcond[1]=((new_r10)+(((IkReal(-1.00000000000000))*(x585))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x584)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x585))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x586=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=x586;
evalcond[2]=x586;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r12));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x587=IKcos(j33);
IkReal x588=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x587)+(new_r10));
evalcond[1]=((new_r11)+(((IkReal(-1.00000000000000))*(x588))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x588))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x587)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x589 = IKPowWithIntegerCheck(cj32,-1.00000000000000);
if( !x589.valid ) {
    continue;
}
CheckValue<IkReal> x590 = IKPowWithIntegerCheck(sj32,-1.00000000000000);
if( !x590.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(x589.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x590.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(x589.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x590.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(x589.value)), ((IkReal(-1.00000000000000))*(new_r20)*(x590.value)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x591=IKsin(j33);
IkReal x592=IKcos(j33);
IkReal x593=((IkReal(1.00000000000000))*(sj32));
IkReal x594=((IkReal(1.00000000000000))*(x592));
evalcond[0]=((((sj32)*(x592)))+(new_r20));
evalcond[1]=((((cj32)*(x591)))+(new_r11));
evalcond[2]=((new_r21)+(((IkReal(-1.00000000000000))*(x591)*(x593))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj32)*(x594)))+(new_r10));
evalcond[4]=((((IkReal(-1.00000000000000))*(x591)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x594)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x593)))+(((cj32)*(new_r11)))+(x591));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x593)))+(((cj32)*(new_r10)))+(((IkReal(-1.00000000000000))*(x594))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x595 = IKatan2WithCheck(((gconst119)*(new_r21)),((IkReal(-1.00000000000000))*(gconst119)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x595.valid ) {
    continue;
}
j33array[0]=x595.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x596=IKsin(j33);
IkReal x597=IKcos(j33);
IkReal x598=((IkReal(1.00000000000000))*(sj32));
IkReal x599=((IkReal(1.00000000000000))*(x597));
evalcond[0]=((((sj32)*(x597)))+(new_r20));
evalcond[1]=((((cj32)*(x596)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x596)*(x598)))+(new_r21));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj32)*(x599)))+(new_r10));
evalcond[4]=((((IkReal(-1.00000000000000))*(x596)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x599)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x598)))+(((cj32)*(new_r11)))+(x596));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x598)))+(((cj32)*(new_r10)))+(((IkReal(-1.00000000000000))*(x599))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x600=((((IkReal(-1.00000000000000))*(cj32)))+(new_r22));
IkReal x601=((IkReal(1.00000000000000))*(sj32));
IkReal x602=((IkReal(1.00000000000000))*(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j31))))), IkReal(6.28318530717959))));
evalcond[1]=x600;
evalcond[2]=x600;
evalcond[3]=new_r02;
evalcond[4]=((sj32)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x601)))+(((IkReal(-1.00000000000000))*(x602))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x601)))+(((cj32)*(new_r20))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x601)))+(((cj32)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x601)))+(((cj32)*(new_r22))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r22)*(x601)))+(((IkReal(-1.00000000000000))*(cj32)*(x602))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r00, new_r01);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x603=IKcos(j33);
IkReal x604=IKsin(j33);
IkReal x605=((IkReal(1.00000000000000))*(sj32));
IkReal x606=((IkReal(1.00000000000000))*(new_r11));
IkReal x607=((IkReal(1.00000000000000))*(new_r10));
IkReal x608=((IkReal(1.00000000000000))*(x603));
evalcond[0]=((((sj32)*(x603)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x604)))+(new_r00));
evalcond[2]=((((IkReal(-1.00000000000000))*(x608)))+(new_r01));
evalcond[3]=((((IkReal(-1.00000000000000))*(x604)*(x605)))+(new_r21));
evalcond[4]=((((cj32)*(x604)))+(((IkReal(-1.00000000000000))*(x606))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x608)))+(((IkReal(-1.00000000000000))*(x607))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj32)*(x606)))+(x604)+(((IkReal(-1.00000000000000))*(new_r21)*(x605))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x605)))+(((IkReal(-1.00000000000000))*(cj32)*(x607)))+(((IkReal(-1.00000000000000))*(x608))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x609=((IkReal(1.00000000000000))*(sj31));
IkReal x610=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(x609))));
IkReal x611=((((cj31)*(new_r00)))+(((new_r10)*(sj31))));
IkReal x612=((((cj31)*(new_r01)))+(((new_r11)*(sj31))));
IkReal x613=((IkReal(-1.00000000000000))+(((cj31)*(new_r02)))+(((new_r12)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((((IkReal(-1.00000000000000))*(cj31)))+(new_r02));
evalcond[4]=((((IkReal(-1.00000000000000))*(x609)))+(new_r12));
evalcond[5]=x610;
evalcond[6]=x610;
evalcond[7]=x613;
evalcond[8]=x612;
evalcond[9]=x611;
evalcond[10]=x611;
evalcond[11]=x612;
evalcond[12]=x613;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x614=IKcos(j33);
IkReal x615=IKsin(j33);
IkReal x616=((IkReal(1.00000000000000))*(sj31));
IkReal x617=((IkReal(1.00000000000000))*(x615));
IkReal x618=((IkReal(1.00000000000000))*(x614));
evalcond[0]=((x614)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x617)))+(new_r21));
evalcond[2]=((((sj31)*(x614)))+(new_r01));
evalcond[3]=((((sj31)*(x615)))+(new_r00));
evalcond[4]=((new_r11)+(((IkReal(-1.00000000000000))*(cj31)*(x618))));
evalcond[5]=((new_r10)+(((IkReal(-1.00000000000000))*(cj31)*(x617))));
evalcond[6]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x617)))+(((IkReal(-1.00000000000000))*(new_r00)*(x616))));
evalcond[7]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x618)))+(((IkReal(-1.00000000000000))*(new_r01)*(x616))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x619=((new_r10)*(sj31));
IkReal x620=((cj31)*(new_r00));
IkReal x621=((cj31)*(new_r02));
IkReal x622=((new_r11)*(sj31));
IkReal x623=((new_r12)*(sj31));
IkReal x624=((cj31)*(new_r01));
IkReal x625=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((cj31)+(new_r02));
evalcond[4]=((sj31)+(new_r12));
evalcond[5]=x625;
evalcond[6]=x625;
evalcond[7]=((IkReal(1.00000000000000))+(x621)+(x623));
evalcond[8]=((x624)+(x622));
evalcond[9]=((x619)+(x620));
evalcond[10]=((((IkReal(-1.00000000000000))*(x619)))+(((IkReal(-1.00000000000000))*(x620))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x622)))+(((IkReal(-1.00000000000000))*(x624))));
evalcond[12]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x621)))+(((IkReal(-1.00000000000000))*(x623))));
evalcond[13]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x626=IKcos(j33);
IkReal x627=IKsin(j33);
IkReal x628=((IkReal(1.00000000000000))*(sj31));
IkReal x629=((IkReal(1.00000000000000))*(x626));
IkReal x630=((IkReal(1.00000000000000))*(x627));
evalcond[0]=((x627)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x629)))+(new_r20));
evalcond[2]=((((sj31)*(x626)))+(new_r01));
evalcond[3]=((((sj31)*(x627)))+(new_r00));
evalcond[4]=((new_r11)+(((IkReal(-1.00000000000000))*(cj31)*(x629))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj31)*(x630)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r00)*(x628)))+(((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x630))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r01)*(x628)))+(((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x629))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x631=((IkReal(-1.00000000000000))+(new_r22));
IkReal x632=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj31))));
IkReal x633=((((cj31)*(new_r02)))+(((new_r12)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j32))), IkReal(6.28318530717959))));
evalcond[1]=x631;
evalcond[2]=x631;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x632;
evalcond[10]=x632;
evalcond[11]=x633;
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x631;
evalcond[15]=x633;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst120;
CheckValue<IkReal> x634 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x634.valid ) {
    continue;
}
CheckValue<IkReal> x635 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x635.valid ) {
    continue;
}
gconst120=IKsign(((((IkReal(-1.00000000000000))*(x634.value)))+(((IkReal(-1.00000000000000))*(x635.value)))));
CheckValue<IkReal> x636 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x636.valid ) {
    continue;
}
CheckValue<IkReal> x637 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x637.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x636.value)))+(((IkReal(-1.00000000000000))*(x637.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst121;
CheckValue<IkReal> x638 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x638.valid ) {
    continue;
}
CheckValue<IkReal> x639 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x639.valid ) {
    continue;
}
gconst121=IKsign(((((IkReal(-1.00000000000000))*(x638.value)))+(((IkReal(-1.00000000000000))*(x639.value)))));
CheckValue<IkReal> x640 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x640.valid ) {
    continue;
}
CheckValue<IkReal> x641 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x641.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x640.value)))+(((IkReal(-1.00000000000000))*(x641.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x642 = IKatan2WithCheck(((gconst121)*(((((cj31)*(new_r01)))+(((new_r11)*(sj31)))))),((gconst121)*(((((IkReal(-1.00000000000000))*(cj31)*(new_r11)))+(((new_r01)*(sj31)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x642.valid ) {
    continue;
}
j33array[0]=x642.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x643=IKsin(j33);
IkReal x644=IKcos(j33);
IkReal x645=((IkReal(1.00000000000000))*(sj31));
IkReal x646=((IkReal(1.00000000000000))*(x644));
IkReal x647=((sj31)*(x643));
IkReal x648=((IkReal(1.00000000000000))*(x643));
IkReal x649=((cj31)*(x646));
evalcond[0]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(x643));
evalcond[1]=((((cj31)*(x643)))+(((sj31)*(x644)))+(new_r01));
evalcond[2]=((((cj31)*(new_r00)))+(((new_r10)*(sj31)))+(((IkReal(-1.00000000000000))*(x646))));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x648)))+(((IkReal(-1.00000000000000))*(new_r00)*(x645))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x646)))+(((IkReal(-1.00000000000000))*(new_r01)*(x645))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x649)))+(x647)+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x649)))+(x647)+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x644)*(x645)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj31)*(x648))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x650 = IKatan2WithCheck(((gconst120)*(((((new_r00)*(sj31)))+(((cj31)*(new_r01)))))),((gconst120)*(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((new_r01)*(sj31)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x650.valid ) {
    continue;
}
j33array[0]=x650.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x651=IKsin(j33);
IkReal x652=IKcos(j33);
IkReal x653=((IkReal(1.00000000000000))*(sj31));
IkReal x654=((IkReal(1.00000000000000))*(x652));
IkReal x655=((sj31)*(x651));
IkReal x656=((IkReal(1.00000000000000))*(x651));
IkReal x657=((cj31)*(x654));
evalcond[0]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(x651));
evalcond[1]=((((sj31)*(x652)))+(((cj31)*(x651)))+(new_r01));
evalcond[2]=((((cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(x654)))+(((new_r10)*(sj31))));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x653)))+(((IkReal(-1.00000000000000))*(x656))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x654)))+(((IkReal(-1.00000000000000))*(new_r01)*(x653))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x657)))+(x655)+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x657)))+(x655)+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj31)*(x656)))+(new_r10)+(((IkReal(-1.00000000000000))*(x652)*(x653))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x658=((IkReal(1.00000000000000))+(new_r22));
IkReal x659=((cj31)*(new_r02));
IkReal x660=((new_r12)*(sj31));
IkReal x661=((((cj31)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj31))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=x658;
evalcond[2]=x658;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x661;
evalcond[10]=x661;
evalcond[11]=((x659)+(x660));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[15]=((((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(x660))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst122;
CheckValue<IkReal> x662 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x662.valid ) {
    continue;
}
CheckValue<IkReal> x663 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x663.valid ) {
    continue;
}
gconst122=IKsign(((x662.value)+(x663.value)));
CheckValue<IkReal> x664 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x664.valid ) {
    continue;
}
CheckValue<IkReal> x665 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x665.valid ) {
    continue;
}
dummyeval[0]=((x664.value)+(x665.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst123;
CheckValue<IkReal> x666 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x666.valid ) {
    continue;
}
CheckValue<IkReal> x667 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x667.valid ) {
    continue;
}
gconst123=IKsign(((x666.value)+(x667.value)));
CheckValue<IkReal> x668 = IKPowWithIntegerCheck(sj31,2.00000000000000);
if( !x668.valid ) {
    continue;
}
CheckValue<IkReal> x669 = IKPowWithIntegerCheck(cj31,2.00000000000000);
if( !x669.valid ) {
    continue;
}
dummyeval[0]=((x668.value)+(x669.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
IkReal x670=((IkReal(1.00000000000000))*(sj31));
CheckValue<IkReal> x671 = IKatan2WithCheck(((gconst123)*(((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x670)))))),((gconst123)*(((((IkReal(-1.00000000000000))*(cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x670)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x671.valid ) {
    continue;
}
j33array[0]=x671.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x672=IKsin(j33);
IkReal x673=IKcos(j33);
IkReal x674=((IkReal(1.00000000000000))*(sj31));
IkReal x675=((IkReal(1.00000000000000))*(x672));
IkReal x676=((sj31)*(x673));
IkReal x677=((IkReal(1.00000000000000))*(x673));
IkReal x678=((cj31)*(x675));
evalcond[0]=((((cj31)*(new_r00)))+(((new_r10)*(sj31)))+(x673));
evalcond[1]=((((cj31)*(new_r01)))+(((new_r11)*(sj31)))+(((IkReal(-1.00000000000000))*(x675))));
evalcond[2]=((((sj31)*(x672)))+(((cj31)*(x673)))+(new_r00));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x674)))+(((IkReal(-1.00000000000000))*(x675))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x674)))+(((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x677))));
evalcond[5]=((x676)+(new_r01)+(((IkReal(-1.00000000000000))*(x678))));
evalcond[6]=((x676)+(new_r10)+(((IkReal(-1.00000000000000))*(x678))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj31)*(x677)))+(((IkReal(-1.00000000000000))*(x672)*(x674)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
IkReal x679=((IkReal(1.00000000000000))*(new_r00));
CheckValue<IkReal> x680 = IKatan2WithCheck(((gconst122)*(((((IkReal(-1.00000000000000))*(sj31)*(x679)))+(((cj31)*(new_r01)))))),((gconst122)*(((((IkReal(-1.00000000000000))*(cj31)*(x679)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj31)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x680.valid ) {
    continue;
}
j33array[0]=x680.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x681=IKsin(j33);
IkReal x682=IKcos(j33);
IkReal x683=((IkReal(1.00000000000000))*(sj31));
IkReal x684=((IkReal(1.00000000000000))*(x681));
IkReal x685=((sj31)*(x682));
IkReal x686=((IkReal(1.00000000000000))*(x682));
IkReal x687=((cj31)*(x684));
evalcond[0]=((((cj31)*(new_r00)))+(((new_r10)*(sj31)))+(x682));
evalcond[1]=((((IkReal(-1.00000000000000))*(x684)))+(((cj31)*(new_r01)))+(((new_r11)*(sj31))));
evalcond[2]=((((sj31)*(x681)))+(new_r00)+(((cj31)*(x682))));
evalcond[3]=((((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x684)))+(((IkReal(-1.00000000000000))*(new_r00)*(x683))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x683)))+(((IkReal(-1.00000000000000))*(x686))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x687)))+(x685)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x687)))+(x685)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x681)*(x683)))+(((IkReal(-1.00000000000000))*(cj31)*(x686)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x688=((((IkReal(-1.00000000000000))*(cj32)))+(new_r22));
IkReal x689=((((IkReal(-1.00000000000000))*(sj32)))+(new_r02));
IkReal x690=((IkReal(1.00000000000000))*(sj32));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j31))), IkReal(6.28318530717959))));
evalcond[1]=x688;
evalcond[2]=x688;
evalcond[3]=x689;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x689;
evalcond[8]=((((new_r00)*(sj32)))+(((cj32)*(new_r20))));
evalcond[9]=((((new_r01)*(sj32)))+(((cj32)*(new_r21))));
evalcond[10]=((IkReal(-1.00000000000000))+(((new_r02)*(sj32)))+(((cj32)*(new_r22))));
evalcond[11]=((((cj32)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r22)*(x690))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r10, new_r11);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x691=IKcos(j33);
IkReal x692=IKsin(j33);
IkReal x693=((IkReal(1.00000000000000))*(sj32));
IkReal x694=((IkReal(1.00000000000000))*(x691));
evalcond[0]=((new_r20)+(((sj32)*(x691))));
evalcond[1]=((new_r10)+(((IkReal(-1.00000000000000))*(x692))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x694)))+(new_r11));
evalcond[3]=((((cj32)*(x692)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x692)*(x693)))+(new_r21));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x694)))+(new_r00));
evalcond[6]=((((cj32)*(new_r01)))+(x692)+(((IkReal(-1.00000000000000))*(new_r21)*(x693))));
evalcond[7]=((((cj32)*(new_r00)))+(((IkReal(-1.00000000000000))*(x694)))+(((IkReal(-1.00000000000000))*(new_r20)*(x693))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x695=((((IkReal(-1.00000000000000))*(cj32)))+(new_r22));
IkReal x696=((IkReal(1.00000000000000))*(sj32));
IkReal x697=((IkReal(1.00000000000000))*(new_r02));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j31))))), IkReal(6.28318530717959))));
evalcond[1]=x695;
evalcond[2]=x695;
evalcond[3]=((sj32)+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((((IkReal(-1.00000000000000))*(x697)))+(((IkReal(-1.00000000000000))*(x696))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r00)*(x696)))+(((cj32)*(new_r20))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r01)*(x696)))+(((cj32)*(new_r21))));
evalcond[9]=((IkReal(-1.00000000000000))+(((cj32)*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r02)*(x696))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj32)*(x697)))+(((IkReal(-1.00000000000000))*(new_r22)*(x696))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst124;
gconst124=IKsign(sj32);
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj32;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[14];
bool bgotonextstatement = true;
do
{
IkReal x698=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j32))), IkReal(6.28318530717959))));
evalcond[1]=x698;
evalcond[2]=x698;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x698;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x699=IKsin(j33);
IkReal x700=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x699)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x699))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x700)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x700)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x701=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j32))))), IkReal(6.28318530717959))));
evalcond[1]=x701;
evalcond[2]=x701;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x702=IKcos(j33);
IkReal x703=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)))+(x702));
evalcond[1]=((((IkReal(-1.00000000000000))*(x703)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x702)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x703)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x704 = IKPowWithIntegerCheck(sj32,-1.00000000000000);
if( !x704.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x704.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x704.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), ((IkReal(-1.00000000000000))*(new_r20)*(x704.value)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x705=IKsin(j33);
IkReal x706=IKcos(j33);
IkReal x707=((IkReal(1.00000000000000))*(new_r00));
IkReal x708=((IkReal(1.00000000000000))*(sj32));
IkReal x709=((IkReal(1.00000000000000))*(new_r01));
IkReal x710=((IkReal(1.00000000000000))*(x706));
evalcond[0]=((((sj32)*(x706)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x705)*(x708)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x705)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x710)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj32)*(x705)))+(((IkReal(-1.00000000000000))*(x709))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x710)))+(((IkReal(-1.00000000000000))*(x707))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x708)))+(((IkReal(-1.00000000000000))*(cj32)*(x709)))+(x705));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj32)*(x707)))+(((IkReal(-1.00000000000000))*(new_r20)*(x708)))+(((IkReal(-1.00000000000000))*(x710))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x711 = IKPowWithIntegerCheck(sj32,-1.00000000000000);
if( !x711.valid ) {
    continue;
}
if( IKabs(((new_r21)*(x711.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(x711.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((new_r21)*(x711.value)), ((IkReal(-1.00000000000000))*(new_r11)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x712=IKsin(j33);
IkReal x713=IKcos(j33);
IkReal x714=((IkReal(1.00000000000000))*(new_r00));
IkReal x715=((IkReal(1.00000000000000))*(sj32));
IkReal x716=((IkReal(1.00000000000000))*(new_r01));
IkReal x717=((IkReal(1.00000000000000))*(x713));
evalcond[0]=((((sj32)*(x713)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x712)*(x715)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x712)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x717)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj32)*(x712)))+(((IkReal(-1.00000000000000))*(x716))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x717)))+(((IkReal(-1.00000000000000))*(x714))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x715)))+(((IkReal(-1.00000000000000))*(cj32)*(x716)))+(x712));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj32)*(x714)))+(((IkReal(-1.00000000000000))*(new_r20)*(x715)))+(((IkReal(-1.00000000000000))*(x717))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x718 = IKatan2WithCheck(((gconst124)*(new_r21)),((IkReal(-1.00000000000000))*(gconst124)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x718.valid ) {
    continue;
}
j33array[0]=x718.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[8];
IkReal x719=IKsin(j33);
IkReal x720=IKcos(j33);
IkReal x721=((IkReal(1.00000000000000))*(new_r00));
IkReal x722=((IkReal(1.00000000000000))*(sj32));
IkReal x723=((IkReal(1.00000000000000))*(new_r01));
IkReal x724=((IkReal(1.00000000000000))*(x720));
evalcond[0]=((new_r20)+(((sj32)*(x720))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x719)*(x722))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x724)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj32)*(x719)))+(((IkReal(-1.00000000000000))*(x723))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj32)*(x724)))+(((IkReal(-1.00000000000000))*(x721))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj32)*(x723)))+(((IkReal(-1.00000000000000))*(new_r21)*(x722)))+(x719));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj32)*(x721)))+(((IkReal(-1.00000000000000))*(new_r20)*(x722)))+(((IkReal(-1.00000000000000))*(x724))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x725=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j32))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j31))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x725;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x725;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r00;
evalcond[13]=new_r01;
evalcond[14]=x725;
evalcond[15]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x726=IKcos(j33);
IkReal x727=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x726)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x727)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x727)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x726)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j31))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j32))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x728=IKcos(j33);
IkReal x729=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x728)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x729)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x729)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x728)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x730=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j31))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j32))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x730;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x730;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[15]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x731=IKsin(j33);
IkReal x732=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x731)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x732)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x731)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x732)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j31))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j32))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x733=IKsin(j33);
IkReal x734=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x733)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x734)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x733)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x735=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j31))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j32))), IkReal(6.28318530717959)))))));
evalcond[1]=x735;
evalcond[2]=x735;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x735;
evalcond[15]=new_r02;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x736=IKsin(j33);
IkReal x737=((IkReal(1.00000000000000))*(IKcos(j33)));
evalcond[0]=((x736)+(new_r01));
evalcond[1]=((((IkReal(-1.00000000000000))*(x736)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x737)))+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x737)))+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x738=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j31))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j32))))), IkReal(6.28318530717959)))))));
evalcond[1]=x738;
evalcond[2]=x738;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
evalcond[15]=((IkReal(-1.00000000000000))*(new_r02));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[4];
IkReal x739=IKcos(j33);
IkReal x740=((IkReal(1.00000000000000))*(IKsin(j33)));
evalcond[0]=((x739)+(new_r00));
evalcond[1]=((new_r10)+(((IkReal(-1.00000000000000))*(x740))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x739)))+(new_r11));
evalcond[3]=((new_r01)+(((IkReal(-1.00000000000000))*(x740))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x742 = IKPowWithIntegerCheck(sj32,-1.00000000000000);
if( !x742.valid ) {
    continue;
}
IkReal x741=x742.value;
CheckValue<IkReal> x743 = IKPowWithIntegerCheck(cj31,-1.00000000000000);
if( !x743.valid ) {
    continue;
}
CheckValue<IkReal> x744 = IKPowWithIntegerCheck(cj32,-1.00000000000000);
if( !x744.valid ) {
    continue;
}
if( IKabs(((x741)*(x743.value)*(x744.value)*(((((new_r20)*(sj31)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj32))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x741))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x741)*(x743.value)*(x744.value)*(((((new_r20)*(sj31)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj32)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x741)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((x741)*(x743.value)*(x744.value)*(((((new_r20)*(sj31)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj32)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x741)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[12];
IkReal x745=IKsin(j33);
IkReal x746=IKcos(j33);
IkReal x747=((cj31)*(cj32));
IkReal x748=((IkReal(1.00000000000000))*(sj31));
IkReal x749=((new_r11)*(sj31));
IkReal x750=((new_r10)*(sj31));
IkReal x751=((IkReal(1.00000000000000))*(sj32));
IkReal x752=((IkReal(1.00000000000000))*(x746));
IkReal x753=((IkReal(1.00000000000000))*(x745));
IkReal x754=((sj31)*(x745));
evalcond[0]=((((sj32)*(x746)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x745)*(x751)))+(new_r21));
evalcond[2]=((((cj31)*(new_r01)))+(((cj32)*(x745)))+(x749));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x748)))+(((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x753))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x748)))+(((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x752))));
evalcond[5]=((((x745)*(x747)))+(((sj31)*(x746)))+(new_r01));
evalcond[6]=((((cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(cj32)*(x752)))+(x750));
evalcond[7]=((((IkReal(-1.00000000000000))*(x747)*(x752)))+(x754)+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj31)*(x752)))+(((cj32)*(x754)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj31)*(x753)))+(((IkReal(-1.00000000000000))*(cj32)*(x746)*(x748)))+(new_r10));
evalcond[10]=((((cj32)*(x749)))+(((IkReal(-1.00000000000000))*(new_r21)*(x751)))+(((new_r01)*(x747)))+(x745));
evalcond[11]=((((cj32)*(x750)))+(((IkReal(-1.00000000000000))*(new_r20)*(x751)))+(((new_r00)*(x747)))+(((IkReal(-1.00000000000000))*(x752))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x756 = IKPowWithIntegerCheck(sj32,-1.00000000000000);
if( !x756.valid ) {
    continue;
}
IkReal x755=x756.value;
CheckValue<IkReal> x757 = IKPowWithIntegerCheck(sj31,-1.00000000000000);
if( !x757.valid ) {
    continue;
}
if( IKabs(((x755)*(x757.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj32)))+(((IkReal(-1.00000000000000))*(cj31)*(cj32)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x755))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x755)*(x757.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj32)))+(((IkReal(-1.00000000000000))*(cj31)*(cj32)*(new_r20)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x755)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j33array[0]=IKatan2(((x755)*(x757.value)*(((((IkReal(-1.00000000000000))*(new_r00)*(sj32)))+(((IkReal(-1.00000000000000))*(cj31)*(cj32)*(new_r20)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x755)));
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[12];
IkReal x758=IKsin(j33);
IkReal x759=IKcos(j33);
IkReal x760=((cj31)*(cj32));
IkReal x761=((IkReal(1.00000000000000))*(sj31));
IkReal x762=((new_r11)*(sj31));
IkReal x763=((new_r10)*(sj31));
IkReal x764=((IkReal(1.00000000000000))*(sj32));
IkReal x765=((IkReal(1.00000000000000))*(x759));
IkReal x766=((IkReal(1.00000000000000))*(x758));
IkReal x767=((sj31)*(x758));
evalcond[0]=((new_r20)+(((sj32)*(x759))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x758)*(x764)))+(new_r21));
evalcond[2]=((((cj31)*(new_r01)))+(((cj32)*(x758)))+(x762));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x761)))+(((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x766))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(x765)))+(((IkReal(-1.00000000000000))*(new_r01)*(x761))));
evalcond[5]=((((x758)*(x760)))+(((sj31)*(x759)))+(new_r01));
evalcond[6]=((((cj31)*(new_r00)))+(x763)+(((IkReal(-1.00000000000000))*(cj32)*(x765))));
evalcond[7]=((x767)+(new_r00)+(((IkReal(-1.00000000000000))*(x760)*(x765))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj31)*(x765)))+(((cj32)*(x767)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj31)*(x766)))+(((IkReal(-1.00000000000000))*(cj32)*(x759)*(x761)))+(new_r10));
evalcond[10]=((((new_r01)*(x760)))+(((cj32)*(x762)))+(x758)+(((IkReal(-1.00000000000000))*(new_r21)*(x764))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x764)))+(((IkReal(-1.00000000000000))*(x765)))+(((new_r00)*(x760)))+(((cj32)*(x763))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j33array[1], cj33array[1], sj33array[1];
bool j33valid[1]={false};
_nj33 = 1;
CheckValue<IkReal> x768 = IKatan2WithCheck(((gconst118)*(new_r21)),((IkReal(-1.00000000000000))*(gconst118)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x768.valid ) {
    continue;
}
j33array[0]=x768.value;
sj33array[0]=IKsin(j33array[0]);
cj33array[0]=IKcos(j33array[0]);
if( j33array[0] > IKPI )
{
    j33array[0]-=IK2PI;
}
else if( j33array[0] < -IKPI )
{    j33array[0]+=IK2PI;
}
j33valid[0] = true;
for(int ij33 = 0; ij33 < 1; ++ij33)
{
if( !j33valid[ij33] )
{
    continue;
}
_ij33[0] = ij33; _ij33[1] = -1;
for(int iij33 = ij33+1; iij33 < 1; ++iij33)
{
if( j33valid[iij33] && IKabs(cj33array[ij33]-cj33array[iij33]) < IKFAST_SOLUTION_THRESH && IKabs(sj33array[ij33]-sj33array[iij33]) < IKFAST_SOLUTION_THRESH )
{
    j33valid[iij33]=false; _ij33[1] = iij33; break; 
}
}
j33 = j33array[ij33]; cj33 = cj33array[ij33]; sj33 = sj33array[ij33];
{
IkReal evalcond[12];
IkReal x769=IKsin(j33);
IkReal x770=IKcos(j33);
IkReal x771=((cj31)*(cj32));
IkReal x772=((IkReal(1.00000000000000))*(sj31));
IkReal x773=((new_r11)*(sj31));
IkReal x774=((new_r10)*(sj31));
IkReal x775=((IkReal(1.00000000000000))*(sj32));
IkReal x776=((IkReal(1.00000000000000))*(x770));
IkReal x777=((IkReal(1.00000000000000))*(x769));
IkReal x778=((sj31)*(x769));
evalcond[0]=((((sj32)*(x770)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x769)*(x775)))+(new_r21));
evalcond[2]=((((cj31)*(new_r01)))+(((cj32)*(x769)))+(x773));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x772)))+(((cj31)*(new_r10)))+(((IkReal(-1.00000000000000))*(x777))));
evalcond[4]=((((cj31)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x772)))+(((IkReal(-1.00000000000000))*(x776))));
evalcond[5]=((((x769)*(x771)))+(((sj31)*(x770)))+(new_r01));
evalcond[6]=((((cj31)*(new_r00)))+(((IkReal(-1.00000000000000))*(cj32)*(x776)))+(x774));
evalcond[7]=((((IkReal(-1.00000000000000))*(x771)*(x776)))+(x778)+(new_r00));
evalcond[8]=((((cj32)*(x778)))+(new_r11)+(((IkReal(-1.00000000000000))*(cj31)*(x776))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj32)*(x770)*(x772)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj31)*(x777))));
evalcond[10]=((((cj32)*(x773)))+(((IkReal(-1.00000000000000))*(new_r21)*(x775)))+(((new_r01)*(x771)))+(x769));
evalcond[11]=((((cj32)*(x774)))+(((IkReal(-1.00000000000000))*(new_r20)*(x775)))+(((new_r00)*(x771)))+(((IkReal(-1.00000000000000))*(x776))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j27;
vinfos[0].indices[0] = _ij27[0];
vinfos[0].indices[1] = _ij27[1];
vinfos[0].maxsolutions = _nj27;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j28;
vinfos[1].indices[0] = _ij28[0];
vinfos[1].indices[1] = _ij28[1];
vinfos[1].maxsolutions = _nj28;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j29;
vinfos[2].indices[0] = _ij29[0];
vinfos[2].indices[1] = _ij29[1];
vinfos[2].maxsolutions = _nj29;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j30;
vinfos[3].indices[0] = _ij30[0];
vinfos[3].indices[1] = _ij30[1];
vinfos[3].maxsolutions = _nj30;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j31;
vinfos[4].indices[0] = _ij31[0];
vinfos[4].indices[1] = _ij31[1];
vinfos[4].maxsolutions = _nj31;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j32;
vinfos[5].indices[0] = _ij32[0];
vinfos[5].indices[1] = _ij32[1];
vinfos[5].maxsolutions = _nj32;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j33;
vinfos[6].indices[0] = _ij33[0];
vinfos[6].indices[1] = _ij33[1];
vinfos[6].maxsolutions = _nj33;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ad4f1590d2a9b2079648c64e9db33191"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
