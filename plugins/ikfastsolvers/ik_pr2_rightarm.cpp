/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 40 generated on 2011-03-08 19:25:56.890352
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKsin(j[4]);
x6=((x0)*(x1)*(x2));
x7=((x3)*(x4));
x8=((x6)+(((-1.00000000000000)*(x7))));
x9=IKcos(j[4]);
x10=IKcos(j[3]);
x11=((x2)*(x4));
x12=((x0)*(x1)*(x3));
x13=((x11)+(x12));
x14=((-1.00000000000000)*(x13));
x15=IKcos(j[1]);
x16=IKsin(j[3]);
x17=((x0)*(x15)*(x16));
x18=IKsin(j[6]);
x19=IKcos(j[5]);
x20=((x5)*(x8));
x21=((x10)*(x14));
x22=IKsin(j[5]);
x23=((-1.00000000000000)*(x14)*(x16));
x24=((-1.00000000000000)*(x0)*(x10)*(x15));
x25=((x24)+(x23));
x26=IKcos(j[6]);
x27=((x8)*(x9));
x28=((-1.00000000000000)*(x17));
x29=((x21)+(x28));
x30=((x29)*(x9));
x31=((x30)+(x20));
x32=((((-1.00000000000000)*(x17)))+(x21));
x33=((x0)*(x2));
x34=((x1)*(x7));
x35=((((-1.00000000000000)*(x34)))+(x33));
x36=((x0)*(x3));
x37=((x1)*(x11));
x38=((x37)+(x36));
x39=((x10)*(x35));
x40=((x38)*(x9));
x41=((x15)*(x16)*(x4));
x42=((((-1.00000000000000)*(x39)))+(x41));
x43=((x42)*(x5));
x44=((x43)+(x40));
x45=((-1.00000000000000)*(x41));
x46=((x39)+(x45));
x47=((x46)*(x9));
x48=((x38)*(x5));
x49=((x48)+(x47));
x50=((-1.00000000000000)*(x10)*(x15)*(x4));
x51=((-1.00000000000000)*(x16)*(x35));
x52=((x51)+(x50));
x53=((x1)*(x16));
x54=((x10)*(x15)*(x3));
x55=((x15)*(x2)*(x9));
x56=((x54)+(((-1.00000000000000)*(x53))));
x57=((x5)*(x56));
x58=((x55)+(x57));
x59=((x15)*(x16)*(x3));
x60=((x1)*(x10));
x61=((x59)+(x60));
x62=((x22)*(x61));
x63=((x53)+(((-1.00000000000000)*(x54))));
x64=((x63)*(x9));
x65=((x15)*(x2)*(x5));
x66=((x64)+(x65));
x67=((x19)*(x66));
x68=((x62)+(x67));
eerot[0]=((((x26)*(((((x19)*(((((x32)*(x9)))+(x20)))))+(((x22)*(x25)))))))+(((x18)*(((x27)+(((x5)*(((((-1.00000000000000)*(x21)))+(x17))))))))));
eerot[1]=((((x18)*(((((-1.00000000000000)*(x22)*(x25)))+(((-1.00000000000000)*(x19)*(x31)))))))+(((x26)*(((x27)+(((x5)*(((((-1.00000000000000)*(x21)))+(x17))))))))));
eerot[2]=((((x22)*(x31)))+(((x19)*(((((x0)*(x10)*(x15)))+(((x14)*(x16))))))));
eetrans[0]=((((x16)*(((((-0.321000000000000)*(x12)))+(((-0.321000000000000)*(x11)))))))+(((0.321000000000000)*(x0)*(x10)*(x15)))+(((0.400000000000000)*(x0)*(x15)))+(((x22)*(((((0.180000000000000)*(x20)))+(((0.180000000000000)*(x32)*(x9)))))))+(((x19)*(((((0.180000000000000)*(x0)*(x10)*(x15)))+(((0.180000000000000)*(x14)*(x16)))))))+(((0.100000000000000)*(x0))));
eerot[3]=((((x18)*(x44)))+(((x26)*(((((x19)*(x49)))+(((x22)*(x52))))))));
eerot[4]=((((x26)*(x44)))+(((x18)*(((((-1.00000000000000)*(x22)*(x52)))+(((-1.00000000000000)*(x19)*(x49))))))));
eerot[5]=((((x22)*(x49)))+(((x19)*(((((x16)*(x35)))+(((x10)*(x15)*(x4))))))));
eetrans[1]=((-0.188000000000000)+(((x16)*(((((-0.321000000000000)*(x34)))+(((0.321000000000000)*(x33)))))))+(((x19)*(((((0.180000000000000)*(x10)*(x15)*(x4)))+(((0.180000000000000)*(x16)*(x35)))))))+(((0.400000000000000)*(x15)*(x4)))+(((0.100000000000000)*(x4)))+(((x22)*(((((0.180000000000000)*(x47)))+(((0.180000000000000)*(x48)))))))+(((0.321000000000000)*(x10)*(x15)*(x4))));
eerot[6]=((((x26)*(x68)))+(((x18)*(x58))));
eerot[7]=((((x26)*(x58)))+(((-1.00000000000000)*(x18)*(x68))));
eerot[8]=((((-1.00000000000000)*(x19)*(x61)))+(((x22)*(x66))));
eetrans[2]=((((x22)*(((((0.180000000000000)*(x65)))+(((0.180000000000000)*(x64)))))))+(((x19)*(((((-0.180000000000000)*(x60)))+(((-0.180000000000000)*(x59)))))))+(((-0.321000000000000)*(x59)))+(((-0.321000000000000)*(x60)))+(((-0.400000000000000)*(x1))));
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j25,cj25,sj25,htj25,j26,cj26,sj26,htj26,j28,cj28,sj28,htj28,j29,cj29,sj29,htj29,j30,cj30,sj30,htj30,j31,cj31,sj31,htj31,j27,cj27,sj27,htj27,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j27=pfree[0]; cj27=cos(pfree[0]); sj27=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.180000000000000)*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((0.188000000000000)+(py)+(((-0.180000000000000)*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((((-0.180000000000000)*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal gconst0;
gconst0=((-1.00000000000000)*(py));
IKReal gconst1;
gconst1=((2.00000000000000)*(px));
IKReal gconst2;
gconst2=py;
IKReal gconst3;
gconst3=((0.509841000000000)+(((0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst4;
gconst4=((0.400000000000000)*(py));
IKReal gconst5;
gconst5=((0.509841000000000)+(((-0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst6;
gconst6=((-1.00000000000000)*(py));
IKReal gconst7;
gconst7=((2.00000000000000)*(px));
IKReal gconst8;
gconst8=py;
IKReal gconst9;
gconst9=((0.509841000000000)+(((0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst10;
gconst10=((0.400000000000000)*(py));
IKReal gconst11;
gconst11=((0.509841000000000)+(((-0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst12;
gconst12=((0.642000000000000)*(sj27));
IKReal gconst13;
gconst13=((0.642000000000000)*(sj27));
IKReal gconst14;
gconst14=((0.642000000000000)*(sj27));
IKReal gconst15;
gconst15=((0.642000000000000)*(sj27));
IKReal gconst16;
gconst16=((-1.00000000000000)*(py));
IKReal gconst17;
gconst17=((2.00000000000000)*(px));
IKReal gconst18;
gconst18=py;
IKReal gconst19;
gconst19=((-0.00375900000000000)+(((0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst20;
gconst20=((0.400000000000000)*(py));
IKReal gconst21;
gconst21=((-0.00375900000000000)+(((-0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst22;
gconst22=((-1.00000000000000)*(py));
IKReal gconst23;
gconst23=((2.00000000000000)*(px));
IKReal gconst24;
gconst24=py;
IKReal gconst25;
gconst25=((-0.00375900000000000)+(((0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
IKReal gconst26;
gconst26=((0.400000000000000)*(py));
IKReal gconst27;
gconst27=((-0.00375900000000000)+(((-0.200000000000000)*(px)))+(((-1.00000000000000)*(pp))));
dummyeval[0]=((((-1.00000000000000)*(gconst17)*(gconst21)*(gconst23)*(gconst25)))+(((gconst18)*(gconst20)*(gconst23)*(gconst25)))+(((gconst18)*(gconst19)*(gconst22)*(gconst27)))+(((gconst16)*(gconst21)*(gconst24)*(gconst25)))+(((-1.00000000000000)*(gconst18)*(gconst19)*(gconst24)*(gconst25)))+(((-1.00000000000000)*(gconst16)*(gconst21)*(gconst22)*(gconst27)))+(((-1.00000000000000)*(gconst18)*(gconst20)*(gconst22)*(gconst26)))+(((gconst17)*(gconst21)*(gconst22)*(gconst26))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[8+1], zeror[8];
int numroots;
op[0]=((((-1.00000000000000)*(gconst17)*(gconst21)*(gconst23)*(gconst25)))+(((gconst18)*(gconst20)*(gconst23)*(gconst25)))+(((gconst18)*(gconst19)*(gconst22)*(gconst27)))+(((gconst16)*(gconst21)*(gconst24)*(gconst25)))+(((-1.00000000000000)*(gconst18)*(gconst19)*(gconst24)*(gconst25)))+(((-1.00000000000000)*(gconst16)*(gconst21)*(gconst22)*(gconst27)))+(((-1.00000000000000)*(gconst18)*(gconst20)*(gconst22)*(gconst26)))+(((gconst17)*(gconst21)*(gconst22)*(gconst26))));
op[1]=((((gconst13)*(gconst19)*(gconst22)*(gconst27)))+(((gconst15)*(gconst16)*(gconst21)*(gconst25)))+(((gconst14)*(gconst18)*(gconst19)*(gconst27)))+(((gconst12)*(gconst21)*(gconst24)*(gconst25)))+(((-1.00000000000000)*(gconst12)*(gconst21)*(gconst22)*(gconst27)))+(((-1.00000000000000)*(gconst15)*(gconst18)*(gconst19)*(gconst25)))+(((gconst13)*(gconst20)*(gconst23)*(gconst25)))+(((gconst14)*(gconst17)*(gconst21)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst24)*(gconst25)))+(((-1.00000000000000)*(gconst14)*(gconst16)*(gconst21)*(gconst27)))+(((-1.00000000000000)*(gconst13)*(gconst20)*(gconst22)*(gconst26)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst20)*(gconst26))));
op[2]=((((-1.00000000000000)*(gconst12)*(gconst14)*(gconst21)*(gconst27)))+(((-1.00000000000000)*(gconst18)*(gconst20)*(gconst26)*(gconst6)))+(((-1.00000000000000)*(gconst17)*(gconst21)*(gconst23)*(gconst9)))+(((gconst18)*(gconst22)*(gconst27)*(gconst3)))+(((gconst10)*(gconst17)*(gconst21)*(gconst22)))+(((-1.00000000000000)*(gconst18)*(gconst22)*(gconst26)*(gconst4)))+(((gconst18)*(gconst20)*(gconst25)*(gconst7)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst20)*(gconst26)))+(((gconst0)*(gconst21)*(gconst24)*(gconst25)))+(((-1.00000000000000)*(gconst16)*(gconst22)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst17)*(gconst23)*(gconst25)*(gconst5)))+(((-1.00000000000000)*(gconst17)*(gconst21)*(gconst25)*(gconst7)))+(((-1.00000000000000)*(gconst0)*(gconst21)*(gconst22)*(gconst27)))+(((-1.00000000000000)*(gconst2)*(gconst20)*(gconst22)*(gconst26)))+(((gconst18)*(gconst23)*(gconst25)*(gconst4)))+(((gconst18)*(gconst19)*(gconst27)*(gconst6)))+(((gconst16)*(gconst21)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst11)*(gconst16)*(gconst21)*(gconst22)))+(((gconst16)*(gconst21)*(gconst24)*(gconst9)))+(((gconst2)*(gconst20)*(gconst23)*(gconst25)))+(((-1.00000000000000)*(gconst18)*(gconst24)*(gconst25)*(gconst3)))+(((-1.00000000000000)*(gconst16)*(gconst21)*(gconst27)*(gconst6)))+(((gconst17)*(gconst21)*(gconst26)*(gconst6)))+(((gconst16)*(gconst24)*(gconst25)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst15)*(gconst19)*(gconst25)))+(((-1.00000000000000)*(gconst10)*(gconst18)*(gconst20)*(gconst22)))+(((gconst17)*(gconst22)*(gconst26)*(gconst5)))+(((gconst12)*(gconst15)*(gconst21)*(gconst25)))+(((gconst18)*(gconst20)*(gconst23)*(gconst9)))+(((gconst1)*(gconst21)*(gconst22)*(gconst26)))+(((gconst19)*(gconst2)*(gconst22)*(gconst27)))+(((-1.00000000000000)*(gconst19)*(gconst2)*(gconst24)*(gconst25)))+(((gconst13)*(gconst14)*(gconst19)*(gconst27)))+(((-1.00000000000000)*(gconst18)*(gconst19)*(gconst24)*(gconst9)))+(((gconst11)*(gconst18)*(gconst19)*(gconst22)))+(((-1.00000000000000)*(gconst18)*(gconst19)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst1)*(gconst21)*(gconst23)*(gconst25))));
op[3]=((((gconst1)*(gconst14)*(gconst21)*(gconst26)))+(((gconst15)*(gconst16)*(gconst21)*(gconst9)))+(((gconst13)*(gconst22)*(gconst27)*(gconst3)))+(((gconst13)*(gconst23)*(gconst25)*(gconst4)))+(((gconst12)*(gconst21)*(gconst24)*(gconst9)))+(((-1.00000000000000)*(gconst15)*(gconst18)*(gconst19)*(gconst9)))+(((-1.00000000000000)*(gconst14)*(gconst2)*(gconst20)*(gconst26)))+(((-1.00000000000000)*(gconst13)*(gconst22)*(gconst26)*(gconst4)))+(((-1.00000000000000)*(gconst11)*(gconst14)*(gconst16)*(gconst21)))+(((gconst13)*(gconst20)*(gconst23)*(gconst9)))+(((gconst0)*(gconst15)*(gconst21)*(gconst25)))+(((gconst12)*(gconst24)*(gconst25)*(gconst5)))+(((gconst10)*(gconst14)*(gconst17)*(gconst21)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst21)*(gconst22)))+(((gconst11)*(gconst14)*(gconst18)*(gconst19)))+(((gconst14)*(gconst19)*(gconst2)*(gconst27)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst18)*(gconst20)))+(((-1.00000000000000)*(gconst14)*(gconst16)*(gconst27)*(gconst5)))+(((gconst13)*(gconst20)*(gconst25)*(gconst7)))+(((-1.00000000000000)*(gconst12)*(gconst22)*(gconst27)*(gconst5)))+(((gconst14)*(gconst18)*(gconst27)*(gconst3)))+(((-1.00000000000000)*(gconst15)*(gconst18)*(gconst25)*(gconst3)))+(((-1.00000000000000)*(gconst14)*(gconst18)*(gconst26)*(gconst4)))+(((gconst15)*(gconst16)*(gconst25)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst24)*(gconst25)*(gconst3)))+(((gconst14)*(gconst17)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst14)*(gconst21)*(gconst27)))+(((-1.00000000000000)*(gconst12)*(gconst21)*(gconst27)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst24)*(gconst9)))+(((gconst13)*(gconst19)*(gconst27)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst25)*(gconst8)))+(((gconst12)*(gconst21)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst20)*(gconst22)))+(((gconst11)*(gconst13)*(gconst19)*(gconst22)))+(((-1.00000000000000)*(gconst15)*(gconst19)*(gconst2)*(gconst25)))+(((-1.00000000000000)*(gconst13)*(gconst20)*(gconst26)*(gconst6))));
op[4]=((((gconst2)*(gconst23)*(gconst25)*(gconst4)))+(((-1.00000000000000)*(gconst11)*(gconst16)*(gconst21)*(gconst6)))+(((gconst10)*(gconst17)*(gconst22)*(gconst5)))+(((gconst16)*(gconst24)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst18)*(gconst25)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst2)*(gconst22)*(gconst26)*(gconst4)))+(((gconst1)*(gconst22)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst13)*(gconst15)*(gconst19)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst15)*(gconst25)*(gconst3)))+(((gconst11)*(gconst18)*(gconst19)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst23)*(gconst25)*(gconst5)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst14)*(gconst21)))+(((gconst2)*(gconst22)*(gconst27)*(gconst3)))+(((-1.00000000000000)*(gconst18)*(gconst26)*(gconst4)*(gconst6)))+(((gconst11)*(gconst19)*(gconst2)*(gconst22)))+(((gconst18)*(gconst25)*(gconst4)*(gconst7)))+(((gconst18)*(gconst23)*(gconst4)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst16)*(gconst22)*(gconst5)))+(((gconst12)*(gconst15)*(gconst21)*(gconst9)))+(((gconst16)*(gconst21)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst2)*(gconst20)*(gconst26)*(gconst6)))+(((gconst18)*(gconst20)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst14)*(gconst26)*(gconst4)))+(((gconst0)*(gconst24)*(gconst25)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst20)*(gconst22)))+(((gconst1)*(gconst10)*(gconst21)*(gconst22)))+(((gconst1)*(gconst21)*(gconst26)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst14)*(gconst20)))+(((-1.00000000000000)*(gconst1)*(gconst21)*(gconst25)*(gconst7)))+(((gconst11)*(gconst18)*(gconst22)*(gconst3)))+(((gconst0)*(gconst21)*(gconst25)*(gconst8)))+(((gconst12)*(gconst15)*(gconst25)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst21)*(gconst27)*(gconst6)))+(((-1.00000000000000)*(gconst19)*(gconst2)*(gconst25)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst22)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst18)*(gconst24)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst21)*(gconst22)))+(((-1.00000000000000)*(gconst2)*(gconst24)*(gconst25)*(gconst3)))+(((-1.00000000000000)*(gconst17)*(gconst23)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst18)*(gconst20)*(gconst6)))+(((gconst13)*(gconst14)*(gconst27)*(gconst3)))+(((-1.00000000000000)*(gconst19)*(gconst2)*(gconst24)*(gconst9)))+(((gconst17)*(gconst26)*(gconst5)*(gconst6)))+(((gconst19)*(gconst2)*(gconst27)*(gconst6)))+(((gconst18)*(gconst27)*(gconst3)*(gconst6)))+(((gconst0)*(gconst21)*(gconst24)*(gconst9)))+(((-1.00000000000000)*(gconst12)*(gconst14)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst18)*(gconst19)*(gconst8)*(gconst9)))+(((gconst11)*(gconst13)*(gconst14)*(gconst19)))+(((gconst2)*(gconst20)*(gconst25)*(gconst7)))+(((gconst16)*(gconst25)*(gconst5)*(gconst8)))+(((-1.00000000000000)*(gconst1)*(gconst21)*(gconst23)*(gconst9)))+(((gconst2)*(gconst20)*(gconst23)*(gconst9)))+(((-1.00000000000000)*(gconst17)*(gconst25)*(gconst5)*(gconst7)))+(((-1.00000000000000)*(gconst17)*(gconst21)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst18)*(gconst22)*(gconst4)))+(((gconst10)*(gconst17)*(gconst21)*(gconst6)))+(((-1.00000000000000)*(gconst16)*(gconst27)*(gconst5)*(gconst6))));
op[5]=((((gconst11)*(gconst14)*(gconst19)*(gconst2)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst21)*(gconst6)))+(((gconst11)*(gconst13)*(gconst22)*(gconst3)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst22)*(gconst5)))+(((-1.00000000000000)*(gconst15)*(gconst18)*(gconst3)*(gconst9)))+(((gconst12)*(gconst25)*(gconst5)*(gconst8)))+(((gconst0)*(gconst15)*(gconst21)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst14)*(gconst16)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst2)*(gconst20)))+(((gconst12)*(gconst24)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst19)*(gconst8)*(gconst9)))+(((gconst15)*(gconst16)*(gconst5)*(gconst9)))+(((gconst1)*(gconst14)*(gconst26)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst14)*(gconst27)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst20)*(gconst6)))+(((gconst12)*(gconst21)*(gconst8)*(gconst9)))+(((gconst13)*(gconst25)*(gconst4)*(gconst7)))+(((gconst1)*(gconst10)*(gconst14)*(gconst21)))+(((gconst10)*(gconst14)*(gconst17)*(gconst5)))+(((gconst11)*(gconst13)*(gconst19)*(gconst6)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst25)*(gconst3)))+(((-1.00000000000000)*(gconst13)*(gconst26)*(gconst4)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst25)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst14)*(gconst21)))+(((-1.00000000000000)*(gconst13)*(gconst24)*(gconst3)*(gconst9)))+(((gconst13)*(gconst27)*(gconst3)*(gconst6)))+(((gconst13)*(gconst23)*(gconst4)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst18)*(gconst4)))+(((gconst14)*(gconst2)*(gconst27)*(gconst3)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst22)*(gconst4)))+(((-1.00000000000000)*(gconst14)*(gconst2)*(gconst26)*(gconst4)))+(((-1.00000000000000)*(gconst12)*(gconst27)*(gconst5)*(gconst6)))+(((gconst11)*(gconst14)*(gconst18)*(gconst3)))+(((gconst13)*(gconst20)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst15)*(gconst19)*(gconst2)*(gconst9)))+(((gconst0)*(gconst15)*(gconst25)*(gconst5))));
op[6]=((((gconst11)*(gconst2)*(gconst22)*(gconst3)))+(((gconst2)*(gconst25)*(gconst4)*(gconst7)))+(((gconst2)*(gconst27)*(gconst3)*(gconst6)))+(((gconst2)*(gconst23)*(gconst4)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst23)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst22)*(gconst5)))+(((-1.00000000000000)*(gconst10)*(gconst18)*(gconst4)*(gconst6)))+(((gconst0)*(gconst25)*(gconst5)*(gconst8)))+(((-1.00000000000000)*(gconst2)*(gconst25)*(gconst3)*(gconst8)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst20)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst25)*(gconst5)*(gconst7)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst14)*(gconst5)))+(((gconst10)*(gconst17)*(gconst5)*(gconst6)))+(((gconst11)*(gconst13)*(gconst14)*(gconst3)))+(((gconst0)*(gconst24)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst22)*(gconst4)))+(((gconst0)*(gconst21)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst13)*(gconst15)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst18)*(gconst3)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst21)*(gconst6)))+(((-1.00000000000000)*(gconst19)*(gconst2)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst1)*(gconst21)*(gconst7)*(gconst9)))+(((gconst16)*(gconst5)*(gconst8)*(gconst9)))+(((gconst11)*(gconst19)*(gconst2)*(gconst6)))+(((gconst18)*(gconst4)*(gconst7)*(gconst9)))+(((gconst1)*(gconst10)*(gconst21)*(gconst6)))+(((gconst11)*(gconst18)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst14)*(gconst4)))+(((gconst1)*(gconst10)*(gconst22)*(gconst5)))+(((-1.00000000000000)*(gconst17)*(gconst5)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst2)*(gconst26)*(gconst4)*(gconst6)))+(((gconst2)*(gconst20)*(gconst7)*(gconst9)))+(((gconst1)*(gconst26)*(gconst5)*(gconst6)))+(((gconst12)*(gconst15)*(gconst5)*(gconst9)))+(((-1.00000000000000)*(gconst2)*(gconst24)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst0)*(gconst27)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst11)*(gconst16)*(gconst5)*(gconst6))));
op[7]=((((gconst1)*(gconst10)*(gconst14)*(gconst5)))+(((-1.00000000000000)*(gconst0)*(gconst11)*(gconst14)*(gconst5)))+(((-1.00000000000000)*(gconst15)*(gconst2)*(gconst3)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst13)*(gconst4)*(gconst6)))+(((gconst11)*(gconst14)*(gconst2)*(gconst3)))+(((gconst11)*(gconst13)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst10)*(gconst14)*(gconst2)*(gconst4)))+(((gconst13)*(gconst4)*(gconst7)*(gconst9)))+(((-1.00000000000000)*(gconst11)*(gconst12)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst13)*(gconst3)*(gconst8)*(gconst9)))+(((gconst12)*(gconst5)*(gconst8)*(gconst9)))+(((gconst0)*(gconst15)*(gconst5)*(gconst9))));
op[8]=((((-1.00000000000000)*(gconst0)*(gconst11)*(gconst5)*(gconst6)))+(((-1.00000000000000)*(gconst2)*(gconst3)*(gconst8)*(gconst9)))+(((gconst0)*(gconst5)*(gconst8)*(gconst9)))+(((-1.00000000000000)*(gconst10)*(gconst2)*(gconst4)*(gconst6)))+(((gconst11)*(gconst2)*(gconst3)*(gconst6)))+(((-1.00000000000000)*(gconst1)*(gconst5)*(gconst7)*(gconst9)))+(((gconst2)*(gconst4)*(gconst7)*(gconst9)))+(((gconst1)*(gconst10)*(gconst5)*(gconst6))));
polyroots8(op,zeror,numroots);
IKReal j28array[8], cj28array[8], sj28array[8], tempj28array[1];
int numsolutions = 0;
for(int ij28 = 0; ij28 < numroots; ++ij28)
{
IKReal htj28 = zeror[ij28];
tempj28array[0]=((2.00000000000000)*(atan(htj28)));
for(int kj28 = 0; kj28 < 1; ++kj28)
{
j28array[numsolutions] = tempj28array[kj28];
if( j28array[numsolutions] > IKPI )
{
    j28array[numsolutions]-=IK2PI;
}
else if( j28array[numsolutions] < -IKPI )
{
    j28array[numsolutions]+=IK2PI;
}
sj28array[numsolutions] = IKsin(j28array[numsolutions]);
cj28array[numsolutions] = IKcos(j28array[numsolutions]);
bool valid = true;
for( int kj28 = 0; kj28 < numsolutions; ++kj28)
{
    if( IKabs(cj28array[kj28]-cj28array[numsolutions]) < 0.0001 && IKabs(sj28array[kj28]-sj28array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij28 = 0; ij28 < numsolutions; ++ij28)
    {
    j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.55277996137460)+((((cj27)*(cj27))*((sj28)*(sj28))))+((cj28)*(cj28))+(((2.49221183800623)*(cj28))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
IKReal x0=((0.321000000000000)*(cj28));
IKReal x1=((0.400000000000000)+(x0));
IKReal x2=(x1)*(x1);
IKReal x3=(cj27)*(cj27);
IKReal x4=(sj28)*(sj28);
IKReal x5=((0.103041000000000)*(x3)*(x4));
IKReal x6=((x2)+(x5));
if( (x6) < (IKReal)-0.00001 )
    continue;
IKReal x7=IKsqrt(x6);
IKReal x8=IKabs(x7);
IKReal x9=((IKabs(x8) != 0)?((IKReal)1/(x8)):(IKReal)1.0e30);
IKReal x10=((pz)*(x9));
if( (x10) < -1-IKFAST_SINCOS_THRESH || (x10) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x11=IKasin(x10);
IKReal x12=((0.321000000000000)*(cj27)*(sj28));
IKReal x13=IKatan2(x12, x1);
j26array[0]=((((-1.00000000000000)*(x13)))+(((-1.00000000000000)*(x11))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
j26array[1]=((3.14159265358979)+(((-1.00000000000000)*(x13)))+(x11));
sj26array[1]=IKsin(j26array[1]);
cj26array[1]=IKcos(j26array[1]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
if( j26array[1] > IKPI )
{
    j26array[1]-=IK2PI;
}
else if( j26array[1] < -IKPI )
{    j26array[1]+=IK2PI;
}
j26valid[1] = true;
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((cj26)*((py)*(py))))+(((cj26)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[3];
IKReal x14=((0.321000000000000)*(cj28));
IKReal x15=((0.400000000000000)+(pz)+(x14));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j26)), 6.28318530717959)));
evalcond[1]=x15;
evalcond[2]=x15;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
IKReal x16=(px)*(px);
IKReal x17=((1000.00000000000)*(x16));
IKReal x18=(py)*(py);
IKReal x19=((1000.00000000000)*(x18));
IKReal x20=((x17)+(x19));
IKReal x21=((0.256800000000000)*(cj28));
IKReal x22=((0.253041000000000)+(x21));
IKReal x23=((x22)+(((-1.00000000000000)*(pp))));
j25array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x20) != 0)?((IKReal)1/(x20)):(IKReal)1.0e30))*(((((5000.00000000000)*(py)*(x23)))+(((321.000000000000)*(px)*(sj27)*(sj28)))))), ((((IKabs(x20) != 0)?((IKReal)1/(x20)):(IKReal)1.0e30))*(((((321.000000000000)*(py)*(sj27)*(sj28)))+(((-5000.00000000000)*(px)*(x23)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
IKReal x109=(px)*(px);
IKReal x110=((1000.00000000000)*(x109));
IKReal x111=(py)*(py);
IKReal x112=((1000.00000000000)*(x111));
IKReal x113=((x112)+(x110));
IKReal x114=((0.800000000000000)*(pz));
IKReal x115=((0.0669590000000000)+(x114)+(pp));
j25array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x113) != 0)?((IKReal)1/(x113)):(IKReal)1.0e30))*(((((-5000.00000000000)*(py)*(x115)))+(((321.000000000000)*(px)*(sj27)*(sj28)))))), ((((IKabs(x113) != 0)?((IKReal)1/(x113)):(IKReal)1.0e30))*(((((5000.00000000000)*(px)*(x115)))+(((321.000000000000)*(py)*(sj27)*(sj28)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
IKReal x116=(px)*(px);
IKReal x117=((1000.00000000000)*(x116));
IKReal x118=(py)*(py);
IKReal x119=((1000.00000000000)*(x118));
IKReal x120=((x117)+(x119));
IKReal x121=((IKabs(x120) != 0)?((IKReal)1/(x120)):(IKReal)1.0e30);
j25array[0]=IKatan2(((x121)*(((((-321.000000000000)*(px)*(sj27)*(sj28)))+(((100.000000000000)*(py)))+(((-321.000000000000)*(cj27)*(py)*(sj28)))))), ((x121)*(((((-321.000000000000)*(cj27)*(px)*(sj28)))+(((100.000000000000)*(px)))+(((321.000000000000)*(py)*(sj27)*(sj28)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x122=((0.321000000000000)*(cj28));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j26)), 6.28318530717959)));
evalcond[1]=((-0.400000000000000)+(((-1.00000000000000)*(x122)))+(pz));
evalcond[2]=((0.400000000000000)+(x122)+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
IKReal x123=(px)*(px);
IKReal x124=((1000.00000000000)*(x123));
IKReal x125=(py)*(py);
IKReal x126=((1000.00000000000)*(x125));
IKReal x127=((x126)+(x124));
IKReal x128=((0.256800000000000)*(cj28));
IKReal x129=((0.253041000000000)+(x128));
IKReal x130=((x129)+(((-1.00000000000000)*(pp))));
j25array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x127) != 0)?((IKReal)1/(x127)):(IKReal)1.0e30))*(((((5000.00000000000)*(py)*(x130)))+(((321.000000000000)*(px)*(sj27)*(sj28)))))), ((((IKabs(x127) != 0)?((IKReal)1/(x127)):(IKReal)1.0e30))*(((((321.000000000000)*(py)*(sj27)*(sj28)))+(((-5000.00000000000)*(px)*(x130)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
IKReal x131=(px)*(px);
IKReal x132=((1000.00000000000)*(x131));
IKReal x133=(py)*(py);
IKReal x134=((1000.00000000000)*(x133));
IKReal x135=((x134)+(x132));
IKReal x136=((0.0669590000000000)+(pp));
IKReal x137=((0.800000000000000)*(pz));
IKReal x138=((x136)+(((-1.00000000000000)*(x137))));
j25array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x135) != 0)?((IKReal)1/(x135)):(IKReal)1.0e30))*(((((-5000.00000000000)*(py)*(x138)))+(((321.000000000000)*(px)*(sj27)*(sj28)))))), ((((IKabs(x135) != 0)?((IKReal)1/(x135)):(IKReal)1.0e30))*(((((5000.00000000000)*(px)*(x138)))+(((321.000000000000)*(py)*(sj27)*(sj28)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
IKReal x139=(px)*(px);
IKReal x140=((1000.00000000000)*(x139));
IKReal x141=(py)*(py);
IKReal x142=((1000.00000000000)*(x141));
IKReal x143=((x140)+(x142));
IKReal x144=((IKabs(x143) != 0)?((IKReal)1/(x143)):(IKReal)1.0e30);
j25array[0]=IKatan2(((x144)*(((((-321.000000000000)*(px)*(sj27)*(sj28)))+(((100.000000000000)*(py)))+(((321.000000000000)*(cj27)*(py)*(sj28)))))), ((x144)*(((((321.000000000000)*(cj27)*(px)*(sj28)))+(((100.000000000000)*(px)))+(((321.000000000000)*(py)*(sj27)*(sj28)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
IKReal x145=(px)*(px);
IKReal x146=((1000.00000000000)*(x145));
IKReal x147=(py)*(py);
IKReal x148=((1000.00000000000)*(x147));
IKReal x149=((x146)+(x148));
IKReal x150=((IKabs(x149) != 0)?((IKReal)1/(x149)):(IKReal)1.0e30);
IKReal x151=((0.400000000000000)*(cj26));
IKReal x152=((0.321000000000000)*(cj26)*(cj28));
IKReal x153=((0.100000000000000)+(x152)+(x151));
IKReal x154=((0.321000000000000)*(cj27)*(sj26)*(sj28));
IKReal x155=((((-1.00000000000000)*(x154)))+(x153));
j25array[0]=IKatan2(((x150)*(((((-321.000000000000)*(px)*(sj27)*(sj28)))+(((1000.00000000000)*(py)*(x155)))))), ((x150)*(((((321.000000000000)*(py)*(sj27)*(sj28)))+(((1000.00000000000)*(px)*(x155)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
IKReal x156=(px)*(px);
IKReal x157=((1000.00000000000)*(cj26)*(x156));
IKReal x158=(py)*(py);
IKReal x159=((1000.00000000000)*(cj26)*(x158));
IKReal x160=((x157)+(x159));
IKReal x161=((IKabs(x160) != 0)?((IKReal)1/(x160)):(IKReal)1.0e30);
IKReal x162=((0.321000000000000)*(cj28));
IKReal x163=((0.100000000000000)*(cj26));
IKReal x164=((pz)*(sj26));
IKReal x165=((0.400000000000000)+(x162)+(x163)+(x164));
j25array[0]=IKatan2(((x161)*(((((1000.00000000000)*(py)*(x165)))+(((-321.000000000000)*(cj26)*(px)*(sj27)*(sj28)))))), ((x161)*(((((321.000000000000)*(cj26)*(py)*(sj27)*(sj28)))+(((1000.00000000000)*(px)*(x165)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
IKReal x166=(px)*(px);
IKReal x167=((1000.00000000000)*(x166));
IKReal x168=(py)*(py);
IKReal x169=((1000.00000000000)*(x168));
IKReal x170=((x169)+(x167));
IKReal x171=((0.256800000000000)*(cj28));
IKReal x172=((0.253041000000000)+(x171));
IKReal x173=((x172)+(((-1.00000000000000)*(pp))));
j25array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x170) != 0)?((IKReal)1/(x170)):(IKReal)1.0e30))*(((((5000.00000000000)*(py)*(x173)))+(((321.000000000000)*(px)*(sj27)*(sj28)))))), ((((IKabs(x170) != 0)?((IKReal)1/(x170)):(IKReal)1.0e30))*(((((-5000.00000000000)*(px)*(x173)))+(((321.000000000000)*(py)*(sj27)*(sj28)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j25array[1], cj25array[1], sj25array[1];
bool j25valid[1]={false};
IKReal x174=(px)*(px);
IKReal x175=((1000.00000000000)*(x174));
IKReal x176=(py)*(py);
IKReal x177=((1000.00000000000)*(x176));
IKReal x178=((x175)+(x177));
IKReal x179=((0.256800000000000)*(cj28));
IKReal x180=((0.253041000000000)+(x179));
IKReal x181=((x180)+(((-1.00000000000000)*(pp))));
j25array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x178) != 0)?((IKReal)1/(x178)):(IKReal)1.0e30))*(((((5000.00000000000)*(py)*(x181)))+(((321.000000000000)*(px)*(sj27)*(sj28)))))), ((((IKabs(x178) != 0)?((IKReal)1/(x178)):(IKReal)1.0e30))*(((((-5000.00000000000)*(px)*(x181)))+(((321.000000000000)*(py)*(sj27)*(sj28)))))));
sj25array[0]=IKsin(j25array[0]);
cj25array[0]=IKcos(j25array[0]);
if( j25array[0] > IKPI )
{
    j25array[0]-=IK2PI;
}
else if( j25array[0] < -IKPI )
{    j25array[0]+=IK2PI;
}
j25valid[0] = true;
for(int ij25 = 0; ij25 < 1; ++ij25)
{
if( !j25valid[ij25] )
{
    continue;
}
j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IKReal dummyeval[1];
dummyeval[0]=((1.55277996137460)+((((cj27)*(cj27))*((sj28)*(sj28))))+((cj28)*(cj28))+(((2.49221183800623)*(cj28))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.24610591900312)+(((-10.0000000000000)*(cj25)*(cj28)*(px)))+(((-12.4610591900312)*(cj25)*(px)))+(cj28)+(((-10.0000000000000)*(cj27)*(pz)*(sj28)))+(((-12.4610591900312)*(py)*(sj25)))+(((-10.0000000000000)*(cj28)*(py)*(sj25))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj27)*(sj28)))+(((-10.0000000000000)*(cj28)*(pz)))+(((10.0000000000000)*(cj27)*(py)*(sj25)*(sj28)))+(((-12.4610591900312)*(pz)))+(((10.0000000000000)*(cj25)*(cj27)*(px)*(sj28))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[4];
IKReal x182=((0.321000000000000)*(sj28));
IKReal x183=((px)*(sj25));
IKReal x184=((x182)+(x183));
IKReal x185=((cj25)*(py));
IKReal x186=((((-1.00000000000000)*(x185)))+(x184));
evalcond[0]=((IKabs(pz))+(IKabs(((3.14159265358979)+(((-1.00000000000000)*(IKfmod(((1.57079632679490)+(j27)), 6.28318530717959))))))));
evalcond[1]=x186;
evalcond[2]=((0.253041000000000)+(((0.200000000000000)*(cj25)*(px)))+(((0.256800000000000)*(cj28)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=x186;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.00000000000000)+(((-10.0000000000000)*(py)*(sj25)))+(((-10.0000000000000)*(cj25)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.24610591900312)+(cj28));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.00000000000000)+(((-10.0000000000000)*(py)*(sj25)))+(((-10.0000000000000)*(cj25)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
IKReal x187=((0.800000000000000)*(cj25)*(px));
IKReal x188=((0.800000000000000)*(py)*(sj25));
IKReal x189=((x187)+(x188));
IKReal x190=((0.0800000000000000)+(((-1.00000000000000)*(x189))));
IKReal x191=((IKabs(x190) != 0)?((IKReal)1/(x190)):(IKReal)1.0e30);
cj26array[0]=((((0.200000000000000)*(cj25)*(px)*(x191)))+(((0.200000000000000)*(py)*(sj25)*(x191)))+(((-1.00000000000000)*(pp)*(x191)))+(((-0.0669590000000000)*(x191))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
IKReal x192=((0.321000000000000)*(cj28));
IKReal x193=((0.400000000000000)+(x192));
IKReal x194=((IKabs(x193) != 0)?((IKReal)1/(x193)):(IKReal)1.0e30);
cj26array[0]=((((cj25)*(px)*(x194)))+(((py)*(sj25)*(x194)))+(((-0.100000000000000)*(x194))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
IKReal x195=((cj25)*(px));
IKReal x196=((py)*(sj25));
IKReal x197=((x196)+(x195));
IKReal x198=((0.100000000000000)+(((-1.00000000000000)*(x197))));
IKReal x199=((IKabs(x198) != 0)?((IKReal)1/(x198)):(IKReal)1.0e30);
cj26array[0]=((((-0.321000000000000)*(cj28)*(x199)))+(((-0.400000000000000)*(x199))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x200=((0.321000000000000)*(sj28));
IKReal x201=((cj25)*(py));
IKReal x202=((x201)+(x200));
IKReal x203=((px)*(sj25));
evalcond[0]=((IKabs(pz))+(IKabs(((3.14159265358979)+(((-1.00000000000000)*(IKfmod(((4.71238898038469)+(j27)), 6.28318530717959))))))));
evalcond[1]=((((-1.00000000000000)*(x202)))+(x203));
evalcond[2]=((0.253041000000000)+(((0.200000000000000)*(cj25)*(px)))+(((0.256800000000000)*(cj28)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=((((-1.00000000000000)*(x203)))+(x202));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.00000000000000)+(((-10.0000000000000)*(py)*(sj25)))+(((-10.0000000000000)*(cj25)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.24610591900312)+(cj28));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.00000000000000)+(((-10.0000000000000)*(py)*(sj25)))+(((-10.0000000000000)*(cj25)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
IKReal x204=((0.800000000000000)*(cj25)*(px));
IKReal x205=((0.800000000000000)*(py)*(sj25));
IKReal x206=((x205)+(x204));
IKReal x207=((0.0800000000000000)+(((-1.00000000000000)*(x206))));
IKReal x208=((IKabs(x207) != 0)?((IKReal)1/(x207)):(IKReal)1.0e30);
cj26array[0]=((((0.200000000000000)*(cj25)*(px)*(x208)))+(((0.200000000000000)*(py)*(sj25)*(x208)))+(((-1.00000000000000)*(pp)*(x208)))+(((-0.0669590000000000)*(x208))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
IKReal x209=((0.321000000000000)*(cj28));
IKReal x210=((0.400000000000000)+(x209));
IKReal x211=((IKabs(x210) != 0)?((IKReal)1/(x210)):(IKReal)1.0e30);
cj26array[0]=((((py)*(sj25)*(x211)))+(((cj25)*(px)*(x211)))+(((-0.100000000000000)*(x211))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
IKReal x212=((cj25)*(px));
IKReal x213=((py)*(sj25));
IKReal x214=((x212)+(x213));
IKReal x215=((0.100000000000000)+(((-1.00000000000000)*(x214))));
IKReal x216=((IKabs(x215) != 0)?((IKReal)1/(x215)):(IKReal)1.0e30);
cj26array[0]=((((-0.321000000000000)*(cj28)*(x216)))+(((-0.400000000000000)*(x216))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(pz))+(IKabs(((3.14159265358979)+(((-1.00000000000000)*(IKfmod(((3.14159265358979)+(j28)), 6.28318530717959))))))));
evalcond[1]=((((-1.00000000000000)*(cj25)*(py)))+(((px)*(sj25))));
evalcond[2]=((0.509841000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((10.0000000000000)*(cj25)*(cj27)*(px)))+(((10.0000000000000)*(cj27)*(py)*(sj25)))+(((-1.00000000000000)*(cj27))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.100000000000000)*(sj27)))+(((-1.00000000000000)*(py)*(sj25)*(sj27)))+(((-1.00000000000000)*(cj25)*(px)*(sj27))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((10.0000000000000)*(cj25)*(cj27)*(px)))+(((10.0000000000000)*(cj27)*(py)*(sj25)))+(((-1.00000000000000)*(cj27))));
dummyeval[1]=((1.00000000000000)+(((-10.0000000000000)*(py)*(sj25)))+(((-10.0000000000000)*(cj25)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal evalcond[4];
IKReal x217=((px)*(sj25));
IKReal x218=((cj25)*(py));
IKReal x219=((x217)+(((-1.00000000000000)*(x218))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j27)), 6.28318530717959)));
evalcond[1]=x219;
evalcond[2]=((0.509841000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=x219;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
cj26array[0]=((-0.138696255201110)+(((1.38696255201110)*(cj25)*(px)))+(((1.38696255201110)*(py)*(sj25))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x220=((cj25)*(py));
IKReal x221=((px)*(sj25));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j27)), 6.28318530717959)));
evalcond[1]=((x221)+(((-1.00000000000000)*(x220))));
evalcond[2]=((0.509841000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=((x220)+(((-1.00000000000000)*(x221))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
cj26array[0]=((-0.138696255201110)+(((1.38696255201110)*(cj25)*(px)))+(((1.38696255201110)*(py)*(sj25))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x222=((px)*(sj25));
IKReal x223=((cj25)*(py));
IKReal x224=((x222)+(((-1.00000000000000)*(x223))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j27)), 6.28318530717959)));
evalcond[1]=x224;
evalcond[2]=((0.509841000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=x224;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
cj26array[0]=((-0.138696255201110)+(((1.38696255201110)*(cj25)*(px)))+(((1.38696255201110)*(py)*(sj25))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x225=((cj25)*(py));
IKReal x226=((px)*(sj25));
evalcond[0]=((-3.14159265358979)+(IKfmod(j27, 6.28318530717959)));
evalcond[1]=((x226)+(((-1.00000000000000)*(x225))));
evalcond[2]=((0.509841000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=((x225)+(((-1.00000000000000)*(x226))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
cj26array[0]=((-0.138696255201110)+(((1.38696255201110)*(cj25)*(px)))+(((1.38696255201110)*(py)*(sj25))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((cj27)*(py)*(sj25)))+(((cj25)*(cj27)*(px)))+(((-0.100000000000000)*(cj27))))) != 0)?((IKReal)1/(((((cj27)*(py)*(sj25)))+(((cj25)*(cj27)*(px)))+(((-0.100000000000000)*(cj27)))))):(IKReal)1.0e30))*(((((cj25)*(py)*(sj27)))+(((-1.00000000000000)*(px)*(sj25)*(sj27)))))), ((-721.000000000000)*(((IKabs(((100.000000000000)+(((-1000.00000000000)*(py)*(sj25)))+(((-1000.00000000000)*(cj25)*(px))))) != 0)?((IKReal)1/(((100.000000000000)+(((-1000.00000000000)*(py)*(sj25)))+(((-1000.00000000000)*(cj25)*(px)))))):(IKReal)1.0e30))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((0.100000000000000)*(sj27)))+(((-1.00000000000000)*(py)*(sj25)*(sj27)))+(((-1.00000000000000)*(cj25)*(px)*(sj27))))) != 0)?((IKReal)1/(((((0.100000000000000)*(sj27)))+(((-1.00000000000000)*(py)*(sj25)*(sj27)))+(((-1.00000000000000)*(cj25)*(px)*(sj27)))))):(IKReal)1.0e30))*(((((cj25)*(cj27)*(py)))+(((-1.00000000000000)*(cj27)*(px)*(sj25)))))), ((-0.138696255201110)+(((1.38696255201110)*(cj25)*(px)))+(((1.38696255201110)*(py)*(sj25)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((cj27)*(py)*(sj25)))+(((cj25)*(cj27)*(px)))+(((-0.100000000000000)*(cj27))))) != 0)?((IKReal)1/(((((cj27)*(py)*(sj25)))+(((cj25)*(cj27)*(px)))+(((-0.100000000000000)*(cj27)))))):(IKReal)1.0e30))*(((((cj25)*(py)*(sj27)))+(((-1.00000000000000)*(px)*(sj25)*(sj27)))))), ((-0.138696255201110)+(((1.38696255201110)*(cj25)*(px)))+(((1.38696255201110)*(py)*(sj25)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(pz))+(IKabs(((3.14159265358979)+(((-1.00000000000000)*(IKfmod(j28, 6.28318530717959))))))));
evalcond[1]=((((-1.00000000000000)*(cj25)*(py)))+(((px)*(sj25))));
evalcond[2]=((-0.00375900000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((10.0000000000000)*(cj25)*(cj27)*(px)))+(((10.0000000000000)*(cj27)*(py)*(sj25)))+(((-1.00000000000000)*(cj27))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.100000000000000)*(sj27)))+(((-1.00000000000000)*(py)*(sj25)*(sj27)))+(((-1.00000000000000)*(cj25)*(px)*(sj27))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((10.0000000000000)*(cj25)*(cj27)*(px)))+(((10.0000000000000)*(cj27)*(py)*(sj25)))+(((-1.00000000000000)*(cj27))));
dummyeval[1]=((1.00000000000000)+(((-10.0000000000000)*(py)*(sj25)))+(((-10.0000000000000)*(cj25)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal evalcond[4];
IKReal x227=((px)*(sj25));
IKReal x228=((cj25)*(py));
IKReal x229=((x227)+(((-1.00000000000000)*(x228))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j27)), 6.28318530717959)));
evalcond[1]=x229;
evalcond[2]=((-0.00375900000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=x229;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
cj26array[0]=((-1.26582278481013)+(((12.6582278481013)*(py)*(sj25)))+(((12.6582278481013)*(cj25)*(px))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x230=((cj25)*(py));
IKReal x231=((px)*(sj25));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j27)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x230)))+(x231));
evalcond[2]=((-0.00375900000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=((((-1.00000000000000)*(x231)))+(x230));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
cj26array[0]=((-1.26582278481013)+(((12.6582278481013)*(py)*(sj25)))+(((12.6582278481013)*(cj25)*(px))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x232=((px)*(sj25));
IKReal x233=((cj25)*(py));
IKReal x234=((((-1.00000000000000)*(x233)))+(x232));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j27)), 6.28318530717959)));
evalcond[1]=x234;
evalcond[2]=((-0.00375900000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=x234;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
cj26array[0]=((-1.26582278481013)+(((12.6582278481013)*(py)*(sj25)))+(((12.6582278481013)*(cj25)*(px))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x235=((cj25)*(py));
IKReal x236=((px)*(sj25));
evalcond[0]=((-3.14159265358979)+(IKfmod(j27, 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x235)))+(x236));
evalcond[2]=((-0.00375900000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=((((-1.00000000000000)*(x236)))+(x235));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
cj26array[0]=((-1.26582278481013)+(((12.6582278481013)*(py)*(sj25)))+(((12.6582278481013)*(cj25)*(px))));
if( cj26array[0] >= -1-IKFAST_SINCOS_THRESH && cj26array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j26valid[0] = j26valid[1] = true;
    j26array[0] = IKacos(cj26array[0]);
    sj26array[0] = IKsin(j26array[0]);
    cj26array[1] = cj26array[0];
    j26array[1] = -j26array[0];
    sj26array[1] = -sj26array[0];
}
else if( isnan(cj26array[0]) )
{
    // probably any value will work
    j26valid[0] = true;
    cj26array[0] = 1; sj26array[0] = 0; j26array[0] = 0;
}
if( j26valid[0] && j26valid[1] && IKabs(cj26array[0]-cj26array[1]) < 0.0001 && IKabs(sj26array[0]-sj26array[1]) < 0.0001 )
{
    j26valid[1]=false;
}
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((cj27)*(py)*(sj25)))+(((cj25)*(cj27)*(px)))+(((-0.100000000000000)*(cj27))))) != 0)?((IKReal)1/(((((cj27)*(py)*(sj25)))+(((cj25)*(cj27)*(px)))+(((-0.100000000000000)*(cj27)))))):(IKReal)1.0e30))*(((((cj25)*(py)*(sj27)))+(((-1.00000000000000)*(px)*(sj25)*(sj27)))))), ((-79.0000000000000)*(((IKabs(((100.000000000000)+(((-1000.00000000000)*(py)*(sj25)))+(((-1000.00000000000)*(cj25)*(px))))) != 0)?((IKReal)1/(((100.000000000000)+(((-1000.00000000000)*(py)*(sj25)))+(((-1000.00000000000)*(cj25)*(px)))))):(IKReal)1.0e30))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((0.100000000000000)*(sj27)))+(((-1.00000000000000)*(py)*(sj25)*(sj27)))+(((-1.00000000000000)*(cj25)*(px)*(sj27))))) != 0)?((IKReal)1/(((((0.100000000000000)*(sj27)))+(((-1.00000000000000)*(py)*(sj25)*(sj27)))+(((-1.00000000000000)*(cj25)*(px)*(sj27)))))):(IKReal)1.0e30))*(((((cj25)*(cj27)*(py)))+(((-1.00000000000000)*(cj27)*(px)*(sj25)))))), ((-1.26582278481013)+(((12.6582278481013)*(py)*(sj25)))+(((12.6582278481013)*(cj25)*(px)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((cj27)*(py)*(sj25)))+(((cj25)*(cj27)*(px)))+(((-0.100000000000000)*(cj27))))) != 0)?((IKReal)1/(((((cj27)*(py)*(sj25)))+(((cj25)*(cj27)*(px)))+(((-0.100000000000000)*(cj27)))))):(IKReal)1.0e30))*(((((cj25)*(py)*(sj27)))+(((-1.00000000000000)*(px)*(sj25)*(sj27)))))), ((-1.26582278481013)+(((12.6582278481013)*(py)*(sj25)))+(((12.6582278481013)*(cj25)*(px)))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x237=((cj25)*(px));
IKReal x238=((py)*(sj25));
IKReal x239=((x238)+(x237));
IKReal x240=((0.100000000000000)+(((-1.00000000000000)*(x239))));
IKReal x241=((0.321000000000000)*(cj28));
IKReal x242=((0.400000000000000)+(x241));
IKReal x243=((321.000000000000)*(cj27)*(sj28)*(x238));
IKReal x244=((321.000000000000)*(cj27)*(sj28)*(x237));
IKReal x245=((x243)+(x244));
IKReal x246=((321.000000000000)*(cj28)*(pz));
IKReal x247=((32.1000000000000)*(cj27)*(sj28));
IKReal x248=((400.000000000000)*(pz));
IKReal x249=((x247)+(x246)+(x248));
IKReal x250=((x245)+(((-1.00000000000000)*(x249))));
IKReal x251=((IKabs(x250) != 0)?((IKReal)1/(x250)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x251)*(((((1000.00000000000)*((x242)*(x242))))+(((-1000.00000000000)*((x240)*(x240))))))), ((x251)*(((((321.000000000000)*(cj27)*(sj28)*(x242)))+(((1000.00000000000)*(pz)*(x240)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x252=((0.321000000000000)*(cj28));
IKReal x253=((0.400000000000000)+(x252));
IKReal x254=((32.1000000000000)*(cj28));
IKReal x255=((40.0000000000000)+(x254));
IKReal x256=((400.000000000000)*(py)*(sj25));
IKReal x257=((321.000000000000)*(cj25)*(cj28)*(px));
IKReal x258=((400.000000000000)*(cj25)*(px));
IKReal x259=((321.000000000000)*(cj28)*(py)*(sj25));
IKReal x260=((321.000000000000)*(cj27)*(pz)*(sj28));
IKReal x261=((x258)+(x259)+(x256)+(x257)+(x260));
IKReal x262=((x255)+(((-1.00000000000000)*(x261))));
IKReal x263=((IKabs(x262) != 0)?((IKReal)1/(x262)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x263)*(((((321.000000000000)*(cj27)*(sj28)*(x253)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(py)*(sj25)))))))))), ((x263)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((x253)*(x253))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x264=(cj28)*(cj28);
IKReal x265=((103041.000000000)*(x264));
IKReal x266=((256800.000000000)*(cj28));
IKReal x267=(cj27)*(cj27);
IKReal x268=(sj28)*(sj28);
IKReal x269=((103041.000000000)*(x267)*(x268));
IKReal x270=((160000.000000000)+(x265)+(x266)+(x269));
IKReal x271=((IKabs(x270) != 0)?((IKReal)1/(x270)):(IKReal)1.0e30);
IKReal x272=((cj25)*(px));
IKReal x273=((py)*(sj25));
IKReal x274=((x272)+(x273));
IKReal x275=((0.100000000000000)+(((-1.00000000000000)*(x274))));
j26array[0]=IKatan2(((-1.00000000000000)*(x271)*(((((-321000.000000000)*(cj27)*(sj28)*(x275)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))), ((-1.00000000000000)*(x271)*(((((x275)*(((400000.000000000)+(((321000.000000000)*(cj28)))))))+(((321000.000000000)*(cj27)*(pz)*(sj28)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x24=((cj26)*(sj28));
IKReal x25=((cj27)*(cj28)*(sj26));
IKReal x26=((x24)+(x25));
IKReal x27=((-1.00000000000000)*(x26));
IKReal x28=((sj26)*(sj28));
IKReal x29=((cj26)*(cj27)*(cj28));
IKReal x30=((((-1.00000000000000)*(x29)))+(x28));
IKReal x31=((cj25)*(cj28)*(sj27));
IKReal x32=((sj25)*(x27));
IKReal x33=((x32)+(x31));
IKReal x34=((-1.00000000000000)*(cj28)*(sj25)*(sj27));
IKReal x35=((cj25)*(x27));
IKReal x36=((x35)+(x34));
IKReal x37=((cj25)*(sj26)*(sj27));
IKReal x38=((cj27)*(sj25));
IKReal x39=((((-1.00000000000000)*(x38)))+(x37));
IKReal x40=((sj25)*(sj26)*(sj27));
IKReal x41=((cj25)*(cj27));
IKReal x42=((x40)+(x41));
IKReal x43=((cj26)*(cj28));
IKReal x44=((cj27)*(x28));
IKReal x45=((((-1.00000000000000)*(x44)))+(x43));
IKReal x46=((cj28)*(sj26));
IKReal x47=((cj27)*(x24));
IKReal x48=((x46)+(x47));
IKReal x49=((-1.00000000000000)*(x48));
IKReal x50=((cj25)*(x45));
IKReal x51=((sj25)*(sj27)*(sj28));
IKReal x52=((x50)+(((-1.00000000000000)*(x51))));
IKReal x53=((sj25)*(x45));
IKReal x54=((cj25)*(sj27)*(sj28));
IKReal x55=((x54)+(x53));
new_r00=((((r20)*(x30)))+(((r00)*(x36)))+(((r10)*(x33))));
new_r01=((((r01)*(x36)))+(((r11)*(x33)))+(((r21)*(x30))));
new_r02=((((r22)*(x30)))+(((r02)*(((((-1.00000000000000)*(cj28)*(sj25)*(sj27)))+(x35)))))+(((r12)*(x33))));
new_r10=((((r00)*(x39)))+(((cj26)*(r20)*(sj27)))+(((r10)*(x42))));
new_r11=((((cj26)*(r21)*(sj27)))+(((r01)*(x39)))+(((r11)*(x42))));
new_r12=((((cj26)*(r22)*(sj27)))+(((r02)*(x39)))+(((r12)*(x42))));
new_r20=((((r20)*(x49)))+(((r10)*(x55)))+(((r00)*(x52))));
new_r21=((((r11)*(x55)))+(((r01)*(x52)))+(((r21)*(x49))));
new_r22=((((r02)*(x52)))+(((r22)*(x49)))+(((r12)*(x55))));
{
IKReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
cj30array[0]=new_r22;
if( cj30array[0] >= -1-IKFAST_SINCOS_THRESH && cj30array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
if( j30valid[0] && j30valid[1] && IKabs(cj30array[0]-cj30array[1]) < 0.0001 && IKabs(sj30array[0]-sj30array[1]) < 0.0001 )
{
    j30valid[1]=false;
}
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r01)*(new_r10)*(sj30)))+(((-1.00000000000000)*(new_r00)*(new_r11)*(sj30))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r02)*(new_r10)*(sj30)))+(((new_r00)*(new_r12)*(sj30))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
IKReal x56=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j30)), 6.28318530717959)));
evalcond[1]=x56;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x56;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j29array[2], cj29array[2], sj29array[2];
bool j29valid[2]={false};
IKReal x57=IKatan2(new_r02, new_r12);
j29array[0]=((-1.00000000000000)*(x57));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
j29array[1]=((3.14159265358979)+(((-1.00000000000000)*(x57))));
sj29array[1]=IKsin(j29array[1]);
cj29array[1]=IKcos(j29array[1]);
if( j29array[0] > IKPI )
{
    j29array[0]-=IK2PI;
}
else if( j29array[0] < -IKPI )
{    j29array[0]+=IK2PI;
}
j29valid[0] = true;
if( j29array[1] > IKPI )
{
    j29array[1]-=IK2PI;
}
else if( j29array[1] < -IKPI )
{    j29array[1]+=IK2PI;
}
j29valid[1] = true;
if( j29valid[0] && j29valid[1] && IKabs(cj29array[0]-cj29array[1]) < 0.0001 && IKabs(sj29array[0]-sj29array[1]) < 0.0001 )
{
    j29valid[1]=false;
}
for(int ij29 = 0; ij29 < 2; ++ij29)
{
if( !j29valid[ij29] )
{
    continue;
}
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((-1.00000000000000)*(cj29)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj29)))), ((((new_r10)*(sj29)))+(((cj29)*(new_r00)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j30, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j29array[2], cj29array[2], sj29array[2];
bool j29valid[2]={false};
IKReal x58=IKatan2(new_r02, new_r12);
j29array[0]=((-1.00000000000000)*(x58));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
j29array[1]=((3.14159265358979)+(((-1.00000000000000)*(x58))));
sj29array[1]=IKsin(j29array[1]);
cj29array[1]=IKcos(j29array[1]);
if( j29array[0] > IKPI )
{
    j29array[0]-=IK2PI;
}
else if( j29array[0] < -IKPI )
{    j29array[0]+=IK2PI;
}
j29valid[0] = true;
if( j29array[1] > IKPI )
{
    j29array[1]-=IK2PI;
}
else if( j29array[1] < -IKPI )
{    j29array[1]+=IK2PI;
}
j29valid[1] = true;
if( j29valid[0] && j29valid[1] && IKabs(cj29array[0]-cj29array[1]) < 0.0001 && IKabs(sj29array[0]-sj29array[1]) < 0.0001 )
{
    j29valid[1]=false;
}
for(int ij29 = 0; ij29 < 2; ++ij29)
{
if( !j29valid[ij29] )
{
    continue;
}
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r01)))+(((new_r11)*(sj29)))), ((((-1.00000000000000)*(cj29)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x59=(sj30)*(sj30);
IKReal x60=((new_r00)*(new_r12)*(sj30));
IKReal x61=((new_r02)*(new_r10)*(sj30));
IKReal x62=((x60)+(((-1.00000000000000)*(x61))));
IKReal x63=((IKabs(x62) != 0)?((IKReal)1/(x62)):(IKReal)1.0e30);
j29array[0]=IKatan2(((x63)*(((((cj30)*(new_r02)*(new_r20)))+(((new_r00)*(x59)))))), ((x63)*(((((-1.00000000000000)*(new_r10)*(x59)))+(((-1.00000000000000)*(cj30)*(new_r12)*(new_r20)))))));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
{
    j29array[0]-=IK2PI;
}
else if( j29array[0] < -IKPI )
{    j29array[0]+=IK2PI;
}
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] )
{
    continue;
}
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x64=((cj29)*(new_r12));
IKReal x65=((new_r02)*(sj29));
IKReal x66=((x64)+(((-1.00000000000000)*(x65))));
IKReal x67=((-1.00000000000000)+(new_r22));
IKReal x68=((new_r12)*(sj29));
IKReal x69=((cj29)*(new_r02));
IKReal x70=((x68)+(x69));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j30)), 6.28318530717959)));
evalcond[1]=x67;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x66;
evalcond[5]=x66;
evalcond[6]=x70;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x67;
evalcond[10]=x70;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((-1.00000000000000)*(cj29)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj29)))), ((((new_r10)*(sj29)))+(((cj29)*(new_r00)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x71=((cj29)*(new_r12));
IKReal x72=((new_r02)*(sj29));
IKReal x73=((((-1.00000000000000)*(x72)))+(x71));
IKReal x74=((new_r12)*(sj29));
IKReal x75=((cj29)*(new_r02));
IKReal x76=((x75)+(x74));
evalcond[0]=((-3.14159265358979)+(IKfmod(j30, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x73;
evalcond[5]=x73;
evalcond[6]=x76;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x76));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r01)))+(((new_r11)*(sj29)))), ((((-1.00000000000000)*(cj29)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
IKReal x77=((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30);
j31array[0]=IKatan2(((new_r21)*(x77)), ((-1.00000000000000)*(new_r20)*(x77)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj29)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((new_r21)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))), ((((cj29)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x78=((new_r01)*(new_r10)*(sj30));
IKReal x79=((new_r00)*(new_r11)*(sj30));
IKReal x80=((((-1.00000000000000)*(x79)))+(x78));
IKReal x81=((IKabs(x80) != 0)?((IKReal)1/(x80)):(IKReal)1.0e30);
j29array[0]=IKatan2(((x81)*(((((cj30)*(new_r00)*(new_r21)))+(((-1.00000000000000)*(cj30)*(new_r01)*(new_r20)))))), ((x81)*(((((-1.00000000000000)*(cj30)*(new_r10)*(new_r21)))+(((cj30)*(new_r11)*(new_r20)))))));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
{
    j29array[0]-=IK2PI;
}
else if( j29array[0] < -IKPI )
{    j29array[0]+=IK2PI;
}
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] )
{
    continue;
}
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x82=((cj29)*(new_r12));
IKReal x83=((new_r02)*(sj29));
IKReal x84=((x82)+(((-1.00000000000000)*(x83))));
IKReal x85=((-1.00000000000000)+(new_r22));
IKReal x86=((new_r12)*(sj29));
IKReal x87=((cj29)*(new_r02));
IKReal x88=((x86)+(x87));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j30)), 6.28318530717959)));
evalcond[1]=x85;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x84;
evalcond[5]=x84;
evalcond[6]=x88;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x85;
evalcond[10]=x88;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((-1.00000000000000)*(cj29)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj29)))), ((((new_r10)*(sj29)))+(((cj29)*(new_r00)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x89=((cj29)*(new_r12));
IKReal x90=((new_r02)*(sj29));
IKReal x91=((x89)+(((-1.00000000000000)*(x90))));
IKReal x92=((new_r12)*(sj29));
IKReal x93=((cj29)*(new_r02));
IKReal x94=((x93)+(x92));
evalcond[0]=((-3.14159265358979)+(IKfmod(j30, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x91;
evalcond[5]=x91;
evalcond[6]=x94;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x94));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r01)))+(((new_r11)*(sj29)))), ((((-1.00000000000000)*(cj29)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
IKReal x95=((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30);
j31array[0]=IKatan2(((new_r21)*(x95)), ((-1.00000000000000)*(new_r20)*(x95)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj29)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((new_r21)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))), ((((cj29)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
IKReal x96=((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30);
j31array[0]=IKatan2(((new_r21)*(x96)), ((-1.00000000000000)*(new_r20)*(x96)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
{
    j31array[0]-=IK2PI;
}
else if( j31array[0] < -IKPI )
{    j31array[0]+=IK2PI;
}
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
IKReal dummyeval[1];
dummyeval[0]=((((new_r10)*(new_r12)))+(((new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r11)*(new_r12)))+(((new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r02)*(new_r11)))+(((new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x97=((new_r01)*(new_r12));
IKReal x98=((new_r02)*(new_r11));
IKReal x99=((x97)+(((-1.00000000000000)*(x98))));
IKReal x100=((IKabs(x99) != 0)?((IKReal)1/(x99)):(IKReal)1.0e30);
j29array[0]=IKatan2(((x100)*(((((new_r01)*(sj30)))+(((cj30)*(new_r02)*(sj31)))))), ((x100)*(((((-1.00000000000000)*(cj30)*(new_r12)*(sj31)))+(((-1.00000000000000)*(new_r11)*(sj30)))))));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
{
    j29array[0]-=IK2PI;
}
else if( j29array[0] < -IKPI )
{    j29array[0]+=IK2PI;
}
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] )
{
    continue;
}
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x101=((new_r11)*(new_r12));
IKReal x102=((new_r01)*(new_r02));
IKReal x103=((x101)+(x102));
IKReal x104=((IKabs(x103) != 0)?((IKReal)1/(x103)):(IKReal)1.0e30);
j29array[0]=IKatan2(((x104)*(((((-1.00000000000000)*(cj31)*(new_r02)))+(((new_r11)*(sj30)))))), ((x104)*(((((new_r01)*(sj30)))+(((cj31)*(new_r12)))))));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
{
    j29array[0]-=IK2PI;
}
else if( j29array[0] < -IKPI )
{    j29array[0]+=IK2PI;
}
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] )
{
    continue;
}
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x105=((new_r10)*(new_r12));
IKReal x106=((new_r00)*(new_r02));
IKReal x107=((x105)+(x106));
IKReal x108=((IKabs(x107) != 0)?((IKReal)1/(x107)):(IKReal)1.0e30);
j29array[0]=IKatan2(((x108)*(((((-1.00000000000000)*(new_r02)*(sj31)))+(((new_r10)*(sj30)))))), ((x108)*(((((new_r00)*(sj30)))+(((new_r12)*(sj31)))))));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
{
    j29array[0]-=IK2PI;
}
else if( j29array[0] < -IKPI )
{    j29array[0]+=IK2PI;
}
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] )
{
    continue;
}
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots8(IKReal rawcoeffs[8+1], IKReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[8];
    const int maxsteps = 50;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[8];
    IKReal err[8];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 8; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "ad4f1590d2a9b2079648c64e9db33191"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif

#if defined(IKFAST_HEADER) && defined(IKFAST_NAMESPACE)
#include "ikbase.h"
namespace IKFAST_NAMESPACE {
#ifdef RAVE_REGISTER_BOOST
#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()
BOOST_TYPEOF_REGISTER_TYPE(IKSolution)
#endif
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, const std::vector<dReal>& vfreeinc) {
    std::vector<int> vfree(getNumFreeParameters());
    for(size_t i = 0; i < vfree.size(); ++i) {
        vfree[i] = getFreeParameters()[i];
    }
    return IkSolverBasePtr(new IkFastSolver<IKReal,IKSolution>(ik,vfree,vfreeinc,getNumJoints(),(IkParameterization::Type)getIKType(), boost::shared_ptr<void>(), getKinematicsHash(), penv));
}
} // end namespace
#endif
