/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-12-07 23:59:25.756607
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int getNumJoints() { return 3; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 6; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0, x1, x2, x3, __dummy__;
x0=IKcos(j[1]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
eetrans[0]=((-0.0670700000000000)+(((-0.0300000000000000)*(x1)))+(((0.0680000000000000)*(x0)))+(((0.0980000000000000)*(x0)*(x2)))+(((0.0232000000000000)*(x0)*(x3))));
eetrans[1]=((((0.0232000000000000)*(x1)*(x3)))+(((0.0680000000000000)*(x1)))+(((0.0980000000000000)*(x1)*(x2)))+(((0.0300000000000000)*(x0))));
eetrans[2]=((1.12113000000000)+(((0.0980000000000000)*(x3)))+(((-0.0232000000000000)*(x2)))+(j[0]));
eerot[0]=((x0)*(x3));
eerot[1]=((x1)*(x3));
eerot[2]=((-1.00000000000000)*(x2));
}

class IKSolver {
public:
IKReal j1, cj1, sj1,
j2, cj2, sj2,
j0, cj0, sj0,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
new_px=((0.0670700000000000)+(px));
new_py=py;
new_pz=((-1.12113000000000)+(pz));
px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
IKReal x0=(px)*(px);
IKReal x1=(py)*(py);
IKReal x2=((x1)+(x0));
if( (x2) < (IKReal)-0.00001 )
    continue;
IKReal x3=IKsqrt(x2);
IKReal x4=IKabs(x3);
IKReal x5=((IKabs(x4) != 0)?((IKReal)1/(x4)):(IKReal)1.0e30);
IKReal x6=((0.0300000000000000)*(x5));
if( (x6) < -1.0001 || (x6) > 1.0001 )
    continue;
IKReal x7=IKasin(x6);
IKReal x8=((-1.00000000000000)*(px));
IKReal x9=IKatan2(py, x8);
j1array[0]=((x7)+(((-1.00000000000000)*(x9))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x7)))+(((-1.00000000000000)*(x9))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
if( j1array[1] > IKPI )
    j1array[1]-=IK2PI;
else if( j1array[1] < -IKPI )
    j1array[1]+=IK2PI;
j1valid[1] = true;
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
    j1valid[1]=false;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal j2eval[1];
IKReal x10=(sj1)*(sj1);
j2eval[0]=((((-1.00000000000000)*(cj1)*(px)*(pz)*(sj1)))+(((0.0300000000000000)*(cj1)*(j0)))+(((-0.0300000000000000)*(cj1)*(pz)))+(((cj1)*(j0)*(px)*(sj1)))+(((-1.00000000000000)*(py)*(pz)*(x10)))+(((py)*(pz)))+(((j0)*(py)*(x10)))+(((-1.00000000000000)*(j0)*(py))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
IKReal x11=(cj1)*(cj1);
j2eval[0]=((((-1.00000000000000)*(cj1)*(j0)*(py)*(sj1)))+(((px)*(pz)*(x11)))+(((j0)*(px)))+(((-0.0300000000000000)*(pz)*(sj1)))+(((0.0300000000000000)*(j0)*(sj1)))+(((cj1)*(py)*(pz)*(sj1)))+(((-1.00000000000000)*(px)*(pz)))+(((-1.00000000000000)*(j0)*(px)*(x11))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
IKReal x12=(sj1)*(sj1);
IKReal x13=(cj1)*(cj1);
j2eval[0]=((((0.0300000000000000)*(pz)*(x13)))+(((0.0300000000000000)*(pz)*(x12)))+(((-0.0300000000000000)*(j0)*(x13)))+(((-0.0300000000000000)*(j0)*(x12)))+(((px)*(pz)*(sj1)))+(((-1.00000000000000)*(j0)*(px)*(sj1)))+(((cj1)*(j0)*(py)))+(((-1.00000000000000)*(cj1)*(py)*(pz))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal evalcond[2];
evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  )
{
{
IKReal j2eval[3];
IKReal x14=((0.0680000000000000)+(((-1.00000000000000)*(px))));
IKReal x15=((((-1.00000000000000)*(pz)))+(j0));
IKReal x16=(x15)*(x15);
j2eval[0]=x14;
j2eval[1]=((((-0.392000000000000)*(x14)*(x16)))+(((-0.392000000000000)*((x14)*(x14)*(x14)))));
j2eval[2]=((((-0.0980000000000000)*((x14)*(x14))))+(((-0.0980000000000000)*(x16))));
if( IKabs(j2eval[0]) < 0.000001  || IKabs(j2eval[1]) < 0.000001  || IKabs(j2eval[2]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
IKReal x17=((0.0680000000000000)+(((-1.00000000000000)*(px))));
IKReal x18=((((-1.00000000000000)*(pz)))+(j0));
IKReal x19=(x18)*(x18);
IKReal x20=(x17)*(x17);
IKReal x21=((-0.0980000000000000)*(x19));
IKReal x22=((-0.0980000000000000)*(x20));
IKReal x23=((x21)+(x22));
IKReal x24=((IKabs(x23) != 0)?((IKReal)1/(x23)):(IKReal)1.0e30);
IKReal x25=((-0.392000000000000)*(x20)*(x24));
IKReal x26=((0.00376476800000000)*(x24));
IKReal x27=(x17)*(x17)*(x17)*(x17);
IKReal x28=((0.00960400000000000)*(x27));
IKReal x29=(x18)*(x18)*(x18)*(x18);
IKReal x30=((0.00960400000000000)*(x29));
IKReal x31=((0.0192080000000000)*(x19)*(x20));
IKReal x32=((x31)+(x30)+(x28));
IKReal x33=((IKabs(x32) != 0)?((IKReal)1/(x32)):(IKReal)1.0e30);
IKReal x34=((0.000368947264000000)*(x19)*(x33));
IKReal x35=((x34)+(x25)+(x26));
if( (x35) < (IKReal)-0.00001 )
    continue;
IKReal x36=IKsqrt(x35);
IKReal x37=(x17)*(x17)*(x17);
IKReal x38=((-0.392000000000000)*(x17)*(x20));
IKReal x39=((-0.392000000000000)*(x17)*(x19));
IKReal x40=((x39)+(x38));
IKReal x41=((IKabs(x40) != 0)?((IKReal)1/(x40)):(IKReal)1.0e30);
IKReal x42=((0.0384160000000000)*(x19));
IKReal x43=(x18)*(x18)*(x18);
IKReal x44=((IKabs(x17) != 0)?((IKReal)1/(x17)):(IKReal)1.0e30);
IKReal x45=((0.0980000000000000)*(x44));
IKReal x46=((0.0192080000000000)*(pz));
IKReal x47=((0.0192080000000000)*(j0));
IKReal x48=((((-1.00000000000000)*(x47)))+(x46));
IKReal x49=(x48)*(x48);
IKReal x50=((IKabs(x23) != 0)?(pow(x23,-2.00000000000000)):(IKReal)1.0e30);
IKReal x51=((x49)*(x50));
IKReal x52=((0.000941192000000000)+(x22));
IKReal x53=((x24)*(((0.00376476800000000)+(((-0.392000000000000)*(x20))))));
IKReal x54=((x51)+(x53));
if( (x54) < (IKReal)-0.00001 )
    continue;
IKReal x55=IKsqrt(x54);
IKReal x56=((-0.00960400000000000)*(pz));
IKReal x57=((0.00960400000000000)*(j0));
IKReal x58=((x57)+(x56));
IKReal x59=((x24)*(x58));
j2array[0]=IKatan2(((((-1.00000000000000)*(x41)*(((((x20)*(x36)*(((((-0.196000000000000)*(j0)))+(((0.196000000000000)*(pz)))))))+(x42)+(((-0.196000000000000)*(x18)*(x19)*(x36)))))))+(((-1.00000000000000)*(x45)))), ((((0.500000000000000)*(x55)))+(x59)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=IKatan2(((((-1.00000000000000)*(x45)))+(((-1.00000000000000)*(x41)*(((((0.196000000000000)*(x18)*(x19)*(x36)))+(((x20)*(x36)*(((((-0.196000000000000)*(pz)))+(((0.196000000000000)*(j0)))))))+(x42)))))), ((x59)+(((-0.500000000000000)*(x55)))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
if( j2array[1] > IKPI )
    j2array[1]-=IK2PI;
else if( j2array[1] < -IKPI )
    j2array[1]+=IK2PI;
j2valid[1] = true;
if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
    j2valid[1]=false;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=0;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  )
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
IKReal x60=((((-1.00000000000000)*(pz)))+(j0));
IKReal x61=((0.0680000000000000)+(px));
IKReal x62=(x61)*(x61);
IKReal x63=(x60)*(x60);
IKReal x64=((x62)+(x63));
if( (x64) < (IKReal)-0.00001 )
    continue;
IKReal x65=IKsqrt(x64);
IKReal x66=IKabs(x65);
IKReal x67=((IKabs(x66) != 0)?((IKReal)1/(x66)):(IKReal)1.0e30);
IKReal x68=((0.0980000000000000)*(x67));
if( (x68) < -1.0001 || (x68) > 1.0001 )
    continue;
IKReal x69=IKasin(x68);
IKReal x70=IKatan2(x60, x61);
j2array[0]=((((-1.00000000000000)*(x70)))+(((-1.00000000000000)*(x69))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.00000000000000)*(x70)))+(x69));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
if( j2array[1] > IKPI )
    j2array[1]-=IK2PI;
else if( j2array[1] < -IKPI )
    j2array[1]+=IK2PI;
j2valid[1] = true;
if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
    j2valid[1]=false;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.vfree.resize(0);
}
}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
IKReal x71=((((-1.00000000000000)*(pz)))+(j0));
IKReal x72=((0.0680000000000000)+(((-1.00000000000000)*(py))));
IKReal x73=(x71)*(x71);
IKReal x74=(x72)*(x72);
IKReal x75=((x74)+(x73));
if( (x75) < (IKReal)-0.00001 )
    continue;
IKReal x76=IKsqrt(x75);
IKReal x77=IKabs(x76);
IKReal x78=((IKabs(x77) != 0)?((IKReal)1/(x77)):(IKReal)1.0e30);
IKReal x79=((0.0980000000000000)*(x78));
if( (x79) < -1.0001 || (x79) > 1.0001 )
    continue;
IKReal x80=IKasin(x79);
IKReal x81=IKatan2(x71, x72);
j2array[0]=((((-1.00000000000000)*(x81)))+(((-1.00000000000000)*(x80))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(x80)+(((-1.00000000000000)*(x81))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
if( j2array[1] > IKPI )
    j2array[1]-=IK2PI;
else if( j2array[1] < -IKPI )
    j2array[1]+=IK2PI;
j2valid[1] = true;
if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
    j2valid[1]=false;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.vfree.resize(0);
}
}

} else
{
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
IKReal x82=((0.0680000000000000)+(py));
IKReal x83=((((-1.00000000000000)*(pz)))+(j0));
IKReal x84=(x82)*(x82);
IKReal x85=(x83)*(x83);
IKReal x86=((x84)+(x85));
if( (x86) < (IKReal)-0.00001 )
    continue;
IKReal x87=IKsqrt(x86);
IKReal x88=IKabs(x87);
IKReal x89=((IKabs(x88) != 0)?((IKReal)1/(x88)):(IKReal)1.0e30);
IKReal x90=((0.0980000000000000)*(x89));
if( (x90) < -1.0001 || (x90) > 1.0001 )
    continue;
IKReal x91=IKasin(x90);
IKReal x92=IKatan2(x83, x82);
j2array[0]=((((-1.00000000000000)*(x91)))+(((-1.00000000000000)*(x92))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(x91)+(((-1.00000000000000)*(x92))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
if( j2array[1] > IKPI )
    j2array[1]-=IK2PI;
else if( j2array[1] < -IKPI )
    j2array[1]+=IK2PI;
j2valid[1] = true;
if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
    j2valid[1]=false;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x93=(sj1)*(sj1);
IKReal x94=(cj1)*(cj1);
IKReal x95=((px)*(pz)*(sj1));
IKReal x96=((0.0300000000000000)*(pz)*(x93));
IKReal x97=((cj1)*(j0)*(py));
IKReal x98=((0.0300000000000000)*(pz)*(x94));
IKReal x99=((x98)+(x95)+(x97)+(x96));
IKReal x100=((0.0300000000000000)*(j0)*(x93));
IKReal x101=((cj1)*(py)*(pz));
IKReal x102=((0.0300000000000000)*(j0)*(x94));
IKReal x103=((j0)*(px)*(sj1));
IKReal x104=((x100)+(x101)+(x102)+(x103));
IKReal x105=((((-1.00000000000000)*(x104)))+(x99));
IKReal x106=((IKabs(x105) != 0)?((IKReal)1/(x105)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x106)*(((((0.0980000000000000)*(cj1)*(((((pz)*(sj1)))+(((-1.00000000000000)*(j0)*(sj1)))))))+(((0.0980000000000000)*(sj1)*(((((-1.00000000000000)*(cj1)*(pz)))+(((cj1)*(j0)))))))))), ((-1.00000000000000)*(x106)*(((((0.0980000000000000)*(cj1)*(((((-0.0680000000000000)*(sj1)))+(((-0.0300000000000000)*(cj1)))+(py)))))+(((0.0980000000000000)*(sj1)*(((((-0.0300000000000000)*(sj1)))+(((0.0680000000000000)*(cj1)))+(((-1.00000000000000)*(px)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x107=(cj1)*(cj1);
IKReal x108=((j0)*(px));
IKReal x109=((px)*(pz)*(x107));
IKReal x110=((0.0300000000000000)*(j0)*(sj1));
IKReal x111=((cj1)*(py)*(pz)*(sj1));
IKReal x112=((x111)+(x110)+(x108)+(x109));
IKReal x113=((cj1)*(j0)*(py)*(sj1));
IKReal x114=((x107)*(x108));
IKReal x115=((0.0300000000000000)*(pz)*(sj1));
IKReal x116=((px)*(pz));
IKReal x117=((x113)+(x116)+(x115)+(x114));
IKReal x118=((((-1.00000000000000)*(x117)))+(x112));
IKReal x119=((IKabs(x118) != 0)?((IKReal)1/(x118)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x119)*(((((0.0980000000000000)*(cj1)*(((((-1.00000000000000)*(pz)))+(j0)))))+(((0.0980000000000000)*(cj1)*(pz)))+(((-0.0980000000000000)*(cj1)*(j0)))))), ((x119)*(((((-0.00294000000000000)*(sj1)))+(((0.00666400000000000)*(cj1)))+(((-0.0980000000000000)*(px)))+(((-0.0980000000000000)*(cj1)*(((0.0680000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x120=(sj1)*(sj1);
IKReal x121=((0.0300000000000000)*(cj1)*(j0));
IKReal x122=((cj1)*(j0)*(px)*(sj1));
IKReal x123=((j0)*(py)*(x120));
IKReal x124=((py)*(pz));
IKReal x125=((x124)+(x122)+(x123)+(x121));
IKReal x126=((cj1)*(px)*(pz)*(sj1));
IKReal x127=((0.0300000000000000)*(cj1)*(pz));
IKReal x128=((j0)*(py));
IKReal x129=((x120)*(x124));
IKReal x130=((x126)+(x127)+(x128)+(x129));
IKReal x131=((x125)+(((-1.00000000000000)*(x130))));
IKReal x132=((IKabs(x131) != 0)?((IKReal)1/(x131)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x132)*(((((-0.0980000000000000)*(sj1)*(((((-1.00000000000000)*(pz)))+(j0)))))+(((-0.0980000000000000)*(pz)*(sj1)))+(((0.0980000000000000)*(j0)*(sj1)))))), ((x132)*(((((0.0980000000000000)*(sj1)*(((0.0680000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))))+(((-0.00666400000000000)*(sj1)))+(((-0.00294000000000000)*(cj1)))+(((0.0980000000000000)*(py)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.vfree.resize(0);
}
}

}

}
}
}

} else
{
}
}
}
return vsolutions.size()>0;
}

};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "cc7d0cc5860afa51daf48de95d891f9f"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
