/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 26 generated on 2011-02-09 16:53:49.367482
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int getNumJoints() { return 3; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x20000006; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3;
x0=IKcos(j[1]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
eetrans[0]=((-0.0670700000000000)+(((0.0680000000000000)*(x0)))+(((-0.0300000000000000)*(x1)))+(((0.0232000000000000)*(x0)*(x3)))+(((0.0980000000000000)*(x0)*(x2))));
eetrans[1]=((((0.0680000000000000)*(x1)))+(((0.0232000000000000)*(x1)*(x3)))+(((0.0300000000000000)*(x0)))+(((0.0980000000000000)*(x1)*(x2))));
eetrans[2]=((1.12112500000000)+(((-0.0232000000000000)*(x2)))+(((0.0980000000000000)*(x3)))+(j[0]));
eerot[0]=((x0)*(x3));
eerot[1]=((x1)*(x3));
eerot[2]=((-1.00000000000000)*(x2));
}

class IKSolver {
public:
IKReal j13, cj13, sj13,
j14, cj14, sj14,
j12, cj12, sj12,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j12=pfree[0]; cj12=cos(pfree[0]); sj12=sin(pfree[0]);
new_px=((0.0670700000000000)+(px));
new_py=py;
new_pz=((-1.12112500000000)+(pz));
px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(px)*(px);
dummyeval[0]=((((96.0400000000000)*(x0)))+(((1960.00000000000)*(pz)*(x0)))+(((10000.0000000000)*(x0)*((j12)*(j12))))+(((10000.0000000000)*(x0)*((pz)*(pz))))+(((-1960.00000000000)*(j12)*(x0)))+(((-20000.0000000000)*(j12)*(pz)*(x0))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[1];
evalcond[0]=IKabs(px);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((1666.00000000000)*(py)*(pz)))+(((-1666.00000000000)*(j12)*(py)))+(((8500.00000000000)*(py)*((pz)*(pz))))+(((81.6340000000000)*(py)))+(((-17000.0000000000)*(j12)*(py)*(pz)))+(((8500.00000000000)*(py)*((j12)*(j12)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[1];
evalcond[0]=IKabs(py);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.00462400000000000)+((pz)*(pz))+((j12)*(j12))+(((-2.00000000000000)*(j12)*(pz))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
IKReal x1=(pz)*(pz);
IKReal x2=(j12)*(j12);
IKReal x3=((0.00462400000000000)+(x2)+(x1));
IKReal x4=((2.00000000000000)*(j12)*(pz));
IKReal x5=((x3)+(((-1.00000000000000)*(x4))));
IKReal x6=((j12)+(((-1.00000000000000)*(pz))));
IKReal x7=(x6)*(x6);
IKReal x8=((IKabs(x5) != 0)?((IKReal)1/(x5)):(IKReal)1.0e30);
IKReal x9=((IKabs(x5) != 0)?(pow(x5,-2.00000000000000)):(IKReal)1.0e30);
IKReal x10=((0.0384160000000000)*(x7)*(x9));
IKReal x11=((-0.0163200000000000)*(x8));
IKReal x12=((x11)+(x10));
if( (x12) < (IKReal)-0.00001 )
    continue;
IKReal x13=IKsqrt(x12);
IKReal x14=((24500.0000000000)*(x7));
IKReal x15=((0.0980000000000000)*(pz));
IKReal x16=((-0.0980000000000000)*(j12));
IKReal x17=((x15)+(x16));
IKReal x18=((x17)*(x8));
j14array[0]=IKatan2(((-1.44117647058824)+(((5.88235294117647e-5)*(x8)*(((x14)+(((x13)*(x5)*(((((-125000.000000000)*(j12)))+(((125000.000000000)*(pz)))))))))))), ((((0.500000000000000)*(x13)))+(x18)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=IKatan2(((-1.44117647058824)+(((5.88235294117647e-5)*(x8)*(((x14)+(((x13)*(x5)*(((((-125000.000000000)*(pz)))+(((125000.000000000)*(j12)))))))))))), ((((-0.500000000000000)*(x13)))+(x18)));
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
    j14array[0]-=IK2PI;
else if( j14array[0] < -IKPI )
    j14array[0]+=IK2PI;
j14valid[0] = true;
if( j14array[1] > IKPI )
    j14array[1]-=IK2PI;
else if( j14array[1] < -IKPI )
    j14array[1]+=IK2PI;
j14valid[1] = true;
if( j14valid[0] && j14valid[1] && IKabs(cj14array[0]-cj14array[1]) < 0.0001 && IKabs(sj14array[0]-sj14array[1]) < 0.0001 )
    j14valid[1]=false;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] ) { continue; }
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
IKReal x19=((-0.0300000000000000)*(sj14));
IKReal x20=((cj14)*(pz));
IKReal x21=((-0.0980000000000000)+(x20));
IKReal x22=((cj14)*(j12));
IKReal x23=((0.0680000000000000)*(sj14));
IKReal x24=((x22)+(x23));
IKReal x25=((((-1.00000000000000)*(x24)))+(x21));
IKReal x26=IKatan2(x19, x25);
j13array[0]=((-1.00000000000000)*(x26));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.00000000000000)*(x26))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
    j13array[0]-=IK2PI;
else if( j13array[0] < -IKPI )
    j13array[0]+=IK2PI;
j13valid[0] = true;
if( j13array[1] > IKPI )
    j13array[1]-=IK2PI;
else if( j13array[1] < -IKPI )
    j13array[1]+=IK2PI;
j13valid[1] = true;
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
IKReal op[6+1], zeror[6];
int numroots;
IKReal j14evalpoly[3];
IKReal x27=((1666.00000000000)*(j12)*(py));
IKReal x28=((1666.00000000000)*(py)*(pz));
IKReal x29=(pz)*(pz);
IKReal x30=(j12)*(j12);
IKReal x31=((25500.0000000000)*(py)*(x29));
IKReal x32=((25500.0000000000)*(py)*(x30));
IKReal x33=(py)*(py)*(py);
IKReal x34=((34000.0000000000)*(x33));
IKReal x35=((269.450000000000)*(py));
IKReal x36=((51000.0000000000)*(j12)*(py)*(pz));
IKReal x37=((2312.00000000000)*(py)*(pz));
IKReal x38=((2312.00000000000)*(j12)*(py));
IKReal x39=((226.576000000000)*(py));
IKReal x40=((17000.0000000000)*(j12)*(py)*(pz));
IKReal x41=((8500.00000000000)*(py)*(x29));
IKReal x42=((81.6340000000000)*(py));
IKReal x43=((8500.00000000000)*(py)*(x30));
op[0]=((((-1.00000000000000)*(x27)))+(((-1.00000000000000)*(x40)))+(x42)+(x43)+(x41)+(x28));
op[1]=((((-1.00000000000000)*(x38)))+(x39)+(x37));
op[2]=((((-1.00000000000000)*(x28)))+(((-1.00000000000000)*(x34)))+(((-1.00000000000000)*(x31)))+(((-1.00000000000000)*(x32)))+(x36)+(x35)+(x27));
op[3]=((((-4624.00000000000)*(py)*(pz)))+(((4624.00000000000)*(j12)*(py))));
op[4]=((((-1.00000000000000)*(x28)))+(((-1.00000000000000)*(x35)))+(((-1.00000000000000)*(x36)))+(x32)+(x31)+(x34)+(x27));
op[5]=((((-1.00000000000000)*(x38)))+(((-1.00000000000000)*(x39)))+(x37));
op[6]=((((-1.00000000000000)*(x27)))+(((-1.00000000000000)*(x42)))+(((-1.00000000000000)*(x41)))+(((-1.00000000000000)*(x43)))+(x40)+(x28));
polyroots6(op,zeror,numroots);
IKReal j14array[6], cj14array[6], sj14array[6], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IKReal dummy0 = zeror[ij14];
tempj14array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
    j14array[numsolutions]-=IK2PI;
else if( j14array[numsolutions] < -IKPI )
    j14array[numsolutions]+=IK2PI;
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
bool valid = true;
for( int kj14 = 0; kj14 < numsolutions; ++kj14)
{
    if( IKabs(cj14array[kj14]-cj14array[numsolutions]) < 0.0001 && IKabs(sj14array[kj14]-sj14array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

j14evalpoly[0]=((125000.000000000)*(py)*(sj14));
j14evalpoly[1]=((((-367.500000000000)*(py)*(sj14)))+(((cj14)*(sj14)*(((((3750.00000000000)*(py)*(pz)))+(((-3750.00000000000)*(j12)*(py))))))));
j14evalpoly[2]=((cj14)*(py));
if( IKabs(j14evalpoly[0]) < 0.000001  || IKabs(j14evalpoly[1]) < 0.000001  || IKabs(j14evalpoly[2]) < 0.000001  )
{
    continue;
}
IKReal x44=((IKabs(py) != 0)?(pow(py,-2.00000000000000)):(IKReal)1.0e30);
j14evalpoly[0]=((-1.00000000000000)+(((6.40000000000000e-11)*(x44)*(((IKabs(sj14) != 0)?(pow(sj14,-2.00000000000000)):(IKReal)1.0e30))*((((12250.0000000000)+(((8500.00000000000)*(sj14)))+(((125000.000000000)*(cj14)*(((j12)+(((-1.00000000000000)*(pz)))))))))*(((12250.0000000000)+(((8500.00000000000)*(sj14)))+(((125000.000000000)*(cj14)*(((j12)+(((-1.00000000000000)*(pz))))))))))))+(((0.000900000000000000)*(x44))));
if( IKabs(j14evalpoly[0]) > 0.000001  )
{
    continue;
}
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj14;
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj14;
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj14;
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal evalcond[3];
evalcond[0]=((IKfmod(((j14)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=0;
evalcond[2]=((0.0980000000000000)+(j12)+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[6];
IKReal x45=x29;
IKReal x46=x30;
evalcond[0]=IKabs(py);
evalcond[1]=-0.0300000000000000;
evalcond[2]=0;
evalcond[3]=((0.0980000000000000)+(j12)+(((-1.00000000000000)*(pz))));
evalcond[4]=((0.0105040000000000)+(((-1.00000000000000)*(x45)))+(((0.196000000000000)*(j12)))+(x46));
evalcond[5]=((0.0105040000000000)+(((-1.00000000000000)*(x45)))+(((-1.00000000000000)*(x46)))+(((2.00000000000000)*(j12)*(pz))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((-0.196000000000000)+(((2.00000000000000)*(pz)))+(((-2.00000000000000)*(j12))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((-0.0980000000000000)+(((-1.00000000000000)*(j12)))+(pz));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
IKReal op[2+1], zeror[2];
int numroots;
op[0]=((-0.0980000000000000)+(((-1.00000000000000)*(j12)))+(pz));
op[1]=0;
op[2]=((0.0980000000000000)+(j12)+(((-1.00000000000000)*(pz))));
polyroots2(op,zeror,numroots);
IKReal j13array[2], cj13array[2], sj13array[2], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IKReal dummy0 = zeror[ij13];
tempj13array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
    j13array[numsolutions]-=IK2PI;
else if( j13array[numsolutions] < -IKPI )
    j13array[numsolutions]+=IK2PI;
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
bool valid = true;
for( int kj13 = 0; kj13 < numsolutions; ++kj13)
{
    if( IKabs(cj13array[kj13]-cj13array[numsolutions]) < 0.0001 && IKabs(sj13array[kj13]-sj13array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
    }

}

}

} else
{
IKReal op[1+1], zeror[1];
int numroots;
op[0]=((-0.196000000000000)+(((2.00000000000000)*(pz)))+(((-2.00000000000000)*(j12))));
op[1]=0;
polyroots1(op,zeror,numroots);
IKReal j13array[1], cj13array[1], sj13array[1], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IKReal dummy0 = zeror[ij13];
tempj13array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
    j13array[numsolutions]-=IK2PI;
else if( j13array[numsolutions] < -IKPI )
    j13array[numsolutions]+=IK2PI;
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
bool valid = true;
for( int kj13 = 0; kj13 < numsolutions; ++kj13)
{
    if( IKabs(cj13array[kj13]-cj13array[numsolutions]) < 0.0001 && IKabs(sj13array[kj13]-sj13array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IKReal j13array[4], cj13array[4], sj13array[4];
bool j13valid[4]={false};
IKReal x47=x44;
IKReal x48=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
IKReal x49=((2.00000000000000)*(j12)*(pz));
IKReal x50=((0.0105040000000000)+(x49));
IKReal x51=x29;
IKReal x52=x30;
IKReal x53=((x51)+(x52));
IKReal x54=((x50)+(((-1.00000000000000)*(x53))));
if( (x54) < (IKReal)-0.00001 )
    continue;
IKReal x55=IKsqrt(x54);
cj13array[0]=((-1.00000000000000)*(x48)*(x55));
cj13array[2]=((x48)*(x55));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( cj13array[2] >= -1.0001 && cj13array[2] <= 1.0001 )
{
    j13valid[2] = j13valid[3] = true;
    j13array[2] = IKacos(cj13array[2]);
    sj13array[2] = IKsin(j13array[2]);
    cj13array[3] = cj13array[2];
    j13array[3] = -j13array[2];
    sj13array[3] = -sj13array[2];
}
else if( isnan(cj13array[2]) )
{
    // probably any value will work
    j13valid[2] = true;
    cj13array[2] = 1; sj13array[2] = 0; j13array[2] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
if( j13valid[0] && j13valid[2] && IKabs(cj13array[0]-cj13array[2]) < 0.0001 && IKabs(sj13array[0]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[0] && j13valid[3] && IKabs(cj13array[0]-cj13array[3]) < 0.0001 && IKabs(sj13array[0]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[1] && j13valid[2] && IKabs(cj13array[1]-cj13array[2]) < 0.0001 && IKabs(sj13array[1]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[1] && j13valid[3] && IKabs(cj13array[1]-cj13array[3]) < 0.0001 && IKabs(sj13array[1]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[2] && j13valid[3] && IKabs(cj13array[2]-cj13array[3]) < 0.0001 && IKabs(sj13array[2]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
for(int ij13 = 0; ij13 < 4; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[4], cj13array[4], sj13array[4];
bool j13valid[4]={false};
IKReal x56=x44;
IKReal x57=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
IKReal x58=((0.196000000000000)*(j12));
IKReal x59=x30;
IKReal x60=((0.0105040000000000)+(x59)+(x58));
IKReal x61=x29;
IKReal x62=((x60)+(((-1.00000000000000)*(x61))));
if( (x62) < (IKReal)-0.00001 )
    continue;
IKReal x63=IKsqrt(x62);
cj13array[0]=((-1.00000000000000)*(x57)*(x63));
cj13array[2]=((x57)*(x63));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( cj13array[2] >= -1.0001 && cj13array[2] <= 1.0001 )
{
    j13valid[2] = j13valid[3] = true;
    j13array[2] = IKacos(cj13array[2]);
    sj13array[2] = IKsin(j13array[2]);
    cj13array[3] = cj13array[2];
    j13array[3] = -j13array[2];
    sj13array[3] = -sj13array[2];
}
else if( isnan(cj13array[2]) )
{
    // probably any value will work
    j13valid[2] = true;
    cj13array[2] = 1; sj13array[2] = 0; j13array[2] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
if( j13valid[0] && j13valid[2] && IKabs(cj13array[0]-cj13array[2]) < 0.0001 && IKabs(sj13array[0]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[0] && j13valid[3] && IKabs(cj13array[0]-cj13array[3]) < 0.0001 && IKabs(sj13array[0]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[1] && j13valid[2] && IKabs(cj13array[1]-cj13array[2]) < 0.0001 && IKabs(sj13array[1]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[1] && j13valid[3] && IKabs(cj13array[1]-cj13array[3]) < 0.0001 && IKabs(sj13array[1]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[2] && j13valid[3] && IKabs(cj13array[2]-cj13array[3]) < 0.0001 && IKabs(sj13array[2]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
for(int ij13 = 0; ij13 < 4; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
cj13array[0]=((0.0300000000000000)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30)));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(j14)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=0;
evalcond[2]=((0.0980000000000000)+(((-1.00000000000000)*(j12)))+(pz));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[6];
IKReal x64=x29;
IKReal x65=x30;
evalcond[0]=IKabs(py);
evalcond[1]=0.0300000000000000;
evalcond[2]=0;
evalcond[3]=((0.0980000000000000)+(((-1.00000000000000)*(j12)))+(pz));
evalcond[4]=((0.0105040000000000)+(((-0.196000000000000)*(j12)))+(x65)+(((-1.00000000000000)*(x64))));
evalcond[5]=((0.0105040000000000)+(((2.00000000000000)*(j12)*(pz)))+(((-1.00000000000000)*(x65)))+(((-1.00000000000000)*(x64))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((-0.196000000000000)+(((2.00000000000000)*(j12)))+(((-2.00000000000000)*(pz))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((-0.0980000000000000)+(j12)+(((-1.00000000000000)*(pz))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
IKReal op[2+1], zeror[2];
int numroots;
op[0]=((-0.0980000000000000)+(j12)+(((-1.00000000000000)*(pz))));
op[1]=0;
op[2]=((0.0980000000000000)+(((-1.00000000000000)*(j12)))+(pz));
polyroots2(op,zeror,numroots);
IKReal j13array[2], cj13array[2], sj13array[2], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IKReal dummy0 = zeror[ij13];
tempj13array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
    j13array[numsolutions]-=IK2PI;
else if( j13array[numsolutions] < -IKPI )
    j13array[numsolutions]+=IK2PI;
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
bool valid = true;
for( int kj13 = 0; kj13 < numsolutions; ++kj13)
{
    if( IKabs(cj13array[kj13]-cj13array[numsolutions]) < 0.0001 && IKabs(sj13array[kj13]-sj13array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
    }

}

}

} else
{
IKReal op[1+1], zeror[1];
int numroots;
op[0]=((-0.196000000000000)+(((2.00000000000000)*(j12)))+(((-2.00000000000000)*(pz))));
op[1]=0;
polyroots1(op,zeror,numroots);
IKReal j13array[1], cj13array[1], sj13array[1], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IKReal dummy0 = zeror[ij13];
tempj13array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
    j13array[numsolutions]-=IK2PI;
else if( j13array[numsolutions] < -IKPI )
    j13array[numsolutions]+=IK2PI;
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
bool valid = true;
for( int kj13 = 0; kj13 < numsolutions; ++kj13)
{
    if( IKabs(cj13array[kj13]-cj13array[numsolutions]) < 0.0001 && IKabs(sj13array[kj13]-sj13array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IKReal j13array[4], cj13array[4], sj13array[4];
bool j13valid[4]={false};
IKReal x66=x44;
IKReal x67=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
IKReal x68=((2.00000000000000)*(j12)*(pz));
IKReal x69=((0.0105040000000000)+(x68));
IKReal x70=x29;
IKReal x71=x30;
IKReal x72=((x71)+(x70));
IKReal x73=((((-1.00000000000000)*(x72)))+(x69));
if( (x73) < (IKReal)-0.00001 )
    continue;
IKReal x74=IKsqrt(x73);
cj13array[0]=((-1.00000000000000)*(x67)*(x74));
cj13array[2]=((x67)*(x74));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( cj13array[2] >= -1.0001 && cj13array[2] <= 1.0001 )
{
    j13valid[2] = j13valid[3] = true;
    j13array[2] = IKacos(cj13array[2]);
    sj13array[2] = IKsin(j13array[2]);
    cj13array[3] = cj13array[2];
    j13array[3] = -j13array[2];
    sj13array[3] = -sj13array[2];
}
else if( isnan(cj13array[2]) )
{
    // probably any value will work
    j13valid[2] = true;
    cj13array[2] = 1; sj13array[2] = 0; j13array[2] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
if( j13valid[0] && j13valid[2] && IKabs(cj13array[0]-cj13array[2]) < 0.0001 && IKabs(sj13array[0]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[0] && j13valid[3] && IKabs(cj13array[0]-cj13array[3]) < 0.0001 && IKabs(sj13array[0]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[1] && j13valid[2] && IKabs(cj13array[1]-cj13array[2]) < 0.0001 && IKabs(sj13array[1]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[1] && j13valid[3] && IKabs(cj13array[1]-cj13array[3]) < 0.0001 && IKabs(sj13array[1]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[2] && j13valid[3] && IKabs(cj13array[2]-cj13array[3]) < 0.0001 && IKabs(sj13array[2]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
for(int ij13 = 0; ij13 < 4; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[4], cj13array[4], sj13array[4];
bool j13valid[4]={false};
IKReal x75=x44;
IKReal x76=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
IKReal x77=x30;
IKReal x78=((0.0105040000000000)+(x77));
IKReal x79=((0.196000000000000)*(j12));
IKReal x80=x29;
IKReal x81=((x79)+(x80));
IKReal x82=((x78)+(((-1.00000000000000)*(x81))));
if( (x82) < (IKReal)-0.00001 )
    continue;
IKReal x83=IKsqrt(x82);
cj13array[0]=((-1.00000000000000)*(x76)*(x83));
cj13array[2]=((x76)*(x83));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( cj13array[2] >= -1.0001 && cj13array[2] <= 1.0001 )
{
    j13valid[2] = j13valid[3] = true;
    j13array[2] = IKacos(cj13array[2]);
    sj13array[2] = IKsin(j13array[2]);
    cj13array[3] = cj13array[2];
    j13array[3] = -j13array[2];
    sj13array[3] = -sj13array[2];
}
else if( isnan(cj13array[2]) )
{
    // probably any value will work
    j13valid[2] = true;
    cj13array[2] = 1; sj13array[2] = 0; j13array[2] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
if( j13valid[0] && j13valid[2] && IKabs(cj13array[0]-cj13array[2]) < 0.0001 && IKabs(sj13array[0]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[0] && j13valid[3] && IKabs(cj13array[0]-cj13array[3]) < 0.0001 && IKabs(sj13array[0]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[1] && j13valid[2] && IKabs(cj13array[1]-cj13array[2]) < 0.0001 && IKabs(sj13array[1]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[1] && j13valid[3] && IKabs(cj13array[1]-cj13array[3]) < 0.0001 && IKabs(sj13array[1]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[2] && j13valid[3] && IKabs(cj13array[2]-cj13array[3]) < 0.0001 && IKabs(sj13array[2]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
for(int ij13 = 0; ij13 < 4; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
cj13array[0]=((0.0300000000000000)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30)));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x84=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j13array[0]=IKatan2(((x84)*(((IKabs(sj14) != 0)?((IKReal)1/(sj14)):(IKReal)1.0e30))*(((0.0980000000000000)+(((-1.00000000000000)*(cj14)*(pz)))+(((cj14)*(j12)))+(((0.0680000000000000)*(sj14)))))), ((0.0300000000000000)*(x84)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
    j13array[0]-=IK2PI;
else if( j13array[0] < -IKPI )
    j13array[0]+=IK2PI;
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x85=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j13array[0]=IKatan2(((x85)*(((IKabs(sj14) != 0)?((IKReal)1/(sj14)):(IKReal)1.0e30))*(((0.0980000000000000)+(((-1.00000000000000)*(cj14)*(pz)))+(((cj14)*(j12)))+(((0.0680000000000000)*(sj14)))))), ((0.0300000000000000)*(x85)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
    j13array[0]-=IK2PI;
else if( j13array[0] < -IKPI )
    j13array[0]+=IK2PI;
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x86=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j13array[0]=IKatan2(((x86)*(((IKabs(sj14) != 0)?((IKReal)1/(sj14)):(IKReal)1.0e30))*(((0.0980000000000000)+(((-1.00000000000000)*(cj14)*(pz)))+(((cj14)*(j12)))+(((0.0680000000000000)*(sj14)))))), ((0.0300000000000000)*(x86)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
    j13array[0]-=IK2PI;
else if( j13array[0] < -IKPI )
    j13array[0]+=IK2PI;
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal j14evalpoly[3];
IKReal x87=(px)*(px);
IKReal x88=(pz)*(pz);
IKReal x89=(j12)*(j12);
IKReal x90=((266.560000000000)*(x87));
IKReal x91=((2720.00000000000)*(j12)*(x87));
IKReal x92=((2720.00000000000)*(pz)*(x87));
IKReal x93=((10000.0000000000)*(x87)*(x89));
IKReal x94=((1960.00000000000)*(j12)*(x87));
IKReal x95=((10000.0000000000)*(x87)*(x88));
IKReal x96=((96.0400000000000)*(x87));
IKReal x97=((20000.0000000000)*(j12)*(pz)*(x87));
IKReal x98=((1960.00000000000)*(pz)*(x87));
op[0]=((x98)+(x93)+(x95)+(x96)+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x94))));
op[1]=((x90)+(x92)+(((-1.00000000000000)*(x91))));
op[2]=((((-40000.0000000000)*(x87)*((py)*(py))))+(((413.040000000000)*(x87)))+(((-20000.0000000000)*(x87)*(x88)))+(((-20000.0000000000)*(x87)*(x89)))+(((-40000.0000000000)*((x87)*(x87))))+(((40000.0000000000)*(j12)*(pz)*(x87))));
op[3]=((x91)+(x90)+(((-1.00000000000000)*(x92))));
op[4]=((x93)+(x95)+(x94)+(x96)+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x98))));
polyroots4(op,zeror,numroots);
IKReal j14array[4], cj14array[4], sj14array[4], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IKReal dummy0 = zeror[ij14];
tempj14array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
    j14array[numsolutions]-=IK2PI;
else if( j14array[numsolutions] < -IKPI )
    j14array[numsolutions]+=IK2PI;
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
bool valid = true;
for( int kj14 = 0; kj14 < numsolutions; ++kj14)
{
    if( IKabs(cj14array[kj14]-cj14array[numsolutions]) < 0.0001 && IKabs(sj14array[kj14]-sj14array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

j14evalpoly[0]=((100.000000000000)*(px));
j14evalpoly[1]=((((cj14)*(((((-100.000000000000)*(px)*(pz)))+(((100.000000000000)*(j12)*(px)))))))+(((9.80000000000000)*(px)))+(((sj14)*(((((6.80000000000000)*(px)))+(((-3.00000000000000)*(py))))))));
j14evalpoly[2]=((sj14)*(((((-100.000000000000)*((px)*(px))))+(((-100.000000000000)*((py)*(py)))))));
if( IKabs(j14evalpoly[0]) < 0.000001  || IKabs(j14evalpoly[1]) < 0.000001  || IKabs(j14evalpoly[2]) < 0.000001  )
{
    continue;
}
IKReal x99=((9.80000000000000)*(px));
IKReal x100=((100.000000000000)*(j12)*(px));
IKReal x101=((100.000000000000)*(px)*(pz));
IKReal x102=((((-1.00000000000000)*(x101)))+(x100));
IKReal x103=((cj14)*(x102));
IKReal x104=((6.80000000000000)*(px));
IKReal x105=((3.00000000000000)*(py));
IKReal x106=((x104)+(x105));
IKReal x107=((sj14)*(x106));
IKReal x108=((x107)+(x103)+(x99));
IKReal x109=((-1.00000000000000)*(x108));
IKReal x110=(py)*(py);
IKReal x111=((100.000000000000)*(x110));
IKReal x112=x87;
IKReal x113=((100.000000000000)*(x112));
IKReal x114=((x113)+(x111));
IKReal x115=((-1.00000000000000)*(x114));
j14evalpoly[0]=((-1.00000000000000)+(((((IKabs(sj14) != 0)?(pow(sj14,-2.00000000000000)):(IKReal)1.0e30))*((x109)*(x109))*(((IKabs(x115) != 0)?(pow(x115,-2.00000000000000)):(IKReal)1.0e30))))+(((0.000100000000000000)*(((IKabs(x112) != 0)?((IKReal)1/(x112)):(IKReal)1.0e30))*((((3.00000000000000)+(((-100.000000000000)*(py)*(x109)*(((IKabs(sj14) != 0)?((IKReal)1/(sj14)):(IKReal)1.0e30))*(((IKabs(x115) != 0)?((IKReal)1/(x115)):(IKReal)1.0e30))))))*(((3.00000000000000)+(((-100.000000000000)*(py)*(x109)*(((IKabs(sj14) != 0)?((IKReal)1/(sj14)):(IKReal)1.0e30))*(((IKabs(x115) != 0)?((IKReal)1/(x115)):(IKReal)1.0e30))))))))));
if( IKabs(j14evalpoly[0]) > 0.000001  )
{
    continue;
}
{
IKReal dummyeval[1];
dummyeval[0]=((((100.000000000000)*(sj14)*((py)*(py))))+(((100.000000000000)*(sj14)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((-10000.0000000000)*(cj14)*(j12)*(py)))+(((-680.000000000000)*(py)*(sj14)))+(((10000.0000000000)*(cj14)*(py)*(pz)))+(((-980.000000000000)*(py)))+(((-300.000000000000)*(px)*(sj14))));
dummyeval[1]=((((-100.000000000000)*(cj14)*(j12)*(py)))+(((-3.00000000000000)*(px)*(sj14)))+(((-6.80000000000000)*(py)*(sj14)))+(((-9.80000000000000)*(py)))+(((100.000000000000)*(cj14)*(py)*(pz))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((-10000.0000000000)*(cj14)*(j12)*(py)))+(((-680.000000000000)*(py)*(sj14)))+(((10000.0000000000)*(cj14)*(py)*(pz)))+(((-980.000000000000)*(py)))+(((-300.000000000000)*(px)*(sj14))));
dummyeval[1]=((((-100.000000000000)*(cj14)*(j12)*(py)))+(((-3.00000000000000)*(px)*(sj14)))+(((-6.80000000000000)*(py)*(sj14)))+(((-9.80000000000000)*(py)))+(((100.000000000000)*(cj14)*(py)*(pz))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal evalcond[3];
evalcond[0]=((IKfmod(((j14)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=0;
evalcond[2]=((0.0980000000000000)+(j12)+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
IKReal x116=x87;
IKReal x117=x110;
IKReal x118=((x117)+(x116));
if( (x118) < (IKReal)-0.00001 )
    continue;
IKReal x119=IKsqrt(x118);
IKReal x120=IKabs(x119);
IKReal x121=((IKabs(x120) != 0)?((IKReal)1/(x120)):(IKReal)1.0e30);
IKReal x122=((0.0300000000000000)*(x121));
if( (x122) < -1.0001 || (x122) > 1.0001 )
    continue;
IKReal x123=IKasin(x122);
IKReal x124=((-1.00000000000000)*(px));
IKReal x125=IKatan2(py, x124);
j13array[0]=((((-1.00000000000000)*(x125)))+(x123));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x125))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
    j13array[0]-=IK2PI;
else if( j13array[0] < -IKPI )
    j13array[0]+=IK2PI;
j13valid[0] = true;
if( j13array[1] > IKPI )
    j13array[1]-=IK2PI;
else if( j13array[1] < -IKPI )
    j13array[1]+=IK2PI;
j13valid[1] = true;
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(j14)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=0;
evalcond[2]=((0.0980000000000000)+(((-1.00000000000000)*(j12)))+(pz));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
IKReal x126=x87;
IKReal x127=x110;
IKReal x128=((x126)+(x127));
if( (x128) < (IKReal)-0.00001 )
    continue;
IKReal x129=IKsqrt(x128);
IKReal x130=IKabs(x129);
IKReal x131=((IKabs(x130) != 0)?((IKReal)1/(x130)):(IKReal)1.0e30);
IKReal x132=((0.0300000000000000)*(x131));
if( (x132) < -1.0001 || (x132) > 1.0001 )
    continue;
IKReal x133=IKasin(x132);
IKReal x134=((-1.00000000000000)*(py));
IKReal x135=IKatan2(x134, px);
j13array[0]=((((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x133))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(x133)+(((-1.00000000000000)*(x135))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
    j13array[0]-=IK2PI;
else if( j13array[0] < -IKPI )
    j13array[0]+=IK2PI;
j13valid[0] = true;
if( j13array[1] > IKPI )
    j13array[1]-=IK2PI;
else if( j13array[1] < -IKPI )
    j13array[1]+=IK2PI;
j13valid[1] = true;
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((((IKabs(((((-10000.0000000000)*(cj14)*(j12)*(py)))+(((-680.000000000000)*(py)*(sj14)))+(((10000.0000000000)*(cj14)*(py)*(pz)))+(((-980.000000000000)*(py)))+(((-300.000000000000)*(px)*(sj14))))) != 0)?((IKReal)1/(((((-10000.0000000000)*(cj14)*(j12)*(py)))+(((-680.000000000000)*(py)*(sj14)))+(((10000.0000000000)*(cj14)*(py)*(pz)))+(((-980.000000000000)*(py)))+(((-300.000000000000)*(px)*(sj14)))))):(IKReal)1.0e30))*(((((9.00000000000000)*(sj14)))+(((-10000.0000000000)*(sj14)*((py)*(py))))))), ((-1.00000000000000)*(((IKabs(((((-100.000000000000)*(cj14)*(j12)*(py)))+(((-3.00000000000000)*(px)*(sj14)))+(((-6.80000000000000)*(py)*(sj14)))+(((-9.80000000000000)*(py)))+(((100.000000000000)*(cj14)*(py)*(pz))))) != 0)?((IKReal)1/(((((-100.000000000000)*(cj14)*(j12)*(py)))+(((-3.00000000000000)*(px)*(sj14)))+(((-6.80000000000000)*(py)*(sj14)))+(((-9.80000000000000)*(py)))+(((100.000000000000)*(cj14)*(py)*(pz)))))):(IKReal)1.0e30))*(((0.294000000000000)+(((0.204000000000000)*(sj14)))+(((-3.00000000000000)*(cj14)*(pz)))+(((100.000000000000)*(px)*(py)*(sj14)))+(((3.00000000000000)*(cj14)*(j12)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
    j13array[0]-=IK2PI;
else if( j13array[0] < -IKPI )
    j13array[0]+=IK2PI;
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((((IKabs(((((-10000.0000000000)*(cj14)*(j12)*(py)))+(((-680.000000000000)*(py)*(sj14)))+(((10000.0000000000)*(cj14)*(py)*(pz)))+(((-980.000000000000)*(py)))+(((-300.000000000000)*(px)*(sj14))))) != 0)?((IKReal)1/(((((-10000.0000000000)*(cj14)*(j12)*(py)))+(((-680.000000000000)*(py)*(sj14)))+(((10000.0000000000)*(cj14)*(py)*(pz)))+(((-980.000000000000)*(py)))+(((-300.000000000000)*(px)*(sj14)))))):(IKReal)1.0e30))*(((((9.00000000000000)*(sj14)))+(((-10000.0000000000)*(sj14)*((py)*(py))))))), ((-1.00000000000000)*(((IKabs(((((-100.000000000000)*(cj14)*(j12)*(py)))+(((-3.00000000000000)*(px)*(sj14)))+(((-6.80000000000000)*(py)*(sj14)))+(((-9.80000000000000)*(py)))+(((100.000000000000)*(cj14)*(py)*(pz))))) != 0)?((IKReal)1/(((((-100.000000000000)*(cj14)*(j12)*(py)))+(((-3.00000000000000)*(px)*(sj14)))+(((-6.80000000000000)*(py)*(sj14)))+(((-9.80000000000000)*(py)))+(((100.000000000000)*(cj14)*(py)*(pz)))))):(IKReal)1.0e30))*(((0.294000000000000)+(((0.204000000000000)*(sj14)))+(((-3.00000000000000)*(cj14)*(pz)))+(((100.000000000000)*(px)*(py)*(sj14)))+(((3.00000000000000)*(cj14)*(j12)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
    j13array[0]-=IK2PI;
else if( j13array[0] < -IKPI )
    j13array[0]+=IK2PI;
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x136=x110;
IKReal x137=((100.000000000000)*(sj14)*(x136));
IKReal x138=x87;
IKReal x139=((100.000000000000)*(sj14)*(x138));
IKReal x140=((x137)+(x139));
IKReal x141=((IKabs(x140) != 0)?((IKReal)1/(x140)):(IKReal)1.0e30);
IKReal x142=((cj14)*(j12));
IKReal x143=((0.0680000000000000)*(sj14));
IKReal x144=((0.0980000000000000)+(x142)+(x143));
IKReal x145=((cj14)*(pz));
IKReal x146=((((-1.00000000000000)*(x145)))+(x144));
j13array[0]=IKatan2(((x141)*(((((-3.00000000000000)*(px)*(sj14)))+(((100.000000000000)*(py)*(x146)))))), ((x141)*(((((100.000000000000)*(px)*(x146)))+(((3.00000000000000)*(py)*(sj14)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
    j13array[0]-=IK2PI;
else if( j13array[0] < -IKPI )
    j13array[0]+=IK2PI;
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] ) { continue; }
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}

static inline void polyroots1(IKReal rawcoeffs[1+1], IKReal rawroots[1], int& numroots) {
    if( rawcoeffs[0] == 0 ) {
        numroots=0;
    }
    else {
        rawroots[0] = -rawcoeffs[1]/rawcoeffs[0];
        numroots=1;
    }
}
static inline void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
    IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
/// Durand-Kerner polynomial root finding method
static inline void polyroots6(IKReal rawcoeffs[6+1], IKReal rawroots[6], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[6];
    const int maxsteps = 50;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[6];
    IKReal err[6];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 6; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "2640ae411e0c87b03f56bf289296f9d8"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
