/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 30 generated on 2011-02-15 20:14:50.218235
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int getNumJoints() { return 3; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x23000006; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3;
x0=IKcos(j[1]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
eetrans[0]=((-0.0670700000000000)+(((0.0680000000000000)*(x0)))+(((-0.0300000000000000)*(x1)))+(((0.0232000000000000)*(x0)*(x3)))+(((0.0980000000000000)*(x0)*(x2))));
eetrans[1]=((((0.0680000000000000)*(x1)))+(((0.0232000000000000)*(x1)*(x3)))+(((0.0300000000000000)*(x0)))+(((0.0980000000000000)*(x1)*(x2))));
eetrans[2]=((1.12112500000000)+(((-0.0232000000000000)*(x2)))+(((0.0980000000000000)*(x3)))+(j[0]));
eerot[0]=((x0)*(x3));
eerot[1]=((x1)*(x3));
eerot[2]=((-1.00000000000000)*(x2));
}

class IKSolver {
public:
IKReal j13, cj13, sj13,
j14, cj14, sj14,
j12, cj12, sj12,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j12=pfree[0]; cj12=cos(pfree[0]); sj12=sin(pfree[0]);
new_px=((0.0670700000000000)+(px));
new_py=py;
new_pz=((-1.12112500000000)+(pz));
px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(px)*(px);
dummyeval[0]=((x0)+(((104.123281965848)*(x0)*((j12)*(j12))))+(((-208.246563931695)*(j12)*(pz)*(x0)))+(((20.4081632653061)*(pz)*(x0)))+(((104.123281965848)*(x0)*((pz)*(pz))))+(((-20.4081632653061)*(j12)*(x0))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IKReal evalcond[1];
evalcond[0]=IKabs(px);
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-20.4081632653061)*(j12)*(py)))+(py)+(((-208.246563931695)*(j12)*(py)*(pz)))+(((20.4081632653061)*(py)*(pz)))+(((104.123281965848)*(py)*((j12)*(j12))))+(((104.123281965848)*(py)*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IKReal evalcond[1];
evalcond[0]=IKabs(py);
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[8];
IKReal x1=(j12)*(j12);
IKReal x2=((216.262975778547)*(x1));
IKReal x3=(pz)*(pz);
IKReal x4=((216.262975778547)*(x3));
IKReal x5=((1.00000000000000)+(x2)+(x4));
IKReal x6=((432.525951557093)*(j12)*(pz));
IKReal x7=((x5)+(((-1.00000000000000)*(x6))));
dummyeval[0]=x7;
dummyeval[1]=x7;
dummyeval[2]=x7;
dummyeval[3]=x7;
dummyeval[4]=x7;
dummyeval[5]=x7;
dummyeval[6]=x7;
dummyeval[7]=x7;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  || IKabs(dummyeval[2]) < 0.0000100000000000  || IKabs(dummyeval[3]) < 0.0000100000000000  || IKabs(dummyeval[4]) < 0.0000100000000000  || IKabs(dummyeval[5]) < 0.0000100000000000  || IKabs(dummyeval[6]) < 0.0000100000000000  || IKabs(dummyeval[7]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
IKReal x8=(pz)*(pz);
IKReal x9=(j12)*(j12);
IKReal x10=((0.00462400000000000)+(x9)+(x8));
IKReal x11=((2.00000000000000)*(j12)*(pz));
IKReal x12=((((-1.00000000000000)*(x11)))+(x10));
IKReal x13=((j12)+(((-1.00000000000000)*(pz))));
IKReal x14=(x13)*(x13);
IKReal x15=((IKabs(x12) != 0)?((IKReal)1/(x12)):(IKReal)1.0e30);
IKReal x16=((IKabs(x12) != 0)?(pow(x12,-2.00000000000000)):(IKReal)1.0e30);
IKReal x17=((0.0384160000000000)*(x14)*(x16));
IKReal x18=((-0.0163200000000000)*(x15));
IKReal x19=((x17)+(x18));
if( (x19) < (IKReal)-0.00001 )
    continue;
IKReal x20=IKsqrt(x19);
IKReal x21=((24500.0000000000)*(x14));
IKReal x22=((0.0980000000000000)*(pz));
IKReal x23=((-0.0980000000000000)*(j12));
IKReal x24=((x22)+(x23));
IKReal x25=((x15)*(x24));
j14array[0]=IKatan2(((-1.44117647058824)+(((5.88235294117647e-5)*(x15)*(((x21)+(((x12)*(x20)*(((((-125000.000000000)*(j12)))+(((125000.000000000)*(pz)))))))))))), ((((0.500000000000000)*(x20)))+(x25)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=IKatan2(((-1.44117647058824)+(((5.88235294117647e-5)*(x15)*(((((x12)*(x20)*(((((-125000.000000000)*(pz)))+(((125000.000000000)*(j12)))))))+(x21)))))), ((((-0.500000000000000)*(x20)))+(x25)));
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
if( j14valid[0] && j14valid[1] && IKabs(cj14array[0]-cj14array[1]) < 0.0001 && IKabs(sj14array[0]-sj14array[1]) < 0.0001 )
    j14valid[1]=false;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
IKReal x26=((-0.0300000000000000)*(sj14));
IKReal x27=((cj14)*(pz));
IKReal x28=((-0.0980000000000000)+(x27));
IKReal x29=((cj14)*(j12));
IKReal x30=((0.0680000000000000)*(sj14));
IKReal x31=((x30)+(x29));
IKReal x32=((((-1.00000000000000)*(x31)))+(x28));
IKReal x33=IKatan2(x26, x32);
j13array[0]=((-1.00000000000000)*(x33));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.00000000000000)*(x33))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
IKReal op[6+1], zeror[6];
int numroots;
IKReal j14evalpoly[3];
IKReal x34=((20.4081632653061)*(j12)*(py));
IKReal x35=((20.4081632653061)*(py)*(pz));
IKReal x36=(j12)*(j12);
IKReal x37=(pz)*(pz);
IKReal x38=(py)*(py)*(py);
IKReal x39=((416.493127863390)*(x38));
IKReal x40=((312.369845897543)*(py)*(x36));
IKReal x41=((312.369845897543)*(py)*(x37));
IKReal x42=((624.739691795085)*(j12)*(py)*(pz));
IKReal x43=((3.30070803831737)*(py));
IKReal x44=((28.3215326947105)*(py)*(pz));
IKReal x45=((28.3215326947105)*(j12)*(py));
IKReal x46=((2.77551020408163)*(py));
IKReal x47=((208.246563931695)*(j12)*(py)*(pz));
IKReal x48=((104.123281965848)*(py)*(x36));
IKReal x49=((104.123281965848)*(py)*(x37));
op[0]=((((-1.00000000000000)*(x47)))+(((-1.00000000000000)*(x34)))+(py)+(x35)+(x48)+(x49));
op[1]=((((-1.00000000000000)*(x45)))+(x46)+(x44));
op[2]=((((-1.00000000000000)*(x41)))+(((-1.00000000000000)*(x40)))+(((-1.00000000000000)*(x39)))+(((-1.00000000000000)*(x35)))+(x34)+(x42)+(x43));
op[3]=((((-56.6430653894211)*(py)*(pz)))+(((56.6430653894211)*(j12)*(py))));
op[4]=((((-1.00000000000000)*(x42)))+(((-1.00000000000000)*(x43)))+(((-1.00000000000000)*(x35)))+(x39)+(x34)+(x40)+(x41));
op[5]=((((-1.00000000000000)*(x45)))+(((-1.00000000000000)*(x46)))+(x44));
op[6]=((((-1.00000000000000)*(x49)))+(((-1.00000000000000)*(x48)))+(((-1.00000000000000)*(x34)))+(x35)+(x47)+(((-1.00000000000000)*(py))));
polyroots6(op,zeror,numroots);
IKReal j14array[6], cj14array[6], sj14array[6], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IKReal htj14 = zeror[ij14];
tempj14array[0]=((2.00000000000000)*(atan(htj14)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
bool valid = true;
for( int kj14 = 0; kj14 < numsolutions; ++kj14)
{
    if( IKabs(cj14array[kj14]-cj14array[numsolutions]) < 0.0001 && IKabs(sj14array[kj14]-sj14array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IKReal x50=((py)*(sj14));
j14evalpoly[0]=x50;
j14evalpoly[1]=((((10.2040816326531)*(cj14)*(pz)*(x50)))+(((-1.00000000000000)*(x50)))+(((-10.2040816326531)*(cj14)*(j12)*(x50))));
j14evalpoly[2]=((cj14)*(py));
if( IKabs(j14evalpoly[0]) < 0.0000001000000000  || IKabs(j14evalpoly[1]) < 0.0000001000000000  || IKabs(j14evalpoly[2]) < 0.0000001000000000  )
{
    continue;
}
IKReal x51=((IKabs(py) != 0)?(pow(py,-2.00000000000000)):(IKReal)1.0e30);
IKReal x52=((IKabs(sj14) != 0)?(pow(sj14,-2.00000000000000)):(IKReal)1.0e30);
IKReal x53=((IKabs(sj14) != 0)?((IKReal)1/(sj14)):(IKReal)1.0e30);
IKReal x54=(cj14)*(cj14);
j14evalpoly[0]=((-181.028240405503)+(((-24.6198406951484)*(cj14)*(pz)*(x51)*(x53)))+(((-35.4815351194786)*(cj14)*(pz)*(x51)*(x52)))+(((181.028240405503)*(x51)*(x52)*(x54)*((j12)*(j12))))+(((-362.056480811007)*(j12)*(pz)*(x51)*(x52)*(x54)))+(((24.6198406951484)*(cj14)*(j12)*(x51)*(x53)))+(((1.73859522085445)*(x51)*(x52)))+(x51)+(((181.028240405503)*(x51)*(x52)*(x54)*((pz)*(pz))))+(((2.41274438812455)*(x51)*(x53)))+(((35.4815351194786)*(cj14)*(j12)*(x51)*(x52))));
if( IKabs(j14evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj14;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj14;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj14;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((IKfmod(((j14)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=0;
evalcond[2]=((0.0980000000000000)+(j12)+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[6];
IKReal x55=x37;
IKReal x56=x36;
evalcond[0]=IKabs(py);
evalcond[1]=-0.0300000000000000;
evalcond[2]=0;
evalcond[3]=((0.0980000000000000)+(j12)+(((-1.00000000000000)*(pz))));
evalcond[4]=((0.0105040000000000)+(((0.196000000000000)*(j12)))+(x56)+(((-1.00000000000000)*(x55))));
evalcond[5]=((0.0105040000000000)+(((2.00000000000000)*(j12)*(pz)))+(((-1.00000000000000)*(x56)))+(((-1.00000000000000)*(x55))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((-1.00000000000000)+(((-10.2040816326531)*(j12)))+(((10.2040816326531)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((-1.00000000000000)+(((-10.2040816326531)*(j12)))+(((10.2040816326531)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[2+1], zeror[2];
int numroots;
IKReal x57=((10.2040816326531)*(j12));
IKReal x58=((10.2040816326531)*(pz));
op[0]=((-1.00000000000000)+(x58)+(((-1.00000000000000)*(x57))));
op[1]=0;
op[2]=((1.00000000000000)+(x57)+(((-1.00000000000000)*(x58))));
polyroots2(op,zeror,numroots);
IKReal j13array[2], cj13array[2], sj13array[2], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IKReal htj13 = zeror[ij13];
tempj13array[0]=((2.00000000000000)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
bool valid = true;
for( int kj13 = 0; kj13 < numsolutions; ++kj13)
{
    if( IKabs(cj13array[kj13]-cj13array[numsolutions]) < 0.0001 && IKabs(sj13array[kj13]-sj13array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
    }

}

}

} else
{
IKReal op[1+1], zeror[1];
int numroots;
op[0]=((-1.00000000000000)+(((-10.2040816326531)*(j12)))+(((10.2040816326531)*(pz))));
op[1]=0;
polyroots1(op,zeror,numroots);
IKReal j13array[1], cj13array[1], sj13array[1], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IKReal htj13 = zeror[ij13];
tempj13array[0]=((2.00000000000000)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
bool valid = true;
for( int kj13 = 0; kj13 < numsolutions; ++kj13)
{
    if( IKabs(cj13array[kj13]-cj13array[numsolutions]) < 0.0001 && IKabs(sj13array[kj13]-sj13array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IKReal j13array[4], cj13array[4], sj13array[4];
bool j13valid[4]={false};
IKReal x59=x51;
IKReal x60=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
IKReal x61=((2.00000000000000)*(j12)*(pz));
IKReal x62=((0.0105040000000000)+(x61));
IKReal x63=x37;
IKReal x64=x36;
IKReal x65=((x63)+(x64));
IKReal x66=((x62)+(((-1.00000000000000)*(x65))));
if( (x66) < (IKReal)-0.00001 )
    continue;
IKReal x67=IKsqrt(x66);
cj13array[0]=((-1.00000000000000)*(x60)*(x67));
cj13array[2]=((x60)*(x67));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( cj13array[2] >= -1.0001 && cj13array[2] <= 1.0001 )
{
    j13valid[2] = j13valid[3] = true;
    j13array[2] = IKacos(cj13array[2]);
    sj13array[2] = IKsin(j13array[2]);
    cj13array[3] = cj13array[2];
    j13array[3] = -j13array[2];
    sj13array[3] = -sj13array[2];
}
else if( isnan(cj13array[2]) )
{
    // probably any value will work
    j13valid[2] = true;
    cj13array[2] = 1; sj13array[2] = 0; j13array[2] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
if( j13valid[0] && j13valid[2] && IKabs(cj13array[0]-cj13array[2]) < 0.0001 && IKabs(sj13array[0]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[0] && j13valid[3] && IKabs(cj13array[0]-cj13array[3]) < 0.0001 && IKabs(sj13array[0]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[1] && j13valid[2] && IKabs(cj13array[1]-cj13array[2]) < 0.0001 && IKabs(sj13array[1]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[1] && j13valid[3] && IKabs(cj13array[1]-cj13array[3]) < 0.0001 && IKabs(sj13array[1]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[2] && j13valid[3] && IKabs(cj13array[2]-cj13array[3]) < 0.0001 && IKabs(sj13array[2]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
for(int ij13 = 0; ij13 < 4; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[4], cj13array[4], sj13array[4];
bool j13valid[4]={false};
IKReal x68=x51;
IKReal x69=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
IKReal x70=((0.196000000000000)*(j12));
IKReal x71=x36;
IKReal x72=((0.0105040000000000)+(x71)+(x70));
IKReal x73=x37;
IKReal x74=((((-1.00000000000000)*(x73)))+(x72));
if( (x74) < (IKReal)-0.00001 )
    continue;
IKReal x75=IKsqrt(x74);
cj13array[0]=((-1.00000000000000)*(x69)*(x75));
cj13array[2]=((x69)*(x75));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( cj13array[2] >= -1.0001 && cj13array[2] <= 1.0001 )
{
    j13valid[2] = j13valid[3] = true;
    j13array[2] = IKacos(cj13array[2]);
    sj13array[2] = IKsin(j13array[2]);
    cj13array[3] = cj13array[2];
    j13array[3] = -j13array[2];
    sj13array[3] = -sj13array[2];
}
else if( isnan(cj13array[2]) )
{
    // probably any value will work
    j13valid[2] = true;
    cj13array[2] = 1; sj13array[2] = 0; j13array[2] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
if( j13valid[0] && j13valid[2] && IKabs(cj13array[0]-cj13array[2]) < 0.0001 && IKabs(sj13array[0]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[0] && j13valid[3] && IKabs(cj13array[0]-cj13array[3]) < 0.0001 && IKabs(sj13array[0]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[1] && j13valid[2] && IKabs(cj13array[1]-cj13array[2]) < 0.0001 && IKabs(sj13array[1]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[1] && j13valid[3] && IKabs(cj13array[1]-cj13array[3]) < 0.0001 && IKabs(sj13array[1]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[2] && j13valid[3] && IKabs(cj13array[2]-cj13array[3]) < 0.0001 && IKabs(sj13array[2]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
for(int ij13 = 0; ij13 < 4; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
cj13array[0]=((0.0300000000000000)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30)));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(j14)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=0;
evalcond[2]=((0.0980000000000000)+(((-1.00000000000000)*(j12)))+(pz));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[6];
IKReal x76=x37;
IKReal x77=x36;
evalcond[0]=IKabs(py);
evalcond[1]=0.0300000000000000;
evalcond[2]=0;
evalcond[3]=((0.0980000000000000)+(((-1.00000000000000)*(j12)))+(pz));
evalcond[4]=((0.0105040000000000)+(((-1.00000000000000)*(x76)))+(((-0.196000000000000)*(j12)))+(x77));
evalcond[5]=((0.0105040000000000)+(((-1.00000000000000)*(x76)))+(((-1.00000000000000)*(x77)))+(((2.00000000000000)*(j12)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((-1.00000000000000)+(((10.2040816326531)*(j12)))+(((-10.2040816326531)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((-1.00000000000000)+(((10.2040816326531)*(j12)))+(((-10.2040816326531)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[2+1], zeror[2];
int numroots;
IKReal x78=((10.2040816326531)*(pz));
IKReal x79=((10.2040816326531)*(j12));
op[0]=((-1.00000000000000)+(((-1.00000000000000)*(x78)))+(x79));
op[1]=0;
op[2]=((1.00000000000000)+(((-1.00000000000000)*(x79)))+(x78));
polyroots2(op,zeror,numroots);
IKReal j13array[2], cj13array[2], sj13array[2], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IKReal htj13 = zeror[ij13];
tempj13array[0]=((2.00000000000000)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
bool valid = true;
for( int kj13 = 0; kj13 < numsolutions; ++kj13)
{
    if( IKabs(cj13array[kj13]-cj13array[numsolutions]) < 0.0001 && IKabs(sj13array[kj13]-sj13array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
    }

}

}

} else
{
IKReal op[1+1], zeror[1];
int numroots;
op[0]=((-1.00000000000000)+(((10.2040816326531)*(j12)))+(((-10.2040816326531)*(pz))));
op[1]=0;
polyroots1(op,zeror,numroots);
IKReal j13array[1], cj13array[1], sj13array[1], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IKReal htj13 = zeror[ij13];
tempj13array[0]=((2.00000000000000)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
bool valid = true;
for( int kj13 = 0; kj13 < numsolutions; ++kj13)
{
    if( IKabs(cj13array[kj13]-cj13array[numsolutions]) < 0.0001 && IKabs(sj13array[kj13]-sj13array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IKReal j13array[4], cj13array[4], sj13array[4];
bool j13valid[4]={false};
IKReal x80=x51;
IKReal x81=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
IKReal x82=((2.00000000000000)*(j12)*(pz));
IKReal x83=((0.0105040000000000)+(x82));
IKReal x84=x37;
IKReal x85=x36;
IKReal x86=((x84)+(x85));
IKReal x87=((x83)+(((-1.00000000000000)*(x86))));
if( (x87) < (IKReal)-0.00001 )
    continue;
IKReal x88=IKsqrt(x87);
cj13array[0]=((-1.00000000000000)*(x81)*(x88));
cj13array[2]=((x81)*(x88));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( cj13array[2] >= -1.0001 && cj13array[2] <= 1.0001 )
{
    j13valid[2] = j13valid[3] = true;
    j13array[2] = IKacos(cj13array[2]);
    sj13array[2] = IKsin(j13array[2]);
    cj13array[3] = cj13array[2];
    j13array[3] = -j13array[2];
    sj13array[3] = -sj13array[2];
}
else if( isnan(cj13array[2]) )
{
    // probably any value will work
    j13valid[2] = true;
    cj13array[2] = 1; sj13array[2] = 0; j13array[2] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
if( j13valid[0] && j13valid[2] && IKabs(cj13array[0]-cj13array[2]) < 0.0001 && IKabs(sj13array[0]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[0] && j13valid[3] && IKabs(cj13array[0]-cj13array[3]) < 0.0001 && IKabs(sj13array[0]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[1] && j13valid[2] && IKabs(cj13array[1]-cj13array[2]) < 0.0001 && IKabs(sj13array[1]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[1] && j13valid[3] && IKabs(cj13array[1]-cj13array[3]) < 0.0001 && IKabs(sj13array[1]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[2] && j13valid[3] && IKabs(cj13array[2]-cj13array[3]) < 0.0001 && IKabs(sj13array[2]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
for(int ij13 = 0; ij13 < 4; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[4], cj13array[4], sj13array[4];
bool j13valid[4]={false};
IKReal x89=x51;
IKReal x90=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
IKReal x91=x36;
IKReal x92=((0.0105040000000000)+(x91));
IKReal x93=((0.196000000000000)*(j12));
IKReal x94=x37;
IKReal x95=((x93)+(x94));
IKReal x96=((x92)+(((-1.00000000000000)*(x95))));
if( (x96) < (IKReal)-0.00001 )
    continue;
IKReal x97=IKsqrt(x96);
cj13array[0]=((-1.00000000000000)*(x90)*(x97));
cj13array[2]=((x90)*(x97));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( cj13array[2] >= -1.0001 && cj13array[2] <= 1.0001 )
{
    j13valid[2] = j13valid[3] = true;
    j13array[2] = IKacos(cj13array[2]);
    sj13array[2] = IKsin(j13array[2]);
    cj13array[3] = cj13array[2];
    j13array[3] = -j13array[2];
    sj13array[3] = -sj13array[2];
}
else if( isnan(cj13array[2]) )
{
    // probably any value will work
    j13valid[2] = true;
    cj13array[2] = 1; sj13array[2] = 0; j13array[2] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
if( j13valid[0] && j13valid[2] && IKabs(cj13array[0]-cj13array[2]) < 0.0001 && IKabs(sj13array[0]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[0] && j13valid[3] && IKabs(cj13array[0]-cj13array[3]) < 0.0001 && IKabs(sj13array[0]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[1] && j13valid[2] && IKabs(cj13array[1]-cj13array[2]) < 0.0001 && IKabs(sj13array[1]-sj13array[2]) < 0.0001 )
    j13valid[2]=false;
if( j13valid[1] && j13valid[3] && IKabs(cj13array[1]-cj13array[3]) < 0.0001 && IKabs(sj13array[1]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
if( j13valid[2] && j13valid[3] && IKabs(cj13array[2]-cj13array[3]) < 0.0001 && IKabs(sj13array[2]-sj13array[3]) < 0.0001 )
    j13valid[3]=false;
for(int ij13 = 0; ij13 < 4; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
cj13array[0]=((0.0300000000000000)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30)));
if( cj13array[0] >= -1.0001 && cj13array[0] <= 1.0001 )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x98=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j13array[0]=IKatan2(((x98)*(((IKabs(sj14) != 0)?((IKReal)1/(sj14)):(IKReal)1.0e30))*(((0.0980000000000000)+(((-1.00000000000000)*(cj14)*(pz)))+(((cj14)*(j12)))+(((0.0680000000000000)*(sj14)))))), ((0.0300000000000000)*(x98)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x99=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j13array[0]=IKatan2(((x99)*(((IKabs(sj14) != 0)?((IKReal)1/(sj14)):(IKReal)1.0e30))*(((0.0980000000000000)+(((-1.00000000000000)*(cj14)*(pz)))+(((cj14)*(j12)))+(((0.0680000000000000)*(sj14)))))), ((0.0300000000000000)*(x99)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x100=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
j13array[0]=IKatan2(((x100)*(((IKabs(sj14) != 0)?((IKReal)1/(sj14)):(IKReal)1.0e30))*(((0.0980000000000000)+(((-1.00000000000000)*(cj14)*(pz)))+(((cj14)*(j12)))+(((0.0680000000000000)*(sj14)))))), ((0.0300000000000000)*(x100)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal j14evalpoly[3];
IKReal x101=(px)*(px);
IKReal x102=(pz)*(pz);
IKReal x103=(j12)*(j12);
IKReal x104=((28.3215326947105)*(j12)*(x101));
IKReal x105=((2.77551020408163)*(x101));
IKReal x106=((28.3215326947105)*(pz)*(x101));
IKReal x107=((20.4081632653061)*(j12)*(x101));
IKReal x108=((104.123281965848)*(x101)*(x102));
IKReal x109=((104.123281965848)*(x101)*(x103));
IKReal x110=((20.4081632653061)*(pz)*(x101));
IKReal x111=((208.246563931695)*(j12)*(pz)*(x101));
op[0]=((((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x111)))+(x110)+(x108)+(x109)+(x101));
op[1]=((((-1.00000000000000)*(x104)))+(x105)+(x106));
op[2]=((((-416.493127863390)*((x101)*(x101))))+(((416.493127863390)*(j12)*(pz)*(x101)))+(((-416.493127863390)*(x101)*((py)*(py))))+(((-208.246563931695)*(x101)*(x103)))+(((-208.246563931695)*(x101)*(x102)))+(((4.30070803831737)*(x101))));
op[3]=((((-1.00000000000000)*(x106)))+(x104)+(x105));
op[4]=((((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x110)))+(x108)+(x109)+(x107)+(x101));
polyroots4(op,zeror,numroots);
IKReal j14array[4], cj14array[4], sj14array[4], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IKReal htj14 = zeror[ij14];
tempj14array[0]=((2.00000000000000)*(atan(htj14)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
bool valid = true;
for( int kj14 = 0; kj14 < numsolutions; ++kj14)
{
    if( IKabs(cj14array[kj14]-cj14array[numsolutions]) < 0.0001 && IKabs(sj14array[kj14]-sj14array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

j14evalpoly[0]=px;
j14evalpoly[1]=((((33.3333333333333)*(cj14)*(j12)*(px)))+(((-33.3333333333333)*(cj14)*(px)*(pz)))+(((2.26666666666667)*(px)*(sj14)))+(((3.26666666666667)*(px)))+(((-1.00000000000000)*(py)*(sj14))));
j14evalpoly[2]=((((-1.00000000000000)*(sj14)*((py)*(py))))+(((-1.00000000000000)*(sj14)*((px)*(px)))));
if( IKabs(j14evalpoly[0]) < 0.0000001000000000  || IKabs(j14evalpoly[1]) < 0.0000001000000000  || IKabs(j14evalpoly[2]) < 0.0000001000000000  )
{
    continue;
}
IKReal x112=(py)*(py)*(py)*(py);
IKReal x113=(px)*(px)*(px)*(px);
IKReal x114=((10000.0000000000)*(x113));
IKReal x115=x101;
IKReal x116=(py)*(py);
IKReal x117=((20000.0000000000)*(x115)*(x116));
IKReal x118=((10000.0000000000)*(x112));
IKReal x119=((x117)+(x114)+(x118));
IKReal x120=((IKabs(x119) != 0)?((IKReal)1/(x119)):(IKReal)1.0e30);
IKReal x121=((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30);
IKReal x122=((IKabs(sj14) != 0)?((IKReal)1/(sj14)):(IKReal)1.0e30);
IKReal x123=(cj14)*(cj14);
IKReal x124=((IKabs(sj14) != 0)?(pow(sj14,-2.00000000000000)):(IKReal)1.0e30);
IKReal x125=((100.000000000000)*(x116));
IKReal x126=((100.000000000000)*(x115));
IKReal x127=((x126)+(x125));
IKReal x128=((-1.00000000000000)*(x127));
IKReal x129=((IKabs(x128) != 0)?((IKReal)1/(x128)):(IKReal)1.0e30);
IKReal x130=(py)*(py)*(py);
IKReal x131=((IKabs(px) != 0)?(pow(px,-2.00000000000000)):(IKReal)1.0e30);
IKReal x132=x102;
IKReal x133=x103;
j14evalpoly[0]=((-1111.11111111111)+(((666666.666666667)*(cj14)*(j12)*(px)*(py)*(x120)*(x122)))+(((6666.66666666667)*(cj14)*(j12)*(py)*(x121)*(x122)*(x129)))+(((45333.3333333333)*(px)*(py)*(x120)))+(((-22222222.2222222)*(j12)*(pz)*(x116)*(x120)*(x123)*(x124)))+(((106711.111111111)*(x115)*(x120)*(x124)))+(((65333.3333333333)*(py)*(x116)*(x120)*(x121)*(x122)))+(((61377.7777777778)*(x116)*(x120)))+(((148088.888888889)*(x115)*(x120)*(x122)))+(x131)+(((-1511111.11111111)*(cj14)*(pz)*(x115)*(x120)*(x122)))+(((453.333333333333)*(py)*(x121)*(x129)))+(((148088.888888889)*(x116)*(x120)*(x122)))+(((-666666.666666667)*(cj14)*(py)*(pz)*(x116)*(x120)*(x121)*(x122)))+(((2177777.77777778)*(cj14)*(j12)*(x115)*(x120)*(x124)))+(((2177777.77777778)*(cj14)*(j12)*(x116)*(x120)*(x124)))+(((-6666.66666666667)*(cj14)*(py)*(pz)*(x121)*(x122)*(x129)))+(((200.000000000000)*(x116)*(x129)*(x131)))+(((666666.666666667)*(cj14)*(j12)*(py)*(x116)*(x120)*(x121)*(x122)))+(((1511111.11111111)*(cj14)*(j12)*(x116)*(x120)*(x122)))+(((11111111.1111111)*(x116)*(x120)*(x123)*(x124)*(x133)))+(((11111111.1111111)*(x116)*(x120)*(x123)*(x124)*(x132)))+(((-2177777.77777778)*(cj14)*(pz)*(x115)*(x120)*(x124)))+(((45333.3333333333)*(py)*(x116)*(x120)*(x121)))+(((1511111.11111111)*(cj14)*(j12)*(x115)*(x120)*(x122)))+(((-666666.666666667)*(cj14)*(px)*(py)*(pz)*(x120)*(x122)))+(((-2177777.77777778)*(cj14)*(pz)*(x116)*(x120)*(x124)))+(((653.333333333333)*(py)*(x121)*(x122)*(x129)))+(((-22222222.2222222)*(j12)*(pz)*(x115)*(x120)*(x123)*(x124)))+(((11111111.1111111)*(x115)*(x120)*(x123)*(x124)*(x133)))+(((11111111.1111111)*(x115)*(x120)*(x123)*(x124)*(x132)))+(((65333.3333333333)*(px)*(py)*(x120)*(x122)))+(((-1511111.11111111)*(cj14)*(pz)*(x116)*(x120)*(x122)))+(((51377.7777777778)*(x115)*(x120)))+(((106711.111111111)*(x116)*(x120)*(x124)))+(((x118)*(x120)*(x131))));
if( IKabs(j14evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
{
IKReal dummyeval[2];
IKReal x134=x116;
IKReal x135=((sj14)*(x134));
IKReal x136=x101;
IKReal x137=((sj14)*(x136));
IKReal x138=((x135)+(x137));
dummyeval[0]=x138;
dummyeval[1]=x138;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x139=((33.3333333333333)*(cj14)*(py)*(pz));
IKReal x140=((33.3333333333333)*(cj14)*(j12)*(py));
IKReal x141=((px)*(sj14));
IKReal x142=((3.26666666666667)*(py));
IKReal x143=((2.26666666666667)*(py)*(sj14));
IKReal x144=((x140)+(x141)+(x142)+(x143));
IKReal x145=((((-1.00000000000000)*(x144)))+(x139));
dummyeval[0]=x145;
dummyeval[1]=x145;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x146=((33.3333333333333)*(cj14)*(py)*(pz));
IKReal x147=((33.3333333333333)*(cj14)*(j12)*(py));
IKReal x148=((px)*(sj14));
IKReal x149=((3.26666666666667)*(py));
IKReal x150=((2.26666666666667)*(py)*(sj14));
IKReal x151=((x150)+(x147)+(x148)+(x149));
IKReal x152=((((-1.00000000000000)*(x151)))+(x146));
dummyeval[0]=x152;
dummyeval[1]=x152;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((IKfmod(((j14)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=0;
evalcond[2]=((0.0980000000000000)+(j12)+(((-1.00000000000000)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
IKReal x153=x101;
IKReal x154=x116;
IKReal x155=((x154)+(x153));
if( (x155) < (IKReal)-0.00001 )
    continue;
IKReal x156=IKsqrt(x155);
IKReal x157=IKabs(x156);
IKReal x158=((IKabs(x157) != 0)?((IKReal)1/(x157)):(IKReal)1.0e30);
IKReal x159=((0.0300000000000000)*(x158));
if( (x159) < -1.0001 || (x159) > 1.0001 )
    continue;
IKReal x160=IKasin(x159);
IKReal x161=((-1.00000000000000)*(px));
IKReal x162=IKatan2(py, x161);
j13array[0]=((((-1.00000000000000)*(x162)))+(x160));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.00000000000000)*(x162)))+(((-1.00000000000000)*(x160))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(j14)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=0;
evalcond[2]=((0.0980000000000000)+(((-1.00000000000000)*(j12)))+(pz));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
IKReal x163=x101;
IKReal x164=x116;
IKReal x165=((x163)+(x164));
if( (x165) < (IKReal)-0.00001 )
    continue;
IKReal x166=IKsqrt(x165);
IKReal x167=IKabs(x166);
IKReal x168=((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30);
IKReal x169=((0.0300000000000000)*(x168));
if( (x169) < -1.0001 || (x169) > 1.0001 )
    continue;
IKReal x170=IKasin(x169);
IKReal x171=((-1.00000000000000)*(py));
IKReal x172=IKatan2(x171, px);
j13array[0]=((((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x172))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.00000000000000)*(x172)))+(x170));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
if( j13valid[0] && j13valid[1] && IKabs(cj13array[0]-cj13array[1]) < 0.0001 && IKabs(sj13array[0]-sj13array[1]) < 0.0001 )
    j13valid[1]=false;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((((IKabs(((((-10000.0000000000)*(cj14)*(j12)*(py)))+(((-680.000000000000)*(py)*(sj14)))+(((10000.0000000000)*(cj14)*(py)*(pz)))+(((-980.000000000000)*(py)))+(((-300.000000000000)*(px)*(sj14))))) != 0)?((IKReal)1/(((((-10000.0000000000)*(cj14)*(j12)*(py)))+(((-680.000000000000)*(py)*(sj14)))+(((10000.0000000000)*(cj14)*(py)*(pz)))+(((-980.000000000000)*(py)))+(((-300.000000000000)*(px)*(sj14)))))):(IKReal)1.0e30))*(((((9.00000000000000)*(sj14)))+(((-10000.0000000000)*(sj14)*((py)*(py))))))), ((-1.00000000000000)*(((IKabs(((((-100.000000000000)*(cj14)*(j12)*(py)))+(((-3.00000000000000)*(px)*(sj14)))+(((-6.80000000000000)*(py)*(sj14)))+(((-9.80000000000000)*(py)))+(((100.000000000000)*(cj14)*(py)*(pz))))) != 0)?((IKReal)1/(((((-100.000000000000)*(cj14)*(j12)*(py)))+(((-3.00000000000000)*(px)*(sj14)))+(((-6.80000000000000)*(py)*(sj14)))+(((-9.80000000000000)*(py)))+(((100.000000000000)*(cj14)*(py)*(pz)))))):(IKReal)1.0e30))*(((0.294000000000000)+(((0.204000000000000)*(sj14)))+(((-3.00000000000000)*(cj14)*(pz)))+(((100.000000000000)*(px)*(py)*(sj14)))+(((3.00000000000000)*(cj14)*(j12)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((((IKabs(((((-10000.0000000000)*(cj14)*(j12)*(py)))+(((-680.000000000000)*(py)*(sj14)))+(((10000.0000000000)*(cj14)*(py)*(pz)))+(((-980.000000000000)*(py)))+(((-300.000000000000)*(px)*(sj14))))) != 0)?((IKReal)1/(((((-10000.0000000000)*(cj14)*(j12)*(py)))+(((-680.000000000000)*(py)*(sj14)))+(((10000.0000000000)*(cj14)*(py)*(pz)))+(((-980.000000000000)*(py)))+(((-300.000000000000)*(px)*(sj14)))))):(IKReal)1.0e30))*(((((9.00000000000000)*(sj14)))+(((-10000.0000000000)*(sj14)*((py)*(py))))))), ((-1.00000000000000)*(((IKabs(((((-100.000000000000)*(cj14)*(j12)*(py)))+(((-3.00000000000000)*(px)*(sj14)))+(((-6.80000000000000)*(py)*(sj14)))+(((-9.80000000000000)*(py)))+(((100.000000000000)*(cj14)*(py)*(pz))))) != 0)?((IKReal)1/(((((-100.000000000000)*(cj14)*(j12)*(py)))+(((-3.00000000000000)*(px)*(sj14)))+(((-6.80000000000000)*(py)*(sj14)))+(((-9.80000000000000)*(py)))+(((100.000000000000)*(cj14)*(py)*(pz)))))):(IKReal)1.0e30))*(((0.294000000000000)+(((0.204000000000000)*(sj14)))+(((-3.00000000000000)*(cj14)*(pz)))+(((100.000000000000)*(px)*(py)*(sj14)))+(((3.00000000000000)*(cj14)*(j12)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x173=x116;
IKReal x174=((100.000000000000)*(sj14)*(x173));
IKReal x175=x101;
IKReal x176=((100.000000000000)*(sj14)*(x175));
IKReal x177=((x174)+(x176));
IKReal x178=((IKabs(x177) != 0)?((IKReal)1/(x177)):(IKReal)1.0e30);
IKReal x179=((cj14)*(j12));
IKReal x180=((0.0680000000000000)*(sj14));
IKReal x181=((0.0980000000000000)+(x179)+(x180));
IKReal x182=((cj14)*(pz));
IKReal x183=((((-1.00000000000000)*(x182)))+(x181));
j13array[0]=IKatan2(((x178)*(((((-3.00000000000000)*(px)*(sj14)))+(((100.000000000000)*(py)*(x183)))))), ((x178)*(((((100.000000000000)*(px)*(x183)))+(((3.00000000000000)*(py)*(sj14)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(3);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j13;
solution.basesol[2].foffset = j14;
solution.vfree.resize(0);
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}

static inline void polyroots1(IKReal rawcoeffs[1+1], IKReal rawroots[1], int& numroots) {
    if( rawcoeffs[0] == 0 ) {
        numroots=0;
    }
    else {
        rawroots[0] = -rawcoeffs[1]/rawcoeffs[0];
        numroots=1;
    }
}
static inline void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
    IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
/// Durand-Kerner polynomial root finding method
static inline void polyroots6(IKReal rawcoeffs[6+1], IKReal rawroots[6], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[6];
    const int maxsteps = 50;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[6];
    IKReal err[6];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 6; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "2640ae411e0c87b03f56bf289296f9d8"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
