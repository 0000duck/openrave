/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-11-18 16:45:24.053069
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKcos(j[3]);
x1=IKcos(j[0]);
x2=IKsin(j[5]);
x3=IKcos(j[2]);
x4=IKcos(j[5]);
x5=IKsin(j[0]);
x6=IKcos(j[4]);
x7=IKsin(j[1]);
x8=IKsin(j[2]);
x9=IKsin(j[3]);
x10=IKsin(j[4]);
x11=IKcos(j[1]);
x12=IKsin(j[6]);
x13=IKcos(j[6]);
eerot[0]=((((-0.999135601564979)*(x0)*(x1)*(x2)*(x3)*(x6)*(x7)))+(((0.999135601564979)*(x1)*(x10)*(x2)*(x7)*(x8)))+(((x0)*(x1)*(x11)*(x4)))+(((-0.0415698169996759)*(x1)*(x10)*(x2)*(x3)*(x7)))+(((0.0415698169996759)*(x0)*(x2)*(x3)*(x5)*(x6)))+(((-0.0415698169996759)*(x0)*(x1)*(x2)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x1)*(x11)*(x2)*(x6)*(x9)))+(((-0.999135601564979)*(x4)*(x5)*(x8)*(x9)))+(((-0.999135601564979)*(x1)*(x3)*(x4)*(x7)*(x9)))+(((0.0415698169996759)*(x3)*(x4)*(x5)*(x9)))+(((-0.0415698169996759)*(x1)*(x4)*(x7)*(x8)*(x9)))+(((-0.999135601564979)*(x10)*(x2)*(x3)*(x5)))+(((-0.0415698169996759)*(x10)*(x2)*(x5)*(x8)))+(((-0.999135601564979)*(x0)*(x2)*(x5)*(x6)*(x8))));
eerot[1]=((((0.0415698169996759)*(x1)*(x10)*(x12)*(x3)*(x4)*(x7)))+(((0.0415698169996759)*(x10)*(x12)*(x4)*(x5)*(x8)))+(((-0.0415698169996759)*(x1)*(x12)*(x2)*(x7)*(x8)*(x9)))+(((-0.0415698169996759)*(x13)*(x5)*(x6)*(x8)))+(((x1)*(x10)*(x11)*(x13)*(x9)))+(((-0.999135601564979)*(x1)*(x10)*(x12)*(x4)*(x7)*(x8)))+(((-0.0415698169996759)*(x0)*(x10)*(x13)*(x3)*(x5)))+(((0.999135601564979)*(x10)*(x12)*(x3)*(x4)*(x5)))+(((-0.999135601564979)*(x13)*(x3)*(x5)*(x6)))+(((x1)*(x11)*(x12)*(x4)*(x6)*(x9)))+(((0.0415698169996759)*(x0)*(x1)*(x10)*(x13)*(x7)*(x8)))+(((0.0415698169996759)*(x0)*(x1)*(x12)*(x4)*(x6)*(x7)*(x8)))+(((0.0415698169996759)*(x12)*(x2)*(x3)*(x5)*(x9)))+(((0.999135601564979)*(x0)*(x1)*(x10)*(x13)*(x3)*(x7)))+(((x0)*(x1)*(x11)*(x12)*(x2)))+(((0.999135601564979)*(x0)*(x1)*(x12)*(x3)*(x4)*(x6)*(x7)))+(((-0.999135601564979)*(x12)*(x2)*(x5)*(x8)*(x9)))+(((0.999135601564979)*(x1)*(x13)*(x6)*(x7)*(x8)))+(((-0.999135601564979)*(x1)*(x12)*(x2)*(x3)*(x7)*(x9)))+(((0.999135601564979)*(x0)*(x12)*(x4)*(x5)*(x6)*(x8)))+(((0.999135601564979)*(x0)*(x10)*(x13)*(x5)*(x8)))+(((-0.0415698169996759)*(x1)*(x13)*(x3)*(x6)*(x7)))+(((-0.0415698169996759)*(x0)*(x12)*(x3)*(x4)*(x5)*(x6))));
eerot[2]=((((0.999135601564979)*(x0)*(x1)*(x13)*(x3)*(x4)*(x6)*(x7)))+(((-0.0415698169996759)*(x0)*(x13)*(x3)*(x4)*(x5)*(x6)))+(((-0.999135601564979)*(x1)*(x13)*(x2)*(x3)*(x7)*(x9)))+(((0.0415698169996759)*(x1)*(x10)*(x13)*(x3)*(x4)*(x7)))+(((-0.999135601564979)*(x0)*(x1)*(x10)*(x12)*(x3)*(x7)))+(((0.0415698169996759)*(x13)*(x2)*(x3)*(x5)*(x9)))+(((-0.999135601564979)*(x1)*(x10)*(x13)*(x4)*(x7)*(x8)))+(((0.0415698169996759)*(x0)*(x1)*(x13)*(x4)*(x6)*(x7)*(x8)))+(((x1)*(x11)*(x13)*(x4)*(x6)*(x9)))+(((x0)*(x1)*(x11)*(x13)*(x2)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x12)*(x9)))+(((0.999135601564979)*(x0)*(x13)*(x4)*(x5)*(x6)*(x8)))+(((-0.999135601564979)*(x0)*(x10)*(x12)*(x5)*(x8)))+(((0.999135601564979)*(x12)*(x3)*(x5)*(x6)))+(((-0.999135601564979)*(x1)*(x12)*(x6)*(x7)*(x8)))+(((-0.999135601564979)*(x13)*(x2)*(x5)*(x8)*(x9)))+(((0.0415698169996759)*(x0)*(x10)*(x12)*(x3)*(x5)))+(((0.0415698169996759)*(x10)*(x13)*(x4)*(x5)*(x8)))+(((0.0415698169996759)*(x12)*(x5)*(x6)*(x8)))+(((-0.0415698169996759)*(x1)*(x13)*(x2)*(x7)*(x8)*(x9)))+(((-0.0415698169996759)*(x0)*(x1)*(x10)*(x12)*(x7)*(x8)))+(((0.0415698169996759)*(x1)*(x12)*(x3)*(x6)*(x7)))+(((0.999135601564979)*(x10)*(x13)*(x3)*(x4)*(x5))));
eetrans[0]=((((0.400000000000000)*(x1)*(x11)))+(((-0.179844408281696)*(x0)*(x2)*(x5)*(x6)*(x8)))+(((-0.320722528102358)*(x5)*(x8)*(x9)))+(((-0.00748256705994167)*(x1)*(x10)*(x2)*(x3)*(x7)))+(((0.00748256705994167)*(x3)*(x4)*(x5)*(x9)))+(((-0.179844408281696)*(x4)*(x5)*(x8)*(x9)))+(((-0.00748256705994167)*(x1)*(x4)*(x7)*(x8)*(x9)))+(((0.00748256705994167)*(x0)*(x2)*(x3)*(x5)*(x6)))+(((-0.320722528102358)*(x1)*(x3)*(x7)*(x9)))+(((0.180000000000000)*(x0)*(x1)*(x11)*(x4)))+(((-0.00748256705994167)*(x0)*(x1)*(x2)*(x6)*(x7)*(x8)))+(((-0.179844408281696)*(x10)*(x2)*(x3)*(x5)))+(((0.321000000000000)*(x0)*(x1)*(x11)))+(((-0.179844408281696)*(x0)*(x1)*(x2)*(x3)*(x6)*(x7)))+(((0.100000000000000)*(x1)))+(((-0.00748256705994167)*(x10)*(x2)*(x5)*(x8)))+(((-0.180000000000000)*(x1)*(x11)*(x2)*(x6)*(x9)))+(((-0.179844408281696)*(x1)*(x3)*(x4)*(x7)*(x9)))+(((-0.0133439112568960)*(x1)*(x7)*(x8)*(x9)))+(((0.0133439112568960)*(x3)*(x5)*(x9)))+(((0.179844408281696)*(x1)*(x10)*(x2)*(x7)*(x8))));
eerot[3]=((((-0.999135601564979)*(x3)*(x4)*(x5)*(x7)*(x9)))+(((-0.0415698169996759)*(x10)*(x2)*(x3)*(x5)*(x7)))+(((0.999135601564979)*(x1)*(x4)*(x8)*(x9)))+(((0.999135601564979)*(x10)*(x2)*(x5)*(x7)*(x8)))+(((-0.999135601564979)*(x0)*(x2)*(x3)*(x5)*(x6)*(x7)))+(((0.999135601564979)*(x1)*(x10)*(x2)*(x3)))+(((-1.00000000000000)*(x11)*(x2)*(x5)*(x6)*(x9)))+(((x0)*(x11)*(x4)*(x5)))+(((0.999135601564979)*(x0)*(x1)*(x2)*(x6)*(x8)))+(((-0.0415698169996759)*(x4)*(x5)*(x7)*(x8)*(x9)))+(((-0.0415698169996759)*(x0)*(x2)*(x5)*(x6)*(x7)*(x8)))+(((-0.0415698169996759)*(x0)*(x1)*(x2)*(x3)*(x6)))+(((0.0415698169996759)*(x1)*(x10)*(x2)*(x8)))+(((-0.0415698169996759)*(x1)*(x3)*(x4)*(x9))));
eerot[4]=((((0.0415698169996759)*(x10)*(x12)*(x3)*(x4)*(x5)*(x7)))+(((-0.0415698169996759)*(x12)*(x2)*(x5)*(x7)*(x8)*(x9)))+(((-0.0415698169996759)*(x1)*(x10)*(x12)*(x4)*(x8)))+(((-0.999135601564979)*(x0)*(x1)*(x12)*(x4)*(x6)*(x8)))+(((-0.999135601564979)*(x1)*(x10)*(x12)*(x3)*(x4)))+(((x10)*(x11)*(x13)*(x5)*(x9)))+(((0.999135601564979)*(x13)*(x5)*(x6)*(x7)*(x8)))+(((-0.0415698169996759)*(x1)*(x12)*(x2)*(x3)*(x9)))+(((0.0415698169996759)*(x0)*(x12)*(x4)*(x5)*(x6)*(x7)*(x8)))+(((x0)*(x11)*(x12)*(x2)*(x5)))+(((0.0415698169996759)*(x0)*(x1)*(x12)*(x3)*(x4)*(x6)))+(((x11)*(x12)*(x4)*(x5)*(x6)*(x9)))+(((-0.999135601564979)*(x0)*(x1)*(x10)*(x13)*(x8)))+(((0.999135601564979)*(x0)*(x10)*(x13)*(x3)*(x5)*(x7)))+(((0.999135601564979)*(x0)*(x12)*(x3)*(x4)*(x5)*(x6)*(x7)))+(((0.999135601564979)*(x1)*(x13)*(x3)*(x6)))+(((0.999135601564979)*(x1)*(x12)*(x2)*(x8)*(x9)))+(((-0.999135601564979)*(x10)*(x12)*(x4)*(x5)*(x7)*(x8)))+(((-0.999135601564979)*(x12)*(x2)*(x3)*(x5)*(x7)*(x9)))+(((0.0415698169996759)*(x1)*(x13)*(x6)*(x8)))+(((0.0415698169996759)*(x0)*(x1)*(x10)*(x13)*(x3)))+(((0.0415698169996759)*(x0)*(x10)*(x13)*(x5)*(x7)*(x8)))+(((-0.0415698169996759)*(x13)*(x3)*(x5)*(x6)*(x7))));
eerot[5]=((((-0.0415698169996759)*(x13)*(x2)*(x5)*(x7)*(x8)*(x9)))+(((x0)*(x11)*(x13)*(x2)*(x5)))+(((-0.0415698169996759)*(x0)*(x10)*(x12)*(x5)*(x7)*(x8)))+(((-0.0415698169996759)*(x0)*(x1)*(x10)*(x12)*(x3)))+(((-0.999135601564979)*(x1)*(x10)*(x13)*(x3)*(x4)))+(((-0.999135601564979)*(x1)*(x12)*(x3)*(x6)))+(((0.999135601564979)*(x0)*(x13)*(x3)*(x4)*(x5)*(x6)*(x7)))+(((-0.999135601564979)*(x0)*(x1)*(x13)*(x4)*(x6)*(x8)))+(((-0.999135601564979)*(x12)*(x5)*(x6)*(x7)*(x8)))+(((0.0415698169996759)*(x0)*(x1)*(x13)*(x3)*(x4)*(x6)))+(((0.999135601564979)*(x1)*(x13)*(x2)*(x8)*(x9)))+(((-0.0415698169996759)*(x1)*(x13)*(x2)*(x3)*(x9)))+(((0.0415698169996759)*(x12)*(x3)*(x5)*(x6)*(x7)))+(((0.0415698169996759)*(x0)*(x13)*(x4)*(x5)*(x6)*(x7)*(x8)))+(((-0.0415698169996759)*(x1)*(x10)*(x13)*(x4)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x5)*(x9)))+(((-0.999135601564979)*(x10)*(x13)*(x4)*(x5)*(x7)*(x8)))+(((-0.0415698169996759)*(x1)*(x12)*(x6)*(x8)))+(((x11)*(x13)*(x4)*(x5)*(x6)*(x9)))+(((-0.999135601564979)*(x0)*(x10)*(x12)*(x3)*(x5)*(x7)))+(((0.0415698169996759)*(x10)*(x13)*(x3)*(x4)*(x5)*(x7)))+(((-0.999135601564979)*(x13)*(x2)*(x3)*(x5)*(x7)*(x9)))+(((0.999135601564979)*(x0)*(x1)*(x10)*(x12)*(x8))));
eetrans[1]=((-0.188000000000000)+(((0.320722528102358)*(x1)*(x8)*(x9)))+(((0.179844408281696)*(x10)*(x2)*(x5)*(x7)*(x8)))+(((-0.179844408281696)*(x3)*(x4)*(x5)*(x7)*(x9)))+(((-0.180000000000000)*(x11)*(x2)*(x5)*(x6)*(x9)))+(((-0.00748256705994167)*(x1)*(x3)*(x4)*(x9)))+(((0.00748256705994167)*(x1)*(x10)*(x2)*(x8)))+(((-0.320722528102358)*(x3)*(x5)*(x7)*(x9)))+(((-0.0133439112568960)*(x1)*(x3)*(x9)))+(((-0.179844408281696)*(x0)*(x2)*(x3)*(x5)*(x6)*(x7)))+(((0.100000000000000)*(x5)))+(((0.180000000000000)*(x0)*(x11)*(x4)*(x5)))+(((-0.00748256705994167)*(x0)*(x2)*(x5)*(x6)*(x7)*(x8)))+(((0.179844408281696)*(x1)*(x4)*(x8)*(x9)))+(((0.179844408281696)*(x0)*(x1)*(x2)*(x6)*(x8)))+(((-0.0133439112568960)*(x5)*(x7)*(x8)*(x9)))+(((0.321000000000000)*(x0)*(x11)*(x5)))+(((-0.00748256705994167)*(x4)*(x5)*(x7)*(x8)*(x9)))+(((-0.00748256705994167)*(x10)*(x2)*(x3)*(x5)*(x7)))+(((0.400000000000000)*(x11)*(x5)))+(((0.179844408281696)*(x1)*(x10)*(x2)*(x3)))+(((-0.00748256705994167)*(x0)*(x1)*(x2)*(x3)*(x6))));
eerot[6]=((((-0.0415698169996759)*(x0)*(x11)*(x2)*(x6)*(x8)))+(((x2)*(x6)*(x7)*(x9)))+(((-0.999135601564979)*(x11)*(x3)*(x4)*(x9)))+(((0.999135601564979)*(x10)*(x11)*(x2)*(x8)))+(((-0.0415698169996759)*(x10)*(x11)*(x2)*(x3)))+(((-1.00000000000000)*(x0)*(x4)*(x7)))+(((-0.0415698169996759)*(x11)*(x4)*(x8)*(x9)))+(((-0.999135601564979)*(x0)*(x11)*(x2)*(x3)*(x6))));
eerot[7]=((((-0.999135601564979)*(x10)*(x11)*(x12)*(x4)*(x8)))+(((0.0415698169996759)*(x0)*(x10)*(x11)*(x13)*(x8)))+(((-1.00000000000000)*(x0)*(x12)*(x2)*(x7)))+(((0.999135601564979)*(x11)*(x13)*(x6)*(x8)))+(((0.999135601564979)*(x0)*(x11)*(x12)*(x3)*(x4)*(x6)))+(((-1.00000000000000)*(x10)*(x13)*(x7)*(x9)))+(((-0.999135601564979)*(x11)*(x12)*(x2)*(x3)*(x9)))+(((0.0415698169996759)*(x0)*(x11)*(x12)*(x4)*(x6)*(x8)))+(((-0.0415698169996759)*(x11)*(x12)*(x2)*(x8)*(x9)))+(((-0.0415698169996759)*(x11)*(x13)*(x3)*(x6)))+(((0.0415698169996759)*(x10)*(x11)*(x12)*(x3)*(x4)))+(((0.999135601564979)*(x0)*(x10)*(x11)*(x13)*(x3)))+(((-1.00000000000000)*(x12)*(x4)*(x6)*(x7)*(x9))));
eerot[8]=((((-0.999135601564979)*(x10)*(x11)*(x13)*(x4)*(x8)))+(((0.999135601564979)*(x0)*(x11)*(x13)*(x3)*(x4)*(x6)))+(((-1.00000000000000)*(x0)*(x13)*(x2)*(x7)))+(((0.0415698169996759)*(x10)*(x11)*(x13)*(x3)*(x4)))+(((x10)*(x12)*(x7)*(x9)))+(((0.0415698169996759)*(x0)*(x11)*(x13)*(x4)*(x6)*(x8)))+(((-0.0415698169996759)*(x11)*(x13)*(x2)*(x8)*(x9)))+(((-1.00000000000000)*(x13)*(x4)*(x6)*(x7)*(x9)))+(((-0.999135601564979)*(x0)*(x10)*(x11)*(x12)*(x3)))+(((-0.999135601564979)*(x11)*(x12)*(x6)*(x8)))+(((-0.0415698169996759)*(x0)*(x10)*(x11)*(x12)*(x8)))+(((0.0415698169996759)*(x11)*(x12)*(x3)*(x6)))+(((-0.999135601564979)*(x11)*(x13)*(x2)*(x3)*(x9))));
eetrans[2]=((((-0.179844408281696)*(x11)*(x3)*(x4)*(x9)))+(((-0.179844408281696)*(x0)*(x11)*(x2)*(x3)*(x6)))+(((0.180000000000000)*(x2)*(x6)*(x7)*(x9)))+(((-0.180000000000000)*(x0)*(x4)*(x7)))+(((-0.321000000000000)*(x0)*(x7)))+(((-0.0133439112568960)*(x11)*(x8)*(x9)))+(((-0.00748256705994167)*(x10)*(x11)*(x2)*(x3)))+(((-0.00748256705994167)*(x0)*(x11)*(x2)*(x6)*(x8)))+(((-0.320722528102358)*(x11)*(x3)*(x9)))+(((0.179844408281696)*(x10)*(x11)*(x2)*(x8)))+(((-0.00748256705994167)*(x11)*(x4)*(x8)*(x9)))+(((-0.400000000000000)*(x7))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((px)+(((-0.180000000000000)*(r00))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((0.188000000000000)+(py)+(((-0.180000000000000)*(r10))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((pz)+(((-0.180000000000000)*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
IKReal coniccoeffs[6], j0array[4];
int numsolutions;
IKReal x0=(px)*(px);
IKReal x1=(py)*(py);
IKReal x2=(sj2)*(sj2);
IKReal x3=(cj2)*(cj2);
IKReal x4=(pz)*(pz);
IKReal x5=(px)*(px)*(px);
IKReal x6=(py)*(py)*(py);
IKReal x7=(px)*(px)*(px)*(px);
IKReal x8=((0.0659462400000000)*(x0));
IKReal x9=(py)*(py)*(py)*(py);
IKReal x10=(pz)*(pz)*(pz)*(pz);
coniccoeffs[0]=((((7.12239870527660e-6)*(x1)*(x3)))+(x8)+(((-0.0659462400000000)*(x1)))+(((0.00411451760129472)*(x1)*(x2)))+(((0.000342375436246816)*(cj2)*(sj2)*(x0)))+(((-0.000342375436246816)*(cj2)*(sj2)*(x1)))+(((-7.12239870527660e-6)*(x0)*(x3)))+(((-0.00411451760129472)*(x0)*(x2))));
coniccoeffs[1]=((((0.000342375436246816)*(cj2)*(px)*(py)*(sj2)))+(((0.0659462400000000)*(px)*(py)))+(((-0.00411451760129472)*(px)*(py)*(x2)))+(((-7.12239870527660e-6)*(px)*(py)*(x3))));
coniccoeffs[2]=((((0.0205725880064736)*(px)*(x0)*(x2)))+(((0.0205725880064736)*(px)*(x1)*(x2)))+(((3.56119935263830e-5)*(px)*(x1)*(x3)))+(((3.56119935263830e-5)*(px)*(x0)*(x3)))+(((0.0205725880064736)*(px)*(x2)*(x4)))+(((-0.00520570824174609)*(px)*(x2)))+(((3.56119935263830e-5)*(px)*(x3)*(x4)))+(((-0.00171187718123408)*(cj2)*(px)*(sj2)*(x4)))+(((-0.00171187718123408)*(cj2)*(px)*(sj2)*(x1)))+(((-0.00171187718123408)*(cj2)*(px)*(sj2)*(x0)))+(((-9.01129445390948e-6)*(px)*(x3)))+(((0.000433175113816652)*(cj2)*(px)*(sj2))));
coniccoeffs[3]=0;
coniccoeffs[4]=((((0.0205725880064736)*(py)*(x0)*(x2)))+(((3.56119935263830e-5)*(py)*(x1)*(x3)))+(((0.0205725880064736)*(py)*(x2)*(x4)))+(((0.0205725880064736)*(py)*(x1)*(x2)))+(((0.000433175113816652)*(cj2)*(py)*(sj2)))+(((-9.01129445390948e-6)*(py)*(x3)))+(((-0.00520570824174609)*(py)*(x2)))+(((3.56119935263830e-5)*(py)*(x3)*(x4)))+(((3.56119935263830e-5)*(py)*(x0)*(x3)))+(((-0.00171187718123408)*(cj2)*(py)*(sj2)*(x0)))+(((-0.00171187718123408)*(cj2)*(py)*(sj2)*(x1)))+(((-0.00171187718123408)*(cj2)*(py)*(sj2)*(x4))));
coniccoeffs[5]=((((3.41250560287954e-7)*(x3)))+(((-0.102862940032368)*(x10)*(x2)))+(((0.0520570824174609)*(x0)*(x2)))+(((0.00855938590617039)*(cj2)*(sj2)*(x9)))+(((0.00855938590617039)*(cj2)*(sj2)*(x7)))+(((-0.00433175113816652)*(cj2)*(sj2)*(x4)))+(((-0.00433175113816652)*(cj2)*(sj2)*(x0)))+(((-0.000178059967631915)*(x3)*(x9)))+(((-0.000178059967631915)*(x3)*(x7)))+(((-0.102862940032368)*(x2)*(x7)))+(((-0.102862940032368)*(x2)*(x9)))+(((0.0479425648161662)*(x1)*(x2)))+(((-0.205725880064736)*(x0)*(x1)*(x2)))+(((9.01129445390948e-5)*(x0)*(x3)))+(((-0.205725880064736)*(x1)*(x2)*(x4)))+(((-0.000356119935263830)*(x0)*(x1)*(x3)))+(((-0.00398937570191971)*(cj2)*(sj2)*(x1)))+(((0.0171187718123408)*(cj2)*(sj2)*(x1)*(x4)))+(((-1.00000000000000)*(x8)))+(((-0.000356119935263830)*(x0)*(x3)*(x4)))+(((0.0520570824174609)*(x2)*(x4)))+(((9.01129445390948e-5)*(x3)*(x4)))+(((-0.205725880064736)*(x0)*(x2)*(x4)))+(((-0.000178059967631915)*(x10)*(x3)))+(((8.29905458338182e-5)*(x1)*(x3)))+(((0.00855938590617039)*(cj2)*(sj2)*(x10)))+(((-0.000356119935263830)*(x1)*(x3)*(x4)))+(((0.0171187718123408)*(cj2)*(sj2)*(x0)*(x4)))+(((0.0171187718123408)*(cj2)*(sj2)*(x0)*(x1)))+(((0.000197136034481791)*(x2)))+(((-1.64039973445324e-5)*(cj2)*(sj2))));
conicsolver(coniccoeffs,j0array,numsolutions);
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
{
    j0 = j0array[ij0]; cj0 = IKcos(j0); sj0 = IKsin(j0);

{
IKReal j3eval[1];
j3eval[0]=((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))));
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
IKReal x11=(cj0)*(cj0);
IKReal x12=x0;
IKReal x13=x4;
IKReal x14=x1;
IKReal x15=(sj0)*(sj0);
j1eval[0]=((((0.159861696250397)*(cj0)*(px)*(sj2)))+(((-0.799308481251984)*(sj2)*(x13)))+(((-0.00665117071994815)*(cj2)*(py)*(sj0)))+(((-1.59861696250397)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-0.799308481251984)*(sj2)*(x11)*(x12)))+(((-0.00665117071994815)*(cj0)*(cj2)*(px)))+(((-0.799308481251984)*(sj2)*(x14)*(x15)))+(((0.159861696250397)*(py)*(sj0)*(sj2)))+(((-0.00799308481251984)*(sj2)))+(((0.0665117071994815)*(cj0)*(cj2)*(px)*(py)*(sj0)))+(((0.0332558535997407)*(cj2)*(x11)*(x12)))+(((0.0332558535997407)*(cj2)*(x14)*(x15)))+(((0.0332558535997407)*(cj2)*(x13)))+(((0.000332558535997407)*(cj2))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal evalcond[1];
evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
sj3array[0]=((((5.76460752303423e+17)*(cj0)*(py)))+(((-5.76460752303423e+17)*(px)*(sj0))));
if( sj3array[0] >= -1.0001 && sj3array[0] <= 1.0001 )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j1eval[1];
j1eval[0]=((0.160000000000000)+(((0.103041000000000)*((cj3)*(cj3))))+(((0.256800000000000)*(cj3)))+(((0.103041000000000)*((sj3)*(sj3)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(cj3)*(pz)))+(((-0.321000000000000)*(py)*(sj0)*(sj3)))+(((-0.321000000000000)*(cj0)*(px)*(sj3)))+(((0.400000000000000)*(pz)))+(((0.0321000000000000)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-0.160000000000000)*(cj0)))+(((-0.103041000000000)*(cj0)*((cj3)*(cj3))))+(((-0.256800000000000)*(cj0)*(cj3)))+(((-0.103041000000000)*(cj0)*((sj3)*(sj3)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x16=((1.73472347597681e-18)*(sj3));
IKReal x17=((px)+(x16));
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x17;
evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=((-1.00000000000000)*(x17));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0100000000000000)+(((-0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(cj3)*(pz)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(py)*(sj3)))+(((0.0321000000000000)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0400000000000000)+(((-0.400000000000000)*(py)))+(((-0.321000000000000)*(pz)*(sj3)))+(((-0.321000000000000)*(cj3)*(py)))+(((0.0321000000000000)*(cj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x18=((0.321000000000000)*(cj3));
IKReal x19=((0.400000000000000)+(x18));
IKReal x20=((0.0321000000000000)*(cj3));
IKReal x21=((0.0400000000000000)+(x20));
IKReal x22=((py)*(x18));
IKReal x23=((0.400000000000000)*(py));
IKReal x24=((0.321000000000000)*(pz)*(sj3));
IKReal x25=((x24)+(x22)+(x23));
IKReal x26=((((-1.00000000000000)*(x25)))+(x21));
IKReal x27=((IKabs(x26) != 0)?((IKReal)1/(x26)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x27)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj3)*(x19)))))), ((x27)*(((((-1.00000000000000)*((x19)*(x19))))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x91=((0.321000000000000)*(cj3)*(pz));
IKReal x92=((0.400000000000000)*(pz));
IKReal x93=((0.0321000000000000)*(sj3));
IKReal x94=((x91)+(x93)+(x92));
IKReal x95=((0.321000000000000)*(py)*(sj3));
IKReal x96=((x94)+(((-1.00000000000000)*(x95))));
IKReal x97=((IKabs(x96) != 0)?((IKReal)1/(x96)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x97)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((-1.00000000000000)*(x97)*(((((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x98=((0.100000000000000)+(((-1.00000000000000)*(py))));
IKReal x99=x1;
IKReal x100=x4;
IKReal x101=((0.0100000000000000)+(x100)+(x99));
IKReal x102=((0.200000000000000)*(py));
IKReal x103=((((-1.00000000000000)*(x102)))+(x101));
IKReal x104=((IKabs(x103) != 0)?((IKReal)1/(x103)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x104)*(((((-1.00000000000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((0.321000000000000)*(sj3)*(x98)))))), ((x104)*(((((-1.00000000000000)*(x98)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-0.321000000000000)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x105=((1.73472347597681e-18)*(sj3));
IKReal x106=((x105)+(((-1.00000000000000)*(px))));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x106;
evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(py)))+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=x106;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0100000000000000)+(((0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(py)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((0.400000000000000)*(pz)))+(((0.0321000000000000)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0400000000000000)+(((0.321000000000000)*(cj3)*(py)))+(((-0.321000000000000)*(pz)*(sj3)))+(((0.400000000000000)*(py)))+(((0.0321000000000000)*(cj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x107=((0.321000000000000)*(cj3));
IKReal x108=((0.400000000000000)+(x107));
IKReal x109=((py)*(x107));
IKReal x110=((0.400000000000000)*(py));
IKReal x111=((0.0321000000000000)*(cj3));
IKReal x112=((0.0400000000000000)+(x111)+(x110)+(x109));
IKReal x113=((0.321000000000000)*(pz)*(sj3));
IKReal x114=((((-1.00000000000000)*(x113)))+(x112));
IKReal x115=((IKabs(x114) != 0)?((IKReal)1/(x114)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x115)*(((((0.321000000000000)*(sj3)*(x108)))+(((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))))), ((x115)*((((pz)*(pz))+(((-1.00000000000000)*((x108)*(x108))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x116=((0.321000000000000)*(py)*(sj3));
IKReal x117=((0.321000000000000)*(cj3)*(pz));
IKReal x118=((0.400000000000000)*(pz));
IKReal x119=((0.0321000000000000)*(sj3));
IKReal x120=((x117)+(x116)+(x119)+(x118));
IKReal x121=((IKabs(x120) != 0)?((IKReal)1/(x120)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x121)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x121)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))+(((-0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x122=((0.200000000000000)*(py));
IKReal x123=x1;
IKReal x124=x4;
IKReal x125=((0.0100000000000000)+(x124)+(x122)+(x123));
IKReal x126=((IKabs(x125) != 0)?((IKReal)1/(x125)):(IKReal)1.0e30);
IKReal x127=((0.100000000000000)+(py));
IKReal x128=((0.321000000000000)*(cj3));
IKReal x129=((0.400000000000000)+(x128));
j1array[0]=IKatan2(((-1.00000000000000)*(x126)*(((((pz)*(x129)))+(((-0.321000000000000)*(sj3)*(x127)))))), ((-1.00000000000000)*(x126)*(((((0.321000000000000)*(pz)*(sj3)))+(((x127)*(x129)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x130=((0.100000000000000)*(cj0));
IKReal x131=((1.73472347597681e-18)*(sj0)*(sj3));
IKReal x132=((x131)+(px));
IKReal x133=((x130)+(((-1.00000000000000)*(x132))));
IKReal x134=(cj3)*(cj3);
IKReal x135=((0.103041000000000)*(cj0)*(x134));
IKReal x136=((0.256800000000000)*(cj0)*(cj3));
IKReal x137=((0.160000000000000)*(cj0));
IKReal x138=(sj3)*(sj3);
IKReal x139=((0.103041000000000)*(cj0)*(x138));
IKReal x140=((x135)+(x137)+(x136)+(x139));
IKReal x141=((-1.00000000000000)*(x140));
IKReal x142=((IKabs(x141) != 0)?((IKReal)1/(x141)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x142)*(((((-0.321000000000000)*(sj3)*(x133)))+(((pz)*(((((0.400000000000000)*(cj0)))+(((0.321000000000000)*(cj0)*(cj3)))))))))), ((x142)*(((((0.321000000000000)*(cj0)*(pz)*(sj3)))+(((x133)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x143=((0.321000000000000)*(cj3)*(pz));
IKReal x144=((0.400000000000000)*(pz));
IKReal x145=((0.0321000000000000)*(sj3));
IKReal x146=((x143)+(x144)+(x145));
IKReal x147=((0.321000000000000)*(cj0)*(px)*(sj3));
IKReal x148=((0.321000000000000)*(py)*(sj0)*(sj3));
IKReal x149=((x147)+(x148));
IKReal x150=((((-1.00000000000000)*(x149)))+(x146));
IKReal x151=((IKabs(x150) != 0)?((IKReal)1/(x150)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x151)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((-1.00000000000000)*(x151)*(((((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x152=(cj3)*(cj3);
IKReal x153=((0.103041000000000)*(x152));
IKReal x154=((0.256800000000000)*(cj3));
IKReal x155=(sj3)*(sj3);
IKReal x156=((0.103041000000000)*(x155));
IKReal x157=((0.160000000000000)+(x156)+(x154)+(x153));
IKReal x158=((IKabs(x157) != 0)?((IKReal)1/(x157)):(IKReal)1.0e30);
IKReal x159=((0.321000000000000)*(cj3));
IKReal x160=((0.400000000000000)+(x159));
IKReal x161=((cj0)*(px));
IKReal x162=((py)*(sj0));
IKReal x163=((x162)+(x161));
IKReal x164=((0.100000000000000)+(((-1.00000000000000)*(x163))));
j1array[0]=IKatan2(((-1.00000000000000)*(x158)*(((((pz)*(x160)))+(((-0.321000000000000)*(sj3)*(x164)))))), ((-1.00000000000000)*(x158)*(((((0.321000000000000)*(pz)*(sj3)))+(((x160)*(x164)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
evalcond[0]=((IKfmod(((-3.18317445236063)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
sj3array[0]=((((-5.24055229366749e+16)*(px)*(sj0)))+(((5.24055229366749e+16)*(cj0)*(py))));
if( sj3array[0] >= -1.0001 && sj3array[0] <= 1.0001 )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKasin(sj3array[0]);
    cj3array[0] = IKcos(j3array[0]);
    sj3array[1] = sj3array[0];
    j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
    cj3array[1] = -cj3array[0];
}
else if( isnan(sj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j1eval[1];
j1eval[0]=((0.160000000000000)+(((0.103041000000000)*((cj3)*(cj3))))+(((0.256800000000000)*(cj3)))+(((0.103041000000000)*((sj3)*(sj3)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(cj0)*(px)*(sj3)))+(((0.321000000000000)*(py)*(sj0)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((-0.0321000000000000)*(sj3)))+(((0.400000000000000)*(pz))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-0.160000000000000)*(cj0)))+(((-0.103041000000000)*(cj0)*((cj3)*(cj3))))+(((-0.256800000000000)*(cj0)*(cj3)))+(((-0.103041000000000)*(cj0)*((sj3)*(sj3)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x165=((1.90819582357449e-17)*(sj3));
IKReal x166=((x165)+(px));
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x166;
evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=((-1.00000000000000)*(x166));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0100000000000000)+(((-0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(py)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((-0.0321000000000000)*(sj3)))+(((0.400000000000000)*(pz))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0400000000000000)+(((-0.400000000000000)*(py)))+(((-0.321000000000000)*(cj3)*(py)))+(((0.321000000000000)*(pz)*(sj3)))+(((0.0321000000000000)*(cj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x167=((0.321000000000000)*(cj3));
IKReal x168=((0.400000000000000)+(x167));
IKReal x169=((0.321000000000000)*(pz)*(sj3));
IKReal x170=((0.0321000000000000)*(cj3));
IKReal x171=((0.0400000000000000)+(x170)+(x169));
IKReal x172=((py)*(x167));
IKReal x173=((0.400000000000000)*(py));
IKReal x174=((x173)+(x172));
IKReal x175=((((-1.00000000000000)*(x174)))+(x171));
IKReal x176=((IKabs(x175) != 0)?((IKReal)1/(x175)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x176)*(((((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj3)*(x168)))))), ((x176)*(((((-1.00000000000000)*((x168)*(x168))))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x177=((0.321000000000000)*(py)*(sj3));
IKReal x178=((0.321000000000000)*(cj3)*(pz));
IKReal x179=((0.400000000000000)*(pz));
IKReal x180=((x179)+(x178)+(x177));
IKReal x181=((0.0321000000000000)*(sj3));
IKReal x182=((((-1.00000000000000)*(x181)))+(x180));
IKReal x183=((IKabs(x182) != 0)?((IKReal)1/(x182)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x183)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x183)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x184=((0.100000000000000)+(((-1.00000000000000)*(py))));
IKReal x185=x1;
IKReal x186=x4;
IKReal x187=((0.0100000000000000)+(x185)+(x186));
IKReal x188=((0.200000000000000)*(py));
IKReal x189=((((-1.00000000000000)*(x188)))+(x187));
IKReal x190=((IKabs(x189) != 0)?((IKReal)1/(x189)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x190)*(((((-1.00000000000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-0.321000000000000)*(sj3)*(x184)))))), ((x190)*(((((-1.00000000000000)*(x184)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((0.321000000000000)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x191=((1.90819582357449e-17)*(sj3));
IKReal x192=((x191)+(((-1.00000000000000)*(px))));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x192;
evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(py)))+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=x192;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0100000000000000)+(((0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(cj3)*(pz)))+(((-0.0321000000000000)*(sj3)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(py)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0400000000000000)+(((0.321000000000000)*(cj3)*(py)))+(((0.400000000000000)*(py)))+(((0.321000000000000)*(pz)*(sj3)))+(((0.0321000000000000)*(cj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x193=((0.321000000000000)*(cj3)*(py));
IKReal x194=((0.400000000000000)*(py));
IKReal x195=((0.321000000000000)*(pz)*(sj3));
IKReal x196=((0.0321000000000000)*(cj3));
IKReal x197=((0.0400000000000000)+(x193)+(x196)+(x195)+(x194));
IKReal x198=((IKabs(x197) != 0)?((IKReal)1/(x197)):(IKReal)1.0e30);
IKReal x199=((0.321000000000000)*(cj3));
IKReal x200=((0.400000000000000)+(x199));
j1array[0]=IKatan2(((x198)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))+(((-0.321000000000000)*(sj3)*(x200)))))), ((x198)*(((((-1.00000000000000)*((x200)*(x200))))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x201=((0.321000000000000)*(cj3)*(pz));
IKReal x202=((0.400000000000000)*(pz));
IKReal x203=((x202)+(x201));
IKReal x204=((0.321000000000000)*(py)*(sj3));
IKReal x205=((0.0321000000000000)*(sj3));
IKReal x206=((x205)+(x204));
IKReal x207=((((-1.00000000000000)*(x206)))+(x203));
IKReal x208=((IKabs(x207) != 0)?((IKReal)1/(x207)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x208)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x208)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x209=((0.200000000000000)*(py));
IKReal x210=x1;
IKReal x211=x4;
IKReal x212=((0.0100000000000000)+(x210)+(x211)+(x209));
IKReal x213=((IKabs(x212) != 0)?((IKReal)1/(x212)):(IKReal)1.0e30);
IKReal x214=((0.100000000000000)+(py));
IKReal x215=((0.321000000000000)*(cj3));
IKReal x216=((0.400000000000000)+(x215));
j1array[0]=IKatan2(((-1.00000000000000)*(x213)*(((((pz)*(x216)))+(((0.321000000000000)*(sj3)*(x214)))))), ((-1.00000000000000)*(x213)*(((((x214)*(x216)))+(((-0.321000000000000)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x217=((0.100000000000000)*(cj0));
IKReal x218=((1.90819582357449e-17)*(sj0)*(sj3));
IKReal x219=((x218)+(px));
IKReal x220=((x217)+(((-1.00000000000000)*(x219))));
IKReal x221=(cj3)*(cj3);
IKReal x222=((0.103041000000000)*(cj0)*(x221));
IKReal x223=((0.256800000000000)*(cj0)*(cj3));
IKReal x224=((0.160000000000000)*(cj0));
IKReal x225=(sj3)*(sj3);
IKReal x226=((0.103041000000000)*(cj0)*(x225));
IKReal x227=((x223)+(x222)+(x224)+(x226));
IKReal x228=((-1.00000000000000)*(x227));
IKReal x229=((IKabs(x228) != 0)?((IKReal)1/(x228)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x229)*(((((0.321000000000000)*(sj3)*(x220)))+(((pz)*(((((0.400000000000000)*(cj0)))+(((0.321000000000000)*(cj0)*(cj3)))))))))), ((x229)*(((((x220)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-0.321000000000000)*(cj0)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x230=((0.321000000000000)*(cj0)*(px)*(sj3));
IKReal x231=((0.321000000000000)*(py)*(sj0)*(sj3));
IKReal x232=((0.321000000000000)*(cj3)*(pz));
IKReal x233=((0.400000000000000)*(pz));
IKReal x234=((x232)+(x233)+(x230)+(x231));
IKReal x235=((0.0321000000000000)*(sj3));
IKReal x236=((((-1.00000000000000)*(x235)))+(x234));
IKReal x237=((IKabs(x236) != 0)?((IKReal)1/(x236)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x237)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x237)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x238=(cj3)*(cj3);
IKReal x239=((0.103041000000000)*(x238));
IKReal x240=((0.256800000000000)*(cj3));
IKReal x241=(sj3)*(sj3);
IKReal x242=((0.103041000000000)*(x241));
IKReal x243=((0.160000000000000)+(x239)+(x242)+(x240));
IKReal x244=((IKabs(x243) != 0)?((IKReal)1/(x243)):(IKReal)1.0e30);
IKReal x245=((0.321000000000000)*(cj3));
IKReal x246=((0.400000000000000)+(x245));
IKReal x247=((cj0)*(px));
IKReal x248=((py)*(sj0));
IKReal x249=((x247)+(x248));
IKReal x250=((0.100000000000000)+(((-1.00000000000000)*(x249))));
j1array[0]=IKatan2(((-1.00000000000000)*(x244)*(((((0.321000000000000)*(sj3)*(x250)))+(((pz)*(x246)))))), ((-1.00000000000000)*(x244)*(((((x246)*(x250)))+(((-0.321000000000000)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x251=x4;
IKReal x252=x0;
IKReal x253=x1;
IKReal x254=(cj0)*(cj0);
IKReal x255=(sj0)*(sj0);
IKReal x256=((0.0669590000000000)+(x251)+(x252)+(x253));
IKReal x257=((0.200000000000000)*(cj0)*(px));
IKReal x258=((0.200000000000000)*(py)*(sj0));
IKReal x259=((x258)+(x257));
IKReal x260=((x256)+(((-1.00000000000000)*(x259))));
IKReal x261=((0.0415698169996759)*(cj0)*(py)*(sj2));
IKReal x262=((0.999135601564979)*(cj0)*(cj2)*(py));
IKReal x263=((x261)+(x262));
IKReal x264=((0.999135601564979)*(cj2)*(px)*(sj0));
IKReal x265=((0.0415698169996759)*(px)*(sj0)*(sj2));
IKReal x266=((x265)+(x264));
IKReal x267=((x263)+(((-1.00000000000000)*(x266))));
IKReal x268=((0.159861696250397)*(cj0)*(px)*(sj2));
IKReal x269=((0.0332558535997407)*(cj2)*(x251));
IKReal x270=((0.159861696250397)*(py)*(sj0)*(sj2));
IKReal x271=((0.0665117071994815)*(cj0)*(cj2)*(px)*(py)*(sj0));
IKReal x272=((0.0332558535997407)*(cj2)*(x252)*(x254));
IKReal x273=((0.000332558535997407)*(cj2));
IKReal x274=((0.0332558535997407)*(cj2)*(x253)*(x255));
IKReal x275=((x269)+(x268)+(x274)+(x272)+(x273)+(x270)+(x271));
IKReal x276=((0.799308481251984)*(sj2)*(x252)*(x254));
IKReal x277=((0.00665117071994815)*(cj2)*(py)*(sj0));
IKReal x278=((0.00665117071994815)*(cj0)*(cj2)*(px));
IKReal x279=((0.799308481251984)*(sj2)*(x251));
IKReal x280=((1.59861696250397)*(cj0)*(px)*(py)*(sj0)*(sj2));
IKReal x281=((0.799308481251984)*(sj2)*(x253)*(x255));
IKReal x282=((0.00799308481251984)*(sj2));
IKReal x283=((x276)+(x277)+(x278)+(x279)+(x282)+(x281)+(x280));
IKReal x284=((x275)+(((-1.00000000000000)*(x283))));
IKReal x285=((IKabs(x284) != 0)?((IKReal)1/(x284)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x285)*(((((-1.00000000000000)*(x267)*(((0.0800000000000000)+(((-0.800000000000000)*(py)*(sj0)))+(((-0.800000000000000)*(cj0)*(px)))))))+(((x260)*(((((-0.0415698169996759)*(cj2)*(pz)))+(((0.999135601564979)*(pz)*(sj2)))))))))), ((x285)*(((((x260)*(((((0.0415698169996759)*(cj0)*(cj2)*(px)))+(((0.0999135601564980)*(sj2)))+(((-0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)*(sj0)))+(((-0.999135601564979)*(cj0)*(px)*(sj2)))+(((-0.999135601564979)*(py)*(sj0)*(sj2)))))))+(((0.800000000000000)*(pz)*(x267)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal j3eval[1];
j3eval[0]=((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))));
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[1];
j3eval[0]=((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))));
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[1];
j3eval[0]=((((-0.0133439112568960)*(sj2)))+(((-0.320722528102358)*(cj2))));
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal evalcond[3];
evalcond[0]=((IKfmod(((-1.61237812556574)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
evalcond[2]=((((6.93889390390723e-18)*(px)*(sj0)))+(((-0.100000000000000)*(sj1)))+(((cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((-6.93889390390723e-18)*(cj0)*(py)))+(((py)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(cj0)*(py)))+(((-3.11526479750779)*(px)*(sj0)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-4.75397077915553)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
evalcond[2]=((((-1.00000000000000)*(py)*(sj0)*(sj1)))+(((0.100000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((3.26128013483640e-16)*(cj0)*(py)))+(((-1.00000000000000)*(cj0)*(px)*(sj1)))+(((-3.26128013483640e-16)*(px)*(sj0))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(px)*(sj0)))+(((-3.11526479750779)*(cj0)*(py)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
evalcond[2]=((((6.93889390390723e-18)*(cj1)*(pz)))+(((-1.00000000000000)*(px)*(sj0)))+(((6.93889390390723e-18)*(cj0)*(px)*(sj1)))+(((6.93889390390723e-18)*(py)*(sj0)*(sj1)))+(((cj0)*(py)))+(((-8.67361737988404e-19)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((-3.11526479750779)*(cj0)*(px)*(sj1)))+(((-3.11526479750779)*(cj1)*(pz)))+(((0.311526479750779)*(sj1)))+(((-3.11526479750779)*(py)*(sj0)*(sj1)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-3.18317445236063)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
evalcond[2]=((((5.55111512312578e-17)*(py)*(sj0)*(sj1)))+(((5.55111512312578e-17)*(cj0)*(px)*(sj1)))+(((5.55111512312578e-17)*(cj1)*(pz)))+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))+(((-5.20417042793042e-18)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(cj1)*(pz)))+(((3.11526479750779)*(cj0)*(px)*(sj1)))+(((3.11526479750779)*(py)*(sj0)*(sj1)))+(((-0.311526479750779)*(sj1)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(sj2)))+(((-0.320722528102358)*(cj2))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(sj2)))+(((-0.320722528102358)*(cj2)))))):(IKReal)1.0e30))*(((((cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((-0.100000000000000)*(sj1)))+(((py)*(sj0)*(sj1)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((-0.311526479750779)*(cj1)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-0.985362149532710)+(((3.89408099688473)*((py)*(py))))+(((3.89408099688473)*((pz)*(pz))))+(((-0.778816199376947)*(cj0)*(px)))+(((-0.778816199376947)*(py)*(sj0)))+(((3.89408099688473)*((px)*(px))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((-0.311526479750779)*(cj1)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-0.985362149532710)+(((3.89408099688473)*((py)*(py))))+(((3.89408099688473)*((pz)*(pz))))+(((-0.778816199376947)*(cj0)*(px)))+(((-0.778816199376947)*(py)*(sj0)))+(((3.89408099688473)*((px)*(px))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j1eval[1];
j1eval[0]=((0.0400000000000000)+(((-0.320722528102358)*(cj2)*(pz)*(sj3)))+(((0.0321000000000000)*(cj3)))+(((-0.0133439112568960)*(pz)*(sj2)*(sj3)))+(((-0.400000000000000)*(cj0)*(px)))+(((-0.321000000000000)*(cj0)*(cj3)*(px)))+(((-0.400000000000000)*(py)*(sj0)))+(((-0.321000000000000)*(cj3)*(py)*(sj0))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0100000000000000)+((((py)*(py))*((sj0)*(sj0))))+(((-0.200000000000000)*(py)*(sj0)))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((-0.200000000000000)*(cj0)*(px))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-0.0133439112568960)*(cj0)*(px)*(sj2)*(sj3)))+(((0.0320722528102358)*(cj2)*(sj3)))+(((0.00133439112568960)*(sj2)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((-0.0133439112568960)*(py)*(sj0)*(sj2)*(sj3)))+(((0.400000000000000)*(pz)))+(((-0.320722528102358)*(cj2)*(py)*(sj0)*(sj3)))+(((-0.320722528102358)*(cj0)*(cj2)*(px)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x286=((0.320722528102358)*(cj2)*(sj3));
IKReal x287=((0.0133439112568960)*(sj2)*(sj3));
IKReal x288=((x287)+(x286));
IKReal x289=((-1.00000000000000)*(x288));
IKReal x290=((0.0320722528102358)*(cj2)*(sj3));
IKReal x291=((0.00133439112568960)*(sj2)*(sj3));
IKReal x292=((0.321000000000000)*(cj3)*(pz));
IKReal x293=((0.400000000000000)*(pz));
IKReal x294=((x290)+(x291)+(x292)+(x293));
IKReal x295=((1.00000000000000)*(py)*(sj0)*(x286));
IKReal x296=((py)*(sj0)*(x287));
IKReal x297=((1.00000000000000)*(cj0)*(px)*(x286));
IKReal x298=((cj0)*(px)*(x287));
IKReal x299=((x298)+(x295)+(x296)+(x297));
IKReal x300=((((-1.00000000000000)*(x299)))+(x294));
IKReal x301=((IKabs(x300) != 0)?((IKReal)1/(x300)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x301)*(((((-1.00000000000000)*((pz)*(pz))))+((x289)*(x289))))), ((x301)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((x289)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x302=((cj0)*(px));
IKReal x303=((py)*(sj0));
IKReal x304=((0.320722528102358)*(cj2)*(sj3));
IKReal x305=((0.0133439112568960)*(sj2)*(sj3));
IKReal x306=((x304)+(x305));
IKReal x307=((-1.00000000000000)*(x306));
IKReal x308=x1;
IKReal x309=(sj0)*(sj0);
IKReal x310=(x303)*(x303);
IKReal x311=((2.00000000000000)*(x302)*(x303));
IKReal x312=x4;
IKReal x313=(cj0)*(cj0);
IKReal x314=x0;
IKReal x315=(x302)*(x302);
IKReal x316=((0.0100000000000000)+(x315)+(x311)+(x310)+(x312));
IKReal x317=((0.200000000000000)*(x302));
IKReal x318=((0.200000000000000)*(x303));
IKReal x319=((x318)+(x317));
IKReal x320=((x316)+(((-1.00000000000000)*(x319))));
IKReal x321=((IKabs(x320) != 0)?((IKReal)1/(x320)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x321)*(((((-1.00000000000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-1.00000000000000)*(x307)*(((0.100000000000000)+(((-1.00000000000000)*(x303)))+(((-1.00000000000000)*(x302)))))))))), ((x321)*(((((-1.00000000000000)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))*(((0.100000000000000)+(((-1.00000000000000)*(x303)))+(((-1.00000000000000)*(x302)))))))+(((pz)*(x307)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x322=((0.321000000000000)*(cj3));
IKReal x323=((0.400000000000000)+(x322));
IKReal x324=((0.0321000000000000)*(cj3));
IKReal x325=((0.0400000000000000)+(x324));
IKReal x326=((0.400000000000000)*(py)*(sj0));
IKReal x327=((py)*(sj0)*(x322));
IKReal x328=((0.400000000000000)*(cj0)*(px));
IKReal x329=((0.0133439112568960)*(pz)*(sj2)*(sj3));
IKReal x330=((cj0)*(px)*(x322));
IKReal x331=((0.320722528102358)*(cj2)*(pz)*(sj3));
IKReal x332=((x331)+(x330)+(x326)+(x327)+(x328)+(x329));
IKReal x333=((x325)+(((-1.00000000000000)*(x332))));
IKReal x334=((IKabs(x333) != 0)?((IKReal)1/(x333)):(IKReal)1.0e30);
j1array[0]=IKatan2(((-1.00000000000000)*(x334)*(((((x323)*(((((-0.0133439112568960)*(sj2)*(sj3)))+(((-0.320722528102358)*(cj2)*(sj3)))))))+(((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))), ((x334)*((((pz)*(pz))+(((-1.00000000000000)*((x323)*(x323))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

} else
{
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
IKReal x28=((cj0)*(cj1)*(cj3));
IKReal x29=((0.0415698169996759)*(cj2)*(sj0)*(sj3));
IKReal x30=((x28)+(x29));
IKReal x31=((0.999135601564979)*(cj0)*(cj2)*(sj1)*(sj3));
IKReal x32=((0.999135601564979)*(sj0)*(sj2)*(sj3));
IKReal x33=((0.0415698169996759)*(cj0)*(sj1)*(sj2)*(sj3));
IKReal x34=((x33)+(x32)+(x31));
IKReal x35=((((-1.00000000000000)*(x34)))+(x30));
IKReal x36=((cj1)*(cj3)*(sj0));
IKReal x37=((0.999135601564979)*(cj0)*(sj2)*(sj3));
IKReal x38=((x37)+(x36));
IKReal x39=((0.999135601564979)*(cj2)*(sj0)*(sj1)*(sj3));
IKReal x40=((0.0415698169996759)*(cj0)*(cj2)*(sj3));
IKReal x41=((0.0415698169996759)*(sj0)*(sj1)*(sj2)*(sj3));
IKReal x42=((x39)+(x40)+(x41));
IKReal x43=((((-1.00000000000000)*(x42)))+(x38));
IKReal x44=((0.0415698169996759)*(cj1)*(sj2)*(sj3));
IKReal x45=((0.999135601564979)*(cj1)*(cj2)*(sj3));
IKReal x46=((cj3)*(sj1));
IKReal x47=((x46)+(x44)+(x45));
IKReal x48=((-1.00000000000000)*(x47));
IKReal x49=((0.999135601564979)*(cj1)*(sj2));
IKReal x50=((0.0415698169996759)*(cj1)*(cj2));
IKReal x51=((x49)+(((-1.00000000000000)*(x50))));
IKReal x52=((0.999135601564979)*(cj0)*(sj1)*(sj2));
IKReal x53=((0.0415698169996759)*(cj0)*(cj2)*(sj1));
IKReal x54=((0.0415698169996759)*(sj0)*(sj2));
IKReal x55=((0.999135601564979)*(cj2)*(sj0));
IKReal x56=((x55)+(x54)+(x53));
IKReal x57=((x52)+(((-1.00000000000000)*(x56))));
IKReal x58=((0.999135601564979)*(sj0)*(sj1)*(sj2));
IKReal x59=((0.999135601564979)*(cj0)*(cj2));
IKReal x60=((0.0415698169996759)*(cj0)*(sj2));
IKReal x61=((x59)+(x58)+(x60));
IKReal x62=((0.0415698169996759)*(cj2)*(sj0)*(sj1));
IKReal x63=((x61)+(((-1.00000000000000)*(x62))));
IKReal x64=((0.999135601564979)*(cj1)*(cj2)*(cj3));
IKReal x65=((0.0415698169996759)*(cj1)*(cj3)*(sj2));
IKReal x66=((x64)+(x65));
IKReal x67=((sj1)*(sj3));
IKReal x68=((x66)+(((-1.00000000000000)*(x67))));
IKReal x69=((x46)*(x59));
IKReal x70=((x46)*(x60));
IKReal x71=((0.999135601564979)*(cj3)*(sj0)*(sj2));
IKReal x72=((cj0)*(cj1)*(sj3));
IKReal x73=((x72)+(x71)+(x70)+(x69));
IKReal x74=((0.0415698169996759)*(cj2)*(cj3)*(sj0));
IKReal x75=((((-1.00000000000000)*(x74)))+(x73));
IKReal x76=((0.0415698169996759)*(cj0)*(cj2)*(cj3));
IKReal x77=((cj1)*(sj0)*(sj3));
IKReal x78=((x46)*(x55));
IKReal x79=((x46)*(x54));
IKReal x80=((x77)+(x76)+(x79)+(x78));
IKReal x81=((0.999135601564979)*(cj0)*(cj3)*(sj2));
IKReal x82=((x80)+(((-1.00000000000000)*(x81))));
new_r00=((((r20)*(x48)))+(((r00)*(x35)))+(((r10)*(x43))));
new_r01=((((r01)*(x35)))+(((r11)*(x43)))+(((r21)*(x48))));
new_r02=((((r22)*(x48)))+(((r02)*(x35)))+(((r12)*(x43))));
new_r10=((((r10)*(x63)))+(((r00)*(x57)))+(((r20)*(x51))));
new_r11=((((r11)*(x63)))+(((r01)*(x57)))+(((r21)*(x51))));
new_r12=((((r22)*(x51)))+(((r02)*(x57)))+(((r12)*(x63))));
new_r20=((((r10)*(x82)))+(((r20)*(x68)))+(((r00)*(x75))));
new_r21=((((r11)*(x82)))+(((r21)*(x68)))+(((r01)*(x75))));
new_r22=((((r12)*(x82)))+(((r22)*(x68)))+(((r02)*(x75))));
{
IKReal j5eval;
j5eval=new_r00;
if( j5eval >= -1.000010 && j5eval <= -0.999990 )
{
{
j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=1.00000000000000;
j6=((-1.00000000000000)*(IKatan2(new_r12, new_r11)));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
if( j5eval >= 0.999990 && j5eval <= 1.000010 )
{
{
j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=-1.00000000000000;
j6=((((-1.00000000000000)*(IKatan2(new_r21, ((-1.00000000000000)*(new_r22))))))+(((-1.00000000000000)*(3.14159265358979))));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
j4array[0]=IKatan2(new_r10, ((-1.00000000000000)*(new_r20)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
sj4array[1] = -sj4array[0];
cj4array[1] = -cj4array[0];
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal evalcond[1];
evalcond[0]=IKsin(j4);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((-1.00000000000000)*(new_r20)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x83=IKcos(j4);
IKReal x84=((IKabs(x83) != 0)?((IKReal)1/(x83)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r12)*(x84)), ((new_r11)*(x84)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((new_r10)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal evalcond[1];
evalcond[0]=IKsin(j5);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x85=IKcos(j5);
IKReal x86=((IKabs(x85) != 0)?((IKReal)1/(x85)):(IKReal)1.0e30);
IKReal x87=IKsin(j4);
IKReal x88=IKcos(j4);
j6array[0]=IKatan2(((((new_r21)*(x86)*(x88)))+(((-1.00000000000000)*(new_r11)*(x86)*(x87)))), ((((new_r21)*(x87)))+(((new_r11)*(x88)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x89=IKsin(j5);
IKReal x90=((IKabs(x89) != 0)?((IKReal)1/(x89)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r01)*(x90)), ((new_r02)*(x90)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
}
}
}
}
}

} else
{
}
}
}
}
}

}
}
}/// Durand-Kerner polynomial root finding method
static void polyroots3(IKReal rawcoeffs[3+1], IKReal rawroots[3], int& numroots)
{
    using std::complex;
    assert(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[3];
    const int maxsteps = 50;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[3];
    IKReal err[3];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 3; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
static void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
    IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = 0.5*(-rawcoeffs[1]+det)/rawcoeffs[0];
        rawroots[1] = 0.5*(-rawcoeffs[1]-det)/rawcoeffs[0];
        numroots = 2;
    }
}
/// intersection of a conic and the unit circle
static void conicsolver(IKReal _C0[6], IKReal roots[4], int& numroots)
{
    // have to normalize _C0
    IKReal maxval = IKabs(_C0[0]);
    for(int i = 1; i < 6; ++i) {
        if( maxval < IKabs(_C0[i]) ) {
            maxval = IKabs(_C0[i]);
        }
    }
    IKReal C0[6];
    for(int i = 0; i < 6; ++i) {
        C0[i]=_C0[i]/maxval;
    }
    IKReal rawcoeffs[4] = {-1,
                           C0[5] - C0[0] - C0[3],
                           C0[0]*C0[5] + C0[3]*C0[5] - C0[0]*C0[3] + C0[1]*C0[1] - C0[2]*C0[2] - C0[4]*C0[4],
                           C0[0]*C0[3]*C0[5] + 2*C0[1]*C0[2]*C0[4] - C0[0]*C0[4]*C0[4] - C0[3]*C0[2]*C0[2] - C0[5]*C0[1]*C0[1]};
    IKReal proots[3];
    int numproots, numyroots;
    polyroots3(rawcoeffs,proots,numproots);
    numroots = 0;
    int iroot=0;
    IKReal a, b, c, d, e, f;
    a = C0[0]+proots[iroot]; b = C0[1]; c = C0[3]+proots[iroot]; d = C0[2]; e = C0[4]; f = C0[5]-proots[iroot];
    IKReal adjugate[9] = {c*f-e*e, -b*f+e*d, b*e-c*d, -b*f+d*e, a*f-d*d, -a*e+b*d, b*e-d*c, -a*e+d*b, a*c-b*b};
    // find the greatest absolute value of adjugate and take that column
    int maxindex = 0;
    IKReal val = IKabs(adjugate[maxindex]);
    for(int i = 1; i < 9; ++i) {
        IKReal newval = IKabs(adjugate[i]);
        if( val < newval ) {
            val = newval;
            maxindex = i;
        }
    }
    maxindex = maxindex%3;
    if( adjugate[0] > 0 || adjugate[4] > 0 || adjugate[8] > 0 || adjugate[4*maxindex] >= 0 ) {
        // according to the structure of the matrix, should be always negative if a solution exists...
        return;
    }
    IKReal bmult = 1.0/IKsqrt(-adjugate[4*maxindex]);
    IKReal p[3] = {adjugate[maxindex]*bmult, adjugate[3+maxindex]*bmult, adjugate[6+maxindex]*bmult}; // intersection point
    // C = C0 - [p_x] = 2gh^t, C is rank1
    IKReal C[9] = {a,b+p[2],d-p[1],b-p[2],c,e+p[0],d+p[1],e-p[0],f};
    maxindex = 0;
    val = IKabs(C[maxindex]);
    for(int i = 1; i < 9; ++i) {
        IKReal newval = IKabs(C[i]);
        if( val < newval ) {
            val = newval;
            maxindex = i;
        }
    }
    int row = maxindex/3;
    int col = maxindex%3;
    IKReal lineequation[3], coeffs[3], yintersections[2];
    for(int i = 0; i < 2; ++i) {
        if( i == 0 ) {
            lineequation[0] = C[3*row];
            lineequation[1] = C[3*row+1];
            lineequation[2] = C[3*row+2];
        }
        else {
            lineequation[0] = C[col];
            lineequation[1] = C[3+col];
            lineequation[2] = C[6+col];
        }

        if( IKabs(lineequation[0]) < std::numeric_limits<IKReal>::epsilon() ) {
            yintersections[0] = -lineequation[2]/lineequation[1];
            IKReal x = 1-yintersections[0]*yintersections[0];
            if( x <= 0 && x > -std::numeric_limits<IKReal>::epsilon() ) {
                roots[numroots++] = yintersections[0] > 0 ? IKPI_2 : -IKPI_2;
            }
            else {
                x = IKsqrt(x);
                roots[numroots++] = IKatan2(yintersections[0], x);
                roots[numroots] = IKPI - roots[numroots-1]; numroots++;
            }
        }
        else {
            coeffs[0] = lineequation[0]*lineequation[0]+lineequation[1]*lineequation[1];
            coeffs[1] = 2*lineequation[1]*lineequation[2];
            coeffs[2] = lineequation[2]*lineequation[2]-lineequation[0]*lineequation[0];
            polyroots2(coeffs,yintersections,numyroots);
            for(int j = 0; j < numyroots; ++j) {
                roots[numroots++] = IKatan2(yintersections[j],-(lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0]);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "30b0c746bc8e2c01a8b0478ad7acb287"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
