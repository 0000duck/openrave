/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 26 generated 2011-02-09 16:33:51.168431
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67;
x0=IKsin(j[0]);
x1=IKsin(j[2]);
x2=IKcos(j[0]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=((x0)*(x1));
x7=((x2)*(x3)*(x4));
x8=((x7)+(x6));
x9=((-1.00000000000000)*(x8));
x10=IKcos(j[1]);
x11=IKcos(j[3]);
x12=IKcos(j[4]);
x13=((x1)*(x2)*(x4));
x14=((x0)*(x3));
x15=((((-1.00000000000000)*(x14)))+(x13));
x16=IKsin(j[4]);
x17=((x11)*(x9));
x18=((-1.00000000000000)*(x10)*(x2)*(x5));
x19=((x17)+(x18));
x20=IKcos(j[6]);
x21=((x12)*(x15));
x22=IKsin(j[6]);
x23=IKcos(j[5]);
x24=((x15)*(x16));
x25=((x10)*(x2)*(x5));
x26=((((-1.00000000000000)*(x25)))+(x17));
x27=IKsin(j[5]);
x28=((x5)*(x9));
x29=((x10)*(x11)*(x2));
x30=((x28)+(x29));
x31=((x12)*(x19));
x32=((x31)+(x24));
x33=((x12)*(x26));
x34=((x33)+(x24));
x35=((x1)*(x2));
x36=((x14)*(x4));
x37=((((-1.00000000000000)*(x36)))+(x35));
x38=((x11)*(x37));
x39=((x0)*(x10)*(x5));
x40=((((-1.00000000000000)*(x39)))+(x38));
x41=((x2)*(x3));
x42=((x4)*(x6));
x43=((x42)+(x41));
x44=((x12)*(x43));
x45=((x12)*(x40));
x46=((x16)*(x43));
x47=((x46)+(x45));
x48=((x23)*(x47));
x49=((x0)*(x10)*(x11));
x50=((x37)*(x5));
x51=((x49)+(x50));
x52=((x4)*(x5));
x53=((x10)*(x11)*(x3));
x54=((x52)+(((-1.00000000000000)*(x53))));
x55=((x1)*(x10)*(x12));
x56=((x16)*(x54));
x57=((x55)+(((-1.00000000000000)*(x56))));
x58=((x10)*(x3)*(x5));
x59=((x11)*(x4));
x60=((x59)+(x58));
x61=((-1.00000000000000)*(x60));
x62=((-1.00000000000000)*(x27)*(x61));
x63=((x12)*(x54));
x64=((x1)*(x10)*(x16));
x65=((x63)+(x64));
x66=((x23)*(x65));
x67=((x62)+(x66));
eerot[0]=((((x20)*(((((x23)*(x32)))+(((-1.00000000000000)*(x27)*(x30)))))))+(((x22)*(((((-1.00000000000000)*(x16)*(x19)))+(x21))))));
eerot[1]=((((x20)*(((((-1.00000000000000)*(x16)*(x26)))+(x21)))))+(((-1.00000000000000)*(x22)*(((((x23)*(x34)))+(((-1.00000000000000)*(x27)*(x30))))))));
eerot[2]=((((x27)*(x32)))+(((x23)*(x30))));
eetrans[0]=((((0.100000000000000)*(x2)))+(((0.321000000000000)*(x29)))+(((0.321000000000000)*(x28)))+(((0.400000000000000)*(x10)*(x2)))+(((0.180000000000000)*(x23)*(x30)))+(((0.180000000000000)*(x27)*(x34))));
eerot[3]=((((x22)*(((x44)+(((-1.00000000000000)*(x16)*(x40)))))))+(((x20)*(((((-1.00000000000000)*(x27)*(x51)))+(x48))))));
eerot[4]=((((x20)*(((x44)+(((-1.00000000000000)*(x16)*(x40)))))))+(((-1.00000000000000)*(x22)*(((((-1.00000000000000)*(x27)*(x51)))+(x48))))));
eerot[5]=((((x27)*(x47)))+(((x23)*(x51))));
eetrans[1]=((-0.188000000000000)+(((0.180000000000000)*(x27)*(((((x12)*(((((-1.00000000000000)*(x39)))+(x38)))))+(x46)))))+(((0.100000000000000)*(x0)))+(((0.400000000000000)*(x0)*(x10)))+(((0.321000000000000)*(x50)))+(((0.321000000000000)*(x49)))+(((0.180000000000000)*(x23)*(x51))));
eerot[6]=((((x20)*(x67)))+(((x22)*(x57))));
eerot[7]=((((x20)*(x57)))+(((-1.00000000000000)*(x22)*(x67))));
eerot[8]=((((x23)*(x61)))+(((x27)*(x65))));
eetrans[2]=((((-0.400000000000000)*(x4)))+(((-0.321000000000000)*(x58)))+(((-0.321000000000000)*(x59)))+(((0.180000000000000)*(x27)*(x65)))+(((0.180000000000000)*(x23)*(x61))));
}

class IKSolver {
public:
IKReal j25, cj25, sj25,
j26, cj26, sj26,
j28, cj28, sj28,
j29, cj29, sj29,
j30, cj30, sj30,
j31, cj31, sj31,
j27, cj27, sj27,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j27=pfree[0]; cj27=cos(pfree[0]); sj27=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.180000000000000)*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((0.188000000000000)+(((-0.180000000000000)*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((((-0.180000000000000)*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(sj27)*(sj27);
dummyeval[0]=((((2994.51924843750)*(x0)))+(((-1000000.00000000)*((py)*(py))))+(((-625000.000000000)*(pp)*(px)*(x0)))+(((790753.125000000)*(pp)*(x0)))+(((158150.625000000)*(px)*(x0)))+(((-62500.0000000000)*(x0)*((px)*(px))))+(((-1562500.00000000)*(x0)*((pp)*(pp)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[1];
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((j27)+(3.14159265358979)), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.000010  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x1=(cj28)*(cj28);
IKReal x2=(pp)*(pp);
IKReal x3=(px)*(px);
IKReal x4=((6.06554672411953)*(pp)*(px));
IKReal x5=((7.67416004308964)*(pp));
IKReal x6=((15.1638668102988)*(x2));
IKReal x7=((1.53483200861793)*(px));
IKReal x8=((0.606554672411953)*(x3));
op[0]=((-0.970938565731723)+(x1)+(x7)+(x5)+(((-1.00000000000000)*(x6)))+(((-1.00000000000000)*(x8)))+(((-1.00000000000000)*(x4))));
op[1]=0;
op[2]=((-1.94187713146345)+(((2.00000000000000)*(x1)))+(((-2.78689065517609)*(x3)))+(((15.3483200861793)*(pp)))+(((-30.3277336205976)*(x2))));
op[3]=0;
op[4]=((-0.970938565731723)+(x1)+(x5)+(x4)+(((-1.00000000000000)*(x6)))+(((-1.00000000000000)*(x7)))+(((-1.00000000000000)*(x8))));
polyroots4(op,zeror,numroots);
IKReal j25array[4], cj25array[4], sj25array[4], tempj25array[1];
int numsolutions = 0;
for(int ij25 = 0; ij25 < numroots; ++ij25)
{
IKReal dummy0 = zeror[ij25];
tempj25array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj25 = 0; kj25 < 1; ++kj25)
{
j25array[numsolutions] = tempj25array[kj25];
if( j25array[numsolutions] > IKPI )
    j25array[numsolutions]-=IK2PI;
else if( j25array[numsolutions] < -IKPI )
    j25array[numsolutions]+=IK2PI;
sj25array[numsolutions] = IKsin(j25array[numsolutions]);
cj25array[numsolutions] = IKcos(j25array[numsolutions]);
bool valid = true;
for( int kj25 = 0; kj25 < numsolutions; ++kj25)
{
    if( IKabs(cj25array[kj25]-cj25array[numsolutions]) < 0.0001 && IKabs(sj25array[kj25]-sj25array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij25 = 0; ij25 < numsolutions; ++ij25)
    {
    j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IKReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
cj28array[0]=((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px))));
if( cj28array[0] >= -1.0001 && cj28array[0] <= 1.0001 )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
if( j28valid[0] && j28valid[1] && IKabs(cj28array[0]-cj28array[1]) < 0.0001 && IKabs(sj28array[0]-sj28array[1]) < 0.0001 )
    j28valid[1]=false;
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[2];
dummyeval[0]=((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz))));
dummyeval[1]=((((400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((160000.000000000)+(((103041.000000000)*((sj28)*(sj28))))+(((256800.000000000)*(cj28)))+(((103041.000000000)*((cj28)*(cj28)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((40.0000000000000)+(((-321.000000000000)*(pz)*(sj28)))+(((-321.000000000000)*(cj25)*(cj28)*(px)))+(((-400.000000000000)*(cj25)*(px)))+(((32.1000000000000)*(cj28))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x9=((0.321000000000000)*(cj28));
IKReal x10=((0.400000000000000)+(x9));
IKReal x11=((32.1000000000000)*(cj28));
IKReal x12=((40.0000000000000)+(x11));
IKReal x13=((321.000000000000)*(pz)*(sj28));
IKReal x14=((400.000000000000)*(cj25)*(px));
IKReal x15=((321.000000000000)*(cj25)*(cj28)*(px));
IKReal x16=((x13)+(x15)+(x14));
IKReal x17=((((-1.00000000000000)*(x16)))+(x12));
IKReal x18=((IKabs(x17) != 0)?((IKReal)1/(x17)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x18)*(((((321.000000000000)*(sj28)*(x10)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj25)*(px)))))))))), ((x18)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((x10)*(x10))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x104=(sj28)*(sj28);
IKReal x105=((103041.000000000)*(x104));
IKReal x106=((256800.000000000)*(cj28));
IKReal x107=x1;
IKReal x108=((103041.000000000)*(x107));
IKReal x109=((160000.000000000)+(x108)+(x105)+(x106));
IKReal x110=((IKabs(x109) != 0)?((IKReal)1/(x109)):(IKReal)1.0e30);
IKReal x111=((cj25)*(px));
IKReal x112=((0.100000000000000)+(((-1.00000000000000)*(x111))));
j26array[0]=IKatan2(((-1.00000000000000)*(x110)*(((((-321000.000000000)*(sj28)*(x112)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))), ((-1.00000000000000)*(x110)*(((((x112)*(((400000.000000000)+(((321000.000000000)*(cj28)))))))+(((321000.000000000)*(pz)*(sj28)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj28)*(sj28))))+(((-1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))))) != 0)?((IKReal)1/(((((400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28)))))):(IKReal)1.0e30))*(((((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj25)*(px)))))))+(((-321.000000000000)*(sj28)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

} else
{
evalcond[0]=((IKabs(py))+(IKabs(((IKfmod(j27, 6.28318530717959))+(-3.14159265358979)))));
if( IKabs(evalcond[0]) < 0.000010  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x113=(cj28)*(cj28);
IKReal x114=(pp)*(pp);
IKReal x115=(px)*(px);
IKReal x116=((6.06554672411953)*(pp)*(px));
IKReal x117=((7.67416004308964)*(pp));
IKReal x118=((15.1638668102988)*(x114));
IKReal x119=((1.53483200861793)*(px));
IKReal x120=((0.606554672411953)*(x115));
op[0]=((-0.970938565731723)+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x118)))+(((-1.00000000000000)*(x120)))+(x113)+(x117)+(x119));
op[1]=0;
op[2]=((-1.94187713146345)+(((-30.3277336205976)*(x114)))+(((-2.78689065517609)*(x115)))+(((15.3483200861793)*(pp)))+(((2.00000000000000)*(x113))));
op[3]=0;
op[4]=((-0.970938565731723)+(((-1.00000000000000)*(x118)))+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x120)))+(x113)+(x117)+(x116));
polyroots4(op,zeror,numroots);
IKReal j25array[4], cj25array[4], sj25array[4], tempj25array[1];
int numsolutions = 0;
for(int ij25 = 0; ij25 < numroots; ++ij25)
{
IKReal dummy0 = zeror[ij25];
tempj25array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj25 = 0; kj25 < 1; ++kj25)
{
j25array[numsolutions] = tempj25array[kj25];
if( j25array[numsolutions] > IKPI )
    j25array[numsolutions]-=IK2PI;
else if( j25array[numsolutions] < -IKPI )
    j25array[numsolutions]+=IK2PI;
sj25array[numsolutions] = IKsin(j25array[numsolutions]);
cj25array[numsolutions] = IKcos(j25array[numsolutions]);
bool valid = true;
for( int kj25 = 0; kj25 < numsolutions; ++kj25)
{
    if( IKabs(cj25array[kj25]-cj25array[numsolutions]) < 0.0001 && IKabs(sj25array[kj25]-sj25array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij25 = 0; ij25 < numsolutions; ++ij25)
    {
    j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IKReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
cj28array[0]=((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px))));
if( cj28array[0] >= -1.0001 && cj28array[0] <= 1.0001 )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
if( j28valid[0] && j28valid[1] && IKabs(cj28array[0]-cj28array[1]) < 0.0001 && IKabs(sj28array[0]-sj28array[1]) < 0.0001 )
    j28valid[1]=false;
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[2];
dummyeval[0]=((((32100.0000000000)*(sj28)))+(((-321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj25)*(px)*(sj28))));
dummyeval[1]=((((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((160000.000000000)+(((103041.000000000)*((sj28)*(sj28))))+(((256800.000000000)*(cj28)))+(((103041.000000000)*((cj28)*(cj28)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((40.0000000000000)+(((321.000000000000)*(pz)*(sj28)))+(((-321.000000000000)*(cj25)*(cj28)*(px)))+(((-400.000000000000)*(cj25)*(px)))+(((32.1000000000000)*(cj28))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x121=((0.321000000000000)*(cj28));
IKReal x122=((0.400000000000000)+(x121));
IKReal x123=((321.000000000000)*(pz)*(sj28));
IKReal x124=((32.1000000000000)*(cj28));
IKReal x125=((40.0000000000000)+(x124)+(x123));
IKReal x126=((400.000000000000)*(cj25)*(px));
IKReal x127=((321.000000000000)*(cj25)*(cj28)*(px));
IKReal x128=((x126)+(x127));
IKReal x129=((((-1.00000000000000)*(x128)))+(x125));
IKReal x130=((IKabs(x129) != 0)?((IKReal)1/(x129)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x130)*(((((-321.000000000000)*(sj28)*(x122)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj25)*(px)))))))))), ((x130)*(((((-1000.00000000000)*((x122)*(x122))))+(((1000.00000000000)*((pz)*(pz))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x131=(sj28)*(sj28);
IKReal x132=((103041.000000000)*(x131));
IKReal x133=((256800.000000000)*(cj28));
IKReal x134=x113;
IKReal x135=((103041.000000000)*(x134));
IKReal x136=((160000.000000000)+(x135)+(x133)+(x132));
IKReal x137=((IKabs(x136) != 0)?((IKReal)1/(x136)):(IKReal)1.0e30);
IKReal x138=((cj25)*(px));
IKReal x139=((0.100000000000000)+(((-1.00000000000000)*(x138))));
j26array[0]=IKatan2(((-1.00000000000000)*(x137)*(((((321000.000000000)*(sj28)*(x139)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))), ((x137)*(((((321000.000000000)*(pz)*(sj28)))+(((-1.00000000000000)*(x139)*(((400000.000000000)+(((321000.000000000)*(cj28)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((32100.0000000000)*(sj28)))+(((-321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj25)*(px)*(sj28))))) != 0)?((IKReal)1/(((((32100.0000000000)*(sj28)))+(((-321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))))):(IKReal)1.0e30))*(((((-103041.000000000)*((sj28)*(sj28))))+(((1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))))) != 0)?((IKReal)1/(((((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj25)*(px)))))))+(((-321.000000000000)*(sj28)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x140=(sj27)*(sj27);
IKReal x141=(py)*(py);
IKReal x142=(px)*(px);
IKReal x143=(pp)*(pp);
IKReal x144=((1250000.00000000)*(pp)*(py)*(x140));
IKReal x145=((4000000.00000000)*(px)*(py));
IKReal x146=((316301.250000000)*(py)*(x140));
IKReal x147=((250000.000000000)*(px)*(py)*(x140));
IKReal x148=((2994.51924843750)*(x140));
IKReal x149=((790753.125000000)*(pp)*(x140));
IKReal x150=((625000.000000000)*(pp)*(px)*(x140));
IKReal x151=((1000000.00000000)*(x141));
IKReal x152=((62500.0000000000)*(x140)*(x142));
IKReal x153=((158150.625000000)*(px)*(x140));
IKReal x154=((1562500.00000000)*(x140)*(x143));
op[0]=((((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x154)))+(x153)+(x148)+(x149));
op[1]=((((-1.00000000000000)*(x146)))+(((-1.00000000000000)*(x145)))+(x144)+(x147));
op[2]=((((-3125000.00000000)*(x140)*(x143)))+(((2000000.00000000)*(x141)))+(((-250000.000000000)*(x140)*(x141)))+(((1581506.25000000)*(pp)*(x140)))+(((125000.000000000)*(x140)*(x142)))+(((5989.03849687500)*(x140)))+(((-4000000.00000000)*(x142))));
op[3]=((((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x146)))+(x144)+(x145));
op[4]=((((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x154)))+(x150)+(x148)+(x149));
polyroots4(op,zeror,numroots);
IKReal j25array[4], cj25array[4], sj25array[4], tempj25array[1];
int numsolutions = 0;
for(int ij25 = 0; ij25 < numroots; ++ij25)
{
IKReal dummy0 = zeror[ij25];
tempj25array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj25 = 0; kj25 < 1; ++kj25)
{
j25array[numsolutions] = tempj25array[kj25];
if( j25array[numsolutions] > IKPI )
    j25array[numsolutions]-=IK2PI;
else if( j25array[numsolutions] < -IKPI )
    j25array[numsolutions]+=IK2PI;
sj25array[numsolutions] = IKsin(j25array[numsolutions]);
cj25array[numsolutions] = IKcos(j25array[numsolutions]);
bool valid = true;
for( int kj25 = 0; kj25 < numsolutions; ++kj25)
{
    if( IKabs(cj25array[kj25]-cj25array[numsolutions]) < 0.0001 && IKabs(sj25array[kj25]-sj25array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij25 = 0; ij25 < numsolutions; ++ij25)
    {
    j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IKReal dummyeval[1];
dummyeval[0]=sj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((8.00000000000000)*(cj25)*(px)*(py)*(sj25)*(sj27)))+(((4.00000000000000)*(sj27)*((py)*(py))*((sj25)*(sj25))))+(((-0.800000000000000)*(py)*(sj25)*(sj27)))+(((0.0400000000000000)*(sj27)))+(((4.00000000000000)*(sj27)*((pz)*(pz))))+(((4.00000000000000)*(sj27)*((cj25)*(cj25))*((px)*(px))))+(((-0.800000000000000)*(cj25)*(px)*(sj27))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[3];
IKReal x155=((px)*(sj25));
IKReal x156=((cj25)*(py));
IKReal x157=((((-1.00000000000000)*(x156)))+(x155));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x157;
evalcond[2]=x157;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
cj28array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px))));
if( cj28array[0] >= -1.0001 && cj28array[0] <= 1.0001 )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
if( j28valid[0] && j28valid[1] && IKabs(cj28array[0]-cj28array[1]) < 0.0001 && IKabs(sj28array[0]-sj28array[1]) < 0.0001 )
    j28valid[1]=false;
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[2];
dummyeval[0]=((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-321000.000000000)*(py)*(sj25)*(sj28)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz))));
dummyeval[1]=((((400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((160000.000000000)+(((103041.000000000)*((sj28)*(sj28))))+(((256800.000000000)*(cj28)))+(((103041.000000000)*((cj28)*(cj28)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((40.0000000000000)+(((-400.000000000000)*(py)*(sj25)))+(((-321.000000000000)*(cj28)*(py)*(sj25)))+(((-321.000000000000)*(pz)*(sj28)))+(((-321.000000000000)*(cj25)*(cj28)*(px)))+(((-400.000000000000)*(cj25)*(px)))+(((32.1000000000000)*(cj28))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x158=((0.321000000000000)*(cj28));
IKReal x159=((0.400000000000000)+(x158));
IKReal x160=((32.1000000000000)*(cj28));
IKReal x161=((40.0000000000000)+(x160));
IKReal x162=((321.000000000000)*(pz)*(sj28));
IKReal x163=((400.000000000000)*(cj25)*(px));
IKReal x164=((400.000000000000)*(py)*(sj25));
IKReal x165=((321.000000000000)*(cj28)*(py)*(sj25));
IKReal x166=((321.000000000000)*(cj25)*(cj28)*(px));
IKReal x167=((x162)+(x163)+(x166)+(x164)+(x165));
IKReal x168=((((-1.00000000000000)*(x167)))+(x161));
IKReal x169=((IKabs(x168) != 0)?((IKReal)1/(x168)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x169)*(((((321.000000000000)*(sj28)*(x159)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(py)*(sj25)))))))))), ((x169)*(((((-1000.00000000000)*((x159)*(x159))))+(((1000.00000000000)*((pz)*(pz))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x170=(sj28)*(sj28);
IKReal x171=((103041.000000000)*(x170));
IKReal x172=((256800.000000000)*(cj28));
IKReal x173=(cj28)*(cj28);
IKReal x174=((103041.000000000)*(x173));
IKReal x175=((160000.000000000)+(x171)+(x172)+(x174));
IKReal x176=((IKabs(x175) != 0)?((IKReal)1/(x175)):(IKReal)1.0e30);
IKReal x177=((cj25)*(px));
IKReal x178=((py)*(sj25));
IKReal x179=((x178)+(x177));
IKReal x180=((0.100000000000000)+(((-1.00000000000000)*(x179))));
j26array[0]=IKatan2(((-1.00000000000000)*(x176)*(((((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))+(((-321000.000000000)*(sj28)*(x180)))))), ((-1.00000000000000)*(x176)*(((((321000.000000000)*(pz)*(sj28)))+(((x180)*(((400000.000000000)+(((321000.000000000)*(cj28)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-321000.000000000)*(py)*(sj25)*(sj28)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-321000.000000000)*(py)*(sj25)*(sj28)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj28)*(sj28))))+(((-1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))))) != 0)?((IKReal)1/(((((400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28)))))):(IKReal)1.0e30))*(((((-321.000000000000)*(sj28)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(py)*(sj25)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
IKReal x181=((cj25)*(py));
IKReal x182=((px)*(sj25));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x181)))+(x182));
evalcond[2]=((((-1.00000000000000)*(x182)))+(x181));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
cj28array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px))));
if( cj28array[0] >= -1.0001 && cj28array[0] <= 1.0001 )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
if( j28valid[0] && j28valid[1] && IKabs(cj28array[0]-cj28array[1]) < 0.0001 && IKabs(sj28array[0]-sj28array[1]) < 0.0001 )
    j28valid[1]=false;
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[2];
dummyeval[0]=((((32100.0000000000)*(sj28)))+(((-321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(py)*(sj25)*(sj28)))+(((-321000.000000000)*(cj25)*(px)*(sj28))));
dummyeval[1]=((((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((160000.000000000)+(((103041.000000000)*((sj28)*(sj28))))+(((256800.000000000)*(cj28)))+(((103041.000000000)*((cj28)*(cj28)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((40.0000000000000)+(((-400.000000000000)*(py)*(sj25)))+(((-321.000000000000)*(cj28)*(py)*(sj25)))+(((321.000000000000)*(pz)*(sj28)))+(((-321.000000000000)*(cj25)*(cj28)*(px)))+(((-400.000000000000)*(cj25)*(px)))+(((32.1000000000000)*(cj28))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x183=((0.321000000000000)*(cj28));
IKReal x184=((0.400000000000000)+(x183));
IKReal x185=((321.000000000000)*(pz)*(sj28));
IKReal x186=((32.1000000000000)*(cj28));
IKReal x187=((40.0000000000000)+(x185)+(x186));
IKReal x188=((400.000000000000)*(cj25)*(px));
IKReal x189=((400.000000000000)*(py)*(sj25));
IKReal x190=((321.000000000000)*(cj28)*(py)*(sj25));
IKReal x191=((321.000000000000)*(cj25)*(cj28)*(px));
IKReal x192=((x191)+(x190)+(x188)+(x189));
IKReal x193=((((-1.00000000000000)*(x192)))+(x187));
IKReal x194=((IKabs(x193) != 0)?((IKReal)1/(x193)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x194)*(((((-321.000000000000)*(sj28)*(x184)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(py)*(sj25)))))))))), ((x194)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((x184)*(x184))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x195=(sj28)*(sj28);
IKReal x196=((103041.000000000)*(x195));
IKReal x197=((256800.000000000)*(cj28));
IKReal x198=(cj28)*(cj28);
IKReal x199=((103041.000000000)*(x198));
IKReal x200=((160000.000000000)+(x199)+(x197)+(x196));
IKReal x201=((IKabs(x200) != 0)?((IKReal)1/(x200)):(IKReal)1.0e30);
IKReal x202=((cj25)*(px));
IKReal x203=((py)*(sj25));
IKReal x204=((x203)+(x202));
IKReal x205=((0.100000000000000)+(((-1.00000000000000)*(x204))));
j26array[0]=IKatan2(((-1.00000000000000)*(x201)*(((((321000.000000000)*(sj28)*(x205)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))), ((x201)*(((((321000.000000000)*(pz)*(sj28)))+(((-1.00000000000000)*(x205)*(((400000.000000000)+(((321000.000000000)*(cj28)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((32100.0000000000)*(sj28)))+(((-321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(py)*(sj25)*(sj28)))+(((-321000.000000000)*(cj25)*(px)*(sj28))))) != 0)?((IKReal)1/(((((32100.0000000000)*(sj28)))+(((-321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(py)*(sj25)*(sj28)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))))):(IKReal)1.0e30))*(((((-103041.000000000)*((sj28)*(sj28))))+(((1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))))) != 0)?((IKReal)1/(((((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28)))))):(IKReal)1.0e30))*(((((-321.000000000000)*(sj28)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))+(((1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(py)*(sj25)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x206=((0.0669590000000000)+(pp));
IKReal x207=((0.200000000000000)*(cj25)*(px));
IKReal x208=((0.200000000000000)*(py)*(sj25));
IKReal x209=((x207)+(x208));
IKReal x210=((((-1.00000000000000)*(x209)))+(x206));
IKReal x211=((cj27)*(px)*(sj25));
IKReal x212=((cj25)*(cj27)*(py));
IKReal x213=((x211)+(((-1.00000000000000)*(x212))));
IKReal x214=((8.00000000000000)*(cj25)*(px)*(py)*(sj25)*(sj27));
IKReal x215=x141;
IKReal x216=(sj25)*(sj25);
IKReal x217=((4.00000000000000)*(sj27)*(x215)*(x216));
IKReal x218=((0.0400000000000000)*(sj27));
IKReal x219=(pz)*(pz);
IKReal x220=((4.00000000000000)*(sj27)*(x219));
IKReal x221=(cj25)*(cj25);
IKReal x222=x142;
IKReal x223=((4.00000000000000)*(sj27)*(x221)*(x222));
IKReal x224=((x214)+(x217)+(x218)+(x220)+(x223));
IKReal x225=((0.800000000000000)*(py)*(sj25)*(sj27));
IKReal x226=((0.800000000000000)*(cj25)*(px)*(sj27));
IKReal x227=((x225)+(x226));
IKReal x228=((x224)+(((-1.00000000000000)*(x227))));
IKReal x229=((IKabs(x228) != 0)?((IKReal)1/(x228)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x229)*(((((-5.00000000000000)*(pz)*(sj27)*(x210)))+(((-1.00000000000000)*(x213)*(((0.400000000000000)+(((-4.00000000000000)*(cj25)*(px)))+(((-4.00000000000000)*(py)*(sj25)))))))))), ((x229)*(((((4.00000000000000)*(pz)*(x213)))+(((x210)*(((((5.00000000000000)*(py)*(sj25)*(sj27)))+(((-0.500000000000000)*(sj27)))+(((5.00000000000000)*(cj25)*(px)*(sj27)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

{
IKReal dummyeval[1];
dummyeval[0]=sj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj26;
dummyeval[1]=cj27;
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal evalcond[4];
evalcond[0]=((IKfmod(((-1.57079632679490)+(j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[2]=((((-1.00000000000000)*(cj25)*(cj27)*(py)))+(((0.100000000000000)*(sj27)))+(((-1.00000000000000)*(py)*(sj25)*(sj27)))+(((cj27)*(px)*(sj25)))+(((-1.00000000000000)*(cj25)*(px)*(sj27))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[4];
IKReal x230=((px)*(sj25));
IKReal x231=((cj25)*(py));
IKReal x232=((((-1.00000000000000)*(x231)))+(x230));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x232;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=x232;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj25)*(px)))+(((-3.11526479750779)*(py)*(sj25)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x233=((cj25)*(py));
IKReal x234=((px)*(sj25));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x233)))+(x234));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=((((-1.00000000000000)*(x234)))+(x233));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj25)*(px)))+(((3.11526479750779)*(py)*(sj25)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x235=((cj25)*(px));
IKReal x236=((py)*(sj25));
IKReal x237=((x236)+(x235));
IKReal x238=((0.100000000000000)+(((-1.00000000000000)*(x237))));
evalcond[0]=((IKfmod(((-1.57079632679490)+(j27)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x238;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(x236)))+(((0.200000000000000)*(x235)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x238;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((3.11526479750779)*(cj25)*(py)))+(((-3.11526479750779)*(px)*(sj25)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x239=((cj25)*(px));
IKReal x240=((py)*(sj25));
evalcond[0]=((IKfmod(((1.57079632679490)+(j27)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((0.100000000000000)+(((-1.00000000000000)*(x239)))+(((-1.00000000000000)*(x240))));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(x240)))+(((0.200000000000000)*(x239)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((-0.100000000000000)+(x239)+(x240));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((-3.11526479750779)*(cj25)*(py)))+(((3.11526479750779)*(px)*(sj25)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj27) != 0)?((IKReal)1/(cj27)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(cj25)*(px)))+(((-1000.00000000000)*(py)*(sj25)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((1.57079632679490)+(j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[2]=((((-1.00000000000000)*(cj25)*(cj27)*(py)))+(((cj27)*(px)*(sj25)))+(((-0.100000000000000)*(sj27)))+(((cj25)*(px)*(sj27)))+(((py)*(sj25)*(sj27))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[4];
IKReal x241=((px)*(sj25));
IKReal x242=((cj25)*(py));
IKReal x243=((x241)+(((-1.00000000000000)*(x242))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x243;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=x243;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj25)*(px)))+(((3.11526479750779)*(py)*(sj25)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x244=((cj25)*(py));
IKReal x245=((px)*(sj25));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((x245)+(((-1.00000000000000)*(x244))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=((x244)+(((-1.00000000000000)*(x245))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj25)*(px)))+(((-3.11526479750779)*(py)*(sj25)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x246=((cj25)*(px));
IKReal x247=((py)*(sj25));
evalcond[0]=((IKfmod(((-1.57079632679490)+(j27)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((0.100000000000000)+(((-1.00000000000000)*(x246)))+(((-1.00000000000000)*(x247))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(x246)))+(((0.200000000000000)*(x247)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((-0.100000000000000)+(x247)+(x246));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((3.11526479750779)*(cj25)*(py)))+(((-3.11526479750779)*(px)*(sj25)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x248=((cj25)*(px));
IKReal x249=((py)*(sj25));
IKReal x250=((x249)+(x248));
IKReal x251=((0.100000000000000)+(((-1.00000000000000)*(x250))));
evalcond[0]=((IKfmod(((1.57079632679490)+(j27)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x251;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(x248)))+(((0.200000000000000)*(x249)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x251;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((-3.11526479750779)*(cj25)*(py)))+(((3.11526479750779)*(px)*(sj25)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((-0.00311526479750779)*(((IKabs(cj27) != 0)?((IKReal)1/(cj27)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(cj25)*(px)))+(((-1000.00000000000)*(py)*(sj25)))))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((-1.57079632679490)+(j27)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)*(sj26)))+(((0.200000000000000)*(cj25)*(px)))+(((-0.0800000000000000)*(cj26)))+(((0.800000000000000)*(cj26)*(py)*(sj25)))+(((0.800000000000000)*(cj25)*(cj26)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[2]=((((0.100000000000000)*(sj26)))+(((-1.00000000000000)*(cj26)*(pz)))+(((-1.00000000000000)*(py)*(sj25)*(sj26)))+(((-1.00000000000000)*(cj25)*(px)*(sj26))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((3.11526479750779)*(cj25)*(py)))+(((-3.11526479750779)*(px)*(sj25)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((1.57079632679490)+(j27)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)*(sj26)))+(((0.200000000000000)*(cj25)*(px)))+(((-0.0800000000000000)*(cj26)))+(((0.800000000000000)*(cj26)*(py)*(sj25)))+(((0.800000000000000)*(cj25)*(cj26)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[2]=((((cj26)*(pz)))+(((-0.100000000000000)*(sj26)))+(((cj25)*(px)*(sj26)))+(((py)*(sj25)*(sj26))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((-3.11526479750779)*(cj25)*(py)))+(((3.11526479750779)*(px)*(sj25)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x252=((px)*(sj25));
IKReal x253=((cj25)*(py));
IKReal x254=((x252)+(((-1.00000000000000)*(x253))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x254;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)*(sj26)))+(((0.200000000000000)*(cj25)*(px)))+(((-0.0800000000000000)*(cj26)))+(((0.800000000000000)*(cj26)*(py)*(sj25)))+(((0.800000000000000)*(cj25)*(cj26)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=x254;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((0.311526479750779)*(sj26)))+(((-3.11526479750779)*(cj25)*(px)*(sj26)))+(((-3.11526479750779)*(cj26)*(pz)))+(((-3.11526479750779)*(py)*(sj25)*(sj26)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x255=((cj25)*(py));
IKReal x256=((px)*(sj25));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((x256)+(((-1.00000000000000)*(x255))));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)*(sj26)))+(((0.200000000000000)*(cj25)*(px)))+(((-0.0800000000000000)*(cj26)))+(((0.800000000000000)*(cj26)*(py)*(sj25)))+(((0.800000000000000)*(cj25)*(cj26)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25))));
evalcond[3]=((x255)+(((-1.00000000000000)*(x256))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj26;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj26;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj26;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[4];
IKReal x257=x255;
IKReal x258=x256;
evalcond[0]=((IKfmod(((j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((x258)+(((-1.00000000000000)*(x257))));
evalcond[2]=((-0.146959000000000)+(((cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((py)*(sj25))));
evalcond[3]=((x257)+(((-1.00000000000000)*(x258))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((3.11526479750779)*(pz)), ((-1.55763239875389)+(((3.11526479750779)*(cj25)*(px)))+(((3.11526479750779)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x259=x255;
IKReal x260=x256;
evalcond[0]=((IKfmod(((-3.14159265358979)+(j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((x260)+(((-1.00000000000000)*(x259))));
evalcond[2]=((0.0130410000000000)+(((-0.600000000000000)*(py)*(sj25)))+(((-0.600000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((x259)+(((-1.00000000000000)*(x260))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((-3.11526479750779)*(pz)), ((-0.934579439252336)+(((-3.11526479750779)*(cj25)*(px)))+(((-3.11526479750779)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
IKReal x261=((IKabs(sj26) != 0)?((IKReal)1/(sj26)):(IKReal)1.0e30);
j28array[0]=IKatan2(((((-0.311526479750779)*(sj26)))+(((3.11526479750779)*(py)*(sj25)*(sj26)))+(((3.11526479750779)*(cj26)*(pz)))+(((3.11526479750779)*(cj25)*(px)*(sj26)))), ((-1.24610591900312)+(((3.11526479750779)*(cj25)*(cj26)*(px)))+(((-0.311526479750779)*(cj26)))+(((3.11526479750779)*(cj26)*(py)*(sj25)))+(((3.11526479750779)*(pz)*(x261)*((cj26)*(cj26))))+(((-3.11526479750779)*(pz)*(x261)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
IKReal x262=((IKabs(cj26) != 0)?((IKReal)1/(cj26)):(IKReal)1.0e30);
j28array[0]=IKatan2(((((-0.311526479750779)*(sj26)))+(((3.11526479750779)*(py)*(sj25)*(sj26)))+(((3.11526479750779)*(cj25)*(px)*(sj26)))+(((3.11526479750779)*(pz)*(x262)))+(((-3.11526479750779)*(pz)*(x262)*((sj26)*(sj26))))), ((-1.24610591900312)+(((3.11526479750779)*(cj25)*(cj26)*(px)))+(((-3.11526479750779)*(pz)*(sj26)))+(((-0.311526479750779)*(cj26)))+(((3.11526479750779)*(cj26)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj26) != 0)?((IKReal)1/(cj26)):(IKReal)1.0e30))*(((((-1250.00000000000)*(sj26)*(((0.253041000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25)))))))+(((1000.00000000000)*(pz)))+(((400.000000000000)*(sj26)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj26) != 0)?((IKReal)1/(cj26)):(IKReal)1.0e30))*(((IKabs(cj27) != 0)?((IKReal)1/(cj27)):(IKReal)1.0e30))*(((((1250.00000000000)*(sj26)*(((0.253041000000000)+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25)))))))+(((-400.000000000000)*(sj26)))+(((-1000.00000000000)*(pz)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj25)*(cj26)*(px)))+(((-3.11526479750779)*(pz)*(sj26)))+(((-0.311526479750779)*(cj26)))+(((3.11526479750779)*(cj26)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[1];
dummyeval[0]=((160000.000000000)+(((103041.000000000)*((cj27)*(cj27))*((sj28)*(sj28))))+(((256800.000000000)*(cj28)))+(((103041.000000000)*((cj28)*(cj28)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((40.0000000000000)+(((-400.000000000000)*(py)*(sj25)))+(((-321.000000000000)*(cj28)*(py)*(sj25)))+(((-321.000000000000)*(cj27)*(pz)*(sj28)))+(((-321.000000000000)*(cj25)*(cj28)*(px)))+(((-400.000000000000)*(cj25)*(px)))+(((32.1000000000000)*(cj28))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((321.000000000000)*(cj27)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((321.000000000000)*(cj25)*(cj27)*(px)*(sj28)))+(((-32.1000000000000)*(cj27)*(sj28))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x263=((cj25)*(px));
IKReal x264=((py)*(sj25));
IKReal x265=((x264)+(x263));
IKReal x266=((0.100000000000000)+(((-1.00000000000000)*(x265))));
IKReal x267=((0.321000000000000)*(cj28));
IKReal x268=((0.400000000000000)+(x267));
IKReal x269=((321.000000000000)*(cj27)*(sj28)*(x264));
IKReal x270=((321.000000000000)*(cj27)*(sj28)*(x263));
IKReal x271=((x269)+(x270));
IKReal x272=((400.000000000000)*(pz));
IKReal x273=((321.000000000000)*(cj28)*(pz));
IKReal x274=((32.1000000000000)*(cj27)*(sj28));
IKReal x275=((x274)+(x272)+(x273));
IKReal x276=((x271)+(((-1.00000000000000)*(x275))));
IKReal x277=((IKabs(x276) != 0)?((IKReal)1/(x276)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x277)*(((((1000.00000000000)*((x268)*(x268))))+(((-1000.00000000000)*((x266)*(x266))))))), ((x277)*(((((1000.00000000000)*(pz)*(x266)))+(((321.000000000000)*(cj27)*(sj28)*(x268)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x278=((0.321000000000000)*(cj28));
IKReal x279=((0.400000000000000)+(x278));
IKReal x280=((32.1000000000000)*(cj28));
IKReal x281=((40.0000000000000)+(x280));
IKReal x282=((321.000000000000)*(cj27)*(pz)*(sj28));
IKReal x283=((400.000000000000)*(cj25)*(px));
IKReal x284=((400.000000000000)*(py)*(sj25));
IKReal x285=((321.000000000000)*(cj28)*(py)*(sj25));
IKReal x286=((321.000000000000)*(cj25)*(cj28)*(px));
IKReal x287=((x286)+(x285)+(x284)+(x283)+(x282));
IKReal x288=((x281)+(((-1.00000000000000)*(x287))));
IKReal x289=((IKabs(x288) != 0)?((IKReal)1/(x288)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x289)*(((((321.000000000000)*(cj27)*(sj28)*(x279)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(py)*(sj25)))))))))), ((x289)*(((((1000.00000000000)*((pz)*(pz))))+(((-1000.00000000000)*((x279)*(x279))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x290=(cj27)*(cj27);
IKReal x291=(sj28)*(sj28);
IKReal x292=((103041.000000000)*(x290)*(x291));
IKReal x293=((256800.000000000)*(cj28));
IKReal x294=(cj28)*(cj28);
IKReal x295=((103041.000000000)*(x294));
IKReal x296=((160000.000000000)+(x292)+(x293)+(x295));
IKReal x297=((IKabs(x296) != 0)?((IKReal)1/(x296)):(IKReal)1.0e30);
IKReal x298=((cj25)*(px));
IKReal x299=((py)*(sj25));
IKReal x300=((x298)+(x299));
IKReal x301=((0.100000000000000)+(((-1.00000000000000)*(x300))));
j26array[0]=IKatan2(((-1.00000000000000)*(x297)*(((((-321000.000000000)*(cj27)*(sj28)*(x301)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))), ((-1.00000000000000)*(x297)*(((((321000.000000000)*(cj27)*(pz)*(sj28)))+(((x301)*(((400000.000000000)+(((321000.000000000)*(cj28)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x19=((cj26)*(sj28));
IKReal x20=((cj27)*(cj28)*(sj26));
IKReal x21=((x19)+(x20));
IKReal x22=((-1.00000000000000)*(x21));
IKReal x23=((sj26)*(sj28));
IKReal x24=((cj26)*(cj27)*(cj28));
IKReal x25=((((-1.00000000000000)*(x24)))+(x23));
IKReal x26=((cj25)*(cj28)*(sj27));
IKReal x27=((sj25)*(x22));
IKReal x28=((x26)+(x27));
IKReal x29=((cj25)*(x22));
IKReal x30=((cj28)*(sj25)*(sj27));
IKReal x31=((((-1.00000000000000)*(x30)))+(x29));
IKReal x32=((cj25)*(sj26)*(sj27));
IKReal x33=((cj27)*(sj25));
IKReal x34=((((-1.00000000000000)*(x33)))+(x32));
IKReal x35=((sj25)*(sj26)*(sj27));
IKReal x36=((cj25)*(cj27));
IKReal x37=((x36)+(x35));
IKReal x38=((cj26)*(cj28));
IKReal x39=((cj27)*(x23));
IKReal x40=((((-1.00000000000000)*(x39)))+(x38));
IKReal x41=((cj28)*(sj26));
IKReal x42=((cj27)*(x19));
IKReal x43=((x42)+(x41));
IKReal x44=((-1.00000000000000)*(x43));
IKReal x45=((cj25)*(x40));
IKReal x46=((sj25)*(sj27)*(sj28));
IKReal x47=((((-1.00000000000000)*(x46)))+(x45));
IKReal x48=((sj25)*(x40));
IKReal x49=((cj25)*(sj27)*(sj28));
IKReal x50=((x48)+(x49));
new_r00=((((r00)*(x31)))+(((r10)*(x28)))+(((r20)*(x25))));
new_r01=((((r01)*(x31)))+(((r21)*(x25)))+(((r11)*(x28))));
new_r02=((((r22)*(x25)))+(((r12)*(x28)))+(((r02)*(x31))));
new_r10=((((r00)*(x34)))+(((cj26)*(r20)*(sj27)))+(((r10)*(x37))));
new_r11=((((cj26)*(r21)*(sj27)))+(((r01)*(x34)))+(((r11)*(x37))));
new_r12=((((cj26)*(r22)*(sj27)))+(((r02)*(x34)))+(((r12)*(x37))));
new_r20=((((r20)*(x44)))+(((r10)*(x50)))+(((r00)*(x47))));
new_r21=((((r11)*(x50)))+(((r01)*(x47)))+(((r21)*(x44))));
new_r22=((((r22)*(x44)))+(((r02)*(((((-1.00000000000000)*(x46)))+(x45)))))+(((r12)*(x50))));
{
IKReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
cj30array[0]=new_r22;
if( cj30array[0] >= -1.0001 && cj30array[0] <= 1.0001 )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
if( j30valid[0] && j30valid[1] && IKabs(cj30array[0]-cj30array[1]) < 0.0001 && IKabs(sj30array[0]-sj30array[1]) < 0.0001 )
    j30valid[1]=false;
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] ) { continue; }
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r10)*(new_r12)*(sj30)))+(((-1.00000000000000)*(new_r00)*(new_r02)*(sj30))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[7];
IKReal x51=((-1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x51;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x51;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j29array[2], cj29array[2], sj29array[2];
bool j29valid[2]={false};
IKReal x52=IKatan2(new_r02, new_r12);
j29array[0]=((-1.00000000000000)*(x52));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
j29array[1]=((3.14159265358979)+(((-1.00000000000000)*(x52))));
sj29array[1]=IKsin(j29array[1]);
cj29array[1]=IKcos(j29array[1]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
if( j29array[1] > IKPI )
    j29array[1]-=IK2PI;
else if( j29array[1] < -IKPI )
    j29array[1]+=IK2PI;
j29valid[1] = true;
if( j29valid[0] && j29valid[1] && IKabs(cj29array[0]-cj29array[1]) < 0.0001 && IKabs(sj29array[0]-sj29array[1]) < 0.0001 )
    j29valid[1]=false;
for(int ij29 = 0; ij29 < 2; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((-1.00000000000000)*(cj29)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj29)))), ((((new_r10)*(sj29)))+(((cj29)*(new_r00)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}
}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j29array[2], cj29array[2], sj29array[2];
bool j29valid[2]={false};
IKReal x53=IKatan2(new_r02, new_r12);
j29array[0]=((-1.00000000000000)*(x53));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
j29array[1]=((3.14159265358979)+(((-1.00000000000000)*(x53))));
sj29array[1]=IKsin(j29array[1]);
cj29array[1]=IKcos(j29array[1]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
if( j29array[1] > IKPI )
    j29array[1]-=IK2PI;
else if( j29array[1] < -IKPI )
    j29array[1]+=IK2PI;
j29valid[1] = true;
if( j29valid[0] && j29valid[1] && IKabs(cj29array[0]-cj29array[1]) < 0.0001 && IKabs(sj29array[0]-sj29array[1]) < 0.0001 )
    j29valid[1]=false;
for(int ij29 = 0; ij29 < 2; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r01)))+(((new_r11)*(sj29)))), ((((-1.00000000000000)*(cj29)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x54=((new_r00)*(new_r02)*(sj30));
IKReal x55=((new_r10)*(new_r12)*(sj30));
IKReal x56=((x55)+(x54));
IKReal x57=((-1.00000000000000)*(x56));
IKReal x58=((IKabs(x57) != 0)?((IKReal)1/(x57)):(IKReal)1.0e30);
j29array[0]=IKatan2(((cj30)*(new_r12)*(new_r20)*(x58)), ((cj30)*(new_r02)*(new_r20)*(x58)));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x59=((cj29)*(new_r12));
IKReal x60=((new_r02)*(sj29));
IKReal x61=((x59)+(((-1.00000000000000)*(x60))));
IKReal x62=((-1.00000000000000)+(new_r22));
IKReal x63=((new_r12)*(sj29));
IKReal x64=((cj29)*(new_r02));
IKReal x65=((x63)+(x64));
evalcond[0]=((IKfmod(((j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x62;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x61;
evalcond[5]=x61;
evalcond[6]=x65;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x62;
evalcond[10]=x65;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((-1.00000000000000)*(cj29)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj29)))), ((((new_r10)*(sj29)))+(((cj29)*(new_r00)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

} else
{
IKReal x66=((cj29)*(new_r12));
IKReal x67=((new_r02)*(sj29));
IKReal x68=((x66)+(((-1.00000000000000)*(x67))));
IKReal x69=((new_r12)*(sj29));
IKReal x70=((cj29)*(new_r02));
IKReal x71=((x70)+(x69));
evalcond[0]=((IKfmod(((-3.14159265358979)+(j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x68;
evalcond[5]=x68;
evalcond[6]=x71;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x71));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r01)))+(((new_r11)*(sj29)))), ((((-1.00000000000000)*(cj29)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
IKReal x72=((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30);
j31array[0]=IKatan2(((new_r21)*(x72)), ((-1.00000000000000)*(new_r20)*(x72)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj29)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((new_r21)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))), ((((cj29)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x73=(new_r12)*(new_r12);
IKReal x74=(new_r02)*(new_r02);
IKReal x75=((x74)+(x73));
IKReal x76=((IKabs(x75) != 0)?((IKReal)1/(x75)):(IKReal)1.0e30);
j29array[0]=IKatan2(((new_r12)*(sj30)*(x76)), ((new_r02)*(sj30)*(x76)));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x77=((cj29)*(new_r12));
IKReal x78=((new_r02)*(sj29));
IKReal x79=((((-1.00000000000000)*(x78)))+(x77));
IKReal x80=((-1.00000000000000)+(new_r22));
IKReal x81=((new_r12)*(sj29));
IKReal x82=((cj29)*(new_r02));
IKReal x83=((x82)+(x81));
evalcond[0]=((IKfmod(((j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x80;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x79;
evalcond[5]=x79;
evalcond[6]=x83;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x80;
evalcond[10]=x83;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((-1.00000000000000)*(cj29)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj29)))), ((((new_r10)*(sj29)))+(((cj29)*(new_r00)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

} else
{
IKReal x84=((cj29)*(new_r12));
IKReal x85=((new_r02)*(sj29));
IKReal x86=((x84)+(((-1.00000000000000)*(x85))));
IKReal x87=((new_r12)*(sj29));
IKReal x88=((cj29)*(new_r02));
IKReal x89=((x88)+(x87));
evalcond[0]=((IKfmod(((-3.14159265358979)+(j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x86;
evalcond[5]=x86;
evalcond[6]=x89;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x89));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r01)))+(((new_r11)*(sj29)))), ((((-1.00000000000000)*(cj29)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
IKReal x90=((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30);
j31array[0]=IKatan2(((new_r21)*(x90)), ((-1.00000000000000)*(new_r20)*(x90)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj29)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((new_r21)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))), ((((cj29)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
IKReal x91=((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30);
j31array[0]=IKatan2(((new_r21)*(x91)), ((-1.00000000000000)*(new_r20)*(x91)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x92=((new_r02)*(new_r11));
IKReal x93=((new_r01)*(new_r12));
IKReal x94=((x92)+(((-1.00000000000000)*(x93))));
IKReal x95=((IKabs(x94) != 0)?((IKReal)1/(x94)):(IKReal)1.0e30);
j29array[0]=IKatan2(((cj31)*(new_r12)*(x95)), ((cj31)*(new_r02)*(x95)));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x96=((new_r02)*(new_r10));
IKReal x97=((new_r00)*(new_r12));
IKReal x98=((x96)+(((-1.00000000000000)*(x97))));
IKReal x99=((IKabs(x98) != 0)?((IKReal)1/(x98)):(IKReal)1.0e30);
j29array[0]=IKatan2(((new_r12)*(sj31)*(x99)), ((new_r02)*(sj31)*(x99)));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x100=(new_r12)*(new_r12);
IKReal x101=(new_r02)*(new_r02);
IKReal x102=((x100)+(x101));
IKReal x103=((IKabs(x102) != 0)?((IKReal)1/(x102)):(IKReal)1.0e30);
j29array[0]=IKatan2(((new_r12)*(sj30)*(x103)), ((new_r02)*(sj30)*(x103)));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j25;
solution.basesol[1].foffset = j26;
solution.basesol[2].foffset = j27;
solution.basesol[3].foffset = j28;
solution.basesol[4].foffset = j29;
solution.basesol[5].foffset = j30;
solution.basesol[6].foffset = j31;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "ad4f1590d2a9b2079648c64e9db33191"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
