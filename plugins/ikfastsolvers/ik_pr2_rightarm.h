/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-11-03 15:53:09.389917
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
    x0=IKcos(j[3]);
    x1=IKcos(j[0]);
    x2=IKsin(j[5]);
    x3=IKcos(j[2]);
    x4=IKcos(j[5]);
    x5=IKsin(j[0]);
    x6=IKcos(j[4]);
    x7=IKsin(j[1]);
    x8=IKsin(j[2]);
    x9=IKsin(j[3]);
    x10=IKsin(j[4]);
    x11=IKcos(j[1]);
    x12=IKsin(j[6]);
    x13=IKcos(j[6]);
    eerot[0]=((((-0.999135601564979)*(x0)*(x1)*(x2)*(x3)*(x6)*(x7)))+(((0.999135601564979)*(x1)*(x10)*(x2)*(x7)*(x8)))+(((x0)*(x1)*(x11)*(x4)))+(((-0.0415698169996759)*(x1)*(x10)*(x2)*(x3)*(x7)))+(((0.0415698169996759)*(x0)*(x2)*(x3)*(x5)*(x6)))+(((-0.0415698169996759)*(x0)*(x1)*(x2)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x1)*(x11)*(x2)*(x6)*(x9)))+(((-0.999135601564979)*(x4)*(x5)*(x8)*(x9)))+(((-0.999135601564979)*(x1)*(x3)*(x4)*(x7)*(x9)))+(((0.0415698169996759)*(x3)*(x4)*(x5)*(x9)))+(((-0.0415698169996759)*(x1)*(x4)*(x7)*(x8)*(x9)))+(((-0.999135601564979)*(x10)*(x2)*(x3)*(x5)))+(((-0.0415698169996759)*(x10)*(x2)*(x5)*(x8)))+(((-0.999135601564979)*(x0)*(x2)*(x5)*(x6)*(x8))));
    eerot[1]=((((0.0415698169996759)*(x1)*(x10)*(x12)*(x3)*(x4)*(x7)))+(((0.0415698169996759)*(x10)*(x12)*(x4)*(x5)*(x8)))+(((-0.0415698169996759)*(x1)*(x12)*(x2)*(x7)*(x8)*(x9)))+(((-0.0415698169996759)*(x13)*(x5)*(x6)*(x8)))+(((x1)*(x10)*(x11)*(x13)*(x9)))+(((-0.999135601564979)*(x1)*(x10)*(x12)*(x4)*(x7)*(x8)))+(((-0.0415698169996759)*(x0)*(x10)*(x13)*(x3)*(x5)))+(((0.999135601564979)*(x10)*(x12)*(x3)*(x4)*(x5)))+(((-0.999135601564979)*(x13)*(x3)*(x5)*(x6)))+(((x1)*(x11)*(x12)*(x4)*(x6)*(x9)))+(((0.0415698169996759)*(x0)*(x1)*(x10)*(x13)*(x7)*(x8)))+(((0.0415698169996759)*(x0)*(x1)*(x12)*(x4)*(x6)*(x7)*(x8)))+(((0.0415698169996759)*(x12)*(x2)*(x3)*(x5)*(x9)))+(((0.999135601564979)*(x0)*(x1)*(x10)*(x13)*(x3)*(x7)))+(((x0)*(x1)*(x11)*(x12)*(x2)))+(((0.999135601564979)*(x0)*(x1)*(x12)*(x3)*(x4)*(x6)*(x7)))+(((-0.999135601564979)*(x12)*(x2)*(x5)*(x8)*(x9)))+(((0.999135601564979)*(x1)*(x13)*(x6)*(x7)*(x8)))+(((-0.999135601564979)*(x1)*(x12)*(x2)*(x3)*(x7)*(x9)))+(((0.999135601564979)*(x0)*(x12)*(x4)*(x5)*(x6)*(x8)))+(((0.999135601564979)*(x0)*(x10)*(x13)*(x5)*(x8)))+(((-0.0415698169996759)*(x1)*(x13)*(x3)*(x6)*(x7)))+(((-0.0415698169996759)*(x0)*(x12)*(x3)*(x4)*(x5)*(x6))));
    eerot[2]=((((0.999135601564979)*(x0)*(x1)*(x13)*(x3)*(x4)*(x6)*(x7)))+(((-0.0415698169996759)*(x0)*(x13)*(x3)*(x4)*(x5)*(x6)))+(((-0.999135601564979)*(x1)*(x13)*(x2)*(x3)*(x7)*(x9)))+(((0.0415698169996759)*(x1)*(x10)*(x13)*(x3)*(x4)*(x7)))+(((-0.999135601564979)*(x0)*(x1)*(x10)*(x12)*(x3)*(x7)))+(((0.0415698169996759)*(x13)*(x2)*(x3)*(x5)*(x9)))+(((-0.999135601564979)*(x1)*(x10)*(x13)*(x4)*(x7)*(x8)))+(((0.0415698169996759)*(x0)*(x1)*(x13)*(x4)*(x6)*(x7)*(x8)))+(((x1)*(x11)*(x13)*(x4)*(x6)*(x9)))+(((x0)*(x1)*(x11)*(x13)*(x2)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x12)*(x9)))+(((0.999135601564979)*(x0)*(x13)*(x4)*(x5)*(x6)*(x8)))+(((-0.999135601564979)*(x0)*(x10)*(x12)*(x5)*(x8)))+(((0.999135601564979)*(x12)*(x3)*(x5)*(x6)))+(((-0.999135601564979)*(x1)*(x12)*(x6)*(x7)*(x8)))+(((-0.999135601564979)*(x13)*(x2)*(x5)*(x8)*(x9)))+(((0.0415698169996759)*(x0)*(x10)*(x12)*(x3)*(x5)))+(((0.0415698169996759)*(x10)*(x13)*(x4)*(x5)*(x8)))+(((0.0415698169996759)*(x12)*(x5)*(x6)*(x8)))+(((-0.0415698169996759)*(x1)*(x13)*(x2)*(x7)*(x8)*(x9)))+(((-0.0415698169996759)*(x0)*(x1)*(x10)*(x12)*(x7)*(x8)))+(((0.0415698169996759)*(x1)*(x12)*(x3)*(x6)*(x7)))+(((0.999135601564979)*(x10)*(x13)*(x3)*(x4)*(x5))));
    eetrans[0]=((((0.400000000000000)*(x1)*(x11)))+(((-0.179844408281696)*(x0)*(x2)*(x5)*(x6)*(x8)))+(((-0.320722528102358)*(x5)*(x8)*(x9)))+(((-0.00748256705994167)*(x1)*(x10)*(x2)*(x3)*(x7)))+(((0.00748256705994167)*(x3)*(x4)*(x5)*(x9)))+(((-0.179844408281696)*(x4)*(x5)*(x8)*(x9)))+(((-0.00748256705994167)*(x1)*(x4)*(x7)*(x8)*(x9)))+(((0.00748256705994167)*(x0)*(x2)*(x3)*(x5)*(x6)))+(((-0.320722528102358)*(x1)*(x3)*(x7)*(x9)))+(((0.180000000000000)*(x0)*(x1)*(x11)*(x4)))+(((-0.00748256705994167)*(x0)*(x1)*(x2)*(x6)*(x7)*(x8)))+(((-0.179844408281696)*(x10)*(x2)*(x3)*(x5)))+(((0.321000000000000)*(x0)*(x1)*(x11)))+(((-0.179844408281696)*(x0)*(x1)*(x2)*(x3)*(x6)*(x7)))+(((0.100000000000000)*(x1)))+(((-0.00748256705994167)*(x10)*(x2)*(x5)*(x8)))+(((-0.180000000000000)*(x1)*(x11)*(x2)*(x6)*(x9)))+(((-0.179844408281696)*(x1)*(x3)*(x4)*(x7)*(x9)))+(((-0.0133439112568960)*(x1)*(x7)*(x8)*(x9)))+(((0.0133439112568960)*(x3)*(x5)*(x9)))+(((0.179844408281696)*(x1)*(x10)*(x2)*(x7)*(x8))));
    eerot[3]=((((-0.999135601564979)*(x3)*(x4)*(x5)*(x7)*(x9)))+(((-0.0415698169996759)*(x10)*(x2)*(x3)*(x5)*(x7)))+(((0.999135601564979)*(x1)*(x4)*(x8)*(x9)))+(((0.999135601564979)*(x10)*(x2)*(x5)*(x7)*(x8)))+(((-0.999135601564979)*(x0)*(x2)*(x3)*(x5)*(x6)*(x7)))+(((0.999135601564979)*(x1)*(x10)*(x2)*(x3)))+(((-1.00000000000000)*(x11)*(x2)*(x5)*(x6)*(x9)))+(((x0)*(x11)*(x4)*(x5)))+(((0.999135601564979)*(x0)*(x1)*(x2)*(x6)*(x8)))+(((-0.0415698169996759)*(x4)*(x5)*(x7)*(x8)*(x9)))+(((-0.0415698169996759)*(x0)*(x2)*(x5)*(x6)*(x7)*(x8)))+(((-0.0415698169996759)*(x0)*(x1)*(x2)*(x3)*(x6)))+(((0.0415698169996759)*(x1)*(x10)*(x2)*(x8)))+(((-0.0415698169996759)*(x1)*(x3)*(x4)*(x9))));
    eerot[4]=((((0.0415698169996759)*(x10)*(x12)*(x3)*(x4)*(x5)*(x7)))+(((-0.0415698169996759)*(x12)*(x2)*(x5)*(x7)*(x8)*(x9)))+(((-0.0415698169996759)*(x1)*(x10)*(x12)*(x4)*(x8)))+(((-0.999135601564979)*(x0)*(x1)*(x12)*(x4)*(x6)*(x8)))+(((-0.999135601564979)*(x1)*(x10)*(x12)*(x3)*(x4)))+(((x10)*(x11)*(x13)*(x5)*(x9)))+(((0.999135601564979)*(x13)*(x5)*(x6)*(x7)*(x8)))+(((-0.0415698169996759)*(x1)*(x12)*(x2)*(x3)*(x9)))+(((0.0415698169996759)*(x0)*(x12)*(x4)*(x5)*(x6)*(x7)*(x8)))+(((x0)*(x11)*(x12)*(x2)*(x5)))+(((0.0415698169996759)*(x0)*(x1)*(x12)*(x3)*(x4)*(x6)))+(((x11)*(x12)*(x4)*(x5)*(x6)*(x9)))+(((-0.999135601564979)*(x0)*(x1)*(x10)*(x13)*(x8)))+(((0.999135601564979)*(x0)*(x10)*(x13)*(x3)*(x5)*(x7)))+(((0.999135601564979)*(x0)*(x12)*(x3)*(x4)*(x5)*(x6)*(x7)))+(((0.999135601564979)*(x1)*(x13)*(x3)*(x6)))+(((0.999135601564979)*(x1)*(x12)*(x2)*(x8)*(x9)))+(((-0.999135601564979)*(x10)*(x12)*(x4)*(x5)*(x7)*(x8)))+(((-0.999135601564979)*(x12)*(x2)*(x3)*(x5)*(x7)*(x9)))+(((0.0415698169996759)*(x1)*(x13)*(x6)*(x8)))+(((0.0415698169996759)*(x0)*(x1)*(x10)*(x13)*(x3)))+(((0.0415698169996759)*(x0)*(x10)*(x13)*(x5)*(x7)*(x8)))+(((-0.0415698169996759)*(x13)*(x3)*(x5)*(x6)*(x7))));
    eerot[5]=((((-0.0415698169996759)*(x13)*(x2)*(x5)*(x7)*(x8)*(x9)))+(((x0)*(x11)*(x13)*(x2)*(x5)))+(((-0.0415698169996759)*(x0)*(x10)*(x12)*(x5)*(x7)*(x8)))+(((-0.0415698169996759)*(x0)*(x1)*(x10)*(x12)*(x3)))+(((-0.999135601564979)*(x1)*(x10)*(x13)*(x3)*(x4)))+(((-0.999135601564979)*(x1)*(x12)*(x3)*(x6)))+(((0.999135601564979)*(x0)*(x13)*(x3)*(x4)*(x5)*(x6)*(x7)))+(((-0.999135601564979)*(x0)*(x1)*(x13)*(x4)*(x6)*(x8)))+(((-0.999135601564979)*(x12)*(x5)*(x6)*(x7)*(x8)))+(((0.0415698169996759)*(x0)*(x1)*(x13)*(x3)*(x4)*(x6)))+(((0.999135601564979)*(x1)*(x13)*(x2)*(x8)*(x9)))+(((-0.0415698169996759)*(x1)*(x13)*(x2)*(x3)*(x9)))+(((0.0415698169996759)*(x12)*(x3)*(x5)*(x6)*(x7)))+(((0.0415698169996759)*(x0)*(x13)*(x4)*(x5)*(x6)*(x7)*(x8)))+(((-0.0415698169996759)*(x1)*(x10)*(x13)*(x4)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x5)*(x9)))+(((-0.999135601564979)*(x10)*(x13)*(x4)*(x5)*(x7)*(x8)))+(((-0.0415698169996759)*(x1)*(x12)*(x6)*(x8)))+(((x11)*(x13)*(x4)*(x5)*(x6)*(x9)))+(((-0.999135601564979)*(x0)*(x10)*(x12)*(x3)*(x5)*(x7)))+(((0.0415698169996759)*(x10)*(x13)*(x3)*(x4)*(x5)*(x7)))+(((-0.999135601564979)*(x13)*(x2)*(x3)*(x5)*(x7)*(x9)))+(((0.999135601564979)*(x0)*(x1)*(x10)*(x12)*(x8))));
    eetrans[1]=((-0.188000000000000)+(((0.320722528102358)*(x1)*(x8)*(x9)))+(((0.179844408281696)*(x10)*(x2)*(x5)*(x7)*(x8)))+(((-0.179844408281696)*(x3)*(x4)*(x5)*(x7)*(x9)))+(((-0.180000000000000)*(x11)*(x2)*(x5)*(x6)*(x9)))+(((-0.00748256705994167)*(x1)*(x3)*(x4)*(x9)))+(((0.00748256705994167)*(x1)*(x10)*(x2)*(x8)))+(((-0.320722528102358)*(x3)*(x5)*(x7)*(x9)))+(((-0.0133439112568960)*(x1)*(x3)*(x9)))+(((-0.179844408281696)*(x0)*(x2)*(x3)*(x5)*(x6)*(x7)))+(((0.100000000000000)*(x5)))+(((0.180000000000000)*(x0)*(x11)*(x4)*(x5)))+(((-0.00748256705994167)*(x0)*(x2)*(x5)*(x6)*(x7)*(x8)))+(((0.179844408281696)*(x1)*(x4)*(x8)*(x9)))+(((0.179844408281696)*(x0)*(x1)*(x2)*(x6)*(x8)))+(((-0.0133439112568960)*(x5)*(x7)*(x8)*(x9)))+(((0.321000000000000)*(x0)*(x11)*(x5)))+(((-0.00748256705994167)*(x4)*(x5)*(x7)*(x8)*(x9)))+(((-0.00748256705994167)*(x10)*(x2)*(x3)*(x5)*(x7)))+(((0.400000000000000)*(x11)*(x5)))+(((0.179844408281696)*(x1)*(x10)*(x2)*(x3)))+(((-0.00748256705994167)*(x0)*(x1)*(x2)*(x3)*(x6))));
    eerot[6]=((((-0.0415698169996759)*(x0)*(x11)*(x2)*(x6)*(x8)))+(((x2)*(x6)*(x7)*(x9)))+(((-0.999135601564979)*(x11)*(x3)*(x4)*(x9)))+(((0.999135601564979)*(x10)*(x11)*(x2)*(x8)))+(((-0.0415698169996759)*(x10)*(x11)*(x2)*(x3)))+(((-1.00000000000000)*(x0)*(x4)*(x7)))+(((-0.0415698169996759)*(x11)*(x4)*(x8)*(x9)))+(((-0.999135601564979)*(x0)*(x11)*(x2)*(x3)*(x6))));
    eerot[7]=((((-0.999135601564979)*(x10)*(x11)*(x12)*(x4)*(x8)))+(((0.0415698169996759)*(x0)*(x10)*(x11)*(x13)*(x8)))+(((-1.00000000000000)*(x0)*(x12)*(x2)*(x7)))+(((0.999135601564979)*(x11)*(x13)*(x6)*(x8)))+(((0.999135601564979)*(x0)*(x11)*(x12)*(x3)*(x4)*(x6)))+(((-1.00000000000000)*(x10)*(x13)*(x7)*(x9)))+(((-0.999135601564979)*(x11)*(x12)*(x2)*(x3)*(x9)))+(((0.0415698169996759)*(x0)*(x11)*(x12)*(x4)*(x6)*(x8)))+(((-0.0415698169996759)*(x11)*(x12)*(x2)*(x8)*(x9)))+(((-0.0415698169996759)*(x11)*(x13)*(x3)*(x6)))+(((0.0415698169996759)*(x10)*(x11)*(x12)*(x3)*(x4)))+(((0.999135601564979)*(x0)*(x10)*(x11)*(x13)*(x3)))+(((-1.00000000000000)*(x12)*(x4)*(x6)*(x7)*(x9))));
    eerot[8]=((((-0.999135601564979)*(x10)*(x11)*(x13)*(x4)*(x8)))+(((0.999135601564979)*(x0)*(x11)*(x13)*(x3)*(x4)*(x6)))+(((-1.00000000000000)*(x0)*(x13)*(x2)*(x7)))+(((0.0415698169996759)*(x10)*(x11)*(x13)*(x3)*(x4)))+(((x10)*(x12)*(x7)*(x9)))+(((0.0415698169996759)*(x0)*(x11)*(x13)*(x4)*(x6)*(x8)))+(((-0.0415698169996759)*(x11)*(x13)*(x2)*(x8)*(x9)))+(((-1.00000000000000)*(x13)*(x4)*(x6)*(x7)*(x9)))+(((-0.999135601564979)*(x0)*(x10)*(x11)*(x12)*(x3)))+(((-0.999135601564979)*(x11)*(x12)*(x6)*(x8)))+(((-0.0415698169996759)*(x0)*(x10)*(x11)*(x12)*(x8)))+(((0.0415698169996759)*(x11)*(x12)*(x3)*(x6)))+(((-0.999135601564979)*(x11)*(x13)*(x2)*(x3)*(x9))));
    eetrans[2]=((((-0.179844408281696)*(x11)*(x3)*(x4)*(x9)))+(((-0.179844408281696)*(x0)*(x11)*(x2)*(x3)*(x6)))+(((0.180000000000000)*(x2)*(x6)*(x7)*(x9)))+(((-0.180000000000000)*(x0)*(x4)*(x7)))+(((-0.321000000000000)*(x0)*(x7)))+(((-0.0133439112568960)*(x11)*(x8)*(x9)))+(((-0.00748256705994167)*(x10)*(x11)*(x2)*(x3)))+(((-0.00748256705994167)*(x0)*(x11)*(x2)*(x6)*(x8)))+(((-0.320722528102358)*(x11)*(x3)*(x9)))+(((0.179844408281696)*(x10)*(x11)*(x2)*(x8)))+(((-0.00748256705994167)*(x11)*(x4)*(x8)*(x9)))+(((-0.400000000000000)*(x7))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
    r00 = eerot[0*3+0];
    r01 = eerot[0*3+1];
    r02 = eerot[0*3+2];
    r10 = eerot[1*3+0];
    r11 = eerot[1*3+1];
    r12 = eerot[1*3+2];
    r20 = eerot[2*3+0];
    r21 = eerot[2*3+1];
    r22 = eerot[2*3+2];
    px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
    
    new_r00=r00;
    new_r01=r01;
    new_r02=r02;
    new_px=((px)+(((-0.180000000000000)*(r00))));
    new_r10=r10;
    new_r11=r11;
    new_r12=r12;
    new_py=((0.188000000000000)+(py)+(((-0.180000000000000)*(r10))));
    new_r20=r20;
    new_r21=r21;
    new_r22=r22;
    new_pz=((pz)+(((-0.180000000000000)*(r20))));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        IKReal coniccoeffs[6], j0array[4];
        int numsolutions;
        IKReal x0=(px)*(px);
        IKReal x1=(py)*(py);
        IKReal x2=(sj2)*(sj2);
        IKReal x3=(cj2)*(cj2);
        IKReal x4=(pz)*(pz);
        IKReal x5=(px)*(px)*(px);
        IKReal x6=(py)*(py)*(py);
        IKReal x7=(px)*(px)*(px)*(px);
        IKReal x8=((0.0659462400000000)*(x0));
        IKReal x9=(py)*(py)*(py)*(py);
        IKReal x10=(pz)*(pz)*(pz)*(pz);
        coniccoeffs[0]=((((7.12239870527660e-6)*(x1)*(x3)))+(x8)+(((-0.0659462400000000)*(x1)))+(((0.00411451760129472)*(x1)*(x2)))+(((0.000342375436246816)*(cj2)*(sj2)*(x0)))+(((-0.000342375436246816)*(cj2)*(sj2)*(x1)))+(((-7.12239870527660e-6)*(x0)*(x3)))+(((-0.00411451760129472)*(x0)*(x2))));
        coniccoeffs[1]=((((0.000342375436246816)*(cj2)*(px)*(py)*(sj2)))+(((0.0659462400000000)*(px)*(py)))+(((-0.00411451760129472)*(px)*(py)*(x2)))+(((-7.12239870527660e-6)*(px)*(py)*(x3))));
        coniccoeffs[2]=((((0.0205725880064736)*(px)*(x0)*(x2)))+(((0.0205725880064736)*(px)*(x1)*(x2)))+(((3.56119935263830e-5)*(px)*(x1)*(x3)))+(((3.56119935263830e-5)*(px)*(x0)*(x3)))+(((0.0205725880064736)*(px)*(x2)*(x4)))+(((-0.00520570824174609)*(px)*(x2)))+(((3.56119935263830e-5)*(px)*(x3)*(x4)))+(((-0.00171187718123408)*(cj2)*(px)*(sj2)*(x4)))+(((-0.00171187718123408)*(cj2)*(px)*(sj2)*(x1)))+(((-0.00171187718123408)*(cj2)*(px)*(sj2)*(x0)))+(((-9.01129445390948e-6)*(px)*(x3)))+(((0.000433175113816652)*(cj2)*(px)*(sj2))));
        coniccoeffs[3]=0;
        coniccoeffs[4]=((((0.0205725880064736)*(py)*(x0)*(x2)))+(((3.56119935263830e-5)*(py)*(x1)*(x3)))+(((0.0205725880064736)*(py)*(x2)*(x4)))+(((0.0205725880064736)*(py)*(x1)*(x2)))+(((0.000433175113816652)*(cj2)*(py)*(sj2)))+(((-9.01129445390948e-6)*(py)*(x3)))+(((-0.00520570824174609)*(py)*(x2)))+(((3.56119935263830e-5)*(py)*(x3)*(x4)))+(((3.56119935263830e-5)*(py)*(x0)*(x3)))+(((-0.00171187718123408)*(cj2)*(py)*(sj2)*(x0)))+(((-0.00171187718123408)*(cj2)*(py)*(sj2)*(x1)))+(((-0.00171187718123408)*(cj2)*(py)*(sj2)*(x4))));
        coniccoeffs[5]=((((3.41250560287954e-7)*(x3)))+(((-0.102862940032368)*(x10)*(x2)))+(((0.0520570824174609)*(x0)*(x2)))+(((0.00855938590617039)*(cj2)*(sj2)*(x9)))+(((0.00855938590617039)*(cj2)*(sj2)*(x7)))+(((-0.00433175113816652)*(cj2)*(sj2)*(x4)))+(((-0.00433175113816652)*(cj2)*(sj2)*(x0)))+(((-0.000178059967631915)*(x3)*(x9)))+(((-0.000178059967631915)*(x3)*(x7)))+(((-0.102862940032368)*(x2)*(x7)))+(((-0.102862940032368)*(x2)*(x9)))+(((0.0479425648161662)*(x1)*(x2)))+(((-0.205725880064736)*(x0)*(x1)*(x2)))+(((9.01129445390948e-5)*(x0)*(x3)))+(((-0.205725880064736)*(x1)*(x2)*(x4)))+(((-0.000356119935263830)*(x0)*(x1)*(x3)))+(((-0.00398937570191971)*(cj2)*(sj2)*(x1)))+(((0.0171187718123408)*(cj2)*(sj2)*(x1)*(x4)))+(((-1.00000000000000)*(x8)))+(((-0.000356119935263830)*(x0)*(x3)*(x4)))+(((0.0520570824174609)*(x2)*(x4)))+(((9.01129445390948e-5)*(x3)*(x4)))+(((-0.205725880064736)*(x0)*(x2)*(x4)))+(((-0.000178059967631915)*(x10)*(x3)))+(((8.29905458338182e-5)*(x1)*(x3)))+(((0.00855938590617039)*(cj2)*(sj2)*(x10)))+(((-0.000356119935263830)*(x1)*(x3)*(x4)))+(((0.0171187718123408)*(cj2)*(sj2)*(x0)*(x4)))+(((0.0171187718123408)*(cj2)*(sj2)*(x0)*(x1)))+(((0.000197136034481791)*(x2)))+(((-1.64039973445324e-5)*(cj2)*(sj2))));
        conicsolver(coniccoeffs,j0array,numsolutions);
        for(int ij0 = 0; ij0 < numsolutions; ++ij0)
        {
            j0 = j0array[ij0]; cj0 = IKcos(j0); sj0 = IKsin(j0);
        
        {
            IKReal j3eval[1];
            j3eval[0]=((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))));
            if( IKabs(j3eval[0]) < 0.000001  )
            {
                {
                IKReal evalcond[1];
                    evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j3array[2], cj3array[2], sj3array[2];
                    bool j3valid[2]={false};
                    sj3array[0]=((((5.76460752303423e+17)*(cj0)*(py)))+(((-5.76460752303423e+17)*(px)*(sj0))));
                    if( sj3array[0] >= -1.0001 && sj3array[0] <= 1.0001 )
                    {
                        j3valid[0] = j3valid[1] = true;
                        j3array[0] = IKasin(sj3array[0]);
                        cj3array[0] = IKcos(j3array[0]);
                        sj3array[1] = sj3array[0];
                        j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
                        cj3array[1] = -cj3array[0];
                    }
                    else if( isnan(sj3array[0]) )
                    {
                        // probably any value will work
                        j3valid[0] = true;
                        cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
                    }
                    if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                        j3valid[1]=false;
                    for(int ij3 = 0; ij3 < 2; ++ij3)
                    {
                    if( !j3valid[ij3] ) { continue; }
                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                    
                    {
                        IKReal j1eval[1];
                        j1eval[0]=((0.160000000000000)+(((0.103041000000000)*((cj3)*(cj3))))+(((0.256800000000000)*(cj3)))+(((0.103041000000000)*((sj3)*(sj3)))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j1eval[1];
                                    j1eval[0]=((((0.321000000000000)*(cj3)*(pz)))+(((-0.321000000000000)*(py)*(sj0)*(sj3)))+(((-0.321000000000000)*(cj0)*(px)*(sj3)))+(((0.400000000000000)*(pz)))+(((0.0321000000000000)*(sj3))));
                                    if( IKabs(j1eval[0]) < 0.000001  )
                                    {
                                        {
                                        IKReal evalcond[3];
                                            evalcond[0]=((IKabs(((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))))))+(IKabs(pz)));
                                            evalcond[1]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
                                            evalcond[2]=((0.509841000000000)+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((0.200000000000000)*(cj0)*(px))));
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            cj1array[0]=((-0.138696255201110)+(((1.38696255201110)*(cj0)*(px)))+(((1.38696255201110)*(py)*(sj0))));
                                            if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKacos(cj1array[0]);
                                                sj1array[0] = IKsin(j1array[0]);
                                                cj1array[1] = cj1array[0];
                                                j1array[1] = -j1array[0];
                                                sj1array[1] = -sj1array[0];
                                            }
                                            else if( isnan(cj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[1];
                                                j1eval[0]=((((-0.160000000000000)*(cj0)))+(((-0.103041000000000)*(cj0)*((cj3)*(cj3))))+(((-0.256800000000000)*(cj0)*(cj3)))+(((-0.103041000000000)*(cj0)*((sj3)*(sj3)))));
                                                if( IKabs(j1eval[0]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[4];
                                                        IKReal x74=((1.73472347597681e-18)*(sj3));
                                                        IKReal x75=((px)+(x74));
                                                        evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x75;
                                                        evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                        evalcond[3]=((-1.00000000000000)*(x75));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[1];
                                                            j1eval[0]=((0.0100000000000000)+(((-0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                            {
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[1];
                                                                        j1eval[0]=((((0.321000000000000)*(cj3)*(pz)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(py)*(sj3)))+(((0.0321000000000000)*(sj3))));
                                                                        if( IKabs(j1eval[0]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[4];
                                                                                evalcond[0]=((IKabs(((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))))))+(IKabs(pz)));
                                                                                evalcond[1]=px;
                                                                                evalcond[2]=((0.509841000000000)+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=((-1.00000000000000)*(px));
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                cj1array[0]=((-0.138696255201110)+(((1.38696255201110)*(py))));
                                                                                if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKacos(cj1array[0]);
                                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                                    cj1array[1] = cj1array[0];
                                                                                    j1array[1] = -j1array[0];
                                                                                    sj1array[1] = -sj1array[0];
                                                                                }
                                                                                else if( isnan(cj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[1];
                                                                                    j1eval[0]=((0.0400000000000000)+(((-0.400000000000000)*(py)))+(((-0.321000000000000)*(pz)*(sj3)))+(((-0.321000000000000)*(cj3)*(py)))+(((0.0321000000000000)*(cj3))));
                                                                                    if( IKabs(j1eval[0]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]={false};
                                                                                        IKReal x76=((0.321000000000000)*(cj3));
                                                                                        IKReal x77=((0.400000000000000)+(x76));
                                                                                        IKReal x78=((0.0321000000000000)*(cj3));
                                                                                        IKReal x79=((0.0400000000000000)+(x78));
                                                                                        IKReal x80=((py)*(x76));
                                                                                        IKReal x81=((0.400000000000000)*(py));
                                                                                        IKReal x82=((0.321000000000000)*(pz)*(sj3));
                                                                                        IKReal x83=((x82)+(x80)+(x81));
                                                                                        IKReal x84=((x79)+(((-1.00000000000000)*(x83))));
                                                                                        IKReal x85=((IKabs(x84) != 0)?((IKReal)1/(x84)):(IKReal)1.0e30);
                                                                                        j1array[0]=IKatan2(((x85)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj3)*(x77)))))), ((x85)*(((((-1.00000000000000)*((x77)*(x77))))+((pz)*(pz))))));
                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if( j1array[0] > IKPI )
                                                                                            j1array[0]-=IK2PI;
                                                                                        else if( j1array[0] < -IKPI )
                                                                                            j1array[0]+=IK2PI;
                                                                                        j1valid[0] = true;
                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            IKReal x86=((0.321000000000000)*(cj3)*(pz));
                                                                            IKReal x87=((0.400000000000000)*(pz));
                                                                            IKReal x88=((0.0321000000000000)*(sj3));
                                                                            IKReal x89=((x88)+(x86)+(x87));
                                                                            IKReal x90=((0.321000000000000)*(py)*(sj3));
                                                                            IKReal x91=((x89)+(((-1.00000000000000)*(x90))));
                                                                            IKReal x92=((IKabs(x91) != 0)?((IKReal)1/(x91)):(IKReal)1.0e30);
                                                                            j1array[0]=IKatan2(((x92)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((-1.00000000000000)*(x92)*(((((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                IKReal x93=((0.100000000000000)+(((-1.00000000000000)*(py))));
                                                                IKReal x94=x1;
                                                                IKReal x95=x4;
                                                                IKReal x96=((0.0100000000000000)+(x95)+(x94));
                                                                IKReal x97=((0.200000000000000)*(py));
                                                                IKReal x98=((x96)+(((-1.00000000000000)*(x97))));
                                                                IKReal x99=((IKabs(x98) != 0)?((IKReal)1/(x98)):(IKReal)1.0e30);
                                                                j1array[0]=IKatan2(((x99)*(((((-1.00000000000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((0.321000000000000)*(sj3)*(x93)))))), ((x99)*(((((-1.00000000000000)*(x93)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-0.321000000000000)*(pz)*(sj3)))))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x100=((1.73472347597681e-18)*(sj3));
                                                        IKReal x101=((x100)+(((-1.00000000000000)*(px))));
                                                        evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x101;
                                                        evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(py)))+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                        evalcond[3]=x101;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[1];
                                                            j1eval[0]=((0.0100000000000000)+(((0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                            {
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[1];
                                                                        j1eval[0]=((((0.321000000000000)*(py)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((0.400000000000000)*(pz)))+(((0.0321000000000000)*(sj3))));
                                                                        if( IKabs(j1eval[0]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[4];
                                                                                IKReal x102=((-1.00000000000000)*(px));
                                                                                evalcond[0]=((IKabs(((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))))))+(IKabs(pz)));
                                                                                evalcond[1]=x102;
                                                                                evalcond[2]=((0.509841000000000)+(((-0.200000000000000)*(py)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=x102;
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                cj1array[0]=((-0.138696255201110)+(((-1.38696255201110)*(py))));
                                                                                if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKacos(cj1array[0]);
                                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                                    cj1array[1] = cj1array[0];
                                                                                    j1array[1] = -j1array[0];
                                                                                    sj1array[1] = -sj1array[0];
                                                                                }
                                                                                else if( isnan(cj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[1];
                                                                                    j1eval[0]=((0.0400000000000000)+(((0.321000000000000)*(cj3)*(py)))+(((-0.321000000000000)*(pz)*(sj3)))+(((0.400000000000000)*(py)))+(((0.0321000000000000)*(cj3))));
                                                                                    if( IKabs(j1eval[0]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]={false};
                                                                                        IKReal x103=((0.321000000000000)*(cj3));
                                                                                        IKReal x104=((0.400000000000000)+(x103));
                                                                                        IKReal x105=((py)*(x103));
                                                                                        IKReal x106=((0.400000000000000)*(py));
                                                                                        IKReal x107=((0.0321000000000000)*(cj3));
                                                                                        IKReal x108=((0.0400000000000000)+(x105)+(x106)+(x107));
                                                                                        IKReal x109=((0.321000000000000)*(pz)*(sj3));
                                                                                        IKReal x110=((((-1.00000000000000)*(x109)))+(x108));
                                                                                        IKReal x111=((IKabs(x110) != 0)?((IKReal)1/(x110)):(IKReal)1.0e30);
                                                                                        j1array[0]=IKatan2(((x111)*(((((0.321000000000000)*(sj3)*(x104)))+(((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))))), ((x111)*((((pz)*(pz))+(((-1.00000000000000)*((x104)*(x104))))))));
                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if( j1array[0] > IKPI )
                                                                                            j1array[0]-=IK2PI;
                                                                                        else if( j1array[0] < -IKPI )
                                                                                            j1array[0]+=IK2PI;
                                                                                        j1valid[0] = true;
                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            IKReal x112=((0.321000000000000)*(py)*(sj3));
                                                                            IKReal x113=((0.321000000000000)*(cj3)*(pz));
                                                                            IKReal x114=((0.400000000000000)*(pz));
                                                                            IKReal x115=((0.0321000000000000)*(sj3));
                                                                            IKReal x116=((x113)+(x112)+(x115)+(x114));
                                                                            IKReal x117=((IKabs(x116) != 0)?((IKReal)1/(x116)):(IKReal)1.0e30);
                                                                            j1array[0]=IKatan2(((x117)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x117)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))+(((-0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                IKReal x118=((0.200000000000000)*(py));
                                                                IKReal x119=x1;
                                                                IKReal x120=x4;
                                                                IKReal x121=((0.0100000000000000)+(x120)+(x119)+(x118));
                                                                IKReal x122=((IKabs(x121) != 0)?((IKReal)1/(x121)):(IKReal)1.0e30);
                                                                IKReal x123=((0.100000000000000)+(py));
                                                                IKReal x124=((0.321000000000000)*(cj3));
                                                                IKReal x125=((0.400000000000000)+(x124));
                                                                j1array[0]=IKatan2(((-1.00000000000000)*(x122)*(((((pz)*(x125)))+(((-0.321000000000000)*(sj3)*(x123)))))), ((-1.00000000000000)*(x122)*(((((x123)*(x125)))+(((0.321000000000000)*(pz)*(sj3)))))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        continue;
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    IKReal x126=((0.100000000000000)*(cj0));
                                                    IKReal x127=((1.73472347597681e-18)*(sj0)*(sj3));
                                                    IKReal x128=((x127)+(px));
                                                    IKReal x129=((((-1.00000000000000)*(x128)))+(x126));
                                                    IKReal x130=(cj3)*(cj3);
                                                    IKReal x131=((0.103041000000000)*(cj0)*(x130));
                                                    IKReal x132=((0.256800000000000)*(cj0)*(cj3));
                                                    IKReal x133=((0.160000000000000)*(cj0));
                                                    IKReal x134=(sj3)*(sj3);
                                                    IKReal x135=((0.103041000000000)*(cj0)*(x134));
                                                    IKReal x136=((x135)+(x131)+(x133)+(x132));
                                                    IKReal x137=((-1.00000000000000)*(x136));
                                                    IKReal x138=((IKabs(x137) != 0)?((IKReal)1/(x137)):(IKReal)1.0e30);
                                                    j1array[0]=IKatan2(((x138)*(((((-0.321000000000000)*(sj3)*(x129)))+(((pz)*(((((0.400000000000000)*(cj0)))+(((0.321000000000000)*(cj0)*(cj3)))))))))), ((x138)*(((((0.321000000000000)*(cj0)*(pz)*(sj3)))+(((x129)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        IKReal x139=((0.321000000000000)*(cj3)*(pz));
                                        IKReal x140=((0.400000000000000)*(pz));
                                        IKReal x141=((0.0321000000000000)*(sj3));
                                        IKReal x142=((x140)+(x141)+(x139));
                                        IKReal x143=((0.321000000000000)*(cj0)*(px)*(sj3));
                                        IKReal x144=((0.321000000000000)*(py)*(sj0)*(sj3));
                                        IKReal x145=((x143)+(x144));
                                        IKReal x146=((((-1.00000000000000)*(x145)))+(x142));
                                        IKReal x147=((IKabs(x146) != 0)?((IKReal)1/(x146)):(IKReal)1.0e30);
                                        j1array[0]=IKatan2(((x147)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((-1.00000000000000)*(x147)*(((((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x148=(cj3)*(cj3);
                            IKReal x149=((0.103041000000000)*(x148));
                            IKReal x150=((0.256800000000000)*(cj3));
                            IKReal x151=(sj3)*(sj3);
                            IKReal x152=((0.103041000000000)*(x151));
                            IKReal x153=((0.160000000000000)+(x152)+(x150)+(x149));
                            IKReal x154=((IKabs(x153) != 0)?((IKReal)1/(x153)):(IKReal)1.0e30);
                            IKReal x155=((0.321000000000000)*(cj3));
                            IKReal x156=((0.400000000000000)+(x155));
                            IKReal x157=((cj0)*(px));
                            IKReal x158=((py)*(sj0));
                            IKReal x159=((x157)+(x158));
                            IKReal x160=((0.100000000000000)+(((-1.00000000000000)*(x159))));
                            j1array[0]=IKatan2(((-1.00000000000000)*(x154)*(((((-0.321000000000000)*(sj3)*(x160)))+(((pz)*(x156)))))), ((-1.00000000000000)*(x154)*(((((x156)*(x160)))+(((0.321000000000000)*(pz)*(sj3)))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            for(int ij1 = 0; ij1 < 1; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                    }
                    }
                
                } else
                {
                    evalcond[0]=((IKfmod(((-3.18317445236063)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j3array[2], cj3array[2], sj3array[2];
                    bool j3valid[2]={false};
                    sj3array[0]=((((-5.24055229366749e+16)*(px)*(sj0)))+(((5.24055229366749e+16)*(cj0)*(py))));
                    if( sj3array[0] >= -1.0001 && sj3array[0] <= 1.0001 )
                    {
                        j3valid[0] = j3valid[1] = true;
                        j3array[0] = IKasin(sj3array[0]);
                        cj3array[0] = IKcos(j3array[0]);
                        sj3array[1] = sj3array[0];
                        j3array[1] = j3array[0] > 0 ? (IKPI-j3array[0]) : (-IKPI-j3array[0]);
                        cj3array[1] = -cj3array[0];
                    }
                    else if( isnan(sj3array[0]) )
                    {
                        // probably any value will work
                        j3valid[0] = true;
                        cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
                    }
                    if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                        j3valid[1]=false;
                    for(int ij3 = 0; ij3 < 2; ++ij3)
                    {
                    if( !j3valid[ij3] ) { continue; }
                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                    
                    {
                        IKReal j1eval[1];
                        j1eval[0]=((0.160000000000000)+(((0.103041000000000)*((cj3)*(cj3))))+(((0.256800000000000)*(cj3)))+(((0.103041000000000)*((sj3)*(sj3)))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j1eval[1];
                                    j1eval[0]=((((0.321000000000000)*(cj0)*(px)*(sj3)))+(((0.321000000000000)*(py)*(sj0)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((-0.0321000000000000)*(sj3)))+(((0.400000000000000)*(pz))));
                                    if( IKabs(j1eval[0]) < 0.000001  )
                                    {
                                        {
                                        IKReal evalcond[3];
                                            evalcond[0]=((IKabs(((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))))))+(IKabs(pz)));
                                            evalcond[1]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
                                            evalcond[2]=((0.509841000000000)+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((0.200000000000000)*(cj0)*(px))));
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            cj1array[0]=((-0.138696255201110)+(((1.38696255201110)*(cj0)*(px)))+(((1.38696255201110)*(py)*(sj0))));
                                            if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKacos(cj1array[0]);
                                                sj1array[0] = IKsin(j1array[0]);
                                                cj1array[1] = cj1array[0];
                                                j1array[1] = -j1array[0];
                                                sj1array[1] = -sj1array[0];
                                            }
                                            else if( isnan(cj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[1];
                                                j1eval[0]=((((-0.160000000000000)*(cj0)))+(((-0.103041000000000)*(cj0)*((cj3)*(cj3))))+(((-0.256800000000000)*(cj0)*(cj3)))+(((-0.103041000000000)*(cj0)*((sj3)*(sj3)))));
                                                if( IKabs(j1eval[0]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[4];
                                                        IKReal x161=((1.90819582357449e-17)*(sj3));
                                                        IKReal x162=((x161)+(px));
                                                        evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x162;
                                                        evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                        evalcond[3]=((-1.00000000000000)*(x162));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[1];
                                                            j1eval[0]=((0.0100000000000000)+(((-0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                            {
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[1];
                                                                        j1eval[0]=((((0.321000000000000)*(py)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((-0.0321000000000000)*(sj3)))+(((0.400000000000000)*(pz))));
                                                                        if( IKabs(j1eval[0]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[4];
                                                                                evalcond[0]=((IKabs(((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))))))+(IKabs(pz)));
                                                                                evalcond[1]=px;
                                                                                evalcond[2]=((0.509841000000000)+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=((-1.00000000000000)*(px));
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                cj1array[0]=((-0.138696255201110)+(((1.38696255201110)*(py))));
                                                                                if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKacos(cj1array[0]);
                                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                                    cj1array[1] = cj1array[0];
                                                                                    j1array[1] = -j1array[0];
                                                                                    sj1array[1] = -sj1array[0];
                                                                                }
                                                                                else if( isnan(cj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[1];
                                                                                    j1eval[0]=((0.0400000000000000)+(((-0.400000000000000)*(py)))+(((-0.321000000000000)*(cj3)*(py)))+(((0.321000000000000)*(pz)*(sj3)))+(((0.0321000000000000)*(cj3))));
                                                                                    if( IKabs(j1eval[0]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]={false};
                                                                                        IKReal x163=((0.321000000000000)*(cj3));
                                                                                        IKReal x164=((0.400000000000000)+(x163));
                                                                                        IKReal x165=((0.321000000000000)*(pz)*(sj3));
                                                                                        IKReal x166=((0.0321000000000000)*(cj3));
                                                                                        IKReal x167=((0.0400000000000000)+(x166)+(x165));
                                                                                        IKReal x168=((py)*(x163));
                                                                                        IKReal x169=((0.400000000000000)*(py));
                                                                                        IKReal x170=((x168)+(x169));
                                                                                        IKReal x171=((((-1.00000000000000)*(x170)))+(x167));
                                                                                        IKReal x172=((IKabs(x171) != 0)?((IKReal)1/(x171)):(IKReal)1.0e30);
                                                                                        j1array[0]=IKatan2(((-1.00000000000000)*(x172)*(((((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj3)*(x164)))))), ((x172)*((((pz)*(pz))+(((-1.00000000000000)*((x164)*(x164))))))));
                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if( j1array[0] > IKPI )
                                                                                            j1array[0]-=IK2PI;
                                                                                        else if( j1array[0] < -IKPI )
                                                                                            j1array[0]+=IK2PI;
                                                                                        j1valid[0] = true;
                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            IKReal x173=((0.321000000000000)*(py)*(sj3));
                                                                            IKReal x174=((0.321000000000000)*(cj3)*(pz));
                                                                            IKReal x175=((0.400000000000000)*(pz));
                                                                            IKReal x176=((x173)+(x175)+(x174));
                                                                            IKReal x177=((0.0321000000000000)*(sj3));
                                                                            IKReal x178=((((-1.00000000000000)*(x177)))+(x176));
                                                                            IKReal x179=((IKabs(x178) != 0)?((IKReal)1/(x178)):(IKReal)1.0e30);
                                                                            j1array[0]=IKatan2(((x179)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x179)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                IKReal x180=((0.100000000000000)+(((-1.00000000000000)*(py))));
                                                                IKReal x181=x1;
                                                                IKReal x182=x4;
                                                                IKReal x183=((0.0100000000000000)+(x181)+(x182));
                                                                IKReal x184=((0.200000000000000)*(py));
                                                                IKReal x185=((((-1.00000000000000)*(x184)))+(x183));
                                                                IKReal x186=((IKabs(x185) != 0)?((IKReal)1/(x185)):(IKReal)1.0e30);
                                                                j1array[0]=IKatan2(((x186)*(((((-1.00000000000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-0.321000000000000)*(sj3)*(x180)))))), ((x186)*(((((-1.00000000000000)*(x180)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((0.321000000000000)*(pz)*(sj3)))))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x187=((1.90819582357449e-17)*(sj3));
                                                        IKReal x188=((x187)+(((-1.00000000000000)*(px))));
                                                        evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x188;
                                                        evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(py)))+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
                                                        evalcond[3]=x188;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[1];
                                                            j1eval[0]=((0.0100000000000000)+(((0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                            {
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[1];
                                                                        j1eval[0]=((((0.321000000000000)*(cj3)*(pz)))+(((-0.0321000000000000)*(sj3)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(py)*(sj3))));
                                                                        if( IKabs(j1eval[0]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[4];
                                                                                IKReal x189=((-1.00000000000000)*(px));
                                                                                evalcond[0]=((IKabs(((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))))))+(IKabs(pz)));
                                                                                evalcond[1]=x189;
                                                                                evalcond[2]=((0.509841000000000)+(((-0.200000000000000)*(py)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=x189;
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                cj1array[0]=((-0.138696255201110)+(((-1.38696255201110)*(py))));
                                                                                if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKacos(cj1array[0]);
                                                                                    sj1array[0] = IKsin(j1array[0]);
                                                                                    cj1array[1] = cj1array[0];
                                                                                    j1array[1] = -j1array[0];
                                                                                    sj1array[1] = -sj1array[0];
                                                                                }
                                                                                else if( isnan(cj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[1];
                                                                                    j1eval[0]=((0.0400000000000000)+(((0.321000000000000)*(cj3)*(py)))+(((0.400000000000000)*(py)))+(((0.321000000000000)*(pz)*(sj3)))+(((0.0321000000000000)*(cj3))));
                                                                                    if( IKabs(j1eval[0]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]={false};
                                                                                        IKReal x190=((0.321000000000000)*(cj3)*(py));
                                                                                        IKReal x191=((0.400000000000000)*(py));
                                                                                        IKReal x192=((0.321000000000000)*(pz)*(sj3));
                                                                                        IKReal x193=((0.0321000000000000)*(cj3));
                                                                                        IKReal x194=((0.0400000000000000)+(x193)+(x192)+(x191)+(x190));
                                                                                        IKReal x195=((IKabs(x194) != 0)?((IKReal)1/(x194)):(IKReal)1.0e30);
                                                                                        IKReal x196=((0.321000000000000)*(cj3));
                                                                                        IKReal x197=((0.400000000000000)+(x196));
                                                                                        j1array[0]=IKatan2(((x195)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))+(((-0.321000000000000)*(sj3)*(x197)))))), ((x195)*((((pz)*(pz))+(((-1.00000000000000)*((x197)*(x197))))))));
                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if( j1array[0] > IKPI )
                                                                                            j1array[0]-=IK2PI;
                                                                                        else if( j1array[0] < -IKPI )
                                                                                            j1array[0]+=IK2PI;
                                                                                        j1valid[0] = true;
                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            IKReal x198=((0.321000000000000)*(cj3)*(pz));
                                                                            IKReal x199=((0.400000000000000)*(pz));
                                                                            IKReal x200=((x199)+(x198));
                                                                            IKReal x201=((0.321000000000000)*(py)*(sj3));
                                                                            IKReal x202=((0.0321000000000000)*(sj3));
                                                                            IKReal x203=((x202)+(x201));
                                                                            IKReal x204=((((-1.00000000000000)*(x203)))+(x200));
                                                                            IKReal x205=((IKabs(x204) != 0)?((IKReal)1/(x204)):(IKReal)1.0e30);
                                                                            j1array[0]=IKatan2(((x205)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x205)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                IKReal x206=((0.200000000000000)*(py));
                                                                IKReal x207=x1;
                                                                IKReal x208=x4;
                                                                IKReal x209=((0.0100000000000000)+(x207)+(x206)+(x208));
                                                                IKReal x210=((IKabs(x209) != 0)?((IKReal)1/(x209)):(IKReal)1.0e30);
                                                                IKReal x211=((0.100000000000000)+(py));
                                                                IKReal x212=((0.321000000000000)*(cj3));
                                                                IKReal x213=((0.400000000000000)+(x212));
                                                                j1array[0]=IKatan2(((-1.00000000000000)*(x210)*(((((pz)*(x213)))+(((0.321000000000000)*(sj3)*(x211)))))), ((-1.00000000000000)*(x210)*(((((x211)*(x213)))+(((-0.321000000000000)*(pz)*(sj3)))))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        continue;
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    IKReal x214=((0.100000000000000)*(cj0));
                                                    IKReal x215=((1.90819582357449e-17)*(sj0)*(sj3));
                                                    IKReal x216=((x215)+(px));
                                                    IKReal x217=((x214)+(((-1.00000000000000)*(x216))));
                                                    IKReal x218=(cj3)*(cj3);
                                                    IKReal x219=((0.103041000000000)*(cj0)*(x218));
                                                    IKReal x220=((0.256800000000000)*(cj0)*(cj3));
                                                    IKReal x221=((0.160000000000000)*(cj0));
                                                    IKReal x222=(sj3)*(sj3);
                                                    IKReal x223=((0.103041000000000)*(cj0)*(x222));
                                                    IKReal x224=((x219)+(x221)+(x220)+(x223));
                                                    IKReal x225=((-1.00000000000000)*(x224));
                                                    IKReal x226=((IKabs(x225) != 0)?((IKReal)1/(x225)):(IKReal)1.0e30);
                                                    j1array[0]=IKatan2(((x226)*(((((0.321000000000000)*(sj3)*(x217)))+(((pz)*(((((0.400000000000000)*(cj0)))+(((0.321000000000000)*(cj0)*(cj3)))))))))), ((x226)*(((((x217)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-0.321000000000000)*(cj0)*(pz)*(sj3)))))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        IKReal x227=((0.321000000000000)*(cj0)*(px)*(sj3));
                                        IKReal x228=((0.321000000000000)*(py)*(sj0)*(sj3));
                                        IKReal x229=((0.321000000000000)*(cj3)*(pz));
                                        IKReal x230=((0.400000000000000)*(pz));
                                        IKReal x231=((x229)+(x228)+(x227)+(x230));
                                        IKReal x232=((0.0321000000000000)*(sj3));
                                        IKReal x233=((((-1.00000000000000)*(x232)))+(x231));
                                        IKReal x234=((IKabs(x233) != 0)?((IKReal)1/(x233)):(IKReal)1.0e30);
                                        j1array[0]=IKatan2(((x234)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x234)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x235=(cj3)*(cj3);
                            IKReal x236=((0.103041000000000)*(x235));
                            IKReal x237=((0.256800000000000)*(cj3));
                            IKReal x238=(sj3)*(sj3);
                            IKReal x239=((0.103041000000000)*(x238));
                            IKReal x240=((0.160000000000000)+(x239)+(x236)+(x237));
                            IKReal x241=((IKabs(x240) != 0)?((IKReal)1/(x240)):(IKReal)1.0e30);
                            IKReal x242=((0.321000000000000)*(cj3));
                            IKReal x243=((0.400000000000000)+(x242));
                            IKReal x244=((cj0)*(px));
                            IKReal x245=((py)*(sj0));
                            IKReal x246=((x245)+(x244));
                            IKReal x247=((0.100000000000000)+(((-1.00000000000000)*(x246))));
                            j1array[0]=IKatan2(((-1.00000000000000)*(x241)*(((((0.321000000000000)*(sj3)*(x247)))+(((pz)*(x243)))))), ((-1.00000000000000)*(x241)*(((((-0.321000000000000)*(pz)*(sj3)))+(((x243)*(x247)))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            for(int ij1 = 0; ij1 < 1; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                        IKReal j1eval[1];
                        IKReal x248=(cj0)*(cj0);
                        IKReal x249=x0;
                        IKReal x250=x4;
                        IKReal x251=x1;
                        IKReal x252=(sj0)*(sj0);
                        j1eval[0]=((((0.159861696250397)*(cj0)*(px)*(sj2)))+(((-0.00665117071994815)*(cj2)*(py)*(sj0)))+(((-1.59861696250397)*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((-0.799308481251984)*(sj2)*(x250)))+(((0.0332558535997407)*(cj2)*(x250)))+(((-0.00665117071994815)*(cj0)*(cj2)*(px)))+(((0.159861696250397)*(py)*(sj0)*(sj2)))+(((-0.00799308481251984)*(sj2)))+(((-0.799308481251984)*(sj2)*(x251)*(x252)))+(((0.0332558535997407)*(cj2)*(x248)*(x249)))+(((0.0665117071994815)*(cj0)*(cj2)*(px)*(py)*(sj0)))+(((-0.799308481251984)*(sj2)*(x248)*(x249)))+(((0.000332558535997407)*(cj2)))+(((0.0332558535997407)*(cj2)*(x251)*(x252))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                continue;
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x253=x4;
                            IKReal x254=x0;
                            IKReal x255=x1;
                            IKReal x256=(cj0)*(cj0);
                            IKReal x257=(sj0)*(sj0);
                            IKReal x258=((0.0669590000000000)+(x254)+(x255)+(x253));
                            IKReal x259=((0.200000000000000)*(cj0)*(px));
                            IKReal x260=((0.200000000000000)*(py)*(sj0));
                            IKReal x261=((x259)+(x260));
                            IKReal x262=((x258)+(((-1.00000000000000)*(x261))));
                            IKReal x263=((0.0415698169996759)*(cj0)*(py)*(sj2));
                            IKReal x264=((0.999135601564979)*(cj0)*(cj2)*(py));
                            IKReal x265=((x264)+(x263));
                            IKReal x266=((0.999135601564979)*(cj2)*(px)*(sj0));
                            IKReal x267=((0.0415698169996759)*(px)*(sj0)*(sj2));
                            IKReal x268=((x267)+(x266));
                            IKReal x269=((x265)+(((-1.00000000000000)*(x268))));
                            IKReal x270=((0.159861696250397)*(cj0)*(px)*(sj2));
                            IKReal x271=((0.0332558535997407)*(cj2)*(x253));
                            IKReal x272=((0.159861696250397)*(py)*(sj0)*(sj2));
                            IKReal x273=((0.0665117071994815)*(cj0)*(cj2)*(px)*(py)*(sj0));
                            IKReal x274=((0.0332558535997407)*(cj2)*(x254)*(x256));
                            IKReal x275=((0.000332558535997407)*(cj2));
                            IKReal x276=((0.0332558535997407)*(cj2)*(x255)*(x257));
                            IKReal x277=((x276)+(x274)+(x275)+(x272)+(x273)+(x270)+(x271));
                            IKReal x278=((0.799308481251984)*(sj2)*(x254)*(x256));
                            IKReal x279=((0.00665117071994815)*(cj2)*(py)*(sj0));
                            IKReal x280=((0.00665117071994815)*(cj0)*(cj2)*(px));
                            IKReal x281=((0.799308481251984)*(sj2)*(x253));
                            IKReal x282=((1.59861696250397)*(cj0)*(px)*(py)*(sj0)*(sj2));
                            IKReal x283=((0.799308481251984)*(sj2)*(x255)*(x257));
                            IKReal x284=((0.00799308481251984)*(sj2));
                            IKReal x285=((x278)+(x279)+(x284)+(x283)+(x282)+(x281)+(x280));
                            IKReal x286=((x277)+(((-1.00000000000000)*(x285))));
                            IKReal x287=((IKabs(x286) != 0)?((IKReal)1/(x286)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((x287)*(((((-1.00000000000000)*(x269)*(((0.0800000000000000)+(((-0.800000000000000)*(py)*(sj0)))+(((-0.800000000000000)*(cj0)*(px)))))))+(((x262)*(((((-0.0415698169996759)*(cj2)*(pz)))+(((0.999135601564979)*(pz)*(sj2)))))))))), ((x287)*(((((x262)*(((((0.0415698169996759)*(cj0)*(cj2)*(px)))+(((0.0999135601564980)*(sj2)))+(((-0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)*(sj0)))+(((-0.999135601564979)*(cj0)*(px)*(sj2)))+(((-0.999135601564979)*(py)*(sj0)*(sj2)))))))+(((0.800000000000000)*(pz)*(x269)))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            for(int ij1 = 0; ij1 < 1; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            {
                                IKReal j3eval[1];
                                j3eval[0]=((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))));
                                if( IKabs(j3eval[0]) < 0.000001  )
                                {
                                    {
                                    IKReal evalcond[3];
                                        evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                        evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
                                        evalcond[2]=((((6.93889390390723e-18)*(cj1)*(pz)))+(((-1.00000000000000)*(px)*(sj0)))+(((6.93889390390723e-18)*(cj0)*(px)*(sj1)))+(((6.93889390390723e-18)*(py)*(sj0)*(sj1)))+(((cj0)*(py)))+(((-8.67361737988404e-19)*(sj1))));
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                        {
                                        {
                                        IKReal j3array[1], cj3array[1], sj3array[1];
                                        bool j3valid[1]={false};
                                        j3array[0]=IKatan2(((((-3.11526479750779)*(cj0)*(px)*(sj1)))+(((-3.11526479750779)*(cj1)*(pz)))+(((0.311526479750779)*(sj1)))+(((-3.11526479750779)*(py)*(sj0)*(sj1)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
                                        sj3array[0]=IKsin(j3array[0]);
                                        cj3array[0]=IKcos(j3array[0]);
                                        if( j3array[0] > IKPI )
                                            j3array[0]-=IK2PI;
                                        else if( j3array[0] < -IKPI )
                                            j3array[0]+=IK2PI;
                                        j3valid[0] = true;
                                        for(int ij3 = 0; ij3 < 1; ++ij3)
                                        {
                                        if( !j3valid[ij3] ) { continue; }
                                        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    } else
                                    {
                                        evalcond[0]=((IKfmod(((-3.18317445236063)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                        evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
                                        evalcond[2]=((((5.55111512312578e-17)*(py)*(sj0)*(sj1)))+(((5.55111512312578e-17)*(cj0)*(px)*(sj1)))+(((5.55111512312578e-17)*(cj1)*(pz)))+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))+(((-5.20417042793042e-18)*(sj1))));
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                        {
                                        {
                                        IKReal j3array[1], cj3array[1], sj3array[1];
                                        bool j3valid[1]={false};
                                        j3array[0]=IKatan2(((((3.11526479750779)*(cj1)*(pz)))+(((3.11526479750779)*(cj0)*(px)*(sj1)))+(((3.11526479750779)*(py)*(sj0)*(sj1)))+(((-0.311526479750779)*(sj1)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
                                        sj3array[0]=IKsin(j3array[0]);
                                        cj3array[0]=IKcos(j3array[0]);
                                        if( j3array[0] > IKPI )
                                            j3array[0]-=IK2PI;
                                        else if( j3array[0] < -IKPI )
                                            j3array[0]+=IK2PI;
                                        j3valid[0] = true;
                                        for(int ij3 = 0; ij3 < 1; ++ij3)
                                        {
                                        if( !j3valid[ij3] ) { continue; }
                                        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    } else
                                    {
                                        if( 1 )
                                        {
                                        {
                                            IKReal j3eval[1];
                                            j3eval[0]=((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))));
                                            if( IKabs(j3eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[3];
                                                    evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
                                                    evalcond[2]=((((6.93889390390723e-18)*(cj1)*(pz)))+(((-1.00000000000000)*(px)*(sj0)))+(((6.93889390390723e-18)*(cj0)*(px)*(sj1)))+(((6.93889390390723e-18)*(py)*(sj0)*(sj1)))+(((cj0)*(py)))+(((-8.67361737988404e-19)*(sj1))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                    {
                                                    {
                                                    IKReal j3array[1], cj3array[1], sj3array[1];
                                                    bool j3valid[1]={false};
                                                    j3array[0]=IKatan2(((((-3.11526479750779)*(cj0)*(px)*(sj1)))+(((-3.11526479750779)*(cj1)*(pz)))+(((0.311526479750779)*(sj1)))+(((-3.11526479750779)*(py)*(sj0)*(sj1)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
                                                    sj3array[0]=IKsin(j3array[0]);
                                                    cj3array[0]=IKcos(j3array[0]);
                                                    if( j3array[0] > IKPI )
                                                        j3array[0]-=IK2PI;
                                                    else if( j3array[0] < -IKPI )
                                                        j3array[0]+=IK2PI;
                                                    j3valid[0] = true;
                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                    {
                                                    if( !j3valid[ij3] ) { continue; }
                                                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    evalcond[0]=((IKfmod(((-3.18317445236063)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
                                                    evalcond[2]=((((5.55111512312578e-17)*(py)*(sj0)*(sj1)))+(((5.55111512312578e-17)*(cj0)*(px)*(sj1)))+(((5.55111512312578e-17)*(cj1)*(pz)))+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))+(((-5.20417042793042e-18)*(sj1))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                    {
                                                    {
                                                    IKReal j3array[1], cj3array[1], sj3array[1];
                                                    bool j3valid[1]={false};
                                                    j3array[0]=IKatan2(((((3.11526479750779)*(cj1)*(pz)))+(((3.11526479750779)*(cj0)*(px)*(sj1)))+(((3.11526479750779)*(py)*(sj0)*(sj1)))+(((-0.311526479750779)*(sj1)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
                                                    sj3array[0]=IKsin(j3array[0]);
                                                    cj3array[0]=IKcos(j3array[0]);
                                                    if( j3array[0] > IKPI )
                                                        j3array[0]-=IK2PI;
                                                    else if( j3array[0] < -IKPI )
                                                        j3array[0]+=IK2PI;
                                                    j3valid[0] = true;
                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                    {
                                                    if( !j3valid[ij3] ) { continue; }
                                                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    {
                                                        IKReal j3eval[1];
                                                        j3eval[0]=((((-0.0133439112568960)*(sj2)))+(((-0.320722528102358)*(cj2))));
                                                        if( IKabs(j3eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                            IKReal evalcond[3];
                                                                evalcond[0]=((IKfmod(((-1.61237812556574)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
                                                                evalcond[2]=((((6.93889390390723e-18)*(px)*(sj0)))+(((-0.100000000000000)*(sj1)))+(((cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((-6.93889390390723e-18)*(cj0)*(py)))+(((py)*(sj0)*(sj1))));
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                                {
                                                                {
                                                                IKReal j3array[1], cj3array[1], sj3array[1];
                                                                bool j3valid[1]={false};
                                                                j3array[0]=IKatan2(((((3.11526479750779)*(cj0)*(py)))+(((-3.11526479750779)*(px)*(sj0)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
                                                                sj3array[0]=IKsin(j3array[0]);
                                                                cj3array[0]=IKcos(j3array[0]);
                                                                if( j3array[0] > IKPI )
                                                                    j3array[0]-=IK2PI;
                                                                else if( j3array[0] < -IKPI )
                                                                    j3array[0]+=IK2PI;
                                                                j3valid[0] = true;
                                                                for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                {
                                                                if( !j3valid[ij3] ) { continue; }
                                                                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                evalcond[0]=((IKfmod(((-4.75397077915553)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
                                                                evalcond[2]=((((-1.00000000000000)*(py)*(sj0)*(sj1)))+(((0.100000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((3.26128013483640e-16)*(cj0)*(py)))+(((-1.00000000000000)*(cj0)*(px)*(sj1)))+(((-3.26128013483640e-16)*(px)*(sj0))));
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                                {
                                                                {
                                                                IKReal j3array[1], cj3array[1], sj3array[1];
                                                                bool j3valid[1]={false};
                                                                j3array[0]=IKatan2(((((3.11526479750779)*(px)*(sj0)))+(((-3.11526479750779)*(cj0)*(py)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
                                                                sj3array[0]=IKsin(j3array[0]);
                                                                cj3array[0]=IKcos(j3array[0]);
                                                                if( j3array[0] > IKPI )
                                                                    j3array[0]-=IK2PI;
                                                                else if( j3array[0] < -IKPI )
                                                                    j3array[0]+=IK2PI;
                                                                j3valid[0] = true;
                                                                for(int ij3 = 0; ij3 < 1; ++ij3)
                                                                {
                                                                if( !j3valid[ij3] ) { continue; }
                                                                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                if( 1 )
                                                                {
                                                                continue;
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j3array[1], cj3array[1], sj3array[1];
                                                            bool j3valid[1]={false};
                                                            j3array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(sj2)))+(((-0.320722528102358)*(cj2))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(sj2)))+(((-0.320722528102358)*(cj2)))))):(IKReal)1.0e30))*(((((cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((-0.100000000000000)*(sj1)))+(((py)*(sj0)*(sj1)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((-0.311526479750779)*(cj1)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))));
                                                            sj3array[0]=IKsin(j3array[0]);
                                                            cj3array[0]=IKcos(j3array[0]);
                                                            if( j3array[0] > IKPI )
                                                                j3array[0]-=IK2PI;
                                                            else if( j3array[0] < -IKPI )
                                                                j3array[0]+=IK2PI;
                                                            j3valid[0] = true;
                                                            for(int ij3 = 0; ij3 < 1; ++ij3)
                                                            {
                                                            if( !j3valid[ij3] ) { continue; }
                                                            j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                }
                                                }
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j3array[1], cj3array[1], sj3array[1];
                                                bool j3valid[1]={false};
                                                j3array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-0.985362149532710)+(((3.89408099688473)*((py)*(py))))+(((3.89408099688473)*((pz)*(pz))))+(((-0.778816199376947)*(cj0)*(px)))+(((-0.778816199376947)*(py)*(sj0)))+(((3.89408099688473)*((px)*(px))))));
                                                sj3array[0]=IKsin(j3array[0]);
                                                cj3array[0]=IKcos(j3array[0]);
                                                if( j3array[0] > IKPI )
                                                    j3array[0]-=IK2PI;
                                                else if( j3array[0] < -IKPI )
                                                    j3array[0]+=IK2PI;
                                                j3valid[0] = true;
                                                for(int ij3 = 0; ij3 < 1; ++ij3)
                                                {
                                                if( !j3valid[ij3] ) { continue; }
                                                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                    }
                                    }
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j3array[1], cj3array[1], sj3array[1];
                                    bool j3valid[1]={false};
                                    j3array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((-0.311526479750779)*(cj1)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))));
                                    sj3array[0]=IKsin(j3array[0]);
                                    cj3array[0]=IKcos(j3array[0]);
                                    if( j3array[0] > IKPI )
                                        j3array[0]-=IK2PI;
                                    else if( j3array[0] < -IKPI )
                                        j3array[0]+=IK2PI;
                                    j3valid[0] = true;
                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                    {
                                    if( !j3valid[ij3] ) { continue; }
                                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                }
                }
                }
                }
            
            } else
            {
                {
                IKReal j3array[1], cj3array[1], sj3array[1];
                bool j3valid[1]={false};
                j3array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-0.985362149532710)+(((3.89408099688473)*((py)*(py))))+(((3.89408099688473)*((pz)*(pz))))+(((-0.778816199376947)*(cj0)*(px)))+(((-0.778816199376947)*(py)*(sj0)))+(((3.89408099688473)*((px)*(px))))));
                sj3array[0]=IKsin(j3array[0]);
                cj3array[0]=IKcos(j3array[0]);
                if( j3array[0] > IKPI )
                    j3array[0]-=IK2PI;
                else if( j3array[0] < -IKPI )
                    j3array[0]+=IK2PI;
                j3valid[0] = true;
                for(int ij3 = 0; ij3 < 1; ++ij3)
                {
                if( !j3valid[ij3] ) { continue; }
                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                
                {
                    IKReal j1eval[1];
                    j1eval[0]=((0.0400000000000000)+(((-0.320722528102358)*(cj2)*(pz)*(sj3)))+(((0.0321000000000000)*(cj3)))+(((-0.0133439112568960)*(pz)*(sj2)*(sj3)))+(((-0.400000000000000)*(cj0)*(px)))+(((-0.321000000000000)*(cj0)*(cj3)*(px)))+(((-0.400000000000000)*(py)*(sj0)))+(((-0.321000000000000)*(cj3)*(py)*(sj0))));
                    if( IKabs(j1eval[0]) < 0.000001  )
                    {
                        {
                            if( 1 )
                            {
                            {
                                IKReal j1eval[1];
                                j1eval[0]=((0.0100000000000000)+((((py)*(py))*((sj0)*(sj0))))+(((-0.200000000000000)*(py)*(sj0)))+(((2.00000000000000)*(cj0)*(px)*(py)*(sj0)))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((-0.200000000000000)*(cj0)*(px))));
                                if( IKabs(j1eval[0]) < 0.000001  )
                                {
                                    {
                                        if( 1 )
                                        {
                                        {
                                            IKReal j1eval[1];
                                            j1eval[0]=((((-0.0133439112568960)*(cj0)*(px)*(sj2)*(sj3)))+(((0.0320722528102358)*(cj2)*(sj3)))+(((0.00133439112568960)*(sj2)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((-0.0133439112568960)*(py)*(sj0)*(sj2)*(sj3)))+(((0.400000000000000)*(pz)))+(((-0.320722528102358)*(cj2)*(py)*(sj0)*(sj3)))+(((-0.320722528102358)*(cj0)*(cj2)*(px)*(sj3))));
                                            if( IKabs(j1eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[4];
                                                    evalcond[0]=((IKabs(((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))))))+(IKabs(pz)));
                                                    evalcond[1]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
                                                    evalcond[2]=((0.509841000000000)+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((0.200000000000000)*(cj0)*(px))));
                                                    evalcond[3]=0;
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j1eval[2];
                                                        j1eval[0]=((((-0.0415698169996759)*(cj0)*(cj2)*(px)))+(((-0.0999135601564980)*(sj2)))+(((0.999135601564979)*(py)*(sj0)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(cj0)*(px)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)*(sj0))));
                                                        j1eval[1]=cj0;
                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                        {
                                                            {
                                                            IKReal evalcond[5];
                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                evalcond[1]=px;
                                                                evalcond[2]=((0.509841000000000)+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py)))));
                                                                evalcond[3]=0;
                                                                evalcond[4]=((-1.00000000000000)*(px));
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j1eval[1];
                                                                    j1eval[0]=((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py))));
                                                                    if( IKabs(j1eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            {
                                                                                IKReal j1eval[1];
                                                                                j1eval[0]=((((0.999135601564979)*(cj2)*(py)))+(((0.0415698169996759)*(py)*(sj2)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2))));
                                                                                if( IKabs(j1eval[0]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        {
                                                                                            IKReal j1eval[2];
                                                                                            j1eval[0]=((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py))));
                                                                                            j1eval[1]=((0.100000000000000)+(((-1.00000000000000)*(py))));
                                                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                            {
                                                                                                {
                                                                                                    if( 1 )
                                                                                                    {
                                                                                                    continue;
                                                                                                
                                                                                                } else
                                                                                                {
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            } else
                                                                                            {
                                                                                                {
                                                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1]={false};
                                                                                                j1array[0]=IKatan2(((((IKabs(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py))))) != 0)?((IKReal)1/(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)))))):(IKReal)1.0e30))*(((((0.999135601564979)*(cj2)*(px)))+(((0.0415698169996759)*(px)*(sj2)))))), ((-0.721000000000000)*(((IKabs(((0.100000000000000)+(((-1.00000000000000)*(py))))) != 0)?((IKReal)1/(((0.100000000000000)+(((-1.00000000000000)*(py)))))):(IKReal)1.0e30))));
                                                                                                sj1array[0]=IKsin(j1array[0]);
                                                                                                cj1array[0]=IKcos(j1array[0]);
                                                                                                if( j1array[0] > IKPI )
                                                                                                    j1array[0]-=IK2PI;
                                                                                                else if( j1array[0] < -IKPI )
                                                                                                    j1array[0]+=IK2PI;
                                                                                                j1valid[0] = true;
                                                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                
                                                                                                rotationfunction0(vsolutions);
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            }
                                                                                        
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                    bool j1valid[1]={false};
                                                                                    j1array[0]=IKatan2(((((IKabs(((((0.999135601564979)*(cj2)*(py)))+(((0.0415698169996759)*(py)*(sj2)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2))))) != 0)?((IKReal)1/(((((0.999135601564979)*(cj2)*(py)))+(((0.0415698169996759)*(py)*(sj2)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))))):(IKReal)1.0e30))*(((((0.0415698169996759)*(cj2)*(px)))+(((-0.999135601564979)*(px)*(sj2)))))), ((-0.138696255201110)+(((1.38696255201110)*(py)))));
                                                                                    sj1array[0]=IKsin(j1array[0]);
                                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                                    if( j1array[0] > IKPI )
                                                                                        j1array[0]-=IK2PI;
                                                                                    else if( j1array[0] < -IKPI )
                                                                                        j1array[0]+=IK2PI;
                                                                                    j1valid[0] = true;
                                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                    {
                                                                                    if( !j1valid[ij1] ) { continue; }
                                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                        bool j1valid[1]={false};
                                                                        j1array[0]=IKatan2(((((IKabs(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py))))) != 0)?((IKReal)1/(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)))))):(IKReal)1.0e30))*(((((0.999135601564979)*(cj2)*(px)))+(((0.0415698169996759)*(px)*(sj2)))))), ((-0.138696255201110)+(((1.38696255201110)*(py)))));
                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                        if( j1array[0] > IKPI )
                                                                            j1array[0]-=IK2PI;
                                                                        else if( j1array[0] < -IKPI )
                                                                            j1array[0]+=IK2PI;
                                                                        j1valid[0] = true;
                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                        {
                                                                        if( !j1valid[ij1] ) { continue; }
                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                                IKReal x288=((-1.00000000000000)*(px));
                                                                evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                evalcond[1]=x288;
                                                                evalcond[2]=((0.509841000000000)+(((-0.200000000000000)*(py)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                evalcond[3]=0;
                                                                evalcond[4]=x288;
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j1eval[1];
                                                                    j1eval[0]=((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2))));
                                                                    if( IKabs(j1eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            {
                                                                                IKReal j1eval[1];
                                                                                j1eval[0]=((((-0.999135601564979)*(cj2)*(py)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))+(((-0.0415698169996759)*(py)*(sj2))));
                                                                                if( IKabs(j1eval[0]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        {
                                                                                            IKReal j1eval[2];
                                                                                            j1eval[0]=((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2))));
                                                                                            j1eval[1]=((0.100000000000000)+(py));
                                                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                            {
                                                                                                {
                                                                                                    if( 1 )
                                                                                                    {
                                                                                                    continue;
                                                                                                
                                                                                                } else
                                                                                                {
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            } else
                                                                                            {
                                                                                                {
                                                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1]={false};
                                                                                                j1array[0]=IKatan2(((((IKabs(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2))))) != 0)?((IKReal)1/(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2)))))):(IKReal)1.0e30))*(((((-0.0415698169996759)*(px)*(sj2)))+(((-0.999135601564979)*(cj2)*(px)))))), ((-0.721000000000000)*(((IKabs(((0.100000000000000)+(py))) != 0)?((IKReal)1/(((0.100000000000000)+(py)))):(IKReal)1.0e30))));
                                                                                                sj1array[0]=IKsin(j1array[0]);
                                                                                                cj1array[0]=IKcos(j1array[0]);
                                                                                                if( j1array[0] > IKPI )
                                                                                                    j1array[0]-=IK2PI;
                                                                                                else if( j1array[0] < -IKPI )
                                                                                                    j1array[0]+=IK2PI;
                                                                                                j1valid[0] = true;
                                                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                
                                                                                                rotationfunction0(vsolutions);
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            }
                                                                                        
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                    bool j1valid[1]={false};
                                                                                    j1array[0]=IKatan2(((((IKabs(((((-0.999135601564979)*(cj2)*(py)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))+(((-0.0415698169996759)*(py)*(sj2))))) != 0)?((IKReal)1/(((((-0.999135601564979)*(cj2)*(py)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))+(((-0.0415698169996759)*(py)*(sj2)))))):(IKReal)1.0e30))*(((((0.999135601564979)*(px)*(sj2)))+(((-0.0415698169996759)*(cj2)*(px)))))), ((-0.138696255201110)+(((-1.38696255201110)*(py)))));
                                                                                    sj1array[0]=IKsin(j1array[0]);
                                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                                    if( j1array[0] > IKPI )
                                                                                        j1array[0]-=IK2PI;
                                                                                    else if( j1array[0] < -IKPI )
                                                                                        j1array[0]+=IK2PI;
                                                                                    j1valid[0] = true;
                                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                    {
                                                                                    if( !j1valid[ij1] ) { continue; }
                                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                        bool j1valid[1]={false};
                                                                        j1array[0]=IKatan2(((((IKabs(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2))))) != 0)?((IKReal)1/(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2)))))):(IKReal)1.0e30))*(((((-0.0415698169996759)*(px)*(sj2)))+(((-0.999135601564979)*(cj2)*(px)))))), ((-0.138696255201110)+(((-1.38696255201110)*(py)))));
                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                        if( j1array[0] > IKPI )
                                                                            j1array[0]-=IK2PI;
                                                                        else if( j1array[0] < -IKPI )
                                                                            j1array[0]+=IK2PI;
                                                                        j1valid[0] = true;
                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                        {
                                                                        if( !j1valid[ij1] ) { continue; }
                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j1eval[2];
                                                                    j1eval[0]=((((0.999135601564979)*(cj2)*(py)*(sj0)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))+(((0.0415698169996759)*(cj0)*(px)*(sj2)))+(((0.999135601564979)*(cj0)*(cj2)*(px)))+(((0.0415698169996759)*(py)*(sj0)*(sj2))));
                                                                    j1eval[1]=cj0;
                                                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                    {
                                                                        {
                                                                        IKReal evalcond[5];
                                                                            evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                            evalcond[1]=px;
                                                                            evalcond[2]=((0.509841000000000)+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py)))));
                                                                            evalcond[3]=0;
                                                                            evalcond[4]=((-1.00000000000000)*(px));
                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                            {
                                                                            {
                                                                                IKReal j1eval[1];
                                                                                j1eval[0]=((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py))));
                                                                                if( IKabs(j1eval[0]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        {
                                                                                            IKReal j1eval[1];
                                                                                            j1eval[0]=((((0.999135601564979)*(cj2)*(py)))+(((0.0415698169996759)*(py)*(sj2)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2))));
                                                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                                                            {
                                                                                                {
                                                                                                    if( 1 )
                                                                                                    {
                                                                                                    {
                                                                                                        IKReal j1eval[2];
                                                                                                        j1eval[0]=((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py))));
                                                                                                        j1eval[1]=((0.100000000000000)+(((-1.00000000000000)*(py))));
                                                                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                                        {
                                                                                                            {
                                                                                                                if( 1 )
                                                                                                                {
                                                                                                                continue;
                                                                                                            
                                                                                                            } else
                                                                                                            {
                                                                                                            }
                                                                                                            }
                                                                                                        
                                                                                                        } else
                                                                                                        {
                                                                                                            {
                                                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                            bool j1valid[1]={false};
                                                                                                            j1array[0]=IKatan2(((((IKabs(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py))))) != 0)?((IKReal)1/(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)))))):(IKReal)1.0e30))*(((((0.999135601564979)*(cj2)*(px)))+(((0.0415698169996759)*(px)*(sj2)))))), ((-0.721000000000000)*(((IKabs(((0.100000000000000)+(((-1.00000000000000)*(py))))) != 0)?((IKReal)1/(((0.100000000000000)+(((-1.00000000000000)*(py)))))):(IKReal)1.0e30))));
                                                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                                                            if( j1array[0] > IKPI )
                                                                                                                j1array[0]-=IK2PI;
                                                                                                            else if( j1array[0] < -IKPI )
                                                                                                                j1array[0]+=IK2PI;
                                                                                                            j1valid[0] = true;
                                                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                            {
                                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                            
                                                                                                            rotationfunction0(vsolutions);
                                                                                                            }
                                                                                                            }
                                                                                                        
                                                                                                        }
                                                                                                    
                                                                                                    }
                                                                                                
                                                                                                } else
                                                                                                {
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            } else
                                                                                            {
                                                                                                {
                                                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1]={false};
                                                                                                j1array[0]=IKatan2(((((IKabs(((((0.999135601564979)*(cj2)*(py)))+(((0.0415698169996759)*(py)*(sj2)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2))))) != 0)?((IKReal)1/(((((0.999135601564979)*(cj2)*(py)))+(((0.0415698169996759)*(py)*(sj2)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))))):(IKReal)1.0e30))*(((((0.0415698169996759)*(cj2)*(px)))+(((-0.999135601564979)*(px)*(sj2)))))), ((-0.138696255201110)+(((1.38696255201110)*(py)))));
                                                                                                sj1array[0]=IKsin(j1array[0]);
                                                                                                cj1array[0]=IKcos(j1array[0]);
                                                                                                if( j1array[0] > IKPI )
                                                                                                    j1array[0]-=IK2PI;
                                                                                                else if( j1array[0] < -IKPI )
                                                                                                    j1array[0]+=IK2PI;
                                                                                                j1valid[0] = true;
                                                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                
                                                                                                rotationfunction0(vsolutions);
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            }
                                                                                        
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                    bool j1valid[1]={false};
                                                                                    j1array[0]=IKatan2(((((IKabs(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py))))) != 0)?((IKReal)1/(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)))))):(IKReal)1.0e30))*(((((0.999135601564979)*(cj2)*(px)))+(((0.0415698169996759)*(px)*(sj2)))))), ((-0.138696255201110)+(((1.38696255201110)*(py)))));
                                                                                    sj1array[0]=IKsin(j1array[0]);
                                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                                    if( j1array[0] > IKPI )
                                                                                        j1array[0]-=IK2PI;
                                                                                    else if( j1array[0] < -IKPI )
                                                                                        j1array[0]+=IK2PI;
                                                                                    j1valid[0] = true;
                                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                    {
                                                                                    if( !j1valid[ij1] ) { continue; }
                                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            IKReal x289=((-1.00000000000000)*(px));
                                                                            evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                            evalcond[1]=x289;
                                                                            evalcond[2]=((0.509841000000000)+(((-0.200000000000000)*(py)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                            evalcond[3]=0;
                                                                            evalcond[4]=x289;
                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                            {
                                                                            {
                                                                                IKReal j1eval[1];
                                                                                j1eval[0]=((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2))));
                                                                                if( IKabs(j1eval[0]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        {
                                                                                            IKReal j1eval[1];
                                                                                            j1eval[0]=((((-0.999135601564979)*(cj2)*(py)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))+(((-0.0415698169996759)*(py)*(sj2))));
                                                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                                                            {
                                                                                                {
                                                                                                    if( 1 )
                                                                                                    {
                                                                                                    {
                                                                                                        IKReal j1eval[2];
                                                                                                        j1eval[0]=((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2))));
                                                                                                        j1eval[1]=((0.100000000000000)+(py));
                                                                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                                        {
                                                                                                            {
                                                                                                                if( 1 )
                                                                                                                {
                                                                                                                continue;
                                                                                                            
                                                                                                            } else
                                                                                                            {
                                                                                                            }
                                                                                                            }
                                                                                                        
                                                                                                        } else
                                                                                                        {
                                                                                                            {
                                                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                            bool j1valid[1]={false};
                                                                                                            j1array[0]=IKatan2(((((IKabs(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2))))) != 0)?((IKReal)1/(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2)))))):(IKReal)1.0e30))*(((((-0.0415698169996759)*(px)*(sj2)))+(((-0.999135601564979)*(cj2)*(px)))))), ((-0.721000000000000)*(((IKabs(((0.100000000000000)+(py))) != 0)?((IKReal)1/(((0.100000000000000)+(py)))):(IKReal)1.0e30))));
                                                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                                                            if( j1array[0] > IKPI )
                                                                                                                j1array[0]-=IK2PI;
                                                                                                            else if( j1array[0] < -IKPI )
                                                                                                                j1array[0]+=IK2PI;
                                                                                                            j1valid[0] = true;
                                                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                            {
                                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                            
                                                                                                            rotationfunction0(vsolutions);
                                                                                                            }
                                                                                                            }
                                                                                                        
                                                                                                        }
                                                                                                    
                                                                                                    }
                                                                                                
                                                                                                } else
                                                                                                {
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            } else
                                                                                            {
                                                                                                {
                                                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1]={false};
                                                                                                j1array[0]=IKatan2(((((IKabs(((((-0.999135601564979)*(cj2)*(py)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))+(((-0.0415698169996759)*(py)*(sj2))))) != 0)?((IKReal)1/(((((-0.999135601564979)*(cj2)*(py)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))+(((-0.0415698169996759)*(py)*(sj2)))))):(IKReal)1.0e30))*(((((0.999135601564979)*(px)*(sj2)))+(((-0.0415698169996759)*(cj2)*(px)))))), ((-0.138696255201110)+(((-1.38696255201110)*(py)))));
                                                                                                sj1array[0]=IKsin(j1array[0]);
                                                                                                cj1array[0]=IKcos(j1array[0]);
                                                                                                if( j1array[0] > IKPI )
                                                                                                    j1array[0]-=IK2PI;
                                                                                                else if( j1array[0] < -IKPI )
                                                                                                    j1array[0]+=IK2PI;
                                                                                                j1valid[0] = true;
                                                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                
                                                                                                rotationfunction0(vsolutions);
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            }
                                                                                        
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                    bool j1valid[1]={false};
                                                                                    j1array[0]=IKatan2(((((IKabs(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2))))) != 0)?((IKReal)1/(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2)))))):(IKReal)1.0e30))*(((((-0.0415698169996759)*(px)*(sj2)))+(((-0.999135601564979)*(cj2)*(px)))))), ((-0.138696255201110)+(((-1.38696255201110)*(py)))));
                                                                                    sj1array[0]=IKsin(j1array[0]);
                                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                                    if( j1array[0] > IKPI )
                                                                                        j1array[0]-=IK2PI;
                                                                                    else if( j1array[0] < -IKPI )
                                                                                        j1array[0]+=IK2PI;
                                                                                    j1valid[0] = true;
                                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                    {
                                                                                    if( !j1valid[ij1] ) { continue; }
                                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            {
                                                                                IKReal j1eval[2];
                                                                                j1eval[0]=((((-0.0415698169996759)*(cj0)*(cj2)*(px)))+(((-0.0999135601564980)*(sj2)))+(((0.999135601564979)*(py)*(sj0)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(cj0)*(px)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)*(sj0))));
                                                                                j1eval[1]=sj0;
                                                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                    IKReal evalcond[5];
                                                                                        IKReal x290=((-1.00000000000000)*(py));
                                                                                        evalcond[0]=((IKfmod(((3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                        evalcond[1]=x290;
                                                                                        evalcond[2]=((0.509841000000000)+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(px)))+(((-1.00000000000000)*((py)*(py)))));
                                                                                        evalcond[3]=0;
                                                                                        evalcond[4]=x290;
                                                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                                        {
                                                                                        {
                                                                                            IKReal j1eval[1];
                                                                                            j1eval[0]=((((0.999135601564979)*(px)*(sj2)))+(((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((-0.0415698169996759)*(cj2)*(px))));
                                                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                                                            {
                                                                                                {
                                                                                                    if( 1 )
                                                                                                    {
                                                                                                    {
                                                                                                        IKReal j1eval[1];
                                                                                                        j1eval[0]=((((0.999135601564979)*(cj2)*(px)))+(((-0.00415698169996759)*(sj2)))+(((0.0415698169996759)*(px)*(sj2)))+(((-0.0999135601564980)*(cj2))));
                                                                                                        if( IKabs(j1eval[0]) < 0.000001  )
                                                                                                        {
                                                                                                            {
                                                                                                                if( 1 )
                                                                                                                {
                                                                                                                {
                                                                                                                    IKReal j1eval[2];
                                                                                                                    j1eval[0]=((((0.999135601564979)*(px)*(sj2)))+(((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((-0.0415698169996759)*(cj2)*(px))));
                                                                                                                    j1eval[1]=((0.100000000000000)+(((-1.00000000000000)*(px))));
                                                                                                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                                                    {
                                                                                                                        {
                                                                                                                            if( 1 )
                                                                                                                            {
                                                                                                                            continue;
                                                                                                                        
                                                                                                                        } else
                                                                                                                        {
                                                                                                                        }
                                                                                                                        }
                                                                                                                    
                                                                                                                    } else
                                                                                                                    {
                                                                                                                        {
                                                                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                                        bool j1valid[1]={false};
                                                                                                                        j1array[0]=IKatan2(((((IKabs(((((0.999135601564979)*(px)*(sj2)))+(((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((-0.0415698169996759)*(cj2)*(px))))) != 0)?((IKReal)1/(((((0.999135601564979)*(px)*(sj2)))+(((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((-0.0415698169996759)*(cj2)*(px)))))):(IKReal)1.0e30))*(((((-0.999135601564979)*(cj2)*(py)))+(((-0.0415698169996759)*(py)*(sj2)))))), ((-0.721000000000000)*(((IKabs(((0.100000000000000)+(((-1.00000000000000)*(px))))) != 0)?((IKReal)1/(((0.100000000000000)+(((-1.00000000000000)*(px)))))):(IKReal)1.0e30))));
                                                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                                                        if( j1array[0] > IKPI )
                                                                                                                            j1array[0]-=IK2PI;
                                                                                                                        else if( j1array[0] < -IKPI )
                                                                                                                            j1array[0]+=IK2PI;
                                                                                                                        j1valid[0] = true;
                                                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                                        {
                                                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                                        
                                                                                                                        rotationfunction0(vsolutions);
                                                                                                                        }
                                                                                                                        }
                                                                                                                    
                                                                                                                    }
                                                                                                                
                                                                                                                }
                                                                                                            
                                                                                                            } else
                                                                                                            {
                                                                                                            }
                                                                                                            }
                                                                                                        
                                                                                                        } else
                                                                                                        {
                                                                                                            {
                                                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                            bool j1valid[1]={false};
                                                                                                            j1array[0]=IKatan2(((((IKabs(((((0.999135601564979)*(cj2)*(px)))+(((-0.00415698169996759)*(sj2)))+(((0.0415698169996759)*(px)*(sj2)))+(((-0.0999135601564980)*(cj2))))) != 0)?((IKReal)1/(((((0.999135601564979)*(cj2)*(px)))+(((-0.00415698169996759)*(sj2)))+(((0.0415698169996759)*(px)*(sj2)))+(((-0.0999135601564980)*(cj2)))))):(IKReal)1.0e30))*(((((0.999135601564979)*(py)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)))))), ((-0.138696255201110)+(((1.38696255201110)*(px)))));
                                                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                                                            if( j1array[0] > IKPI )
                                                                                                                j1array[0]-=IK2PI;
                                                                                                            else if( j1array[0] < -IKPI )
                                                                                                                j1array[0]+=IK2PI;
                                                                                                            j1valid[0] = true;
                                                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                            {
                                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                            
                                                                                                            rotationfunction0(vsolutions);
                                                                                                            }
                                                                                                            }
                                                                                                        
                                                                                                        }
                                                                                                    
                                                                                                    }
                                                                                                
                                                                                                } else
                                                                                                {
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            } else
                                                                                            {
                                                                                                {
                                                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1]={false};
                                                                                                j1array[0]=IKatan2(((((IKabs(((((0.999135601564979)*(px)*(sj2)))+(((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((-0.0415698169996759)*(cj2)*(px))))) != 0)?((IKReal)1/(((((0.999135601564979)*(px)*(sj2)))+(((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((-0.0415698169996759)*(cj2)*(px)))))):(IKReal)1.0e30))*(((((-0.999135601564979)*(cj2)*(py)))+(((-0.0415698169996759)*(py)*(sj2)))))), ((-0.138696255201110)+(((1.38696255201110)*(px)))));
                                                                                                sj1array[0]=IKsin(j1array[0]);
                                                                                                cj1array[0]=IKcos(j1array[0]);
                                                                                                if( j1array[0] > IKPI )
                                                                                                    j1array[0]-=IK2PI;
                                                                                                else if( j1array[0] < -IKPI )
                                                                                                    j1array[0]+=IK2PI;
                                                                                                j1valid[0] = true;
                                                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                
                                                                                                rotationfunction0(vsolutions);
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            }
                                                                                        
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                        evalcond[1]=py;
                                                                                        evalcond[2]=((0.509841000000000)+(((-0.200000000000000)*(px)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                        evalcond[3]=0;
                                                                                        evalcond[4]=((-1.00000000000000)*(py));
                                                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                                        {
                                                                                        {
                                                                                            IKReal j1eval[1];
                                                                                            j1eval[0]=((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(px)))+(((-0.999135601564979)*(px)*(sj2))));
                                                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                                                            {
                                                                                                {
                                                                                                    if( 1 )
                                                                                                    {
                                                                                                    {
                                                                                                        IKReal j1eval[1];
                                                                                                        j1eval[0]=((((-0.0415698169996759)*(px)*(sj2)))+(((-0.999135601564979)*(cj2)*(px)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2))));
                                                                                                        if( IKabs(j1eval[0]) < 0.000001  )
                                                                                                        {
                                                                                                            {
                                                                                                                if( 1 )
                                                                                                                {
                                                                                                                {
                                                                                                                    IKReal j1eval[2];
                                                                                                                    j1eval[0]=((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(px)))+(((-0.999135601564979)*(px)*(sj2))));
                                                                                                                    j1eval[1]=((0.100000000000000)+(px));
                                                                                                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                                                    {
                                                                                                                        {
                                                                                                                            if( 1 )
                                                                                                                            {
                                                                                                                            continue;
                                                                                                                        
                                                                                                                        } else
                                                                                                                        {
                                                                                                                        }
                                                                                                                        }
                                                                                                                    
                                                                                                                    } else
                                                                                                                    {
                                                                                                                        {
                                                                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                                        bool j1valid[1]={false};
                                                                                                                        j1array[0]=IKatan2(((((IKabs(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(px)))+(((-0.999135601564979)*(px)*(sj2))))) != 0)?((IKReal)1/(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(px)))+(((-0.999135601564979)*(px)*(sj2)))))):(IKReal)1.0e30))*(((((0.999135601564979)*(cj2)*(py)))+(((0.0415698169996759)*(py)*(sj2)))))), ((-0.721000000000000)*(((IKabs(((0.100000000000000)+(px))) != 0)?((IKReal)1/(((0.100000000000000)+(px)))):(IKReal)1.0e30))));
                                                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                                                        if( j1array[0] > IKPI )
                                                                                                                            j1array[0]-=IK2PI;
                                                                                                                        else if( j1array[0] < -IKPI )
                                                                                                                            j1array[0]+=IK2PI;
                                                                                                                        j1valid[0] = true;
                                                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                                        {
                                                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                                        
                                                                                                                        rotationfunction0(vsolutions);
                                                                                                                        }
                                                                                                                        }
                                                                                                                    
                                                                                                                    }
                                                                                                                
                                                                                                                }
                                                                                                            
                                                                                                            } else
                                                                                                            {
                                                                                                            }
                                                                                                            }
                                                                                                        
                                                                                                        } else
                                                                                                        {
                                                                                                            {
                                                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                            bool j1valid[1]={false};
                                                                                                            j1array[0]=IKatan2(((((IKabs(((((-0.0415698169996759)*(px)*(sj2)))+(((-0.999135601564979)*(cj2)*(px)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2))))) != 0)?((IKReal)1/(((((-0.0415698169996759)*(px)*(sj2)))+(((-0.999135601564979)*(cj2)*(px)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))))):(IKReal)1.0e30))*(((((0.0415698169996759)*(cj2)*(py)))+(((-0.999135601564979)*(py)*(sj2)))))), ((-0.138696255201110)+(((-1.38696255201110)*(px)))));
                                                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                                                            if( j1array[0] > IKPI )
                                                                                                                j1array[0]-=IK2PI;
                                                                                                            else if( j1array[0] < -IKPI )
                                                                                                                j1array[0]+=IK2PI;
                                                                                                            j1valid[0] = true;
                                                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                            {
                                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                            
                                                                                                            rotationfunction0(vsolutions);
                                                                                                            }
                                                                                                            }
                                                                                                        
                                                                                                        }
                                                                                                    
                                                                                                    }
                                                                                                
                                                                                                } else
                                                                                                {
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            } else
                                                                                            {
                                                                                                {
                                                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                                bool j1valid[1]={false};
                                                                                                j1array[0]=IKatan2(((((IKabs(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(px)))+(((-0.999135601564979)*(px)*(sj2))))) != 0)?((IKReal)1/(((((-0.0999135601564980)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.0415698169996759)*(cj2)*(px)))+(((-0.999135601564979)*(px)*(sj2)))))):(IKReal)1.0e30))*(((((0.999135601564979)*(cj2)*(py)))+(((0.0415698169996759)*(py)*(sj2)))))), ((-0.138696255201110)+(((-1.38696255201110)*(px)))));
                                                                                                sj1array[0]=IKsin(j1array[0]);
                                                                                                cj1array[0]=IKcos(j1array[0]);
                                                                                                if( j1array[0] > IKPI )
                                                                                                    j1array[0]-=IK2PI;
                                                                                                else if( j1array[0] < -IKPI )
                                                                                                    j1array[0]+=IK2PI;
                                                                                                j1valid[0] = true;
                                                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                                {
                                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                                
                                                                                                rotationfunction0(vsolutions);
                                                                                                }
                                                                                                }
                                                                                            
                                                                                            }
                                                                                        
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        continue;
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                    }
                                                                                    }
                                                                                
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                    bool j1valid[1]={false};
                                                                                    j1array[0]=IKatan2(((((IKabs(((((-0.0415698169996759)*(cj0)*(cj2)*(px)))+(((-0.0999135601564980)*(sj2)))+(((0.999135601564979)*(py)*(sj0)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(cj0)*(px)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)*(sj0))))) != 0)?((IKReal)1/(((((-0.0415698169996759)*(cj0)*(cj2)*(px)))+(((-0.0999135601564980)*(sj2)))+(((0.999135601564979)*(py)*(sj0)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(cj0)*(px)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)*(sj0)))))):(IKReal)1.0e30))*(((((-0.0415698169996759)*(cj0)*(py)*(sj2)))+(((-0.999135601564979)*(cj0)*(cj2)*(py)))+(((0.999135601564979)*(cj2)*(px)*(sj0)))+(((0.0415698169996759)*(px)*(sj0)*(sj2)))))), ((1.38696255201110)*(((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30))*(((py)+(((-0.100000000000000)*(sj0)))))));
                                                                                    sj1array[0]=IKsin(j1array[0]);
                                                                                    cj1array[0]=IKcos(j1array[0]);
                                                                                    if( j1array[0] > IKPI )
                                                                                        j1array[0]-=IK2PI;
                                                                                    else if( j1array[0] < -IKPI )
                                                                                        j1array[0]+=IK2PI;
                                                                                    j1valid[0] = true;
                                                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                    {
                                                                                    if( !j1valid[ij1] ) { continue; }
                                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                        bool j1valid[1]={false};
                                                                        j1array[0]=IKatan2(((((IKabs(((((0.999135601564979)*(cj2)*(py)*(sj0)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))+(((0.0415698169996759)*(cj0)*(px)*(sj2)))+(((0.999135601564979)*(cj0)*(cj2)*(px)))+(((0.0415698169996759)*(py)*(sj0)*(sj2))))) != 0)?((IKReal)1/(((((0.999135601564979)*(cj2)*(py)*(sj0)))+(((-0.00415698169996759)*(sj2)))+(((-0.0999135601564980)*(cj2)))+(((0.0415698169996759)*(cj0)*(px)*(sj2)))+(((0.999135601564979)*(cj0)*(cj2)*(px)))+(((0.0415698169996759)*(py)*(sj0)*(sj2)))))):(IKReal)1.0e30))*(((((-0.0415698169996759)*(cj0)*(cj2)*(py)))+(((-0.999135601564979)*(px)*(sj0)*(sj2)))+(((0.999135601564979)*(cj0)*(py)*(sj2)))+(((0.0415698169996759)*(cj2)*(px)*(sj0)))))), ((1.38696255201110)*(((IKabs(cj0) != 0)?((IKReal)1/(cj0)):(IKReal)1.0e30))*(((((-0.100000000000000)*(cj0)))+(px)))));
                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                        if( j1array[0] > IKPI )
                                                                            j1array[0]-=IK2PI;
                                                                        else if( j1array[0] < -IKPI )
                                                                            j1array[0]+=IK2PI;
                                                                        j1valid[0] = true;
                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                        {
                                                                        if( !j1valid[ij1] ) { continue; }
                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                            bool j1valid[1]={false};
                                                            j1array[0]=IKatan2(((((IKabs(((((-0.0415698169996759)*(cj0)*(cj2)*(px)))+(((-0.0999135601564980)*(sj2)))+(((0.999135601564979)*(py)*(sj0)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(cj0)*(px)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)*(sj0))))) != 0)?((IKReal)1/(((((-0.0415698169996759)*(cj0)*(cj2)*(px)))+(((-0.0999135601564980)*(sj2)))+(((0.999135601564979)*(py)*(sj0)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((0.999135601564979)*(cj0)*(px)*(sj2)))+(((-0.0415698169996759)*(cj2)*(py)*(sj0)))))):(IKReal)1.0e30))*(((((-0.0415698169996759)*(cj0)*(py)*(sj2)))+(((-0.999135601564979)*(cj0)*(cj2)*(py)))+(((0.999135601564979)*(cj2)*(px)*(sj0)))+(((0.0415698169996759)*(px)*(sj0)*(sj2)))))), ((1.38696255201110)*(((IKabs(cj0) != 0)?((IKReal)1/(cj0)):(IKReal)1.0e30))*(((((-0.100000000000000)*(cj0)))+(px)))));
                                                            sj1array[0]=IKsin(j1array[0]);
                                                            cj1array[0]=IKcos(j1array[0]);
                                                            if( j1array[0] > IKPI )
                                                                j1array[0]-=IK2PI;
                                                            else if( j1array[0] < -IKPI )
                                                                j1array[0]+=IK2PI;
                                                            j1valid[0] = true;
                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                            {
                                                            if( !j1valid[ij1] ) { continue; }
                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    continue;
                                                
                                                } else
                                                {
                                                }
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                bool j1valid[1]={false};
                                                IKReal x291=((0.320722528102358)*(cj2)*(sj3));
                                                IKReal x292=((0.0133439112568960)*(sj2)*(sj3));
                                                IKReal x293=((x291)+(x292));
                                                IKReal x294=((-1.00000000000000)*(x293));
                                                IKReal x295=((0.0320722528102358)*(cj2)*(sj3));
                                                IKReal x296=((0.00133439112568960)*(sj2)*(sj3));
                                                IKReal x297=((0.321000000000000)*(cj3)*(pz));
                                                IKReal x298=((0.400000000000000)*(pz));
                                                IKReal x299=((x298)+(x295)+(x296)+(x297));
                                                IKReal x300=((1.00000000000000)*(py)*(sj0)*(x291));
                                                IKReal x301=((py)*(sj0)*(x292));
                                                IKReal x302=((1.00000000000000)*(cj0)*(px)*(x291));
                                                IKReal x303=((cj0)*(px)*(x292));
                                                IKReal x304=((x302)+(x303)+(x300)+(x301));
                                                IKReal x305=((x299)+(((-1.00000000000000)*(x304))));
                                                IKReal x306=((IKabs(x305) != 0)?((IKReal)1/(x305)):(IKReal)1.0e30);
                                                j1array[0]=IKatan2(((x306)*(((((-1.00000000000000)*((pz)*(pz))))+((x294)*(x294))))), ((x306)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((x294)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
                                                sj1array[0]=IKsin(j1array[0]);
                                                cj1array[0]=IKcos(j1array[0]);
                                                if( j1array[0] > IKPI )
                                                    j1array[0]-=IK2PI;
                                                else if( j1array[0] < -IKPI )
                                                    j1array[0]+=IK2PI;
                                                j1valid[0] = true;
                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                {
                                                if( !j1valid[ij1] ) { continue; }
                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x307=((cj0)*(px));
                                    IKReal x308=((py)*(sj0));
                                    IKReal x309=((0.320722528102358)*(cj2)*(sj3));
                                    IKReal x310=((0.0133439112568960)*(sj2)*(sj3));
                                    IKReal x311=((x309)+(x310));
                                    IKReal x312=((-1.00000000000000)*(x311));
                                    IKReal x313=x1;
                                    IKReal x314=(sj0)*(sj0);
                                    IKReal x315=(x308)*(x308);
                                    IKReal x316=((2.00000000000000)*(x307)*(x308));
                                    IKReal x317=x4;
                                    IKReal x318=(cj0)*(cj0);
                                    IKReal x319=x0;
                                    IKReal x320=(x307)*(x307);
                                    IKReal x321=((0.0100000000000000)+(x320)+(x315)+(x317)+(x316));
                                    IKReal x322=((0.200000000000000)*(x307));
                                    IKReal x323=((0.200000000000000)*(x308));
                                    IKReal x324=((x322)+(x323));
                                    IKReal x325=((((-1.00000000000000)*(x324)))+(x321));
                                    IKReal x326=((IKabs(x325) != 0)?((IKReal)1/(x325)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((x326)*(((((-1.00000000000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-1.00000000000000)*(x312)*(((0.100000000000000)+(((-1.00000000000000)*(x307)))+(((-1.00000000000000)*(x308)))))))))), ((x326)*(((((-1.00000000000000)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))*(((0.100000000000000)+(((-1.00000000000000)*(x307)))+(((-1.00000000000000)*(x308)))))))+(((pz)*(x312)))))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                    {
                                    if( !j1valid[ij1] ) { continue; }
                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                        
                        } else
                        {
                        }
                        }
                    
                    } else
                    {
                        {
                        IKReal j1array[1], cj1array[1], sj1array[1];
                        bool j1valid[1]={false};
                        IKReal x327=((0.321000000000000)*(cj3));
                        IKReal x328=((0.400000000000000)+(x327));
                        IKReal x329=((0.0321000000000000)*(cj3));
                        IKReal x330=((0.0400000000000000)+(x329));
                        IKReal x331=((0.400000000000000)*(py)*(sj0));
                        IKReal x332=((py)*(sj0)*(x327));
                        IKReal x333=((0.400000000000000)*(cj0)*(px));
                        IKReal x334=((0.0133439112568960)*(pz)*(sj2)*(sj3));
                        IKReal x335=((cj0)*(px)*(x327));
                        IKReal x336=((0.320722528102358)*(cj2)*(pz)*(sj3));
                        IKReal x337=((x333)+(x332)+(x331)+(x336)+(x335)+(x334));
                        IKReal x338=((x330)+(((-1.00000000000000)*(x337))));
                        IKReal x339=((IKabs(x338) != 0)?((IKReal)1/(x338)):(IKReal)1.0e30);
                        j1array[0]=IKatan2(((-1.00000000000000)*(x339)*(((((x328)*(((((-0.0133439112568960)*(sj2)*(sj3)))+(((-0.320722528102358)*(cj2)*(sj3)))))))+(((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))), ((x339)*(((((-1.00000000000000)*((x328)*(x328))))+((pz)*(pz))))));
                        sj1array[0]=IKsin(j1array[0]);
                        cj1array[0]=IKcos(j1array[0]);
                        if( j1array[0] > IKPI )
                            j1array[0]-=IK2PI;
                        else if( j1array[0] < -IKPI )
                            j1array[0]+=IK2PI;
                        j1valid[0] = true;
                        for(int ij1 = 0; ij1 < 1; ++ij1)
                        {
                        if( !j1valid[ij1] ) { continue; }
                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                        
                        rotationfunction0(vsolutions);
                        }
                        }
                    
                    }
                
                }
                }
                }
            
            }
        
        }
            }
    
    } else
    {
    }
    }
}
return vsolutions.size()>0;
}
    inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        IKReal x11=((cj0)*(cj1)*(cj3));
        IKReal x12=((0.0415698169996759)*(cj2)*(sj0)*(sj3));
        IKReal x13=((x11)+(x12));
        IKReal x14=((0.999135601564979)*(cj0)*(cj2)*(sj1)*(sj3));
        IKReal x15=((0.999135601564979)*(sj0)*(sj2)*(sj3));
        IKReal x16=((0.0415698169996759)*(cj0)*(sj1)*(sj2)*(sj3));
        IKReal x17=((x15)+(x14)+(x16));
        IKReal x18=((((-1.00000000000000)*(x17)))+(x13));
        IKReal x19=((cj1)*(cj3)*(sj0));
        IKReal x20=((0.999135601564979)*(cj0)*(sj2)*(sj3));
        IKReal x21=((x19)+(x20));
        IKReal x22=((0.999135601564979)*(cj2)*(sj0)*(sj1)*(sj3));
        IKReal x23=((0.0415698169996759)*(cj0)*(cj2)*(sj3));
        IKReal x24=((0.0415698169996759)*(sj0)*(sj1)*(sj2)*(sj3));
        IKReal x25=((x24)+(x22)+(x23));
        IKReal x26=((((-1.00000000000000)*(x25)))+(x21));
        IKReal x27=((0.0415698169996759)*(cj1)*(sj2)*(sj3));
        IKReal x28=((0.999135601564979)*(cj1)*(cj2)*(sj3));
        IKReal x29=((cj3)*(sj1));
        IKReal x30=((x27)+(x28)+(x29));
        IKReal x31=((-1.00000000000000)*(x30));
        IKReal x32=((0.999135601564979)*(cj1)*(sj2));
        IKReal x33=((0.0415698169996759)*(cj1)*(cj2));
        IKReal x34=((((-1.00000000000000)*(x33)))+(x32));
        IKReal x35=((0.999135601564979)*(cj0)*(sj1)*(sj2));
        IKReal x36=((0.0415698169996759)*(cj0)*(cj2)*(sj1));
        IKReal x37=((0.0415698169996759)*(sj0)*(sj2));
        IKReal x38=((0.999135601564979)*(cj2)*(sj0));
        IKReal x39=((x38)+(x37)+(x36));
        IKReal x40=((((-1.00000000000000)*(x39)))+(x35));
        IKReal x41=((0.999135601564979)*(sj0)*(sj1)*(sj2));
        IKReal x42=((0.999135601564979)*(cj0)*(cj2));
        IKReal x43=((0.0415698169996759)*(cj0)*(sj2));
        IKReal x44=((x42)+(x43)+(x41));
        IKReal x45=((0.0415698169996759)*(cj2)*(sj0)*(sj1));
        IKReal x46=((((-1.00000000000000)*(x45)))+(x44));
        IKReal x47=((0.999135601564979)*(cj1)*(cj2)*(cj3));
        IKReal x48=((0.0415698169996759)*(cj1)*(cj3)*(sj2));
        IKReal x49=((x48)+(x47));
        IKReal x50=((sj1)*(sj3));
        IKReal x51=((x49)+(((-1.00000000000000)*(x50))));
        IKReal x52=((x29)*(x42));
        IKReal x53=((x29)*(x43));
        IKReal x54=((0.999135601564979)*(cj3)*(sj0)*(sj2));
        IKReal x55=((cj0)*(cj1)*(sj3));
        IKReal x56=((x55)+(x54)+(x53)+(x52));
        IKReal x57=((0.0415698169996759)*(cj2)*(cj3)*(sj0));
        IKReal x58=((x56)+(((-1.00000000000000)*(x57))));
        IKReal x59=((0.0415698169996759)*(cj0)*(cj2)*(cj3));
        IKReal x60=((cj1)*(sj0)*(sj3));
        IKReal x61=((x29)*(x38));
        IKReal x62=((x29)*(x37));
        IKReal x63=((x59)+(x60)+(x61)+(x62));
        IKReal x64=((0.999135601564979)*(cj0)*(cj3)*(sj2));
        IKReal x65=((x63)+(((-1.00000000000000)*(x64))));
        new_r00=((((r20)*(x31)))+(((r10)*(x26)))+(((r00)*(x18))));
        new_r01=((((r01)*(x18)))+(((r11)*(x26)))+(((r21)*(x31))));
        new_r02=((((r22)*(x31)))+(((r02)*(x18)))+(((r12)*(x26))));
        new_r10=((((r20)*(x34)))+(((r00)*(x40)))+(((r10)*(x46))));
        new_r11=((((r01)*(x40)))+(((r11)*(x46)))+(((r21)*(x34))));
        new_r12=((((r22)*(x34)))+(((r02)*(x40)))+(((r12)*(x46))));
        new_r20=((((r10)*(x65)))+(((r00)*(x58)))+(((r20)*(x51))));
        new_r21=((((r11)*(x65)))+(((r01)*(x58)))+(((r21)*(x51))));
        new_r22=((((r22)*(x51)))+(((r02)*(x58)))+(((r12)*(x65))));
        {
        IKReal j5eval;
        j5eval=new_r00;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(new_r12, new_r11)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
        
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(new_r21, ((-1.00000000000000)*(new_r22))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
        
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(new_r10, ((-1.00000000000000)*(new_r20)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond[1];
                evalcond[0]=IKsin(j4);
                if( IKabs(evalcond[0]) < 0.000010  )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r20)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), new_r00);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x66=IKcos(j4);
                IKReal x67=((IKabs(x66) != 0)?((IKReal)1/(x66)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((-1.00000000000000)*(new_r12)*(x67)), ((new_r11)*(x67)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
            
            } else
            {
                if( 1 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((new_r10)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), new_r00);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal evalcond[1];
                    evalcond[0]=IKsin(j5);
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x68=IKcos(j5);
                    IKReal x69=((IKabs(x68) != 0)?((IKReal)1/(x68)):(IKReal)1.0e30);
                    IKReal x70=IKsin(j4);
                    IKReal x71=IKcos(j4);
                    j6array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(x69)*(x70)))+(((new_r21)*(x69)*(x71)))), ((((new_r11)*(x71)))+(((new_r21)*(x70)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x72=IKsin(j5);
                    IKReal x73=((IKabs(x72) != 0)?((IKReal)1/(x72)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((new_r01)*(x73)), ((new_r02)*(x73)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                }
                }
                }
                }
                }
            
            } else
            {
            }
            }
            }
            }
            }
        
        }
        }
    }    /// Durand-Kerner polynomial root finding method
    static void polyroots3(IKReal rawcoeffs[3+1], IKReal rawroots[3], int& numroots)
    {
        using std::complex;
        assert(rawcoeffs[0] != 0);
        const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
        complex<IKReal> coeffs[3];
        const int maxsteps = 50;
        for(int i = 0; i < 3; ++i) {
            coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
        }
        complex<IKReal> roots[3];
        IKReal err[3];
        roots[0] = complex<IKReal>(1,0);
        roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
        err[0] = 1.0;
        err[1] = 1.0;
        for(int i = 2; i < 3; ++i) {
            roots[i] = roots[i-1]*roots[1];
            err[i] = 1.0;
        }
        for(int step = 0; step < maxsteps; ++step) {
            bool changed = false;
            for(int i = 0; i < 3; ++i) {
                if ( err[i] >= tol ) {
                    changed = true;
                    // evaluate
                    complex<IKReal> x = roots[i] + coeffs[0];
                    for(int j = 1; j < 3; ++j) {
                        x = roots[i] * x + coeffs[j];
                    }
                    for(int j = 0; j < 3; ++j) {
                        if( i != j ) {
                            if( roots[i] != roots[j] ) {
                                x /= (roots[i] - roots[j]);
                            }
                        }
                    }
                    roots[i] -= x;
                    err[i] = abs(x);
                }
            }
            if( !changed ) {
                break;
            }
        }
        numroots = 0;
        for(int i = 0; i < 3; ++i) {
            if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
                rawroots[numroots++] = real(roots[i]);
            }
        }
    }
    static void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
        IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
        if( det < 0 ) {
            numroots=0;
        }
        else if( det == 0 ) {
            rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
            numroots = 1;
        }
        else {
            det = IKsqrt(det);
            rawroots[0] = 0.5*(-rawcoeffs[1]+det)/rawcoeffs[0];
            rawroots[1] = 0.5*(-rawcoeffs[1]-det)/rawcoeffs[0];
            numroots = 2;
        }
    }
    /// intersection of a conic and the unit circle
    static void conicsolver(IKReal C0[6], IKReal roots[4], int& numroots)
    {
        IKReal rawcoeffs[4] = {-1,
                               C0[5] - C0[0] - C0[3],
                               C0[0]*C0[5] + C0[3]*C0[5] - C0[0]*C0[3] + C0[1]*C0[1] - C0[2]*C0[2] - C0[4]*C0[4],
                               C0[0]*C0[3]*C0[5] + 2*C0[1]*C0[2]*C0[4] - C0[0]*C0[4]*C0[4] - C0[3]*C0[2]*C0[2] - C0[5]*C0[1]*C0[1]};
        IKReal proots[3];
        int numproots, numyroots;
        polyroots3(rawcoeffs,proots,numproots);
        numroots = 0;
        int iroot=0;
        IKReal a, b, c, d, e, f;
        a = C0[0]+proots[iroot]; b = C0[1]; c = C0[3]+proots[iroot]; d = C0[2]; e = C0[4]; f = C0[5]-proots[iroot];
        IKReal adjugate[9] = {c*f-e*e, -b*f+e*d, b*e-c*d, -b*f+d*e, a*f-d*d, -a*e+b*d, b*e-d*c, -a*e+d*b, a*c-b*b};
        // find the greatest absolute value of adjugate and take that column
        int maxindex = 0;
        IKReal val = IKabs(adjugate[maxindex]);
        for(int i = 1; i < 9; ++i) {
            IKReal newval = IKabs(adjugate[i]);
            if( val < newval ) {
                val = newval;
                maxindex = i;
            }
        }
        maxindex = maxindex%3;
        if( adjugate[0] > 0 || adjugate[4] > 0 || adjugate[8] > 0 || adjugate[4*maxindex] >= 0 ) {
            // according to the structure of the matrix, should be always negative if a solution exists...
            return;
        }
        IKReal bmult = 1.0/IKsqrt(-adjugate[4*maxindex]);
        IKReal p[3] = {adjugate[maxindex]*bmult, adjugate[3+maxindex]*bmult, adjugate[6+maxindex]*bmult}; // intersection point
        // C = C0 - [p_x] = 2gh^t, C is rank1
        IKReal C[9] = {a,b+p[2],d-p[1],b-p[2],c,e+p[0],d+p[1],e-p[0],f};
        maxindex = 0;
        val = IKabs(C[maxindex]);
        for(int i = 1; i < 9; ++i) {
            IKReal newval = IKabs(C[i]);
            if( val < newval ) {
                val = newval;
                maxindex = i;
            }
        }
        int row = maxindex/3;
        int col = maxindex%3;
        IKReal lineequation[3], coeffs[3], yintersections[2];
        for(int i = 0; i < 2; ++i) {
            if( i == 0 ) {
                lineequation[0] = C[3*row];
                lineequation[1] = C[3*row+1];
                lineequation[2] = C[3*row+2];
            }
            else {
                lineequation[0] = C[col];
                lineequation[1] = C[3+col];
                lineequation[2] = C[6+col];
            }
    
            if( IKabs(lineequation[0]) < std::numeric_limits<IKReal>::epsilon() ) {
                yintersections[0] = -lineequation[2]/lineequation[1];
                IKReal x = 1-yintersections[0]*yintersections[0];
                if( x <= 0 && x > -std::numeric_limits<IKReal>::epsilon() ) {
                    roots[numroots++] = yintersections[0] > 0 ? IKPI_2 : -IKPI_2;
                }
                else {
                    x = IKsqrt(x);
                    roots[numroots++] = IKatan2(yintersections[0], x);
                    roots[numroots] = IKPI - roots[numroots-1]; numroots++;
                }
            }
            else {
                coeffs[0] = lineequation[0]*lineequation[0]+lineequation[1]*lineequation[1];
                coeffs[1] = 2*lineequation[1]*lineequation[2];
                coeffs[2] = lineequation[2]*lineequation[2]-lineequation[0]*lineequation[0];
                polyroots2(coeffs,yintersections,numyroots);
                for(int j = 0; j < numyroots; ++j) {
                    roots[numroots++] = IKatan2(yintersections[j],-(lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0]);
                }
            }
        }
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "30b0c746bc8e2c01a8b0478ad7acb287"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
