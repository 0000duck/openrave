/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-10-27 23:59:23.405029
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99,x100,x101,x102,x103,x104,x105,x106,x107,x108,x109,x110,x111,x112,x113,x114,x115,x116,x117,x118,x119,x120,x121,x122;
    x0=IKcos(j[3]);
    x1=IKcos(j[4]);
    x2=IKsin(j[5]);
    x3=IKcos(j[5]);
    x4=IKsin(j[3]);
    x5=IKcos(j[2]);
    x6=IKsin(j[2]);
    x7=IKsin(j[4]);
    x8=((0.0415698169996759)*(x0)*(x1)*(x2));
    x9=((0.0415698169996759)*(x3)*(x4));
    x10=((x9)+(x8));
    x11=((0.999135601564979)*(x0)*(x1)*(x2));
    x12=((0.999135601564979)*(x3)*(x4));
    x13=((x11)+(x12));
    x14=((-1.00000000000000)*(x13));
    x15=IKsin(j[0]);
    x16=IKsin(j[6]);
    x17=IKcos(j[6]);
    x18=IKcos(j[0]);
    x19=IKsin(j[1]);
    x20=((0.999135601564979)*(x1)*(x17));
    x21=((0.999135601564979)*(x16)*(x3)*(x7));
    x22=((0.0415698169996759)*(x16)*(x3)*(x7));
    x23=((0.0415698169996759)*(x1)*(x17));
    x24=((((-1.00000000000000)*(x23)))+(x22));
    x25=((0.0415698169996759)*(x1)*(x16)*(x3));
    x26=((0.0415698169996759)*(x17)*(x7));
    x27=((x25)+(x26));
    x28=((0.0415698169996759)*(x16)*(x2)*(x4));
    x29=((0.999135601564979)*(x1)*(x16)*(x3));
    x30=((0.999135601564979)*(x17)*(x7));
    x31=((x30)+(x29));
    x32=((x0)*(x31));
    x33=((0.999135601564979)*(x16)*(x2)*(x4));
    x34=((((-1.00000000000000)*(x33)))+(x32));
    x35=IKcos(j[1]);
    x36=((0.999135601564979)*(x1)*(x16));
    x37=((x3)*(x30));
    x38=((x37)+(x36));
    x39=((x20)*(x3));
    x40=((0.999135601564979)*(x16)*(x7));
    x41=((((-1.00000000000000)*(x40)))+(x39));
    x42=((x0)*(x41));
    x43=((0.999135601564979)*(x17)*(x2)*(x4));
    x44=((((-1.00000000000000)*(x43)))+(x42));
    x45=((0.0415698169996759)*(x17)*(x2)*(x4));
    x46=((0.0415698169996759)*(x16)*(x7));
    x47=((x23)*(x3));
    x48=((x26)*(x3));
    x49=((0.0415698169996759)*(x1)*(x16));
    x50=((x48)+(x49));
    x51=((x10)*(x5));
    x52=((x14)*(x6));
    x53=((x51)+(x52));
    x54=((0.999135601564979)*(x2)*(x5)*(x7));
    x55=((0.0415698169996759)*(x2)*(x6)*(x7));
    x56=((x55)+(x54));
    x57=((x53)+(((-1.00000000000000)*(x56))));
    x58=((x0)*(x3));
    x59=((x1)*(x2)*(x4));
    x60=((x58)+(((-1.00000000000000)*(x59))));
    x61=((x35)*(x60));
    x62=((-1.00000000000000)*(x10));
    x63=((x6)*(x62));
    x64=((x14)*(x5));
    x65=((0.999135601564979)*(x2)*(x6)*(x7));
    x66=((-0.0415698169996759)*(x2)*(x5)*(x7));
    x67=((x63)+(x64)+(x65)+(x66));
    x68=((x19)*(x67));
    x69=((x61)+(x68));
    x70=((((-1.00000000000000)*(x21)))+(x20));
    x71=((x6)*(x70));
    x72=((x24)*(x5));
    x73=((x0)*(x27));
    x74=((((-1.00000000000000)*(x28)))+(x73));
    x75=((x6)*(x74));
    x76=((x34)*(x5));
    x77=((x76)+(x75)+(x72)+(x71));
    x78=((x19)*(x77));
    x79=((x0)*(x16)*(x2));
    x80=((x1)*(x16)*(x3));
    x81=((x17)*(x7));
    x82=((x80)+(x81));
    x83=((x4)*(x82));
    x84=((x79)+(x83));
    x85=((x35)*(x84));
    x86=((x78)+(x85));
    x87=((((-1.00000000000000)*(x46)))+(x47));
    x88=((x0)*(x87));
    x89=((((-1.00000000000000)*(x45)))+(x88));
    x90=((-1.00000000000000)*(x38));
    x91=((x1)*(x17)*(x3));
    x92=((x16)*(x7));
    x93=((x91)+(((-1.00000000000000)*(x92))));
    x94=((x4)*(x93));
    x95=((x0)*(x17)*(x2));
    x96=((x95)+(x94));
    x97=((x35)*(x96));
    x98=((x6)*(x89));
    x99=((x6)*(x90));
    x100=((x44)*(x5));
    x101=((x5)*(x50));
    x102=((x100)+(x101)+(x99)+(x98));
    x103=((x102)*(x19));
    x104=((x103)+(x97));
    x105=((0.320722528102358)*(x4)*(x6));
    x106=((0.0133439112568960)*(x4)*(x5));
    x107=((0.321000000000000)*(x0));
    x108=((0.400000000000000)+(x107));
    x109=((x108)*(x35));
    x110=((0.320722528102358)*(x4)*(x5));
    x111=((0.0133439112568960)*(x4)*(x6));
    x112=((x111)+(x110));
    x113=((-1.00000000000000)*(x112));
    x114=((x113)*(x19));
    x115=((0.100000000000000)+(x114)+(x109));
    x116=((x5)*(x62));
    x117=((x13)*(x6));
    x118=((x117)+(x116)+(x56));
    x119=((x63)+(x64)+(x65));
    x120=((0.0415698169996759)*(x2)*(x5)*(x7));
    x121=((((-1.00000000000000)*(x120)))+(x119));
    x122=((x59)+(((-1.00000000000000)*(x58))));
    eerot[0]=((((x15)*(x57)))+(((x18)*(x69))));
    eerot[1]=((((x18)*(x86)))+(((x15)*(((((x5)*(((((-1.00000000000000)*(x0)*(x27)))+(x28)))))+(((x34)*(x6)))+(((x5)*(((((-1.00000000000000)*(x20)))+(x21)))))+(((x24)*(x6))))))));
    eerot[2]=((((x104)*(x18)))+(((x15)*(((((x50)*(x6)))+(((x5)*(((((x0)*(((((-1.00000000000000)*(x47)))+(x46)))))+(x45)))))+(((x44)*(x6)))+(((x38)*(x5))))))));
    eetrans[0]=((((0.180000000000000)*(x18)*(x69)))+(((x15)*(((((-1.00000000000000)*(x105)))+(x106)))))+(((x115)*(x18)))+(((0.180000000000000)*(x15)*(x57))));
    eerot[3]=((((x118)*(x18)))+(((x15)*(x69))));
    eerot[4]=((((x15)*(x86)))+(((x18)*(((((x6)*(((((-1.00000000000000)*(x0)*(x31)))+(x33)))))+(((x5)*(x74)))+(((x5)*(x70)))+(((x6)*(((((-1.00000000000000)*(x22)))+(x23))))))))));
    eerot[5]=((((x104)*(x15)))+(((x18)*(((((x6)*(((((x0)*(((((-1.00000000000000)*(x39)))+(x40)))))+(x43)))))+(((x5)*(x90)))+(((-1.00000000000000)*(x50)*(x6)))+(((x5)*(x89))))))));
    eetrans[1]=((-0.188000000000000)+(((x115)*(x15)))+(((0.180000000000000)*(x15)*(((((x121)*(x19)))+(x61)))))+(((x18)*(((((-1.00000000000000)*(x106)))+(x105)))))+(((0.180000000000000)*(x118)*(x18))));
    eerot[6]=((((x121)*(x35)))+(((x122)*(x19))));
    eerot[7]=((((x35)*(x77)))+(((x19)*(((((-1.00000000000000)*(x79)))+(((-1.00000000000000)*(x4)*(x82))))))));
    eerot[8]=((((x102)*(x35)))+(((x19)*(((((x4)*(((x92)+(((-1.00000000000000)*(x91)))))))+(((-1.00000000000000)*(x95))))))));
    eetrans[2]=((((x113)*(x35)))+(((0.180000000000000)*(x121)*(x35)))+(((0.180000000000000)*(x122)*(x19)))+(((-1.00000000000000)*(x108)*(x19))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
    r00 = eerot[0*3+0];
    r01 = eerot[0*3+1];
    r02 = eerot[0*3+2];
    r10 = eerot[1*3+0];
    r11 = eerot[1*3+1];
    r12 = eerot[1*3+2];
    r20 = eerot[2*3+0];
    r21 = eerot[2*3+1];
    r22 = eerot[2*3+2];
    px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
    
    new_r00=r00;
    new_r01=r01;
    new_r02=r02;
    new_px=((px)+(((-0.180000000000000)*(r00))));
    new_r10=r10;
    new_r11=r11;
    new_r12=r12;
    new_py=((0.188000000000000)+(py)+(((-0.180000000000000)*(r10))));
    new_r20=r20;
    new_r21=r21;
    new_r22=r22;
    new_pz=((pz)+(((-0.180000000000000)*(r20))));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        IKReal coniccoeffs[6], j0array[4];
        int numsolutions;
        IKReal x0=(px)*(px);
        IKReal x1=(py)*(py);
        IKReal x2=(sj2)*(sj2);
        IKReal x3=(cj2)*(cj2);
        IKReal x4=(pz)*(pz);
        IKReal x5=(px)*(px)*(px);
        IKReal x6=(py)*(py)*(py);
        IKReal x7=(px)*(px)*(px)*(px);
        IKReal x8=((0.0659462400000000)*(x0));
        IKReal x9=(py)*(py)*(py)*(py);
        IKReal x10=(pz)*(pz)*(pz)*(pz);
        coniccoeffs[0]=((((7.12239870527660e-6)*(x1)*(x3)))+(x8)+(((-0.0659462400000000)*(x1)))+(((0.00411451760129472)*(x1)*(x2)))+(((0.000342375436246816)*(cj2)*(sj2)*(x0)))+(((-0.000342375436246816)*(cj2)*(sj2)*(x1)))+(((-7.12239870527660e-6)*(x0)*(x3)))+(((-0.00411451760129472)*(x0)*(x2))));
        coniccoeffs[1]=((((0.000342375436246816)*(cj2)*(px)*(py)*(sj2)))+(((0.0659462400000000)*(px)*(py)))+(((-0.00411451760129472)*(px)*(py)*(x2)))+(((-7.12239870527660e-6)*(px)*(py)*(x3))));
        coniccoeffs[2]=((((0.0205725880064736)*(px)*(x0)*(x2)))+(((0.0205725880064736)*(px)*(x1)*(x2)))+(((3.56119935263830e-5)*(px)*(x1)*(x3)))+(((3.56119935263830e-5)*(px)*(x0)*(x3)))+(((0.0205725880064736)*(px)*(x2)*(x4)))+(((-0.00520570824174609)*(px)*(x2)))+(((3.56119935263830e-5)*(px)*(x3)*(x4)))+(((-0.00171187718123408)*(cj2)*(px)*(sj2)*(x4)))+(((-0.00171187718123408)*(cj2)*(px)*(sj2)*(x1)))+(((-0.00171187718123408)*(cj2)*(px)*(sj2)*(x0)))+(((-9.01129445390948e-6)*(px)*(x3)))+(((0.000433175113816652)*(cj2)*(px)*(sj2))));
        coniccoeffs[3]=0;
        coniccoeffs[4]=((((0.0205725880064736)*(py)*(x0)*(x2)))+(((3.56119935263830e-5)*(py)*(x1)*(x3)))+(((0.0205725880064736)*(py)*(x2)*(x4)))+(((0.0205725880064736)*(py)*(x1)*(x2)))+(((0.000433175113816652)*(cj2)*(py)*(sj2)))+(((-9.01129445390948e-6)*(py)*(x3)))+(((-0.00520570824174609)*(py)*(x2)))+(((3.56119935263830e-5)*(py)*(x3)*(x4)))+(((3.56119935263830e-5)*(py)*(x0)*(x3)))+(((-0.00171187718123408)*(cj2)*(py)*(sj2)*(x0)))+(((-0.00171187718123408)*(cj2)*(py)*(sj2)*(x1)))+(((-0.00171187718123408)*(cj2)*(py)*(sj2)*(x4))));
        coniccoeffs[5]=((((3.41250560287954e-7)*(x3)))+(((-0.102862940032368)*(x10)*(x2)))+(((0.0520570824174609)*(x0)*(x2)))+(((0.00855938590617039)*(cj2)*(sj2)*(x9)))+(((0.00855938590617039)*(cj2)*(sj2)*(x7)))+(((-0.00433175113816652)*(cj2)*(sj2)*(x4)))+(((-0.00433175113816652)*(cj2)*(sj2)*(x0)))+(((-0.000178059967631915)*(x3)*(x9)))+(((-0.000178059967631915)*(x3)*(x7)))+(((-0.102862940032368)*(x2)*(x7)))+(((-0.102862940032368)*(x2)*(x9)))+(((0.0479425648161662)*(x1)*(x2)))+(((-0.205725880064736)*(x0)*(x1)*(x2)))+(((9.01129445390948e-5)*(x0)*(x3)))+(((-0.205725880064736)*(x1)*(x2)*(x4)))+(((-0.000356119935263830)*(x0)*(x1)*(x3)))+(((-0.00398937570191971)*(cj2)*(sj2)*(x1)))+(((0.0171187718123408)*(cj2)*(sj2)*(x1)*(x4)))+(((-1.00000000000000)*(x8)))+(((-0.000356119935263830)*(x0)*(x3)*(x4)))+(((0.0520570824174609)*(x2)*(x4)))+(((9.01129445390948e-5)*(x3)*(x4)))+(((-0.205725880064736)*(x0)*(x2)*(x4)))+(((-0.000178059967631915)*(x10)*(x3)))+(((8.29905458338182e-5)*(x1)*(x3)))+(((0.00855938590617039)*(cj2)*(sj2)*(x10)))+(((-0.000356119935263830)*(x1)*(x3)*(x4)))+(((0.0171187718123408)*(cj2)*(sj2)*(x0)*(x4)))+(((0.0171187718123408)*(cj2)*(sj2)*(x0)*(x1)))+(((0.000197136034481791)*(x2)))+(((-1.64039973445324e-5)*(cj2)*(sj2))));
        conicsolver(coniccoeffs,j0array,numsolutions);
        for(int ij0 = 0; ij0 < numsolutions; ++ij0)
        {
            j0 = j0array[ij0]; cj0 = IKcos(j0); sj0 = IKsin(j0);
        
        {
            IKReal j3eval[1];
            j3eval[0]=((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))));
            if( IKabs(j3eval[0]) < 0.000001  )
            {
                {
                IKReal evalcond[1];
                    evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j3array[1], cj3array[1], sj3array[1];
                    bool j3valid[1]={false};
                    j3array[0]=IKatan2(((((5.76460752303423e+17)*(cj0)*(py)))+(((-5.76460752303423e+17)*(px)*(sj0)))), ((-0.985362149532710)+(((3.89408099688473)*((pz)*(pz))))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(py)*(sj0)))+(((3.89408099688473)*((py)*(py))))+(((-0.778816199376947)*(cj0)*(px)))));
                    sj3array[0]=IKsin(j3array[0]);
                    cj3array[0]=IKcos(j3array[0]);
                    if( j3array[0] > IKPI )
                        j3array[0]-=IK2PI;
                    else if( j3array[0] < -IKPI )
                        j3array[0]+=IK2PI;
                    j3valid[0] = true;
                    for(int ij3 = 0; ij3 < 1; ++ij3)
                    {
                    if( !j3valid[ij3] ) { continue; }
                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                    
                    {
                        IKReal j1eval[1];
                        j1eval[0]=((((-0.103041000000000)*((sj3)*(sj3))))+(((-1.00000000000000)*((((0.400000000000000)+(((0.321000000000000)*(cj3)))))*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j1eval[1];
                                    j1eval[0]=((((0.321000000000000)*(sj3)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((pz)*(((0.400000000000000)+(((0.321000000000000)*(cj3))))))));
                                    if( IKabs(j1eval[0]) < 0.000001  )
                                    {
                                        {
                                            if( 1 )
                                            {
                                            continue;
                                        
                                        } else
                                        {
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        IKReal x11=((cj0)*(px));
                                        IKReal x12=((py)*(sj0));
                                        IKReal x13=((x11)+(x12));
                                        IKReal x14=((0.100000000000000)+(((-1.00000000000000)*(x13))));
                                        IKReal x15=((0.321000000000000)*(sj3)*(x14));
                                        IKReal x16=((0.321000000000000)*(cj3));
                                        IKReal x17=((0.400000000000000)+(x16));
                                        IKReal x18=((pz)*(x17));
                                        IKReal x19=((x15)+(x18));
                                        IKReal x20=((IKabs(x19) != 0)?((IKReal)1/(x19)):(IKReal)1.0e30);
                                        j1array[0]=IKatan2(((x20)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x20)*(((((-0.321000000000000)*(sj3)*(x17)))+(((-1.00000000000000)*(pz)*(x14)))))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x88=((0.321000000000000)*(cj3));
                            IKReal x89=((0.400000000000000)+(x88));
                            IKReal x90=((cj0)*(px));
                            IKReal x91=((py)*(sj0));
                            IKReal x92=((x91)+(x90));
                            IKReal x93=((0.100000000000000)+(((-1.00000000000000)*(x92))));
                            IKReal x94=(x89)*(x89);
                            IKReal x95=(sj3)*(sj3);
                            IKReal x96=((0.103041000000000)*(x95));
                            IKReal x97=((x94)+(x96));
                            IKReal x98=((-1.00000000000000)*(x97));
                            IKReal x99=((IKabs(x98) != 0)?((IKReal)1/(x98)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((x99)*(((((-0.321000000000000)*(sj3)*(x93)))+(((pz)*(x89)))))), ((x99)*(((((x89)*(x93)))+(((0.321000000000000)*(pz)*(sj3)))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            for(int ij1 = 0; ij1 < 1; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                    }
                    }
                
                } else
                {
                    evalcond[0]=((IKfmod(((-3.18317445236063)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j3array[1], cj3array[1], sj3array[1];
                    bool j3valid[1]={false};
                    j3array[0]=IKatan2(((((-5.24055229366749e+16)*(px)*(sj0)))+(((5.24055229366749e+16)*(cj0)*(py)))), ((-0.985362149532710)+(((3.89408099688473)*((pz)*(pz))))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(py)*(sj0)))+(((3.89408099688473)*((py)*(py))))+(((-0.778816199376947)*(cj0)*(px)))));
                    sj3array[0]=IKsin(j3array[0]);
                    cj3array[0]=IKcos(j3array[0]);
                    if( j3array[0] > IKPI )
                        j3array[0]-=IK2PI;
                    else if( j3array[0] < -IKPI )
                        j3array[0]+=IK2PI;
                    j3valid[0] = true;
                    for(int ij3 = 0; ij3 < 1; ++ij3)
                    {
                    if( !j3valid[ij3] ) { continue; }
                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                    
                    {
                        IKReal j1eval[1];
                        j1eval[0]=((((-0.103041000000000)*((sj3)*(sj3))))+(((-1.00000000000000)*((((0.400000000000000)+(((0.321000000000000)*(cj3)))))*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j1eval[1];
                                    j1eval[0]=((((-0.321000000000000)*(sj3)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((pz)*(((0.400000000000000)+(((0.321000000000000)*(cj3))))))));
                                    if( IKabs(j1eval[0]) < 0.000001  )
                                    {
                                        {
                                            if( 1 )
                                            {
                                            continue;
                                        
                                        } else
                                        {
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        IKReal x100=((0.321000000000000)*(cj3));
                                        IKReal x101=((0.400000000000000)+(x100));
                                        IKReal x102=((cj0)*(px));
                                        IKReal x103=((py)*(sj0));
                                        IKReal x104=((x102)+(x103));
                                        IKReal x105=((0.100000000000000)+(((-1.00000000000000)*(x104))));
                                        IKReal x106=((pz)*(x101));
                                        IKReal x107=((0.321000000000000)*(sj3)*(x105));
                                        IKReal x108=((((-1.00000000000000)*(x107)))+(x106));
                                        IKReal x109=((IKabs(x108) != 0)?((IKReal)1/(x108)):(IKReal)1.0e30);
                                        j1array[0]=IKatan2(((x109)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x109)*(((((-1.00000000000000)*(pz)*(x105)))+(((0.321000000000000)*(sj3)*(x101)))))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x110=((0.321000000000000)*(cj3));
                            IKReal x111=((0.400000000000000)+(x110));
                            IKReal x112=((cj0)*(px));
                            IKReal x113=((py)*(sj0));
                            IKReal x114=((x113)+(x112));
                            IKReal x115=((0.100000000000000)+(((-1.00000000000000)*(x114))));
                            IKReal x116=(x111)*(x111);
                            IKReal x117=(sj3)*(sj3);
                            IKReal x118=((0.103041000000000)*(x117));
                            IKReal x119=((x116)+(x118));
                            IKReal x120=((-1.00000000000000)*(x119));
                            IKReal x121=((IKabs(x120) != 0)?((IKReal)1/(x120)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((x121)*(((((0.321000000000000)*(sj3)*(x115)))+(((pz)*(x111)))))), ((x121)*(((((x111)*(x115)))+(((-0.321000000000000)*(pz)*(sj3)))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            for(int ij1 = 0; ij1 < 1; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                        IKReal j1eval[1];
                        j1eval[0]=((((-0.800000000000000)*(pz)*(((((-0.0415698169996759)*(cj2)*(pz)))+(((0.999135601564979)*(pz)*(sj2)))))))+(((((0.0800000000000000)+(((-0.800000000000000)*(py)*(sj0)))+(((-0.800000000000000)*(cj0)*(px)))))*(((((-0.0415698169996759)*(cj0)*(cj2)*(px)))+(((0.999135601564979)*(py)*(sj0)*(sj2)))+(((-0.0999135601564980)*(sj2)))+(((0.999135601564979)*(cj0)*(px)*(sj2)))+(((0.00415698169996759)*(cj2)))+(((-0.0415698169996759)*(cj2)*(py)*(sj0))))))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                continue;
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x122=((0.800000000000000)*(py)*(sj0));
                            IKReal x123=((0.800000000000000)*(cj0)*(px));
                            IKReal x124=((x122)+(x123));
                            IKReal x125=((0.0800000000000000)+(((-1.00000000000000)*(x124))));
                            IKReal x126=((0.999135601564979)*(pz)*(sj2));
                            IKReal x127=((0.0415698169996759)*(cj2)*(pz));
                            IKReal x128=((((-1.00000000000000)*(x127)))+(x126));
                            IKReal x129=((0.999135601564979)*(cj2)*(px)*(sj0));
                            IKReal x130=((0.0415698169996759)*(px)*(sj0)*(sj2));
                            IKReal x131=x0;
                            IKReal x132=x1;
                            IKReal x133=x4;
                            IKReal x134=((0.200000000000000)*(cj0)*(px));
                            IKReal x135=((0.200000000000000)*(py)*(sj0));
                            IKReal x136=((0.999135601564979)*(py)*(sj0)*(sj2));
                            IKReal x137=((0.999135601564979)*(cj0)*(px)*(sj2));
                            IKReal x138=((0.00415698169996759)*(cj2));
                            IKReal x139=((x137)+(x136)+(x138));
                            IKReal x140=((0.0415698169996759)*(cj0)*(cj2)*(px));
                            IKReal x141=((0.0999135601564980)*(sj2));
                            IKReal x142=((0.0415698169996759)*(cj2)*(py)*(sj0));
                            IKReal x143=((x140)+(x141)+(x142));
                            IKReal x144=((((-1.00000000000000)*(x143)))+(x139));
                            IKReal x145=((x125)*(x144));
                            IKReal x146=((0.800000000000000)*(pz)*(x128));
                            IKReal x147=((((-1.00000000000000)*(x146)))+(x145));
                            IKReal x148=((IKabs(x147) != 0)?((IKReal)1/(x147)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((x148)*(((((x128)*(((0.0669590000000000)+(x131)+(x133)+(x132)+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x135)))))))+(((x125)*(((((-0.999135601564979)*(cj0)*(cj2)*(py)))+(x130)+(x129)+(((-0.0415698169996759)*(cj0)*(py)*(sj2)))))))))), ((x148)*(((((-1.00000000000000)*(x144)*(((0.0669590000000000)+(x131)+(x133)+(x132)+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x135)))))))+(((0.800000000000000)*(pz)*(((((-1.00000000000000)*(x129)))+(((-1.00000000000000)*(x130)))+(((0.0415698169996759)*(cj0)*(py)*(sj2)))+(((0.999135601564979)*(cj0)*(cj2)*(py)))))))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            for(int ij1 = 0; ij1 < 1; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            {
                                IKReal j3eval[1];
                                j3eval[0]=((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))));
                                if( IKabs(j3eval[0]) < 0.000001  )
                                {
                                    {
                                    IKReal evalcond[3];
                                        evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                        evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
                                        evalcond[2]=((((6.93889390390723e-18)*(cj1)*(pz)))+(((-1.00000000000000)*(px)*(sj0)))+(((6.93889390390723e-18)*(cj0)*(px)*(sj1)))+(((6.93889390390723e-18)*(py)*(sj0)*(sj1)))+(((cj0)*(py)))+(((-8.67361737988404e-19)*(sj1))));
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                        {
                                        {
                                            IKReal j3eval[1];
                                            j3eval[0]=sj1;
                                            if( IKabs(j3eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[3];
                                                    evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj0)*(px)))+(((py)*(sj0))));
                                                    evalcond[2]=((((6.93889390390723e-18)*(pz)))+(((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                    {
                                                    {
                                                    IKReal j3array[1], cj3array[1], sj3array[1];
                                                    bool j3valid[1]={false};
                                                    j3array[0]=IKatan2(((-3.11526479750779)*(pz)), ((-1.55763239875389)+(((3.11526479750779)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(px)))));
                                                    sj3array[0]=IKsin(j3array[0]);
                                                    cj3array[0]=IKcos(j3array[0]);
                                                    if( j3array[0] > IKPI )
                                                        j3array[0]-=IK2PI;
                                                    else if( j3array[0] < -IKPI )
                                                        j3array[0]+=IK2PI;
                                                    j3valid[0] = true;
                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                    {
                                                    if( !j3valid[ij3] ) { continue; }
                                                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-0.600000000000000)*(cj0)*(px)))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(py)*(sj0))));
                                                    evalcond[2]=((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))+(((-6.93889390390723e-18)*(pz))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                    {
                                                    {
                                                    IKReal j3array[1], cj3array[1], sj3array[1];
                                                    bool j3valid[1]={false};
                                                    j3array[0]=IKatan2(((3.11526479750779)*(pz)), ((-0.934579439252337)+(((-3.11526479750779)*(cj0)*(px)))+(((-3.11526479750779)*(py)*(sj0)))));
                                                    sj3array[0]=IKsin(j3array[0]);
                                                    cj3array[0]=IKcos(j3array[0]);
                                                    if( j3array[0] > IKPI )
                                                        j3array[0]-=IK2PI;
                                                    else if( j3array[0] < -IKPI )
                                                        j3array[0]+=IK2PI;
                                                    j3valid[0] = true;
                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                    {
                                                    if( !j3valid[ij3] ) { continue; }
                                                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    continue;
                                                
                                                } else
                                                {
                                                }
                                                }
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j3array[1], cj3array[1], sj3array[1];
                                                bool j3valid[1]={false};
                                                j3array[0]=IKatan2(((((5.76460752303423e+17)*(cj0)*(py)))+(((-5.76460752303423e+17)*(px)*(sj0)))), ((-1.79582788879571e+18)*(((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((-0.321000000000000)*(cj1)*(((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))))+(((1.73472347597681e-18)*(pz)))+(((6.93889390390723e-19)*(sj1)))))));
                                                sj3array[0]=IKsin(j3array[0]);
                                                cj3array[0]=IKcos(j3array[0]);
                                                if( j3array[0] > IKPI )
                                                    j3array[0]-=IK2PI;
                                                else if( j3array[0] < -IKPI )
                                                    j3array[0]+=IK2PI;
                                                j3valid[0] = true;
                                                for(int ij3 = 0; ij3 < 1; ++ij3)
                                                {
                                                if( !j3valid[ij3] ) { continue; }
                                                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                        evalcond[0]=((IKfmod(((-3.18317445236063)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                        evalcond[1]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
                                        evalcond[2]=((((5.55111512312578e-17)*(py)*(sj0)*(sj1)))+(((5.55111512312578e-17)*(cj0)*(px)*(sj1)))+(((5.55111512312578e-17)*(cj1)*(pz)))+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))+(((-5.20417042793042e-18)*(sj1))));
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                        {
                                        {
                                            IKReal j3eval[1];
                                            j3eval[0]=sj1;
                                            if( IKabs(j3eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[3];
                                                    evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj0)*(px)))+(((py)*(sj0))));
                                                    evalcond[2]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))+(((5.55111512312578e-17)*(pz))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                    {
                                                    {
                                                    IKReal j3array[1], cj3array[1], sj3array[1];
                                                    bool j3valid[1]={false};
                                                    j3array[0]=IKatan2(((3.11526479750779)*(pz)), ((-1.55763239875389)+(((3.11526479750779)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(px)))));
                                                    sj3array[0]=IKsin(j3array[0]);
                                                    cj3array[0]=IKcos(j3array[0]);
                                                    if( j3array[0] > IKPI )
                                                        j3array[0]-=IK2PI;
                                                    else if( j3array[0] < -IKPI )
                                                        j3array[0]+=IK2PI;
                                                    j3valid[0] = true;
                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                    {
                                                    if( !j3valid[ij3] ) { continue; }
                                                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-0.600000000000000)*(cj0)*(px)))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(py)*(sj0))));
                                                    evalcond[2]=((((-5.55111512312578e-17)*(pz)))+(((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                    {
                                                    {
                                                    IKReal j3array[1], cj3array[1], sj3array[1];
                                                    bool j3valid[1]={false};
                                                    j3array[0]=IKatan2(((-3.11526479750779)*(pz)), ((-0.934579439252337)+(((-3.11526479750779)*(cj0)*(px)))+(((-3.11526479750779)*(py)*(sj0)))));
                                                    sj3array[0]=IKsin(j3array[0]);
                                                    cj3array[0]=IKcos(j3array[0]);
                                                    if( j3array[0] > IKPI )
                                                        j3array[0]-=IK2PI;
                                                    else if( j3array[0] < -IKPI )
                                                        j3array[0]+=IK2PI;
                                                    j3valid[0] = true;
                                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                                    {
                                                    if( !j3valid[ij3] ) { continue; }
                                                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    continue;
                                                
                                                } else
                                                {
                                                }
                                                }
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j3array[1], cj3array[1], sj3array[1];
                                                bool j3valid[1]={false};
                                                j3array[0]=IKatan2(((((-5.24055229366749e+16)*(px)*(sj0)))+(((5.24055229366749e+16)*(cj0)*(py)))), ((-1.63257080799610e+17)*(((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((0.321000000000000)*(cj1)*(((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0)))))))+(((7.63278329429795e-18)*(sj1)))+(((1.90819582357449e-17)*(pz)))))));
                                                sj3array[0]=IKsin(j3array[0]);
                                                cj3array[0]=IKcos(j3array[0]);
                                                if( j3array[0] > IKPI )
                                                    j3array[0]-=IK2PI;
                                                else if( j3array[0] < -IKPI )
                                                    j3array[0]+=IK2PI;
                                                j3valid[0] = true;
                                                for(int ij3 = 0; ij3 < 1; ++ij3)
                                                {
                                                if( !j3valid[ij3] ) { continue; }
                                                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                        if( 1 )
                                        {
                                        continue;
                                    
                                    } else
                                    {
                                    }
                                    }
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j3array[1], cj3array[1], sj3array[1];
                                    bool j3valid[1]={false};
                                    j3array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((-0.311526479750779)*(cj1)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))));
                                    sj3array[0]=IKsin(j3array[0]);
                                    cj3array[0]=IKcos(j3array[0]);
                                    if( j3array[0] > IKPI )
                                        j3array[0]-=IK2PI;
                                    else if( j3array[0] < -IKPI )
                                        j3array[0]+=IK2PI;
                                    j3valid[0] = true;
                                    for(int ij3 = 0; ij3 < 1; ++ij3)
                                    {
                                    if( !j3valid[ij3] ) { continue; }
                                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                }
                }
                }
                }
            
            } else
            {
                {
                IKReal j3array[1], cj3array[1], sj3array[1];
                bool j3valid[1]={false};
                j3array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj2)))+(((0.320722528102358)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-0.985362149532710)+(((3.89408099688473)*((py)*(py))))+(((3.89408099688473)*((pz)*(pz))))+(((-0.778816199376947)*(cj0)*(px)))+(((-0.778816199376947)*(py)*(sj0)))+(((3.89408099688473)*((px)*(px))))));
                sj3array[0]=IKsin(j3array[0]);
                cj3array[0]=IKcos(j3array[0]);
                if( j3array[0] > IKPI )
                    j3array[0]-=IK2PI;
                else if( j3array[0] < -IKPI )
                    j3array[0]+=IK2PI;
                j3valid[0] = true;
                for(int ij3 = 0; ij3 < 1; ++ij3)
                {
                if( !j3valid[ij3] ) { continue; }
                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                
                {
                    IKReal j1eval[1];
                    j1eval[0]=((((-1.00000000000000)*((pz)*(pz))))+(((-1.00000000000000)*((((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))));
                    if( IKabs(j1eval[0]) < 0.000001  )
                    {
                        {
                            if( 1 )
                            {
                            {
                                IKReal j1eval[1];
                                j1eval[0]=((((-1.00000000000000)*(pz)*(((((0.320722528102358)*(cj2)*(sj3)))+(((0.0133439112568960)*(sj2)*(sj3)))))))+(((((0.400000000000000)+(((0.321000000000000)*(cj3)))))*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))))))));
                                if( IKabs(j1eval[0]) < 0.000001  )
                                {
                                    {
                                        if( 1 )
                                        {
                                        continue;
                                    
                                    } else
                                    {
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x149=((cj0)*(px));
                                    IKReal x150=((py)*(sj0));
                                    IKReal x151=((x150)+(x149));
                                    IKReal x152=((0.100000000000000)+(((-1.00000000000000)*(x151))));
                                    IKReal x153=((0.320722528102358)*(cj2)*(sj3));
                                    IKReal x154=((0.0133439112568960)*(sj2)*(sj3));
                                    IKReal x155=((x154)+(x153));
                                    IKReal x156=((-1.00000000000000)*(x155));
                                    IKReal x157=((0.321000000000000)*(cj3));
                                    IKReal x158=((0.400000000000000)+(x157));
                                    IKReal x159=((x152)*(x158));
                                    IKReal x160=((pz)*(x156));
                                    IKReal x161=((x160)+(x159));
                                    IKReal x162=((IKabs(x161) != 0)?((IKReal)1/(x161)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((x162)*(((((-1.00000000000000)*(pz)*(x152)))+(((-1.00000000000000)*(x156)*(x158)))))), ((x162)*(((((-1.00000000000000)*((x158)*(x158))))+((pz)*(pz))))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                    {
                                    if( !j1valid[ij1] ) { continue; }
                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                        
                        } else
                        {
                        }
                        }
                    
                    } else
                    {
                        {
                        IKReal j1array[1], cj1array[1], sj1array[1];
                        bool j1valid[1]={false};
                        IKReal x163=((cj0)*(px));
                        IKReal x164=((py)*(sj0));
                        IKReal x165=((x163)+(x164));
                        IKReal x166=((0.100000000000000)+(((-1.00000000000000)*(x165))));
                        IKReal x167=((0.321000000000000)*(cj3));
                        IKReal x168=((0.400000000000000)+(x167));
                        IKReal x169=((0.320722528102358)*(cj2)*(sj3));
                        IKReal x170=((0.0133439112568960)*(sj2)*(sj3));
                        IKReal x171=((x170)+(x169));
                        IKReal x172=((-1.00000000000000)*(x171));
                        IKReal x173=(x166)*(x166);
                        IKReal x174=x4;
                        IKReal x175=((x173)+(x174));
                        IKReal x176=((-1.00000000000000)*(x175));
                        IKReal x177=((IKabs(x176) != 0)?((IKReal)1/(x176)):(IKReal)1.0e30);
                        j1array[0]=IKatan2(((x177)*(((((pz)*(x168)))+(((x166)*(x172)))))), ((x177)*(((((-1.00000000000000)*(pz)*(x172)))+(((x166)*(x168)))))));
                        sj1array[0]=IKsin(j1array[0]);
                        cj1array[0]=IKcos(j1array[0]);
                        if( j1array[0] > IKPI )
                            j1array[0]-=IK2PI;
                        else if( j1array[0] < -IKPI )
                            j1array[0]+=IK2PI;
                        j1valid[0] = true;
                        for(int ij1 = 0; ij1 < 1; ++ij1)
                        {
                        if( !j1valid[ij1] ) { continue; }
                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                        
                        rotationfunction0(vsolutions);
                        }
                        }
                    
                    }
                
                }
                }
                }
            
            }
        
        }
            }
    
    } else
    {
    }
    }
}
return vsolutions.size()>0;
}
    void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        IKReal x21=((0.0415698169996759)*(cj1)*(sj2));
        IKReal x22=((0.999135601564979)*(cj1)*(cj2));
        IKReal x23=((x21)+(x22));
        IKReal x24=((-1.00000000000000)*(x23));
        IKReal x25=((sj3)*(x24));
        IKReal x26=((cj3)*(sj1));
        IKReal x27=((((-1.00000000000000)*(x26)))+(x25));
        IKReal x28=((cj1)*(cj3)*(sj0));
        IKReal x29=((0.0415698169996759)*(cj0));
        IKReal x30=((0.999135601564979)*(sj0)*(sj1));
        IKReal x31=((x30)+(x29));
        IKReal x32=((-1.00000000000000)*(x31));
        IKReal x33=((cj2)*(x32));
        IKReal x34=((0.999135601564979)*(cj0));
        IKReal x35=((0.0415698169996759)*(sj0)*(sj1));
        IKReal x36=((((-1.00000000000000)*(x35)))+(x34));
        IKReal x37=((sj2)*(x36));
        IKReal x38=((x33)+(x37));
        IKReal x39=((sj3)*(x38));
        IKReal x40=((x39)+(x28));
        IKReal x41=((0.999135601564979)*(sj0));
        IKReal x42=((sj1)*(x29));
        IKReal x43=((x42)+(x41));
        IKReal x44=((-1.00000000000000)*(x43));
        IKReal x45=((sj2)*(x44));
        IKReal x46=((0.0415698169996759)*(sj0));
        IKReal x47=((sj1)*(x34));
        IKReal x48=((((-1.00000000000000)*(x47)))+(x46));
        IKReal x49=((cj2)*(x48));
        IKReal x50=((x49)+(x45));
        IKReal x51=((sj3)*(x50));
        IKReal x52=((cj0)*(cj1)*(cj3));
        IKReal x53=((x51)+(x52));
        IKReal x54=((0.999135601564979)*(cj1)*(sj2));
        IKReal x55=((0.0415698169996759)*(cj1)*(cj2));
        IKReal x56=((x54)+(((-1.00000000000000)*(x55))));
        IKReal x57=((cj2)*(x44));
        IKReal x58=((((-1.00000000000000)*(x46)))+(x47));
        IKReal x59=((sj2)*(x58));
        IKReal x60=((x59)+(x57));
        IKReal x61=((sj2)*(x31));
        IKReal x62=((cj2)*(x36));
        IKReal x63=((x61)+(x62));
        IKReal x64=((cj3)*(x23));
        IKReal x65=((sj1)*(sj3));
        IKReal x66=((x64)+(((-1.00000000000000)*(x65))));
        IKReal x67=((cj2)*(x31));
        IKReal x68=((((-1.00000000000000)*(x34)))+(x35));
        IKReal x69=((sj2)*(x68));
        IKReal x70=((x67)+(x69));
        IKReal x71=((cj3)*(x70));
        IKReal x72=((cj1)*(sj0)*(sj3));
        IKReal x73=((x72)+(x71));
        IKReal x74=((cj2)*(x58));
        IKReal x75=((sj2)*(x43));
        IKReal x76=((x75)+(x74));
        IKReal x77=((cj3)*(x76));
        IKReal x78=((cj0)*(cj1)*(sj3));
        IKReal x79=((x77)+(x78));
        new_r00=((((r10)*(x40)))+(((r00)*(x53)))+(((r20)*(x27))));
        new_r01=((((r21)*(x27)))+(((r01)*(x53)))+(((r11)*(x40))));
        new_r02=((((r02)*(x53)))+(((r22)*(x27)))+(((r12)*(x40))));
        new_r10=((((r10)*(x63)))+(((r00)*(x60)))+(((r20)*(x56))));
        new_r11=((((r11)*(x63)))+(((r01)*(x60)))+(((r21)*(x56))));
        new_r12=((((r22)*(x56)))+(((r02)*(x60)))+(((r12)*(x63))));
        new_r20=((((r10)*(x73)))+(((r20)*(x66)))+(((r00)*(x79))));
        new_r21=((((r11)*(x73)))+(((r21)*(x66)))+(((r01)*(x79))));
        new_r22=((((r22)*(x66)))+(((r02)*(x79)))+(((r12)*(x73))));
        {
        IKReal j5eval;
        j5eval=new_r00;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(new_r12, new_r11)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
        
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(new_r21, ((-1.00000000000000)*(new_r22))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
        
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(new_r10, ((-1.00000000000000)*(new_r20)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond[1];
                evalcond[0]=IKsin(j4);
                if( IKabs(evalcond[0]) < 0.000010  )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r20)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), new_r00);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x80=IKcos(j4);
                IKReal x81=((IKabs(x80) != 0)?((IKReal)1/(x80)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((-1.00000000000000)*(new_r12)*(x81)), ((new_r11)*(x81)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
            
            } else
            {
                if( 1 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((new_r10)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), new_r00);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal evalcond[1];
                    evalcond[0]=IKsin(j5);
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x82=IKcos(j5);
                    IKReal x83=((IKabs(x82) != 0)?((IKReal)1/(x82)):(IKReal)1.0e30);
                    IKReal x84=IKsin(j4);
                    IKReal x85=IKcos(j4);
                    j6array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(x83)*(x84)))+(((new_r21)*(x83)*(x85)))), ((((new_r21)*(x84)))+(((new_r11)*(x85)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x86=IKsin(j5);
                    IKReal x87=((IKabs(x86) != 0)?((IKReal)1/(x86)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((new_r01)*(x87)), ((new_r02)*(x87)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                }
                }
                }
                }
                }
            
            } else
            {
            }
            }
            }
            }
            }
        
        }
        }
    }    /// Durand-Kerner polynomial root finding method
    static void polyroots3(IKReal rawcoeffs[3+1], IKReal rawroots[3], int& numroots)
    {
        using std::complex;
        assert(rawcoeffs[0] != 0);
        const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
        complex<IKReal> coeffs[3];
        const int maxsteps = 50;
        for(int i = 0; i < 3; ++i) {
            coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
        }
        complex<IKReal> roots[3];
        IKReal err[3];
        roots[0] = complex<IKReal>(1,0);
        roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
        err[0] = 1.0;
        err[1] = 1.0;
        for(int i = 2; i < 3; ++i) {
            roots[i] = roots[i-1]*roots[1];
            err[i] = 1.0;
        }
        for(int step = 0; step < maxsteps; ++step) {
            bool changed = false;
            for(int i = 0; i < 3; ++i) {
                if ( err[i] >= tol ) {
                    changed = true;
                    // evaluate
                    complex<IKReal> x = roots[i] + coeffs[0];
                    for(int j = 1; j < 3; ++j) {
                        x = roots[i] * x + coeffs[j];
                    }
                    for(int j = 0; j < 3; ++j) {
                        if( i != j ) {
                            if( roots[i] != roots[j] ) {
                                x /= (roots[i] - roots[j]);
                            }
                        }
                    }
                    roots[i] -= x;
                    err[i] = abs(x);
                }
            }
            if( !changed ) {
                break;
            }
        }
        numroots = 0;
        for(int i = 0; i < 3; ++i) {
            if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
                rawroots[numroots++] = real(roots[i]);
            }
        }
    }
    static void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
        IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
        if( det < 0 ) {
            numroots=0;
        }
        else if( det == 0 ) {
            rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
            numroots = 1;
        }
        else {
            det = IKsqrt(det);
            rawroots[0] = 0.5*(-rawcoeffs[1]+det)/rawcoeffs[0];
            rawroots[1] = 0.5*(-rawcoeffs[1]-det)/rawcoeffs[0];
            numroots = 2;
        }
    }
    /// intersection of a conic and the unit circle
    static void conicsolver(IKReal C0[6], IKReal roots[4], int& numroots)
    {
        IKReal rawcoeffs[4] = {-1,
                               C0[5] - C0[0] - C0[3],
                               C0[0]*C0[5] + C0[3]*C0[5] - C0[0]*C0[3] + C0[1]*C0[1] - C0[2]*C0[2] - C0[4]*C0[4],
                               C0[0]*C0[3]*C0[5] + 2*C0[1]*C0[2]*C0[4] - C0[0]*C0[4]*C0[4] - C0[3]*C0[2]*C0[2] - C0[5]*C0[1]*C0[1]};
        IKReal proots[3];
        int numproots, numyroots;
        polyroots3(rawcoeffs,proots,numproots);
        numroots = 0;
        int iroot=0;
        IKReal a, b, c, d, e, f;
        a = C0[0]+proots[iroot]; b = C0[1]; c = C0[3]+proots[iroot]; d = C0[2]; e = C0[4]; f = C0[5]-proots[iroot];
        IKReal adjugate[9] = {c*f-e*e, -b*f+e*d, b*e-c*d, -b*f+d*e, a*f-d*d, -a*e+b*d, b*e-d*c, -a*e+d*b, a*c-b*b};
        // find the greatest absolute value of adjugate and take that column
        int maxindex = 0;
        IKReal val = IKabs(adjugate[maxindex]);
        for(int i = 1; i < 9; ++i) {
            IKReal newval = IKabs(adjugate[i]);
            if( val < newval ) {
                val = newval;
                maxindex = i;
            }
        }
        maxindex = maxindex%3;
        if( adjugate[0] > 0 || adjugate[4] > 0 || adjugate[8] > 0 || adjugate[4*maxindex] >= 0 ) {
            // according to the structure of the matrix, should be always negative if a solution exists...
            return;
        }
        IKReal bmult = 1.0/IKsqrt(-adjugate[4*maxindex]);
        IKReal p[3] = {adjugate[maxindex]*bmult, adjugate[3+maxindex]*bmult, adjugate[6+maxindex]*bmult}; // intersection point
        // C = C0 - [p_x] = 2gh^t, C is rank1
        IKReal C[9] = {a,b+p[2],d-p[1],b-p[2],c,e+p[0],d+p[1],e-p[0],f};
        maxindex = 0;
        val = IKabs(C[maxindex]);
        for(int i = 1; i < 9; ++i) {
            IKReal newval = IKabs(C[i]);
            if( val < newval ) {
                val = newval;
                maxindex = i;
            }
        }
        int row = maxindex/3;
        int col = maxindex%3;
        IKReal lineequation[3], coeffs[3], yintersections[2];
        for(int i = 0; i < 2; ++i) {
            if( i == 0 ) {
                lineequation[0] = C[3*row];
                lineequation[1] = C[3*row+1];
                lineequation[2] = C[3*row+2];
            }
            else {
                lineequation[0] = C[col];
                lineequation[1] = C[3+col];
                lineequation[2] = C[6+col];
            }
    
            if( IKabs(lineequation[0]) < std::numeric_limits<IKReal>::epsilon() ) {
                yintersections[0] = -lineequation[2]/lineequation[1];
                IKReal x = 1-yintersections[0]*yintersections[0];
                if( x <= 0 && x > -std::numeric_limits<IKReal>::epsilon() ) {
                    roots[numroots++] = yintersections[0] > 0 ? IKPI_2 : -IKPI_2;
                }
                else {
                    x = IKsqrt(x);
                    roots[numroots++] = IKatan2(yintersections[0], x);
                    roots[numroots] = IKPI - roots[numroots-1]; numroots++;
                }
            }
            else {
                coeffs[0] = lineequation[0]*lineequation[0]+lineequation[1]*lineequation[1];
                coeffs[1] = 2*lineequation[1]*lineequation[2];
                coeffs[2] = lineequation[2]*lineequation[2]-lineequation[0]*lineequation[0];
                polyroots2(coeffs,yintersections,numyroots);
                for(int j = 0; j < numyroots; ++j) {
                    roots[numroots++] = IKatan2(yintersections[j],-(lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0]);
                }
            }
        }
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
