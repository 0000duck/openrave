/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-11-30 18:53:10.074508
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKcos(j[5]);
x1=IKcos(j[0]);
x2=IKcos(j[3]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[5]);
x8=IKcos(j[4]);
x9=IKsin(j[2]);
x10=IKcos(j[1]);
x11=IKsin(j[4]);
x12=IKsin(j[6]);
x13=IKcos(j[6]);
eerot[0]=((((x0)*(x1)*(x3)*(x4)*(x5)))+(((-1.00000000000000)*(x1)*(x11)*(x4)*(x7)*(x9)))+(((x0)*(x5)*(x6)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x5)*(x7)*(x8)))+(((x11)*(x3)*(x6)*(x7)))+(((x0)*(x1)*(x10)*(x2)))+(((x2)*(x6)*(x7)*(x8)*(x9)))+(((x1)*(x2)*(x3)*(x4)*(x7)*(x8))));
eerot[1]=((((x1)*(x10)*(x11)*(x13)*(x5)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x3)*(x6)))+(((x1)*(x12)*(x3)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x1)*(x13)*(x4)*(x8)*(x9)))+(((x0)*(x1)*(x10)*(x12)*(x5)*(x8)))+(((-1.00000000000000)*(x0)*(x12)*(x2)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x12)*(x2)*(x3)*(x4)*(x8)))+(((x12)*(x5)*(x6)*(x7)*(x9)))+(((x1)*(x10)*(x12)*(x2)*(x7)))+(((-1.00000000000000)*(x11)*(x13)*(x2)*(x6)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x13)*(x2)*(x3)*(x4)))+(((x0)*(x1)*(x11)*(x12)*(x4)*(x9)))+(((x13)*(x3)*(x6)*(x8))));
eerot[2]=((((x1)*(x10)*(x13)*(x2)*(x7)))+(((x1)*(x13)*(x3)*(x4)*(x5)*(x7)))+(((x0)*(x1)*(x10)*(x13)*(x5)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x12)*(x5)))+(((-1.00000000000000)*(x0)*(x13)*(x2)*(x6)*(x8)*(x9)))+(((x1)*(x11)*(x12)*(x2)*(x3)*(x4)))+(((x13)*(x5)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x13)*(x3)*(x6)))+(((-1.00000000000000)*(x0)*(x1)*(x13)*(x2)*(x3)*(x4)*(x8)))+(((-1.00000000000000)*(x12)*(x3)*(x6)*(x8)))+(((x11)*(x12)*(x2)*(x6)*(x9)))+(((x1)*(x12)*(x4)*(x8)*(x9)))+(((x0)*(x1)*(x11)*(x13)*(x4)*(x9))));
eetrans[0]=((((0.400000000000000)*(x1)*(x10)))+(((0.180000000000000)*(x2)*(x6)*(x7)*(x8)*(x9)))+(((0.321000000000000)*(x1)*(x3)*(x4)*(x5)))+(((-0.180000000000000)*(x1)*(x10)*(x5)*(x7)*(x8)))+(((0.321000000000000)*(x5)*(x6)*(x9)))+(((0.180000000000000)*(x0)*(x1)*(x10)*(x2)))+(((-0.180000000000000)*(x1)*(x11)*(x4)*(x7)*(x9)))+(((0.100000000000000)*(x1)))+(((0.180000000000000)*(x1)*(x2)*(x3)*(x4)*(x7)*(x8)))+(((0.180000000000000)*(x11)*(x3)*(x6)*(x7)))+(((0.180000000000000)*(x0)*(x1)*(x3)*(x4)*(x5)))+(((0.180000000000000)*(x0)*(x5)*(x6)*(x9)))+(((0.321000000000000)*(x1)*(x10)*(x2))));
eerot[3]=((((-1.00000000000000)*(x10)*(x5)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x1)*(x2)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x5)*(x9)))+(((x2)*(x3)*(x4)*(x6)*(x7)*(x8)))+(((x0)*(x3)*(x4)*(x5)*(x6)))+(((x0)*(x10)*(x2)*(x6)))+(((-1.00000000000000)*(x11)*(x4)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x3)*(x7))));
eerot[4]=((((x10)*(x12)*(x2)*(x6)*(x7)))+(((-1.00000000000000)*(x1)*(x13)*(x3)*(x8)))+(((-1.00000000000000)*(x13)*(x4)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x12)*(x5)*(x7)*(x9)))+(((x10)*(x11)*(x13)*(x5)*(x6)))+(((x0)*(x10)*(x12)*(x5)*(x6)*(x8)))+(((x1)*(x11)*(x13)*(x2)*(x9)))+(((-1.00000000000000)*(x11)*(x13)*(x2)*(x3)*(x4)*(x6)))+(((x12)*(x3)*(x4)*(x5)*(x6)*(x7)))+(((x0)*(x1)*(x11)*(x12)*(x3)))+(((x0)*(x11)*(x12)*(x4)*(x6)*(x9)))+(((-1.00000000000000)*(x0)*(x12)*(x2)*(x3)*(x4)*(x6)*(x8)))+(((x0)*(x1)*(x12)*(x2)*(x8)*(x9))));
eerot[5]=((((x0)*(x1)*(x13)*(x2)*(x8)*(x9)))+(((x12)*(x4)*(x6)*(x8)*(x9)))+(((x0)*(x1)*(x11)*(x13)*(x3)))+(((x10)*(x13)*(x2)*(x6)*(x7)))+(((x0)*(x10)*(x13)*(x5)*(x6)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x5)*(x6)))+(((x11)*(x12)*(x2)*(x3)*(x4)*(x6)))+(((x1)*(x12)*(x3)*(x8)))+(((x0)*(x11)*(x13)*(x4)*(x6)*(x9)))+(((-1.00000000000000)*(x1)*(x13)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x13)*(x2)*(x3)*(x4)*(x6)*(x8)))+(((-1.00000000000000)*(x1)*(x11)*(x12)*(x2)*(x9)))+(((x13)*(x3)*(x4)*(x5)*(x6)*(x7))));
eetrans[1]=((-0.188000000000000)+(((-0.321000000000000)*(x1)*(x5)*(x9)))+(((-0.180000000000000)*(x1)*(x11)*(x3)*(x7)))+(((-0.180000000000000)*(x0)*(x1)*(x5)*(x9)))+(((0.180000000000000)*(x2)*(x3)*(x4)*(x6)*(x7)*(x8)))+(((0.321000000000000)*(x3)*(x4)*(x5)*(x6)))+(((-0.180000000000000)*(x10)*(x5)*(x6)*(x7)*(x8)))+(((0.100000000000000)*(x6)))+(((0.180000000000000)*(x0)*(x10)*(x2)*(x6)))+(((-0.180000000000000)*(x1)*(x2)*(x7)*(x8)*(x9)))+(((0.180000000000000)*(x0)*(x3)*(x4)*(x5)*(x6)))+(((-0.180000000000000)*(x11)*(x4)*(x6)*(x7)*(x9)))+(((0.321000000000000)*(x10)*(x2)*(x6)))+(((0.400000000000000)*(x10)*(x6))));
eerot[6]=((((x4)*(x5)*(x7)*(x8)))+(((x0)*(x10)*(x3)*(x5)))+(((x10)*(x2)*(x3)*(x7)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x2)*(x4))));
eerot[7]=((((-1.00000000000000)*(x12)*(x2)*(x4)*(x7)))+(((-1.00000000000000)*(x10)*(x13)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x13)*(x2)*(x3)))+(((x0)*(x10)*(x11)*(x12)*(x9)))+(((-1.00000000000000)*(x0)*(x12)*(x4)*(x5)*(x8)))+(((x10)*(x12)*(x3)*(x5)*(x7)))+(((-1.00000000000000)*(x11)*(x13)*(x4)*(x5)))+(((-1.00000000000000)*(x0)*(x10)*(x12)*(x2)*(x3)*(x8))));
eerot[8]=((((x0)*(x10)*(x11)*(x13)*(x9)))+(((-1.00000000000000)*(x13)*(x2)*(x4)*(x7)))+(((-1.00000000000000)*(x0)*(x13)*(x4)*(x5)*(x8)))+(((x11)*(x12)*(x4)*(x5)))+(((x10)*(x13)*(x3)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x10)*(x13)*(x2)*(x3)*(x8)))+(((x10)*(x11)*(x12)*(x2)*(x3)))+(((x10)*(x12)*(x8)*(x9))));
eetrans[2]=((((0.321000000000000)*(x10)*(x3)*(x5)))+(((-0.180000000000000)*(x10)*(x11)*(x7)*(x9)))+(((0.180000000000000)*(x0)*(x10)*(x3)*(x5)))+(((-0.180000000000000)*(x0)*(x2)*(x4)))+(((0.180000000000000)*(x4)*(x5)*(x7)*(x8)))+(((-0.321000000000000)*(x2)*(x4)))+(((0.180000000000000)*(x10)*(x2)*(x3)*(x7)*(x8)))+(((-0.400000000000000)*(x4))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((px)+(((-0.180000000000000)*(r00))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((0.188000000000000)+(py)+(((-0.180000000000000)*(r10))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((pz)+(((-0.180000000000000)*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
IKReal coniccoeffs[6], j0array[4];
int numsolutions;
IKReal x0=(px)*(px);
IKReal x1=(sj2)*(sj2);
IKReal x2=(py)*(py);
IKReal x3=(pz)*(pz);
IKReal x4=((0.0659462400000000)*(x0));
coniccoeffs[0]=((x4)+(((-0.0659462400000000)*(x2)))+(((-0.00412164000000000)*(x0)*(x1)))+(((0.00412164000000000)*(x1)*(x2))));
coniccoeffs[1]=((((-0.00412164000000000)*(px)*(py)*(x1)))+(((0.0659462400000000)*(px)*(py))));
coniccoeffs[2]=((((-0.00521471953620000)*(px)*(x1)))+(((0.0206082000000000)*(px)*(x0)*(x1)))+(((0.0206082000000000)*(px)*(x1)*(x3)))+(((0.0206082000000000)*(px)*(x1)*(x2))));
coniccoeffs[3]=0;
coniccoeffs[4]=((((-0.00521471953620000)*(py)*(x1)))+(((0.0206082000000000)*(py)*(x0)*(x1)))+(((0.0206082000000000)*(py)*(x1)*(x2)))+(((0.0206082000000000)*(py)*(x1)*(x3))));
coniccoeffs[5]=((((-0.103041000000000)*(x1)*((x3)*(x3))))+(((-0.206082000000000)*(x0)*(x1)*(x3)))+(((-0.206082000000000)*(x0)*(x1)*(x2)))+(((-0.103041000000000)*(x1)*((x0)*(x0))))+(((0.0521471953620000)*(x0)*(x1)))+(((0.0521471953620000)*(x1)*(x3)))+(((-0.103041000000000)*(x1)*((x2)*(x2))))+(((-1.00000000000000)*(x4)))+(((0.0480255553620000)*(x1)*(x2)))+(((0.000197477285042079)*(x1)))+(((-0.206082000000000)*(x1)*(x2)*(x3))));
conicsolver(coniccoeffs,j0array,numsolutions);
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
{
    j0 = j0array[ij0]; cj0 = IKcos(j0); sj0 = IKsin(j0);

{
IKReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.800000000000000)*(sj2)*((pz)*(pz))))+(((-0.160000000000000)*(py)*(sj0)*(sj2)))+(((0.800000000000000)*(sj2)*((cj0)*(cj0))*((px)*(px))))+(((0.00800000000000000)*(sj2)))+(((0.800000000000000)*(sj2)*((py)*(py))*((sj0)*(sj0))))+(((-0.160000000000000)*(cj0)*(px)*(sj2)))+(((1.60000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal evalcond[3];
IKReal x5=((px)*(sj0));
IKReal x6=((cj0)*(py));
IKReal x7=((x5)+(((-1.00000000000000)*(x6))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x7;
evalcond[2]=x7;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
cj3array[0]=((-0.985362149532710)+(((3.89408099688473)*((pz)*(pz))))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(py)*(sj0)))+(((3.89408099688473)*((py)*(py))))+(((-0.778816199376947)*(cj0)*(px))));
if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j1eval[1];
j1eval[0]=((0.160000000000000)+(((0.103041000000000)*((cj3)*(cj3))))+(((0.256800000000000)*(cj3)))+(((0.103041000000000)*((sj3)*(sj3)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(cj0)*(px)*(sj3)))+(((0.321000000000000)*(py)*(sj0)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((-0.0321000000000000)*(sj3)))+(((0.400000000000000)*(pz))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-0.160000000000000)*(cj0)))+(((-0.103041000000000)*(cj0)*((cj3)*(cj3))))+(((-0.256800000000000)*(cj0)*(cj3)))+(((-0.103041000000000)*(cj0)*((sj3)*(sj3)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal evalcond[5];
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=px;
evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=((-1.00000000000000)*(px));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0100000000000000)+(((-0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(py)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((-0.0321000000000000)*(sj3)))+(((0.400000000000000)*(pz))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0400000000000000)+(((-0.400000000000000)*(py)))+(((-0.321000000000000)*(cj3)*(py)))+(((0.321000000000000)*(pz)*(sj3)))+(((0.0321000000000000)*(cj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x8=((0.321000000000000)*(cj3));
IKReal x9=((0.400000000000000)+(x8));
IKReal x10=((0.321000000000000)*(pz)*(sj3));
IKReal x11=((0.0321000000000000)*(cj3));
IKReal x12=((0.0400000000000000)+(x11)+(x10));
IKReal x13=((py)*(x8));
IKReal x14=((0.400000000000000)*(py));
IKReal x15=((x13)+(x14));
IKReal x16=((((-1.00000000000000)*(x15)))+(x12));
IKReal x17=((IKabs(x16) != 0)?((IKReal)1/(x16)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x17)*(((((-0.321000000000000)*(sj3)*(x9)))+(((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))))), ((x17)*((((pz)*(pz))+(((-1.00000000000000)*((x9)*(x9))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x59=((0.321000000000000)*(py)*(sj3));
IKReal x60=((0.321000000000000)*(cj3)*(pz));
IKReal x61=((0.400000000000000)*(pz));
IKReal x62=((x59)+(x60)+(x61));
IKReal x63=((0.0321000000000000)*(sj3));
IKReal x64=((x62)+(((-1.00000000000000)*(x63))));
IKReal x65=((IKabs(x64) != 0)?((IKReal)1/(x64)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x65)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x65)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x66=((0.100000000000000)+(((-1.00000000000000)*(py))));
IKReal x67=x2;
IKReal x68=x3;
IKReal x69=((0.0100000000000000)+(x67)+(x68));
IKReal x70=((0.200000000000000)*(py));
IKReal x71=((((-1.00000000000000)*(x70)))+(x69));
IKReal x72=((IKabs(x71) != 0)?((IKReal)1/(x71)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x72)*(((((-1.00000000000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-0.321000000000000)*(sj3)*(x66)))))), ((x72)*(((((-1.00000000000000)*(x66)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((0.321000000000000)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x73=((-1.00000000000000)*(px));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x73;
evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(py)))+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=x73;
evalcond[4]=x73;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0100000000000000)+(((0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(cj3)*(pz)))+(((-0.0321000000000000)*(sj3)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(py)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(cj3)*(pz)))+(((-0.0321000000000000)*(sj3)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(py)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x74=((0.321000000000000)*(cj3));
IKReal x75=((0.400000000000000)+(x74));
IKReal x76=((0.100000000000000)+(py));
IKReal x77=((pz)*(x74));
IKReal x78=((0.400000000000000)*(pz));
IKReal x79=((x77)+(x78));
IKReal x80=((0.321000000000000)*(py)*(sj3));
IKReal x81=((0.0321000000000000)*(sj3));
IKReal x82=((x80)+(x81));
IKReal x83=((x79)+(((-1.00000000000000)*(x82))));
IKReal x84=((IKabs(x83) != 0)?((IKReal)1/(x83)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x84)*(((((-1.00000000000000)*((x75)*(x75))))+((x76)*(x76))))), ((x84)*(((((0.321000000000000)*(sj3)*(x75)))+(((-1.00000000000000)*(pz)*(x76)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x85=((0.321000000000000)*(cj3)*(pz));
IKReal x86=((0.400000000000000)*(pz));
IKReal x87=((x86)+(x85));
IKReal x88=((0.321000000000000)*(py)*(sj3));
IKReal x89=((0.0321000000000000)*(sj3));
IKReal x90=((x88)+(x89));
IKReal x91=((x87)+(((-1.00000000000000)*(x90))));
IKReal x92=((IKabs(x91) != 0)?((IKReal)1/(x91)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x92)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x92)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x93=((0.200000000000000)*(py));
IKReal x94=x2;
IKReal x95=x3;
IKReal x96=((0.0100000000000000)+(x93)+(x95)+(x94));
IKReal x97=((IKabs(x96) != 0)?((IKReal)1/(x96)):(IKReal)1.0e30);
IKReal x98=((0.100000000000000)+(py));
IKReal x99=((0.321000000000000)*(cj3));
IKReal x100=((0.400000000000000)+(x99));
j1array[0]=IKatan2(((-1.00000000000000)*(x97)*(((((pz)*(x100)))+(((0.321000000000000)*(sj3)*(x98)))))), ((-1.00000000000000)*(x97)*(((((x100)*(x98)))+(((-0.321000000000000)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x101=((0.100000000000000)*(cj0));
IKReal x102=((x101)+(((-1.00000000000000)*(px))));
IKReal x103=(cj3)*(cj3);
IKReal x104=((0.103041000000000)*(cj0)*(x103));
IKReal x105=((0.256800000000000)*(cj0)*(cj3));
IKReal x106=((0.160000000000000)*(cj0));
IKReal x107=(sj3)*(sj3);
IKReal x108=((0.103041000000000)*(cj0)*(x107));
IKReal x109=((x108)+(x104)+(x105)+(x106));
IKReal x110=((-1.00000000000000)*(x109));
IKReal x111=((IKabs(x110) != 0)?((IKReal)1/(x110)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x111)*(((((0.321000000000000)*(sj3)*(x102)))+(((pz)*(((((0.400000000000000)*(cj0)))+(((0.321000000000000)*(cj0)*(cj3)))))))))), ((x111)*(((((x102)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-0.321000000000000)*(cj0)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x112=((0.321000000000000)*(cj0)*(px)*(sj3));
IKReal x113=((0.321000000000000)*(py)*(sj0)*(sj3));
IKReal x114=((0.321000000000000)*(cj3)*(pz));
IKReal x115=((0.400000000000000)*(pz));
IKReal x116=((x113)+(x112)+(x115)+(x114));
IKReal x117=((0.0321000000000000)*(sj3));
IKReal x118=((((-1.00000000000000)*(x117)))+(x116));
IKReal x119=((IKabs(x118) != 0)?((IKReal)1/(x118)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x119)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x119)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x120=(cj3)*(cj3);
IKReal x121=((0.103041000000000)*(x120));
IKReal x122=((0.256800000000000)*(cj3));
IKReal x123=(sj3)*(sj3);
IKReal x124=((0.103041000000000)*(x123));
IKReal x125=((0.160000000000000)+(x124)+(x122)+(x121));
IKReal x126=((IKabs(x125) != 0)?((IKReal)1/(x125)):(IKReal)1.0e30);
IKReal x127=((0.321000000000000)*(cj3));
IKReal x128=((0.400000000000000)+(x127));
IKReal x129=((cj0)*(px));
IKReal x130=((py)*(sj0));
IKReal x131=((x130)+(x129));
IKReal x132=((0.100000000000000)+(((-1.00000000000000)*(x131))));
j1array[0]=IKatan2(((-1.00000000000000)*(x126)*(((((0.321000000000000)*(sj3)*(x132)))+(((pz)*(x128)))))), ((-1.00000000000000)*(x126)*(((((-0.321000000000000)*(pz)*(sj3)))+(((x128)*(x132)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
IKReal x133=((cj0)*(py));
IKReal x134=((px)*(sj0));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((x134)+(((-1.00000000000000)*(x133))));
evalcond[2]=((x133)+(((-1.00000000000000)*(x134))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
cj3array[0]=((-0.985362149532710)+(((3.89408099688473)*((pz)*(pz))))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(py)*(sj0)))+(((3.89408099688473)*((py)*(py))))+(((-0.778816199376947)*(cj0)*(px))));
if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j1eval[1];
j1eval[0]=((0.160000000000000)+(((0.103041000000000)*((cj3)*(cj3))))+(((0.256800000000000)*(cj3)))+(((0.103041000000000)*((sj3)*(sj3)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(cj3)*(pz)))+(((-0.321000000000000)*(py)*(sj0)*(sj3)))+(((-0.321000000000000)*(cj0)*(px)*(sj3)))+(((0.400000000000000)*(pz)))+(((0.0321000000000000)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((-0.160000000000000)*(cj0)))+(((-0.103041000000000)*(cj0)*((cj3)*(cj3))))+(((-0.256800000000000)*(cj0)*(cj3)))+(((-0.103041000000000)*(cj0)*((sj3)*(sj3)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal evalcond[5];
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=px;
evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=((-1.00000000000000)*(px));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0100000000000000)+(((-0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(cj3)*(pz)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(py)*(sj3)))+(((0.0321000000000000)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0400000000000000)+(((-0.400000000000000)*(py)))+(((-0.321000000000000)*(pz)*(sj3)))+(((-0.321000000000000)*(cj3)*(py)))+(((0.0321000000000000)*(cj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x135=((0.321000000000000)*(cj3));
IKReal x136=((0.400000000000000)+(x135));
IKReal x137=((0.0321000000000000)*(cj3));
IKReal x138=((0.0400000000000000)+(x137));
IKReal x139=((py)*(x135));
IKReal x140=((0.400000000000000)*(py));
IKReal x141=((0.321000000000000)*(pz)*(sj3));
IKReal x142=((x140)+(x141)+(x139));
IKReal x143=((((-1.00000000000000)*(x142)))+(x138));
IKReal x144=((IKabs(x143) != 0)?((IKReal)1/(x143)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x144)*(((((0.321000000000000)*(sj3)*(x136)))+(((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))))), ((x144)*((((pz)*(pz))+(((-1.00000000000000)*((x136)*(x136))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x145=((0.321000000000000)*(cj3)*(pz));
IKReal x146=((0.400000000000000)*(pz));
IKReal x147=((0.0321000000000000)*(sj3));
IKReal x148=((x145)+(x146)+(x147));
IKReal x149=((0.321000000000000)*(py)*(sj3));
IKReal x150=((((-1.00000000000000)*(x149)))+(x148));
IKReal x151=((IKabs(x150) != 0)?((IKReal)1/(x150)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x151)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((-1.00000000000000)*(x151)*(((((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x152=((0.100000000000000)+(((-1.00000000000000)*(py))));
IKReal x153=x2;
IKReal x154=x3;
IKReal x155=((0.0100000000000000)+(x154)+(x153));
IKReal x156=((0.200000000000000)*(py));
IKReal x157=((((-1.00000000000000)*(x156)))+(x155));
IKReal x158=((IKabs(x157) != 0)?((IKReal)1/(x157)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x158)*(((((0.321000000000000)*(sj3)*(x152)))+(((-1.00000000000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))), ((x158)*(((((-1.00000000000000)*(x152)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((-0.321000000000000)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x159=((-1.00000000000000)*(px));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x159;
evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(py)))+(((0.256800000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=x159;
evalcond[4]=px;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0100000000000000)+(((0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(py)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((0.400000000000000)*(pz)))+(((0.0321000000000000)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(py)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((0.400000000000000)*(pz)))+(((0.0321000000000000)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x160=((0.321000000000000)*(py)*(sj3));
IKReal x161=((0.321000000000000)*(cj3)*(pz));
IKReal x162=((0.400000000000000)*(pz));
IKReal x163=((0.0321000000000000)*(sj3));
IKReal x164=((x162)+(x163)+(x160)+(x161));
IKReal x165=((IKabs(x164) != 0)?((IKReal)1/(x164)):(IKReal)1.0e30);
IKReal x166=((0.321000000000000)*(cj3));
IKReal x167=((0.400000000000000)+(x166));
IKReal x168=((0.100000000000000)+(py));
j1array[0]=IKatan2(((x165)*((((x168)*(x168))+(((-1.00000000000000)*((x167)*(x167))))))), ((x165)*(((((-1.00000000000000)*(pz)*(x168)))+(((-0.321000000000000)*(sj3)*(x167)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x169=((0.321000000000000)*(py)*(sj3));
IKReal x170=((0.321000000000000)*(cj3)*(pz));
IKReal x171=((0.400000000000000)*(pz));
IKReal x172=((0.0321000000000000)*(sj3));
IKReal x173=((x171)+(x170)+(x172)+(x169));
IKReal x174=((IKabs(x173) != 0)?((IKReal)1/(x173)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x174)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((x174)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))+(((-0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x175=((0.200000000000000)*(py));
IKReal x176=x2;
IKReal x177=x3;
IKReal x178=((0.0100000000000000)+(x175)+(x177)+(x176));
IKReal x179=((IKabs(x178) != 0)?((IKReal)1/(x178)):(IKReal)1.0e30);
IKReal x180=((0.100000000000000)+(py));
IKReal x181=((0.321000000000000)*(cj3));
IKReal x182=((0.400000000000000)+(x181));
j1array[0]=IKatan2(((-1.00000000000000)*(x179)*(((((pz)*(x182)))+(((-0.321000000000000)*(sj3)*(x180)))))), ((-1.00000000000000)*(x179)*(((((x180)*(x182)))+(((0.321000000000000)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x183=((0.100000000000000)*(cj0));
IKReal x184=((x183)+(((-1.00000000000000)*(px))));
IKReal x185=(cj3)*(cj3);
IKReal x186=((0.103041000000000)*(cj0)*(x185));
IKReal x187=((0.256800000000000)*(cj0)*(cj3));
IKReal x188=((0.160000000000000)*(cj0));
IKReal x189=(sj3)*(sj3);
IKReal x190=((0.103041000000000)*(cj0)*(x189));
IKReal x191=((x190)+(x186)+(x187)+(x188));
IKReal x192=((-1.00000000000000)*(x191));
IKReal x193=((IKabs(x192) != 0)?((IKReal)1/(x192)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x193)*(((((-0.321000000000000)*(sj3)*(x184)))+(((pz)*(((((0.400000000000000)*(cj0)))+(((0.321000000000000)*(cj0)*(cj3)))))))))), ((x193)*(((((0.321000000000000)*(cj0)*(pz)*(sj3)))+(((x184)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x194=((0.321000000000000)*(cj3)*(pz));
IKReal x195=((0.400000000000000)*(pz));
IKReal x196=((0.0321000000000000)*(sj3));
IKReal x197=((x196)+(x195)+(x194));
IKReal x198=((0.321000000000000)*(cj0)*(px)*(sj3));
IKReal x199=((0.321000000000000)*(py)*(sj0)*(sj3));
IKReal x200=((x199)+(x198));
IKReal x201=((x197)+(((-1.00000000000000)*(x200))));
IKReal x202=((IKabs(x201) != 0)?((IKReal)1/(x201)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x202)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((sj3)*(sj3))))))), ((-1.00000000000000)*(x202)*(((((0.321000000000000)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))+(((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x203=(cj3)*(cj3);
IKReal x204=((0.103041000000000)*(x203));
IKReal x205=((0.256800000000000)*(cj3));
IKReal x206=(sj3)*(sj3);
IKReal x207=((0.103041000000000)*(x206));
IKReal x208=((0.160000000000000)+(x207)+(x205)+(x204));
IKReal x209=((IKabs(x208) != 0)?((IKReal)1/(x208)):(IKReal)1.0e30);
IKReal x210=((0.321000000000000)*(cj3));
IKReal x211=((0.400000000000000)+(x210));
IKReal x212=((cj0)*(px));
IKReal x213=((py)*(sj0));
IKReal x214=((x212)+(x213));
IKReal x215=((0.100000000000000)+(((-1.00000000000000)*(x214))));
j1array[0]=IKatan2(((-1.00000000000000)*(x209)*(((((pz)*(x211)))+(((-0.321000000000000)*(sj3)*(x215)))))), ((-1.00000000000000)*(x209)*(((((x211)*(x215)))+(((0.321000000000000)*(pz)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x216=x3;
IKReal x217=x0;
IKReal x218=x2;
IKReal x219=((0.0669590000000000)+(x216)+(x217)+(x218));
IKReal x220=((0.200000000000000)*(cj0)*(px));
IKReal x221=((0.200000000000000)*(py)*(sj0));
IKReal x222=((x221)+(x220));
IKReal x223=((x219)+(((-1.00000000000000)*(x222))));
IKReal x224=((cj2)*(px)*(sj0));
IKReal x225=((cj0)*(cj2)*(py));
IKReal x226=((0.800000000000000)*(sj2)*(x216));
IKReal x227=(cj0)*(cj0);
IKReal x228=((0.800000000000000)*(sj2)*(x217)*(x227));
IKReal x229=((0.00800000000000000)*(sj2));
IKReal x230=(sj0)*(sj0);
IKReal x231=((0.800000000000000)*(sj2)*(x218)*(x230));
IKReal x232=((1.60000000000000)*(cj0)*(px)*(py)*(sj0)*(sj2));
IKReal x233=((x229)+(x228)+(x226)+(x232)+(x231));
IKReal x234=((0.160000000000000)*(cj0)*(px)*(sj2));
IKReal x235=((0.160000000000000)*(py)*(sj0)*(sj2));
IKReal x236=((x234)+(x235));
IKReal x237=((((-1.00000000000000)*(x236)))+(x233));
IKReal x238=((IKabs(x237) != 0)?((IKReal)1/(x237)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x238)*(((((-1.00000000000000)*(pz)*(sj2)*(x223)))+(((((x225)+(((-1.00000000000000)*(x224)))))*(((0.0800000000000000)+(((-0.800000000000000)*(py)*(sj0)))+(((-0.800000000000000)*(cj0)*(px)))))))))), ((x238)*(((((x223)*(((((cj0)*(px)*(sj2)))+(((-0.100000000000000)*(sj2)))+(((py)*(sj0)*(sj2)))))))+(((0.800000000000000)*(pz)*(((x224)+(((-1.00000000000000)*(x225)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[2];
j3eval[0]=cj1;
j3eval[1]=cj2;
if( IKabs(j3eval[0]) < 0.000001  || IKabs(j3eval[1]) < 0.000001  )
{
{
IKReal j3eval[2];
j3eval[0]=sj2;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.000001  || IKabs(j3eval[1]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x239=((px)*(sj0));
IKReal x240=((cj0)*(py));
IKReal x241=((x239)+(((-1.00000000000000)*(x240))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x241;
evalcond[2]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
evalcond[3]=x241;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3eval[1];
j3eval[0]=sj1;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[1];
j3eval[0]=cj1;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[1];
j3eval[0]=((((0.103041000000000)*((cj1)*(cj1))))+(((0.103041000000000)*((sj1)*(sj1)))));
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x242=x239;
IKReal x243=x240;
IKReal x244=((x242)+(((-1.00000000000000)*(x243))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x244;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.200000000000000)*(cj0)*(px))));
evalcond[3]=x244;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(px)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x245=x239;
IKReal x246=x240;
IKReal x247=((x245)+(((-1.00000000000000)*(x246))));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x247;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.200000000000000)*(cj0)*(px))));
evalcond[3]=x247;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj0)*(px)))+(((-3.11526479750779)*(py)*(sj0)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x248=x239;
IKReal x249=x240;
IKReal x250=((x248)+(((-1.00000000000000)*(x249))));
evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x250;
evalcond[2]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj0)*(px)))+(((py)*(sj0))));
evalcond[3]=x250;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((3.11526479750779)*(pz)), ((-1.55763239875389)+(((3.11526479750779)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(px)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x251=x239;
IKReal x252=x240;
IKReal x253=((x251)+(((-1.00000000000000)*(x252))));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x253;
evalcond[2]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-0.600000000000000)*(cj0)*(px)))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(py)*(sj0))));
evalcond[3]=x253;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-3.11526479750779)*(pz)), ((-0.934579439252337)+(((-3.11526479750779)*(cj0)*(px)))+(((-3.11526479750779)*(py)*(sj0)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x254=(cj1)*(cj1);
IKReal x255=((0.103041000000000)*(x254));
IKReal x256=(sj1)*(sj1);
IKReal x257=((0.103041000000000)*(x256));
IKReal x258=((x255)+(x257));
IKReal x259=((IKabs(x258) != 0)?((IKReal)1/(x258)):(IKReal)1.0e30);
IKReal x260=((0.400000000000000)*(sj1));
IKReal x261=((x260)+(pz));
IKReal x262=((-1.00000000000000)*(x261));
IKReal x263=((0.400000000000000)*(cj1));
IKReal x264=((0.100000000000000)+(x263));
IKReal x265=((cj0)*(px));
IKReal x266=((py)*(sj0));
IKReal x267=((x265)+(x266));
IKReal x268=((x264)+(((-1.00000000000000)*(x267))));
j3array[0]=IKatan2(((x259)*(((((-0.321000000000000)*(cj1)*(x262)))+(((-0.321000000000000)*(sj1)*(x268)))))), ((x259)*(((((-0.321000000000000)*(cj1)*(x268)))+(((0.321000000000000)*(sj1)*(x262)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((9.70487475859124)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((-0.321000000000000)*(sj1)*(((0.400000000000000)+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)))+(((pz)*(sj1)))+(((0.100000000000000)*(cj1)))))))+(((0.128400000000000)*(sj1)))+(((0.321000000000000)*(pz)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(cj1)*(pz)))+(((3.11526479750779)*(cj0)*(px)*(sj1)))+(((3.11526479750779)*(py)*(sj0)*(sj1)))+(((-0.311526479750779)*(sj1)))), ((-9.70487475859124)*(((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((0.321000000000000)*(cj1)*(((((-1.00000000000000)*(py)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((0.100000000000000)*(sj1)))+(((-1.00000000000000)*(cj0)*(px)*(sj1)))))))+(((0.128400000000000)*(sj1)))+(((0.321000000000000)*(pz)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x269=((cj0)*(py));
IKReal x270=((px)*(sj0));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((x270)+(((-1.00000000000000)*(x269))));
evalcond[2]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
evalcond[3]=((x269)+(((-1.00000000000000)*(x270))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3eval[1];
j3eval[0]=sj1;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[1];
j3eval[0]=cj1;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[1];
j3eval[0]=((((-0.103041000000000)*((cj1)*(cj1))))+(((-0.103041000000000)*((sj1)*(sj1)))));
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x271=x269;
IKReal x272=x270;
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((x272)+(((-1.00000000000000)*(x271))));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.200000000000000)*(cj0)*(px))));
evalcond[3]=((x271)+(((-1.00000000000000)*(x272))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj0)*(px)))+(((-3.11526479750779)*(py)*(sj0)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x273=x269;
IKReal x274=x270;
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((x274)+(((-1.00000000000000)*(x273))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.200000000000000)*(cj0)*(px))));
evalcond[3]=((x273)+(((-1.00000000000000)*(x274))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(px)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x275=x269;
IKReal x276=x270;
evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((x276)+(((-1.00000000000000)*(x275))));
evalcond[2]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj0)*(px)))+(((py)*(sj0))));
evalcond[3]=((x275)+(((-1.00000000000000)*(x276))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-3.11526479750779)*(pz)), ((-1.55763239875389)+(((3.11526479750779)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(px)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x277=x269;
IKReal x278=x270;
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((x278)+(((-1.00000000000000)*(x277))));
evalcond[2]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-0.600000000000000)*(cj0)*(px)))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(py)*(sj0))));
evalcond[3]=((x277)+(((-1.00000000000000)*(x278))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((3.11526479750779)*(pz)), ((-0.934579439252337)+(((-3.11526479750779)*(cj0)*(px)))+(((-3.11526479750779)*(py)*(sj0)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x279=((0.400000000000000)*(sj1));
IKReal x280=((x279)+(pz));
IKReal x281=((-1.00000000000000)*(x280));
IKReal x282=((0.400000000000000)*(cj1));
IKReal x283=((0.100000000000000)+(x282));
IKReal x284=((cj0)*(px));
IKReal x285=((py)*(sj0));
IKReal x286=((x285)+(x284));
IKReal x287=((x283)+(((-1.00000000000000)*(x286))));
IKReal x288=(cj1)*(cj1);
IKReal x289=((0.103041000000000)*(x288));
IKReal x290=(sj1)*(sj1);
IKReal x291=((0.103041000000000)*(x290));
IKReal x292=((x291)+(x289));
IKReal x293=((-1.00000000000000)*(x292));
IKReal x294=((IKabs(x293) != 0)?((IKReal)1/(x293)):(IKReal)1.0e30);
j3array[0]=IKatan2(((x294)*(((((-0.321000000000000)*(cj1)*(x281)))+(((-0.321000000000000)*(sj1)*(x287)))))), ((x294)*(((((0.321000000000000)*(cj1)*(x287)))+(((-0.321000000000000)*(sj1)*(x281)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-9.70487475859124)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((-0.321000000000000)*(sj1)*(((0.400000000000000)+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)))+(((pz)*(sj1)))+(((0.100000000000000)*(cj1)))))))+(((0.128400000000000)*(sj1)))+(((0.321000000000000)*(pz)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((-3.11526479750779)*(cj0)*(px)*(sj1)))+(((-3.11526479750779)*(cj1)*(pz)))+(((0.311526479750779)*(sj1)))+(((-3.11526479750779)*(py)*(sj0)*(sj1)))), ((-9.70487475859124)*(((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((0.321000000000000)*(cj1)*(((((-1.00000000000000)*(py)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((0.100000000000000)*(sj1)))+(((-1.00000000000000)*(cj0)*(px)*(sj1)))))))+(((0.128400000000000)*(sj1)))+(((0.321000000000000)*(pz)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj0)*(px)))+(((py)*(sj0))));
evalcond[2]=((((-1.00000000000000)*(pz)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((cj2)*(px)*(sj0))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[2];
j3eval[0]=cj2;
j3eval[1]=cj0;
if( IKabs(j3eval[0]) < 0.000001  || IKabs(j3eval[1]) < 0.000001  )
{
{
IKReal evalcond[5];
IKReal x295=((-1.00000000000000)*(pz));
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x295;
evalcond[2]=x295;
evalcond[3]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj0)*(px)))+(((py)*(sj0))));
evalcond[4]=x295;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(px)*(sj0)))+(((-3.11526479750779)*(cj0)*(py)))), ((-1.55763239875389)+(((3.11526479750779)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(px)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x296=((-1.00000000000000)*(pz));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x296;
evalcond[2]=x296;
evalcond[3]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj0)*(px)))+(((py)*(sj0))));
evalcond[4]=pz;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(cj0)*(py)))+(((-3.11526479750779)*(px)*(sj0)))), ((-1.55763239875389)+(((3.11526479750779)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(px)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(py));
evalcond[2]=((((-1.00000000000000)*(pz)*(sj2)))+(((cj2)*(px))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(px)*(sj2)))+(((3.11526479750779)*(cj2)*(pz)))), ((-1.55763239875389)+(((3.11526479750779)*(py)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((-1.00000000000000)*(py))));
evalcond[2]=((((-1.00000000000000)*(pz)*(sj2)))+(((-1.00000000000000)*(cj2)*(px))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(cj2)*(pz)))+(((-3.11526479750779)*(px)*(sj2)))), ((-1.55763239875389)+(((-3.11526479750779)*(py)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x297=((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30);
j3array[0]=IKatan2(((3.11526479750779)*(pz)*(x297)), ((-9.70487475859124)*(x297)*(((IKabs(cj0) != 0)?((IKReal)1/(cj0)):(IKReal)1.0e30))*(((((0.321000000000000)*(pz)*(sj0)*(sj2)))+(((0.321000000000000)*(cj2)*(((((0.500000000000000)*(cj0)))+(((-1.00000000000000)*(px)))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-3.11526479750779)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-1.55763239875389)+(((3.11526479750779)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(px)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((3.11526479750779)*(pz)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))), ((-1.55763239875389)+(((3.11526479750779)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(px)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-0.600000000000000)*(cj0)*(px)))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(py)*(sj0))));
evalcond[2]=((((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((pz)*(sj2)))+(((cj2)*(px)*(sj0))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[2];
j3eval[0]=cj2;
j3eval[1]=cj0;
if( IKabs(j3eval[0]) < 0.000001  || IKabs(j3eval[1]) < 0.000001  )
{
{
IKReal evalcond[4];
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-1.00000000000000)*(pz));
evalcond[2]=pz;
evalcond[3]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-0.600000000000000)*(cj0)*(px)))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(py)*(sj0))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(px)*(sj0)))+(((-3.11526479750779)*(cj0)*(py)))), ((-0.934579439252337)+(((-3.11526479750779)*(cj0)*(px)))+(((-3.11526479750779)*(py)*(sj0)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-1.00000000000000)*(pz));
evalcond[2]=pz;
evalcond[3]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-0.600000000000000)*(cj0)*(px)))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(py)*(sj0))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(cj0)*(py)))+(((-3.11526479750779)*(px)*(sj0)))), ((-0.934579439252337)+(((-3.11526479750779)*(cj0)*(px)))+(((-3.11526479750779)*(py)*(sj0)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(py))));
evalcond[2]=((((cj2)*(px)))+(((pz)*(sj2))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((-3.11526479750779)*(cj2)*(pz)))+(((3.11526479750779)*(px)*(sj2)))), ((-0.934579439252337)+(((-3.11526479750779)*(py)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.600000000000000)*(py))));
evalcond[2]=((((-1.00000000000000)*(cj2)*(px)))+(((pz)*(sj2))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((-3.11526479750779)*(cj2)*(pz)))+(((-3.11526479750779)*(px)*(sj2)))), ((-0.934579439252337)+(((3.11526479750779)*(py)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x298=((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30);
j3array[0]=IKatan2(((-3.11526479750779)*(pz)*(x298)), ((9.70487475859124)*(x298)*(((IKabs(cj0) != 0)?((IKReal)1/(cj0)):(IKReal)1.0e30))*(((((-0.321000000000000)*(pz)*(sj0)*(sj2)))+(((0.321000000000000)*(cj2)*(((((-0.300000000000000)*(cj0)))+(((-1.00000000000000)*(px)))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-3.11526479750779)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-0.934579439252337)+(((-3.11526479750779)*(cj0)*(px)))+(((-3.11526479750779)*(py)*(sj0)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-3.11526479750779)*(pz)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))), ((-0.934579439252337)+(((-3.11526479750779)*(cj0)*(px)))+(((-3.11526479750779)*(py)*(sj0)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.200000000000000)*(cj0)*(px))));
evalcond[2]=((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((0.100000000000000)*(sj2)))+(((cj2)*(px)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)*(sj2))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal j3eval[1];
j3eval[0]=((((0.321000000000000)*(sj0)*(sj2)))+(((0.321000000000000)*(cj0)*(cj2))));
if( IKabs(j3eval[0]) < 0.000001  )
{
{
IKReal evalcond[5];
IKReal x299=((cj0)*(px));
IKReal x300=((py)*(sj0));
IKReal x301=((x300)+(x299));
IKReal x302=((0.100000000000000)+(((-1.00000000000000)*(x301))));
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x302;
evalcond[2]=x302;
evalcond[3]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.200000000000000)*(x300)))+(((0.200000000000000)*(x299))));
evalcond[4]=x302;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(px)*(sj0)))+(((-3.11526479750779)*(cj0)*(py)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x303=((cj0)*(px));
IKReal x304=((py)*(sj0));
IKReal x305=((x304)+(x303));
IKReal x306=((0.100000000000000)+(((-1.00000000000000)*(x305))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x306;
evalcond[2]=x306;
evalcond[3]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.200000000000000)*(x303)))+(((0.200000000000000)*(x304))));
evalcond[4]=((-0.100000000000000)+(x305));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(cj0)*(py)))+(((-3.11526479750779)*(px)*(sj0)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((IKabs(((((0.321000000000000)*(sj0)*(sj2)))+(((0.321000000000000)*(cj0)*(cj2))))) != 0)?((IKReal)1/(((((0.321000000000000)*(sj0)*(sj2)))+(((0.321000000000000)*(cj0)*(cj2)))))):(IKReal)1.0e30))*(((((-0.100000000000000)*(cj0)))+(px)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-3.11526479750779)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-3.11526479750779)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.200000000000000)*(cj0)*(px))));
evalcond[2]=((((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((cj0)*(px)*(sj2)))+(((-0.100000000000000)*(sj2)))+(((py)*(sj0)*(sj2)))+(((cj2)*(px)*(sj0))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((-3.11526479750779)*(cj0)*(py)*(sj2)))+(((-3.11526479750779)*(cj2)*(py)*(sj0)))+(((3.11526479750779)*(px)*(sj0)*(sj2)))+(((0.311526479750779)*(cj2)))+(((-3.11526479750779)*(cj0)*(cj2)*(px)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x307=((0.100000000000000)*(sj1));
IKReal x308=((cj1)*(pz));
IKReal x309=((cj0)*(px)*(sj1));
IKReal x310=((py)*(sj0)*(sj1));
IKReal x311=((x308)+(x309)+(x310));
IKReal x312=((x307)+(((-1.00000000000000)*(x311))));
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x312;
evalcond[2]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
evalcond[3]=x312;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(px)*(sj0)))+(((-3.11526479750779)*(cj0)*(py)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x313=((cj1)*(pz));
IKReal x314=((cj0)*(px)*(sj1));
IKReal x315=((py)*(sj0)*(sj1));
IKReal x316=((x315)+(x314)+(x313));
IKReal x317=((0.100000000000000)*(sj1));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((x317)+(((-1.00000000000000)*(x316))));
evalcond[2]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj1)))+(((0.200000000000000)*(py)*(sj0)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj1)*(py)*(sj0)))+(((0.800000000000000)*(cj0)*(cj1)*(px)))+(((0.200000000000000)*(cj0)*(px))));
evalcond[3]=((x316)+(((-1.00000000000000)*(x317))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((((3.11526479750779)*(cj0)*(py)))+(((-3.11526479750779)*(px)*(sj0)))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))+(((-0.311526479750779)*(cj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x318=((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30);
IKReal x319=((px)*(sj0));
IKReal x320=((cj0)*(py));
j3array[0]=IKatan2(((-3.11526479750779)*(x318)*(((x320)+(((-1.00000000000000)*(x319)))))), ((9.70487475859124)*(x318)*(((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((0.321000000000000)*(cj1)*(cj2)*(((((-1.00000000000000)*(x320)))+(x319)))))+(((0.321000000000000)*(sj2)*(((((-0.400000000000000)*(sj1)))+(((-1.00000000000000)*(pz)))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((9.70487475859124)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((0.128400000000000)*(sj1)))+(((0.321000000000000)*(pz)))+(((-0.321000000000000)*(sj1)*(((0.400000000000000)+(((0.100000000000000)*(cj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)))+(((pz)*(sj1)))))))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((-0.311526479750779)*(cj1)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-3.11526479750779)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(py)*(sj0)))+(((-0.311526479750779)*(cj1)))+(((3.11526479750779)*(cj0)*(cj1)*(px)))+(((-3.11526479750779)*(pz)*(sj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((-3.11526479750779)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py)))))), ((-0.985362149532710)+(((3.89408099688473)*((py)*(py))))+(((3.89408099688473)*((pz)*(pz))))+(((-0.778816199376947)*(cj0)*(px)))+(((-0.778816199376947)*(py)*(sj0)))+(((3.89408099688473)*((px)*(px))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j1eval[1];
j1eval[0]=((0.160000000000000)+(((0.103041000000000)*((cj2)*(cj2))*((sj3)*(sj3))))+(((0.256800000000000)*(cj3)))+(((0.103041000000000)*((cj3)*(cj3)))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.321000000000000)*(cj2)*(py)*(sj0)*(sj3)))+(((-0.0321000000000000)*(cj2)*(sj3)))+(((0.321000000000000)*(cj3)*(pz)))+(((0.400000000000000)*(pz)))+(((0.321000000000000)*(cj0)*(cj2)*(px)*(sj3))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.0400000000000000)+(((0.321000000000000)*(cj2)*(pz)*(sj3)))+(((0.0321000000000000)*(cj3)))+(((-0.400000000000000)*(cj0)*(px)))+(((-0.321000000000000)*(cj0)*(cj3)*(px)))+(((-0.400000000000000)*(py)*(sj0)))+(((-0.321000000000000)*(cj3)*(py)*(sj0))));
if( IKabs(j1eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x321=((0.321000000000000)*(cj3));
IKReal x322=((0.400000000000000)+(x321));
IKReal x323=((0.321000000000000)*(cj2)*(pz)*(sj3));
IKReal x324=((0.0321000000000000)*(cj3));
IKReal x325=((0.0400000000000000)+(x324)+(x323));
IKReal x326=((0.400000000000000)*(py)*(sj0));
IKReal x327=((py)*(sj0)*(x321));
IKReal x328=((0.400000000000000)*(cj0)*(px));
IKReal x329=((cj0)*(px)*(x321));
IKReal x330=((x326)+(x327)+(x328)+(x329));
IKReal x331=((x325)+(((-1.00000000000000)*(x330))));
IKReal x332=((IKabs(x331) != 0)?((IKReal)1/(x331)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x332)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((-0.321000000000000)*(cj2)*(sj3)*(x322)))))), ((x332)*(((((-1.00000000000000)*((x322)*(x322))))+((pz)*(pz))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x333=((0.321000000000000)*(cj2)*(py)*(sj0)*(sj3));
IKReal x334=((0.321000000000000)*(cj3)*(pz));
IKReal x335=((0.400000000000000)*(pz));
IKReal x336=((0.321000000000000)*(cj0)*(cj2)*(px)*(sj3));
IKReal x337=((x333)+(x336)+(x335)+(x334));
IKReal x338=((0.0321000000000000)*(cj2)*(sj3));
IKReal x339=((x337)+(((-1.00000000000000)*(x338))));
IKReal x340=((IKabs(x339) != 0)?((IKReal)1/(x339)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x340)*(((((0.103041000000000)*((cj2)*(cj2))*((sj3)*(sj3))))+(((-1.00000000000000)*((pz)*(pz))))))), ((x340)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((0.321000000000000)*(cj2)*(sj3)*(((0.400000000000000)+(((0.321000000000000)*(cj3)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x341=(cj2)*(cj2);
IKReal x342=(sj3)*(sj3);
IKReal x343=((0.103041000000000)*(x341)*(x342));
IKReal x344=((0.256800000000000)*(cj3));
IKReal x345=(cj3)*(cj3);
IKReal x346=((0.103041000000000)*(x345));
IKReal x347=((0.160000000000000)+(x343)+(x346)+(x344));
IKReal x348=((IKabs(x347) != 0)?((IKReal)1/(x347)):(IKReal)1.0e30);
IKReal x349=((0.321000000000000)*(cj3));
IKReal x350=((0.400000000000000)+(x349));
IKReal x351=((cj0)*(px));
IKReal x352=((py)*(sj0));
IKReal x353=((x351)+(x352));
IKReal x354=((0.100000000000000)+(((-1.00000000000000)*(x353))));
j1array[0]=IKatan2(((-1.00000000000000)*(x348)*(((((0.321000000000000)*(cj2)*(sj3)*(x354)))+(((pz)*(x350)))))), ((-1.00000000000000)*(x348)*(((((-0.321000000000000)*(cj2)*(pz)*(sj3)))+(((x350)*(x354)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

} else
{
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
IKReal x18=((cj0)*(cj1)*(cj3));
IKReal x19=((cj0)*(cj2)*(sj1)*(sj3));
IKReal x20=((sj0)*(sj2)*(sj3));
IKReal x21=((x19)+(x18)+(x20));
IKReal x22=((cj1)*(cj3)*(sj0));
IKReal x23=((cj2)*(sj0)*(sj1)*(sj3));
IKReal x24=((x22)+(x23));
IKReal x25=((cj0)*(sj2)*(sj3));
IKReal x26=((((-1.00000000000000)*(x25)))+(x24));
IKReal x27=((cj1)*(cj2)*(sj3));
IKReal x28=((cj3)*(sj1));
IKReal x29=((((-1.00000000000000)*(x28)))+(x27));
IKReal x30=((cj0)*(cj2));
IKReal x31=((sj0)*(sj1)*(sj2));
IKReal x32=((x31)+(x30));
IKReal x33=((-1.00000000000000)*(x32));
IKReal x34=((cj2)*(sj0));
IKReal x35=((cj0)*(sj1)*(sj2));
IKReal x36=((((-1.00000000000000)*(x35)))+(x34));
IKReal x37=((cj0)*(cj1)*(sj3));
IKReal x38=((x28)*(x30));
IKReal x39=((cj3)*(sj0)*(sj2));
IKReal x40=((x39)+(x38));
IKReal x41=((((-1.00000000000000)*(x40)))+(x37));
IKReal x42=((cj0)*(cj3)*(sj2));
IKReal x43=((cj1)*(sj0)*(sj3));
IKReal x44=((x42)+(x43));
IKReal x45=((x28)*(x34));
IKReal x46=((((-1.00000000000000)*(x45)))+(x44));
IKReal x47=((sj1)*(sj3));
IKReal x48=((cj1)*(cj2)*(cj3));
IKReal x49=((x48)+(x47));
IKReal x50=((-1.00000000000000)*(x49));
new_r00=((((r10)*(x26)))+(((r20)*(x29)))+(((r00)*(x21))));
new_r01=((((r21)*(x29)))+(((r01)*(x21)))+(((r11)*(x26))));
new_r02=((((r22)*(x29)))+(((r02)*(x21)))+(((r12)*(x26))));
new_r10=((((-1.00000000000000)*(cj1)*(r20)*(sj2)))+(((r00)*(x36)))+(((r10)*(x33))));
new_r11=((((-1.00000000000000)*(cj1)*(r21)*(sj2)))+(((r01)*(x36)))+(((r11)*(x33))));
new_r12=((((r02)*(x36)))+(((r12)*(x33)))+(((-1.00000000000000)*(cj1)*(r22)*(sj2))));
new_r20=((((r00)*(x41)))+(((r10)*(x46)))+(((r20)*(x50))));
new_r21=((((r01)*(x41)))+(((r21)*(x50)))+(((r11)*(x46))));
new_r22=((((r22)*(x50)))+(((r02)*(x41)))+(((r12)*(x46))));
{
IKReal j5eval;
j5eval=new_r00;
if( j5eval >= -1.000010 && j5eval <= -0.999990 )
{
{
j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=1.00000000000000;
j6=((-1.00000000000000)*(IKatan2(new_r12, new_r11)));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
if( j5eval >= 0.999990 && j5eval <= 1.000010 )
{
{
j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
IKReal j4mul = 1;
j4=0;
IKReal j6mul=-1.00000000000000;
j6=((((-1.00000000000000)*(IKatan2(new_r21, ((-1.00000000000000)*(new_r22))))))+(((-1.00000000000000)*(3.14159265358979))));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[4].fmul = j4mul;
solution.basesol[4].freeind = 0;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[6].fmul = j6mul;
solution.basesol[6].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 4;
}

} else
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
j4array[0]=IKatan2(new_r10, ((-1.00000000000000)*(new_r20)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
sj4array[1] = -sj4array[0];
cj4array[1] = -cj4array[0];
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal evalcond[1];
evalcond[0]=IKsin(j4);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((-1.00000000000000)*(new_r20)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x51=IKcos(j4);
IKReal x52=((IKabs(x51) != 0)?((IKReal)1/(x51)):(IKReal)1.0e30);
j6array[0]=IKatan2(((-1.00000000000000)*(new_r12)*(x52)), ((new_r11)*(x52)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((new_r10)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal evalcond[1];
evalcond[0]=IKsin(j5);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x53=IKcos(j5);
IKReal x54=((IKabs(x53) != 0)?((IKReal)1/(x53)):(IKReal)1.0e30);
IKReal x55=IKsin(j4);
IKReal x56=IKcos(j4);
j6array[0]=IKatan2(((((new_r21)*(x54)*(x56)))+(((-1.00000000000000)*(new_r11)*(x54)*(x55)))), ((((new_r21)*(x55)))+(((new_r11)*(x56)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x57=IKsin(j5);
IKReal x58=((IKabs(x57) != 0)?((IKReal)1/(x57)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r01)*(x58)), ((new_r02)*(x58)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
}
}
}
}
}

} else
{
}
}
}
}
}

}
}
}/// Durand-Kerner polynomial root finding method
static void polyroots3(IKReal rawcoeffs[3+1], IKReal rawroots[3], int& numroots)
{
    using std::complex;
    assert(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[3];
    const int maxsteps = 50;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[3];
    IKReal err[3];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 3; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
static void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
    IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = 0.5*(-rawcoeffs[1]+det)/rawcoeffs[0];
        rawroots[1] = 0.5*(-rawcoeffs[1]-det)/rawcoeffs[0];
        numroots = 2;
    }
}
/// intersection of a conic and the unit circle
static void conicsolver(IKReal _C0[6], IKReal roots[4], int& numroots)
{
    // have to normalize _C0
    IKReal maxval = IKabs(_C0[0]);
    for(int i = 1; i < 6; ++i) {
        if( maxval < IKabs(_C0[i]) ) {
            maxval = IKabs(_C0[i]);
        }
    }
    IKReal C0[6];
    for(int i = 0; i < 6; ++i) {
        C0[i]=_C0[i]/maxval;
    }
    IKReal rawcoeffs[4] = {-1,
                           C0[5] - C0[0] - C0[3],
                           C0[0]*C0[5] + C0[3]*C0[5] - C0[0]*C0[3] + C0[1]*C0[1] - C0[2]*C0[2] - C0[4]*C0[4],
                           C0[0]*C0[3]*C0[5] + 2*C0[1]*C0[2]*C0[4] - C0[0]*C0[4]*C0[4] - C0[3]*C0[2]*C0[2] - C0[5]*C0[1]*C0[1]};
    IKReal proots[3];
    int numproots, numyroots;
    polyroots3(rawcoeffs,proots,numproots);
    numroots = 0;
    int iroot=0;
    IKReal a, b, c, d, e, f;
    a = C0[0]+proots[iroot]; b = C0[1]; c = C0[3]+proots[iroot]; d = C0[2]; e = C0[4]; f = C0[5]-proots[iroot];
    IKReal adjugate[9] = {c*f-e*e, -b*f+e*d, b*e-c*d, -b*f+d*e, a*f-d*d, -a*e+b*d, b*e-d*c, -a*e+d*b, a*c-b*b};
    // find the greatest absolute value of adjugate and take that column
    int maxindex = 0;
    IKReal val = IKabs(adjugate[maxindex]);
    for(int i = 1; i < 9; ++i) {
        IKReal newval = IKabs(adjugate[i]);
        if( val < newval ) {
            val = newval;
            maxindex = i;
        }
    }
    maxindex = maxindex%3;
    if( adjugate[0] > 0 || adjugate[4] > 0 || adjugate[8] > 0 || adjugate[4*maxindex] >= 0 ) {
        // according to the structure of the matrix, should be always negative if a solution exists...
        return;
    }
    IKReal bmult = 1.0/IKsqrt(-adjugate[4*maxindex]);
    IKReal p[3] = {adjugate[maxindex]*bmult, adjugate[3+maxindex]*bmult, adjugate[6+maxindex]*bmult}; // intersection point
    // C = C0 - [p_x] = 2gh^t, C is rank1
    IKReal C[9] = {a,b+p[2],d-p[1],b-p[2],c,e+p[0],d+p[1],e-p[0],f};
    maxindex = 0;
    val = IKabs(C[maxindex]);
    for(int i = 1; i < 9; ++i) {
        IKReal newval = IKabs(C[i]);
        if( val < newval ) {
            val = newval;
            maxindex = i;
        }
    }
    int row = maxindex/3;
    int col = maxindex%3;
    IKReal lineequation[3], coeffs[3], yintersections[2];
    for(int i = 0; i < 2; ++i) {
        if( i == 0 ) {
            lineequation[0] = C[3*row];
            lineequation[1] = C[3*row+1];
            lineequation[2] = C[3*row+2];
        }
        else {
            lineequation[0] = C[col];
            lineequation[1] = C[3+col];
            lineequation[2] = C[6+col];
        }

        if( IKabs(lineequation[0]) < std::numeric_limits<IKReal>::epsilon() ) {
            yintersections[0] = -lineequation[2]/lineequation[1];
            IKReal x = 1-yintersections[0]*yintersections[0];
            if( x <= 0 && x > -std::numeric_limits<IKReal>::epsilon() ) {
                roots[numroots++] = yintersections[0] > 0 ? IKPI_2 : -IKPI_2;
            }
            else {
                x = IKsqrt(x);
                roots[numroots++] = IKatan2(yintersections[0], x);
                roots[numroots] = IKPI - roots[numroots-1]; numroots++;
            }
        }
        else {
            coeffs[0] = lineequation[0]*lineequation[0]+lineequation[1]*lineequation[1];
            coeffs[1] = 2*lineequation[1]*lineequation[2];
            coeffs[2] = lineequation[2]*lineequation[2]-lineequation[0]*lineequation[0];
            polyroots2(coeffs,yintersections,numyroots);
            for(int j = 0; j < numyroots; ++j) {
                roots[numroots++] = IKatan2(yintersections[j],-(lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0]);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "17387b1a3fe942bd7308b8ba9ca3fe65"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
