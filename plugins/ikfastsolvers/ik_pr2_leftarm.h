/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 33 generated on 2011-02-17 00:57:19.126670
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKsin(j[4]);
x6=((x0)*(x1)*(x2));
x7=((x3)*(x4));
x8=((x6)+(((-1.00000000000000)*(x7))));
x9=IKcos(j[4]);
x10=IKcos(j[3]);
x11=((x2)*(x4));
x12=((x0)*(x1)*(x3));
x13=((x11)+(x12));
x14=((-1.00000000000000)*(x13));
x15=IKcos(j[1]);
x16=IKsin(j[3]);
x17=((x0)*(x15)*(x16));
x18=IKsin(j[6]);
x19=IKcos(j[5]);
x20=((x5)*(x8));
x21=((x10)*(x14));
x22=IKsin(j[5]);
x23=((-1.00000000000000)*(x14)*(x16));
x24=((-1.00000000000000)*(x0)*(x10)*(x15));
x25=((x24)+(x23));
x26=IKcos(j[6]);
x27=((x8)*(x9));
x28=((-1.00000000000000)*(x17));
x29=((x21)+(x28));
x30=((x29)*(x9));
x31=((x30)+(x20));
x32=((((-1.00000000000000)*(x17)))+(x21));
x33=((x0)*(x2));
x34=((x1)*(x7));
x35=((((-1.00000000000000)*(x34)))+(x33));
x36=((x0)*(x3));
x37=((x1)*(x11));
x38=((x37)+(x36));
x39=((x10)*(x35));
x40=((x38)*(x9));
x41=((x15)*(x16)*(x4));
x42=((((-1.00000000000000)*(x39)))+(x41));
x43=((x42)*(x5));
x44=((x43)+(x40));
x45=((-1.00000000000000)*(x41));
x46=((x39)+(x45));
x47=((x46)*(x9));
x48=((x38)*(x5));
x49=((x48)+(x47));
x50=((-1.00000000000000)*(x10)*(x15)*(x4));
x51=((-1.00000000000000)*(x16)*(x35));
x52=((x51)+(x50));
x53=((x1)*(x16));
x54=((x10)*(x15)*(x3));
x55=((x15)*(x2)*(x9));
x56=((x54)+(((-1.00000000000000)*(x53))));
x57=((x5)*(x56));
x58=((x55)+(x57));
x59=((x15)*(x16)*(x3));
x60=((x1)*(x10));
x61=((x59)+(x60));
x62=((x22)*(x61));
x63=((x53)+(((-1.00000000000000)*(x54))));
x64=((x63)*(x9));
x65=((x15)*(x2)*(x5));
x66=((x64)+(x65));
x67=((x19)*(x66));
x68=((x62)+(x67));
eerot[0]=((((x26)*(((((x19)*(((((x32)*(x9)))+(x20)))))+(((x22)*(x25)))))))+(((x18)*(((x27)+(((x5)*(((((-1.00000000000000)*(x21)))+(x17))))))))));
eerot[1]=((((x18)*(((((-1.00000000000000)*(x22)*(x25)))+(((-1.00000000000000)*(x19)*(x31)))))))+(((x26)*(((x27)+(((x5)*(((((-1.00000000000000)*(x21)))+(x17))))))))));
eerot[2]=((((x22)*(x31)))+(((x19)*(((((x0)*(x10)*(x15)))+(((x14)*(x16))))))));
eetrans[0]=((((x16)*(((((-0.321000000000000)*(x12)))+(((-0.321000000000000)*(x11)))))))+(((0.321000000000000)*(x0)*(x10)*(x15)))+(((0.400000000000000)*(x0)*(x15)))+(((x22)*(((((0.180000000000000)*(x20)))+(((0.180000000000000)*(x32)*(x9)))))))+(((x19)*(((((0.180000000000000)*(x0)*(x10)*(x15)))+(((0.180000000000000)*(x14)*(x16)))))))+(((0.100000000000000)*(x0))));
eerot[3]=((((x18)*(x44)))+(((x26)*(((((x19)*(x49)))+(((x22)*(x52))))))));
eerot[4]=((((x26)*(x44)))+(((x18)*(((((-1.00000000000000)*(x22)*(x52)))+(((-1.00000000000000)*(x19)*(x49))))))));
eerot[5]=((((x22)*(x49)))+(((x19)*(((((x16)*(x35)))+(((x10)*(x15)*(x4))))))));
eetrans[1]=((0.188000000000000)+(((x16)*(((((-0.321000000000000)*(x34)))+(((0.321000000000000)*(x33)))))))+(((x19)*(((((0.180000000000000)*(x10)*(x15)*(x4)))+(((0.180000000000000)*(x16)*(x35)))))))+(((0.400000000000000)*(x15)*(x4)))+(((0.100000000000000)*(x4)))+(((x22)*(((((0.180000000000000)*(x47)))+(((0.180000000000000)*(x48)))))))+(((0.321000000000000)*(x10)*(x15)*(x4))));
eerot[6]=((((x26)*(x68)))+(((x18)*(x58))));
eerot[7]=((((x26)*(x58)))+(((-1.00000000000000)*(x18)*(x68))));
eerot[8]=((((-1.00000000000000)*(x19)*(x61)))+(((x22)*(x66))));
eetrans[2]=((((x22)*(((((0.180000000000000)*(x65)))+(((0.180000000000000)*(x64)))))))+(((x19)*(((((-0.180000000000000)*(x60)))+(((-0.180000000000000)*(x59)))))))+(((-0.321000000000000)*(x59)))+(((-0.321000000000000)*(x60)))+(((-0.400000000000000)*(x1))));
}

class IKSolver {
public:
IKReal j15, cj15, sj15,
j16, cj16, sj16,
j18, cj18, sj18,
j19, cj19, sj19,
j20, cj20, sj20,
j21, cj21, sj21,
j17, cj17, sj17,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j17=pfree[0]; cj17=cos(pfree[0]); sj17=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.180000000000000)*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.188000000000000)+(py)+(((-0.180000000000000)*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((((-0.180000000000000)*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(sj17)*(sj17);
dummyeval[0]=((((-25.0000000000000)*(x0)*((pp)*(pp))))+(((-1.00000000000000)*(x0)*((px)*(px))))+(((0.0479123079750000)*(x0)))+(((-16.0000000000000)*((py)*(py))))+(((12.6520500000000)*(pp)*(x0)))+(((2.53041000000000)*(px)*(x0)))+(((-10.0000000000000)*(pp)*(px)*(x0))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IKReal evalcond[1];
evalcond[0]=((IKabs(py))+(IKabs(((3.14159265358979)+(((-1.00000000000000)*(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959))))))));
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x1=(cj18)*(cj18);
IKReal x2=(pp)*(pp);
IKReal x3=(px)*(px);
IKReal x4=((12.6520500000000)*(pp));
IKReal x5=((10.0000000000000)*(pp)*(px));
IKReal x6=((1.64865600000000)*(x1));
IKReal x7=((2.53041000000000)*(px));
IKReal x8=((25.0000000000000)*(x2));
op[0]=((-1.60074369202500)+(x7)+(x6)+(x4)+(((-1.00000000000000)*(x3)))+(((-1.00000000000000)*(x8)))+(((-1.00000000000000)*(x5))));
op[1]=0;
op[2]=((-3.20148738405000)+(((-50.0000000000000)*(x2)))+(((3.29731200000000)*(x1)))+(((-4.59462400000000)*(x3)))+(((25.3041000000000)*(pp))));
op[3]=0;
op[4]=((-1.60074369202500)+(x6)+(x5)+(x4)+(((-1.00000000000000)*(x7)))+(((-1.00000000000000)*(x3)))+(((-1.00000000000000)*(x8))));
polyroots4(op,zeror,numroots);
IKReal j15array[4], cj15array[4], sj15array[4], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IKReal htj15 = zeror[ij15];
tempj15array[0]=((2.00000000000000)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
bool valid = true;
for( int kj15 = 0; kj15 < numsolutions; ++kj15)
{
    if( IKabs(cj15array[kj15]-cj15array[numsolutions]) < 0.0001 && IKabs(sj15array[kj15]-sj15array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
{
    j18valid[1]=false;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x9=((1.24610591900312)*(pz));
IKReal x10=((cj18)*(pz));
IKReal x11=((0.100000000000000)*(sj18));
IKReal x12=((x9)+(x11)+(x10));
IKReal x13=((cj15)*(px)*(sj18));
IKReal x14=((((-1.00000000000000)*(x13)))+(x12));
dummyeval[0]=x14;
dummyeval[1]=x14;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x15=(sj18)*(sj18);
IKReal x16=((0.644006250000000)*(x15));
IKReal x17=x1;
IKReal x18=((0.644006250000000)*(x17));
IKReal x19=((1.60500000000000)*(cj18));
IKReal x20=((1.00000000000000)+(x16)+(x19)+(x18));
dummyeval[0]=x20;
dummyeval[1]=x20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x21=((0.802500000000000)*(cj18));
IKReal x22=((1.00000000000000)+(x21));
IKReal x23=((8.02500000000000)*(cj15)*(cj18)*(px));
IKReal x24=((10.0000000000000)*(cj15)*(px));
IKReal x25=((8.02500000000000)*(pz)*(sj18));
IKReal x26=((x24)+(x25)+(x23));
IKReal x27=((((-1.00000000000000)*(x26)))+(x22));
dummyeval[0]=x27;
dummyeval[1]=x27;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x28=((0.321000000000000)*(cj18));
IKReal x29=((0.400000000000000)+(x28));
IKReal x30=((32.1000000000000)*(cj18));
IKReal x31=((40.0000000000000)+(x30));
IKReal x32=((321.000000000000)*(pz)*(sj18));
IKReal x33=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x34=((400.000000000000)*(cj15)*(px));
IKReal x35=((x33)+(x32)+(x34));
IKReal x36=((((-1.00000000000000)*(x35)))+(x31));
IKReal x37=((IKabs(x36) != 0)?((IKReal)1/(x36)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x37)*(((((321.000000000000)*(sj18)*(x29)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))))))))), ((x37)*(((((-1000.00000000000)*((x29)*(x29))))+(((1000.00000000000)*((pz)*(pz))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x123=x1;
IKReal x124=((103041.000000000)*(x123));
IKReal x125=((256800.000000000)*(cj18));
IKReal x126=(sj18)*(sj18);
IKReal x127=((103041.000000000)*(x126));
IKReal x128=((160000.000000000)+(x127)+(x124)+(x125));
IKReal x129=((IKabs(x128) != 0)?((IKReal)1/(x128)):(IKReal)1.0e30);
IKReal x130=((0.321000000000000)*(cj18));
IKReal x131=((0.400000000000000)+(x130));
j16array[0]=IKatan2(((-1.00000000000000)*(x129)*(((((-321000.000000000)*(sj18)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))))))+(((1000000.00000000)*(pz)*(x131)))))), ((-1.00000000000000)*(x129)*(((((x131)*(((100000.000000000)+(((-1000000.00000000)*(cj15)*(px)))))))+(((321000.000000000)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((321000.000000000)*(cj18)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((32100.0000000000)*(sj18)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((321000.000000000)*(cj18)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((32100.0000000000)*(sj18)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((-1000000.00000000)*((pz)*(pz))))+(((103041.000000000)*((sj18)*(sj18))))))), ((((IKabs(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((321.000000000000)*(cj18)*(pz)))+(((400.000000000000)*(pz))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((321.000000000000)*(cj18)*(pz)))+(((400.000000000000)*(pz)))))):(IKReal)1.0e30))*(((((-321.000000000000)*(sj18)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

} else
{
evalcond[0]=((IKabs(((3.14159265358979)+(((-1.00000000000000)*(IKfmod(j17, 6.28318530717959)))))))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x132=(cj18)*(cj18);
IKReal x133=(pp)*(pp);
IKReal x134=(px)*(px);
IKReal x135=((12.6520500000000)*(pp));
IKReal x136=((10.0000000000000)*(pp)*(px));
IKReal x137=((1.64865600000000)*(x132));
IKReal x138=((2.53041000000000)*(px));
IKReal x139=((25.0000000000000)*(x133));
op[0]=((-1.60074369202500)+(x135)+(x137)+(x138)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x139))));
op[1]=0;
op[2]=((-3.20148738405000)+(((-4.59462400000000)*(x134)))+(((25.3041000000000)*(pp)))+(((3.29731200000000)*(x132)))+(((-50.0000000000000)*(x133))));
op[3]=0;
op[4]=((-1.60074369202500)+(x135)+(x137)+(x136)+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x138)))+(((-1.00000000000000)*(x139))));
polyroots4(op,zeror,numroots);
IKReal j15array[4], cj15array[4], sj15array[4], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IKReal htj15 = zeror[ij15];
tempj15array[0]=((2.00000000000000)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
bool valid = true;
for( int kj15 = 0; kj15 < numsolutions; ++kj15)
{
    if( IKabs(cj15array[kj15]-cj15array[numsolutions]) < 0.0001 && IKabs(sj15array[kj15]-sj15array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
{
    j18valid[1]=false;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x140=((0.100000000000000)*(sj18));
IKReal x141=((cj15)*(px)*(sj18));
IKReal x142=((1.24610591900312)*(pz));
IKReal x143=((cj18)*(pz));
IKReal x144=((x141)+(x142)+(x143));
IKReal x145=((((-1.00000000000000)*(x144)))+(x140));
dummyeval[0]=x145;
dummyeval[1]=x145;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x146=(sj18)*(sj18);
IKReal x147=((0.644006250000000)*(x146));
IKReal x148=x132;
IKReal x149=((0.644006250000000)*(x148));
IKReal x150=((1.60500000000000)*(cj18));
IKReal x151=((1.00000000000000)+(x150)+(x147)+(x149));
dummyeval[0]=x151;
dummyeval[1]=x151;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x152=((0.802500000000000)*(cj18));
IKReal x153=((8.02500000000000)*(pz)*(sj18));
IKReal x154=((1.00000000000000)+(x153)+(x152));
IKReal x155=((8.02500000000000)*(cj15)*(cj18)*(px));
IKReal x156=((10.0000000000000)*(cj15)*(px));
IKReal x157=((x156)+(x155));
IKReal x158=((((-1.00000000000000)*(x157)))+(x154));
dummyeval[0]=x158;
dummyeval[1]=x158;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x159=((0.321000000000000)*(cj18));
IKReal x160=((0.400000000000000)+(x159));
IKReal x161=((321.000000000000)*(pz)*(sj18));
IKReal x162=((32.1000000000000)*(cj18));
IKReal x163=((40.0000000000000)+(x162)+(x161));
IKReal x164=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x165=((400.000000000000)*(cj15)*(px));
IKReal x166=((x164)+(x165));
IKReal x167=((((-1.00000000000000)*(x166)))+(x163));
IKReal x168=((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x168)*(((((-321.000000000000)*(sj18)*(x160)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))))))))), ((x168)*(((((-1000.00000000000)*((x160)*(x160))))+(((1000.00000000000)*((pz)*(pz))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x169=x132;
IKReal x170=((103041.000000000)*(x169));
IKReal x171=((256800.000000000)*(cj18));
IKReal x172=(sj18)*(sj18);
IKReal x173=((103041.000000000)*(x172));
IKReal x174=((160000.000000000)+(x171)+(x170)+(x173));
IKReal x175=((IKabs(x174) != 0)?((IKReal)1/(x174)):(IKReal)1.0e30);
IKReal x176=((0.321000000000000)*(cj18));
IKReal x177=((0.400000000000000)+(x176));
j16array[0]=IKatan2(((-1.00000000000000)*(x175)*(((((321000.000000000)*(sj18)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))))))+(((1000000.00000000)*(pz)*(x177)))))), ((x175)*(((((-1.00000000000000)*(x177)*(((100000.000000000)+(((-1000000.00000000)*(cj15)*(px)))))))+(((321000.000000000)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((-321000.000000000)*(cj18)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((32100.0000000000)*(sj18))))) != 0)?((IKReal)1/(((((-321000.000000000)*(cj18)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((32100.0000000000)*(sj18)))))):(IKReal)1.0e30))*(((((-103041.000000000)*((sj18)*(sj18))))+(((1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))))))+(((-321.000000000000)*(sj18)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x178=(sj17)*(sj17);
IKReal x179=(py)*(py);
IKReal x180=(px)*(px);
IKReal x181=(pp)*(pp);
IKReal x182=((417.429275384432)*(pp)*(py)*(x178));
IKReal x183=((1335.77368123018)*(px)*(py));
IKReal x184=((83.4858550768864)*(px)*(py)*(x178));
IKReal x185=((105.626721272552)*(py)*(x178));
IKReal x186=((208.714637692216)*(pp)*(px)*(x178));
IKReal x187=((264.066803181380)*(pp)*(x178));
IKReal x188=((521.786594230540)*(x178)*(x181));
IKReal x189=((333.943420307546)*(x179));
IKReal x190=((20.8714637692216)*(x178)*(x180));
IKReal x191=((52.8133606362761)*(px)*(x178));
op[0]=((((-1.00000000000000)*(x186)))+(((-1.00000000000000)*(x189)))+(((-1.00000000000000)*(x188)))+(((-1.00000000000000)*(x190)))+(x178)+(x191)+(x187));
op[1]=((((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x183)))+(x184)+(x182));
op[2]=((((667.886840615091)*(x179)))+(((-1043.57318846108)*(x178)*(x181)))+(((41.7429275384432)*(x178)*(x180)))+(((2.00000000000000)*(x178)))+(((528.133606362760)*(pp)*(x178)))+(((-1335.77368123018)*(x180)))+(((-83.4858550768864)*(x178)*(x179))));
op[3]=((((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x184)))+(x182)+(x183));
op[4]=((((-1.00000000000000)*(x189)))+(((-1.00000000000000)*(x188)))+(((-1.00000000000000)*(x190)))+(((-1.00000000000000)*(x191)))+(x178)+(x186)+(x187));
polyroots4(op,zeror,numroots);
IKReal j15array[4], cj15array[4], sj15array[4], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IKReal htj15 = zeror[ij15];
tempj15array[0]=((2.00000000000000)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
bool valid = true;
for( int kj15 = 0; kj15 < numsolutions; ++kj15)
{
    if( IKabs(cj15array[kj15]-cj15array[numsolutions]) < 0.0001 && IKabs(sj15array[kj15]-sj15array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x192=((20.0000000000000)*(cj15)*(px)*(sj17));
IKReal x193=((20.0000000000000)*(py)*(sj15)*(sj17));
IKReal x194=((x193)+(x192));
IKReal x195=(pz)*(pz);
IKReal x196=((100.000000000000)*(sj17)*(x195));
IKReal x197=(cj15)*(cj15);
IKReal x198=x180;
IKReal x199=((100.000000000000)*(sj17)*(x197)*(x198));
IKReal x200=x179;
IKReal x201=(sj15)*(sj15);
IKReal x202=((100.000000000000)*(sj17)*(x200)*(x201));
IKReal x203=((200.000000000000)*(cj15)*(px)*(py)*(sj15)*(sj17));
IKReal x204=((x199)+(x196)+(x203)+(x202)+(sj17));
IKReal x205=((x194)+(((-1.00000000000000)*(x204))));
dummyeval[0]=x205;
dummyeval[1]=x205;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
IKReal x206=((px)*(sj15));
IKReal x207=((cj15)*(py));
IKReal x208=((((-1.00000000000000)*(x207)))+(x206));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x208;
evalcond[2]=x208;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
{
    j18valid[1]=false;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x209=((1.24610591900312)*(pz));
IKReal x210=((cj18)*(pz));
IKReal x211=((0.100000000000000)*(sj18));
IKReal x212=((x210)+(x211)+(x209));
IKReal x213=((cj15)*(px)*(sj18));
IKReal x214=((py)*(sj15)*(sj18));
IKReal x215=((x213)+(x214));
IKReal x216=((x212)+(((-1.00000000000000)*(x215))));
dummyeval[0]=x216;
dummyeval[1]=x216;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x217=(sj18)*(sj18);
IKReal x218=((0.644006250000000)*(x217));
IKReal x219=(cj18)*(cj18);
IKReal x220=((0.644006250000000)*(x219));
IKReal x221=((1.60500000000000)*(cj18));
IKReal x222=((1.00000000000000)+(x218)+(x221)+(x220));
dummyeval[0]=x222;
dummyeval[1]=x222;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x223=((0.802500000000000)*(cj18));
IKReal x224=((1.00000000000000)+(x223));
IKReal x225=((10.0000000000000)*(py)*(sj15));
IKReal x226=((8.02500000000000)*(cj15)*(cj18)*(px));
IKReal x227=((8.02500000000000)*(cj18)*(py)*(sj15));
IKReal x228=((10.0000000000000)*(cj15)*(px));
IKReal x229=((8.02500000000000)*(pz)*(sj18));
IKReal x230=((x229)+(x228)+(x225)+(x227)+(x226));
IKReal x231=((((-1.00000000000000)*(x230)))+(x224));
dummyeval[0]=x231;
dummyeval[1]=x231;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x232=((0.321000000000000)*(cj18));
IKReal x233=((0.400000000000000)+(x232));
IKReal x234=((32.1000000000000)*(cj18));
IKReal x235=((40.0000000000000)+(x234));
IKReal x236=((321.000000000000)*(pz)*(sj18));
IKReal x237=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x238=((400.000000000000)*(cj15)*(px));
IKReal x239=((400.000000000000)*(py)*(sj15));
IKReal x240=((321.000000000000)*(cj18)*(py)*(sj15));
IKReal x241=((x238)+(x239)+(x236)+(x237)+(x240));
IKReal x242=((x235)+(((-1.00000000000000)*(x241))));
IKReal x243=((IKabs(x242) != 0)?((IKReal)1/(x242)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x243)*(((((321.000000000000)*(sj18)*(x233)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))))), ((x243)*(((((-1000.00000000000)*((x233)*(x233))))+(((1000.00000000000)*((pz)*(pz))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x244=(cj18)*(cj18);
IKReal x245=((103041.000000000)*(x244));
IKReal x246=((256800.000000000)*(cj18));
IKReal x247=(sj18)*(sj18);
IKReal x248=((103041.000000000)*(x247));
IKReal x249=((160000.000000000)+(x246)+(x245)+(x248));
IKReal x250=((IKabs(x249) != 0)?((IKReal)1/(x249)):(IKReal)1.0e30);
IKReal x251=((py)*(sj15));
IKReal x252=((cj15)*(px));
IKReal x253=((x251)+(x252));
IKReal x254=((0.100000000000000)+(((-1.00000000000000)*(x253))));
j16array[0]=IKatan2(((-1.00000000000000)*(x250)*(((((-321000.000000000)*(sj18)*(x254)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))), ((-1.00000000000000)*(x250)*(((((321000.000000000)*(pz)*(sj18)))+(((x254)*(((400000.000000000)+(((321000.000000000)*(cj18)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((321000.000000000)*(cj18)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((32100.0000000000)*(sj18)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((321000.000000000)*(cj18)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((32100.0000000000)*(sj18)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((-1000000.00000000)*((pz)*(pz))))+(((103041.000000000)*((sj18)*(sj18))))))), ((((IKabs(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((321.000000000000)*(cj18)*(pz)))+(((-321.000000000000)*(py)*(sj15)*(sj18)))+(((400.000000000000)*(pz))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((321.000000000000)*(cj18)*(pz)))+(((-321.000000000000)*(py)*(sj15)*(sj18)))+(((400.000000000000)*(pz)))))):(IKReal)1.0e30))*(((((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((-321.000000000000)*(sj18)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
IKReal x255=((cj15)*(py));
IKReal x256=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((x256)+(((-1.00000000000000)*(x255))));
evalcond[2]=((x255)+(((-1.00000000000000)*(x256))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[2], cj18array[2], sj18array[2];
bool j18valid[2]={false};
cj18array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px))));
if( cj18array[0] >= -1.0001 && cj18array[0] <= 1.0001 )
{
    j18valid[0] = j18valid[1] = true;
    j18array[0] = IKacos(cj18array[0]);
    sj18array[0] = IKsin(j18array[0]);
    cj18array[1] = cj18array[0];
    j18array[1] = -j18array[0];
    sj18array[1] = -sj18array[0];
}
else if( isnan(cj18array[0]) )
{
    // probably any value will work
    j18valid[0] = true;
    cj18array[0] = 1; sj18array[0] = 0; j18array[0] = 0;
}
if( j18valid[0] && j18valid[1] && IKabs(cj18array[0]-cj18array[1]) < 0.0001 && IKabs(sj18array[0]-sj18array[1]) < 0.0001 )
{
    j18valid[1]=false;
}
for(int ij18 = 0; ij18 < 2; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x257=((0.100000000000000)*(sj18));
IKReal x258=((cj15)*(px)*(sj18));
IKReal x259=((1.24610591900312)*(pz));
IKReal x260=((cj18)*(pz));
IKReal x261=((py)*(sj15)*(sj18));
IKReal x262=((x258)+(x259)+(x261)+(x260));
IKReal x263=((x257)+(((-1.00000000000000)*(x262))));
dummyeval[0]=x263;
dummyeval[1]=x263;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x264=(sj18)*(sj18);
IKReal x265=((0.644006250000000)*(x264));
IKReal x266=(cj18)*(cj18);
IKReal x267=((0.644006250000000)*(x266));
IKReal x268=((1.60500000000000)*(cj18));
IKReal x269=((1.00000000000000)+(x265)+(x267)+(x268));
dummyeval[0]=x269;
dummyeval[1]=x269;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x270=((0.802500000000000)*(cj18));
IKReal x271=((8.02500000000000)*(pz)*(sj18));
IKReal x272=((1.00000000000000)+(x270)+(x271));
IKReal x273=((10.0000000000000)*(py)*(sj15));
IKReal x274=((8.02500000000000)*(cj15)*(cj18)*(px));
IKReal x275=((8.02500000000000)*(cj18)*(py)*(sj15));
IKReal x276=((10.0000000000000)*(cj15)*(px));
IKReal x277=((x276)+(x274)+(x275)+(x273));
IKReal x278=((x272)+(((-1.00000000000000)*(x277))));
dummyeval[0]=x278;
dummyeval[1]=x278;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x279=((0.321000000000000)*(cj18));
IKReal x280=((0.400000000000000)+(x279));
IKReal x281=((321.000000000000)*(pz)*(sj18));
IKReal x282=((32.1000000000000)*(cj18));
IKReal x283=((40.0000000000000)+(x282)+(x281));
IKReal x284=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x285=((400.000000000000)*(cj15)*(px));
IKReal x286=((400.000000000000)*(py)*(sj15));
IKReal x287=((321.000000000000)*(cj18)*(py)*(sj15));
IKReal x288=((x287)+(x286)+(x285)+(x284));
IKReal x289=((x283)+(((-1.00000000000000)*(x288))));
IKReal x290=((IKabs(x289) != 0)?((IKReal)1/(x289)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x290)*(((((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((-321.000000000000)*(sj18)*(x280)))))), ((x290)*(((((-1000.00000000000)*((x280)*(x280))))+(((1000.00000000000)*((pz)*(pz))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x291=(cj18)*(cj18);
IKReal x292=((103041.000000000)*(x291));
IKReal x293=((256800.000000000)*(cj18));
IKReal x294=(sj18)*(sj18);
IKReal x295=((103041.000000000)*(x294));
IKReal x296=((160000.000000000)+(x292)+(x293)+(x295));
IKReal x297=((IKabs(x296) != 0)?((IKReal)1/(x296)):(IKReal)1.0e30);
IKReal x298=((py)*(sj15));
IKReal x299=((cj15)*(px));
IKReal x300=((x298)+(x299));
IKReal x301=((0.100000000000000)+(((-1.00000000000000)*(x300))));
j16array[0]=IKatan2(((-1.00000000000000)*(x297)*(((((321000.000000000)*(sj18)*(x301)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))), ((x297)*(((((-1.00000000000000)*(x301)*(((400000.000000000)+(((321000.000000000)*(cj18)))))))+(((321000.000000000)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
j16array[0]=IKatan2(((((IKabs(((((-321000.000000000)*(cj18)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((32100.0000000000)*(sj18))))) != 0)?((IKReal)1/(((((-321000.000000000)*(cj18)*(pz)))+(((-400000.000000000)*(pz)))+(((-321000.000000000)*(cj15)*(px)*(sj18)))+(((-321000.000000000)*(py)*(sj15)*(sj18)))+(((32100.0000000000)*(sj18)))))):(IKReal)1.0e30))*(((((-103041.000000000)*((sj18)*(sj18))))+(((1000000.00000000)*((pz)*(pz))))))), ((((IKabs(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(py)*(sj15)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz))))) != 0)?((IKReal)1/(((((32.1000000000000)*(sj18)))+(((-321.000000000000)*(cj15)*(px)*(sj18)))+(((-321.000000000000)*(py)*(sj15)*(sj18)))+(((-321.000000000000)*(cj18)*(pz)))+(((-400.000000000000)*(pz)))))):(IKReal)1.0e30))*(((((1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))+(((-321.000000000000)*(sj18)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x302=((0.0669590000000000)+(pp));
IKReal x303=((0.200000000000000)*(cj15)*(px));
IKReal x304=((0.200000000000000)*(py)*(sj15));
IKReal x305=((x304)+(x303));
IKReal x306=((x302)+(((-1.00000000000000)*(x305))));
IKReal x307=((0.800000000000000)*(cj15)*(px)*(sj17));
IKReal x308=((0.800000000000000)*(py)*(sj15)*(sj17));
IKReal x309=((x308)+(x307));
IKReal x310=((8.00000000000000)*(cj15)*(px)*(py)*(sj15)*(sj17));
IKReal x311=x179;
IKReal x312=(sj15)*(sj15);
IKReal x313=((4.00000000000000)*(sj17)*(x311)*(x312));
IKReal x314=(cj15)*(cj15);
IKReal x315=x180;
IKReal x316=((4.00000000000000)*(sj17)*(x314)*(x315));
IKReal x317=((0.0400000000000000)*(sj17));
IKReal x318=(pz)*(pz);
IKReal x319=((4.00000000000000)*(sj17)*(x318));
IKReal x320=((x319)+(x317)+(x316)+(x310)+(x313));
IKReal x321=((((-1.00000000000000)*(x320)))+(x309));
IKReal x322=((IKabs(x321) != 0)?((IKReal)1/(x321)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x322)*(((((5.00000000000000)*(pz)*(sj17)*(x306)))+(((((((-5.00000000000000)*(cj15)*(cj17)*(py)))+(((5.00000000000000)*(cj17)*(px)*(sj15)))))*(((0.0800000000000000)+(((-0.800000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(py)*(sj15)))))))))), ((x322)*(((((-4.00000000000000)*(pz)*(((((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((cj17)*(px)*(sj15)))))))+(((x306)*(((((-5.00000000000000)*(py)*(sj15)*(sj17)))+(((0.500000000000000)*(sj17)))+(((-5.00000000000000)*(cj15)*(px)*(sj17)))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj16;
dummyeval[1]=cj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((cj17)*(px)*(sj15)))+(((-1.00000000000000)*(cj15)*(px)*(sj17)))+(((-1.00000000000000)*(py)*(sj15)*(sj17)))+(((0.100000000000000)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x323=((px)*(sj15));
IKReal x324=((cj15)*(py));
IKReal x325=((((-1.00000000000000)*(x324)))+(x323));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x325;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x325;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x326=((cj15)*(py));
IKReal x327=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x326)))+(x327));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((((-1.00000000000000)*(x327)))+(x326));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x328=((py)*(sj15));
IKReal x329=((cj15)*(px));
IKReal x330=((x328)+(x329));
IKReal x331=((0.100000000000000)+(((-1.00000000000000)*(x330))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j17)), 6.28318530717959)));
evalcond[1]=x331;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(x329)))+(((0.200000000000000)*(x328)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x331;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(cj15)*(py)))+(((-3.11526479750779)*(px)*(sj15)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x332=((py)*(sj15));
IKReal x333=((cj15)*(px));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j17)), 6.28318530717959)));
evalcond[1]=((0.100000000000000)+(((-1.00000000000000)*(x333)))+(((-1.00000000000000)*(x332))));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(x333)))+(((0.200000000000000)*(x332)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((-0.100000000000000)+(x333)+(x332));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(cj15)*(py)))+(((3.11526479750779)*(px)*(sj15)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(py)*(sj15)))+(((-1000.00000000000)*(cj15)*(px)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((((cj15)*(px)*(sj17)))+(((-0.100000000000000)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(py)))+(((cj17)*(px)*(sj15)))+(((py)*(sj15)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj17;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x334=((px)*(sj15));
IKReal x335=((cj15)*(py));
IKReal x336=((x334)+(((-1.00000000000000)*(x335))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x336;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x336;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x337=((cj15)*(py));
IKReal x338=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((x338)+(((-1.00000000000000)*(x337))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((x337)+(((-1.00000000000000)*(x338))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x339=((py)*(sj15));
IKReal x340=((cj15)*(px));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j17)), 6.28318530717959)));
evalcond[1]=((0.100000000000000)+(((-1.00000000000000)*(x339)))+(((-1.00000000000000)*(x340))));
evalcond[2]=((-0.0669590000000000)+(((0.200000000000000)*(x340)))+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(x339)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((-0.100000000000000)+(x339)+(x340));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(cj15)*(py)))+(((-3.11526479750779)*(px)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x341=((py)*(sj15));
IKReal x342=((cj15)*(px));
IKReal x343=((x342)+(x341));
IKReal x344=((0.100000000000000)+(((-1.00000000000000)*(x343))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j17)), 6.28318530717959)));
evalcond[1]=x344;
evalcond[2]=((-0.0669590000000000)+(((0.200000000000000)*(x342)))+(((0.200000000000000)*(x341)))+(((0.800000000000000)*(pz)))+(((-1.00000000000000)*(pp))));
evalcond[3]=x344;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(cj15)*(py)))+(((3.11526479750779)*(px)*(sj15)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-0.00311526479750779)*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((100.000000000000)+(((-1000.00000000000)*(py)*(sj15)))+(((-1000.00000000000)*(cj15)*(px)))))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j17)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[2]=((((-1.00000000000000)*(cj16)*(pz)))+(((-1.00000000000000)*(cj15)*(px)*(sj16)))+(((-1.00000000000000)*(py)*(sj15)*(sj16)))+(((0.100000000000000)*(sj16))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((3.11526479750779)*(cj15)*(py)))+(((-3.11526479750779)*(px)*(sj15)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j17)), 6.28318530717959)));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[2]=((((cj15)*(px)*(sj16)))+(((-0.100000000000000)*(sj16)))+(((py)*(sj15)*(sj16)))+(((cj16)*(pz))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(cj15)*(py)))+(((3.11526479750779)*(px)*(sj15)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x345=((px)*(sj15));
IKReal x346=((cj15)*(py));
IKReal x347=((x345)+(((-1.00000000000000)*(x346))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j17)), 6.28318530717959)));
evalcond[1]=x347;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[3]=x347;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((((-3.11526479750779)*(cj15)*(px)*(sj16)))+(((-3.11526479750779)*(cj16)*(pz)))+(((0.311526479750779)*(sj16)))+(((-3.11526479750779)*(py)*(sj15)*(sj16)))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x348=((cj15)*(py));
IKReal x349=((px)*(sj15));
evalcond[0]=((-3.14159265358979)+(IKfmod(j17, 6.28318530717959)));
evalcond[1]=((x349)+(((-1.00000000000000)*(x348))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(cj15)*(cj16)*(px)))+(((0.200000000000000)*(cj15)*(px)))+(((-0.800000000000000)*(pz)*(sj16)))+(((0.800000000000000)*(cj16)*(py)*(sj15)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((-0.0800000000000000)*(cj16))));
evalcond[3]=((x348)+(((-1.00000000000000)*(x349))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj16;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[4];
IKReal x350=x348;
IKReal x351=x349;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x350)))+(x351));
evalcond[2]=((-0.146959000000000)+(((py)*(sj15)))+(((-1.00000000000000)*(pp)))+(((cj15)*(px))));
evalcond[3]=((((-1.00000000000000)*(x351)))+(x350));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((3.11526479750779)*(pz)), ((-1.55763239875389)+(((3.11526479750779)*(cj15)*(px)))+(((3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x352=x348;
IKReal x353=x349;
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x352)))+(x353));
evalcond[2]=((0.0130410000000000)+(((-0.600000000000000)*(py)*(sj15)))+(((-0.600000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(pp))));
evalcond[3]=((((-1.00000000000000)*(x353)))+(x352));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  )
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((-3.11526479750779)*(pz)), ((-0.934579439252336)+(((-3.11526479750779)*(cj15)*(px)))+(((-3.11526479750779)*(py)*(sj15)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
IKReal x354=((IKabs(sj16) != 0)?((IKReal)1/(sj16)):(IKReal)1.0e30);
j18array[0]=IKatan2(((((3.11526479750779)*(cj15)*(px)*(sj16)))+(((3.11526479750779)*(cj16)*(pz)))+(((3.11526479750779)*(py)*(sj15)*(sj16)))+(((-0.311526479750779)*(sj16)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)*(x354)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))+(((3.11526479750779)*(pz)*(x354)*((cj16)*(cj16))))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
IKReal x355=((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30);
j18array[0]=IKatan2(((((-3.11526479750779)*(pz)*(x355)*((sj16)*(sj16))))+(((3.11526479750779)*(cj15)*(px)*(sj16)))+(((3.11526479750779)*(pz)*(x355)))+(((3.11526479750779)*(py)*(sj15)*(sj16)))+(((-0.311526479750779)*(sj16)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)*(sj16)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((1000.00000000000)*(pz)))+(((400.000000000000)*(sj16)))+(((-1250.00000000000)*(sj16)*(((0.253041000000000)+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))))))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((IKabs(cj17) != 0)?((IKReal)1/(cj17)):(IKReal)1.0e30))*(((((1250.00000000000)*(sj16)*(((0.253041000000000)+(((0.200000000000000)*(cj15)*(px)))+(((0.200000000000000)*(py)*(sj15)))+(((-1.00000000000000)*(pp)))))))+(((-1000.00000000000)*(pz)))+(((-400.000000000000)*(sj16)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)*(sj16)))+(((3.11526479750779)*(cj16)*(py)*(sj15)))+(((-0.311526479750779)*(cj16)))+(((3.11526479750779)*(cj15)*(cj16)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j18array[1], cj18array[1], sj18array[1];
bool j18valid[1]={false};
j18array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj17) != 0)?((IKReal)1/(sj17)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj15)*(py)))+(((-1000.00000000000)*(px)*(sj15)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj15)))+(((3.89408099688474)*(pp)))+(((-0.778816199376947)*(cj15)*(px)))));
sj18array[0]=IKsin(j18array[0]);
cj18array[0]=IKcos(j18array[0]);
if( j18array[0] > IKPI )
{
    j18array[0]-=IK2PI;
}
else if( j18array[0] < -IKPI )
{    j18array[0]+=IK2PI;
}
j18valid[0] = true;
for(int ij18 = 0; ij18 < 1; ++ij18)
{
if( !j18valid[ij18] )
{
    continue;
}
j18 = j18array[ij18]; cj18 = cj18array[ij18]; sj18 = sj18array[ij18];

{
IKReal dummyeval[2];
IKReal x356=((2.49221183800623)*(cj18));
IKReal x357=(cj18)*(cj18);
IKReal x358=(cj17)*(cj17);
IKReal x359=(sj18)*(sj18);
IKReal x360=((x358)*(x359));
IKReal x361=((1.55277996137460)+(x357)+(x356)+(x360));
dummyeval[0]=x361;
dummyeval[1]=x361;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x362=((0.802500000000000)*(cj18));
IKReal x363=((1.00000000000000)+(x362));
IKReal x364=((10.0000000000000)*(py)*(sj15));
IKReal x365=((8.02500000000000)*(cj15)*(cj18)*(px));
IKReal x366=((8.02500000000000)*(cj18)*(py)*(sj15));
IKReal x367=((10.0000000000000)*(cj15)*(px));
IKReal x368=((8.02500000000000)*(cj17)*(pz)*(sj18));
IKReal x369=((x368)+(x364)+(x365)+(x366)+(x367));
IKReal x370=((((-1.00000000000000)*(x369)))+(x363));
dummyeval[0]=x370;
dummyeval[1]=x370;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x371=((10.0000000000000)*(cj15)*(cj17)*(px)*(sj18));
IKReal x372=((10.0000000000000)*(cj17)*(py)*(sj15)*(sj18));
IKReal x373=((x372)+(x371));
IKReal x374=((12.4610591900312)*(pz));
IKReal x375=((10.0000000000000)*(cj18)*(pz));
IKReal x376=((cj17)*(sj18));
IKReal x377=((x376)+(x375)+(x374));
IKReal x378=((((-1.00000000000000)*(x377)))+(x373));
dummyeval[0]=x378;
dummyeval[1]=x378;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x379=((py)*(sj15));
IKReal x380=((cj15)*(px));
IKReal x381=((x380)+(x379));
IKReal x382=((0.100000000000000)+(((-1.00000000000000)*(x381))));
IKReal x383=((0.321000000000000)*(cj18));
IKReal x384=((0.400000000000000)+(x383));
IKReal x385=((321.000000000000)*(cj17)*(sj18)*(x380));
IKReal x386=((321.000000000000)*(cj17)*(sj18)*(x379));
IKReal x387=((x386)+(x385));
IKReal x388=((32.1000000000000)*(cj17)*(sj18));
IKReal x389=((321.000000000000)*(cj18)*(pz));
IKReal x390=((400.000000000000)*(pz));
IKReal x391=((x388)+(x389)+(x390));
IKReal x392=((((-1.00000000000000)*(x391)))+(x387));
IKReal x393=((IKabs(x392) != 0)?((IKReal)1/(x392)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x393)*(((((1000.00000000000)*((x384)*(x384))))+(((-1000.00000000000)*((x382)*(x382))))))), ((x393)*(((((1000.00000000000)*(pz)*(x382)))+(((321.000000000000)*(cj17)*(sj18)*(x384)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x394=((0.321000000000000)*(cj18));
IKReal x395=((0.400000000000000)+(x394));
IKReal x396=((32.1000000000000)*(cj18));
IKReal x397=((40.0000000000000)+(x396));
IKReal x398=((321.000000000000)*(cj15)*(cj18)*(px));
IKReal x399=((400.000000000000)*(cj15)*(px));
IKReal x400=((400.000000000000)*(py)*(sj15));
IKReal x401=((321.000000000000)*(cj17)*(pz)*(sj18));
IKReal x402=((321.000000000000)*(cj18)*(py)*(sj15));
IKReal x403=((x399)+(x398)+(x401)+(x400)+(x402));
IKReal x404=((x397)+(((-1.00000000000000)*(x403))));
IKReal x405=((IKabs(x404) != 0)?((IKReal)1/(x404)):(IKReal)1.0e30);
j16array[0]=IKatan2(((x405)*(((((321.000000000000)*(cj17)*(sj18)*(x395)))+(((-1000.00000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj15)*(px)))+(((-1.00000000000000)*(py)*(sj15)))))))))), ((x405)*(((((-1000.00000000000)*((x395)*(x395))))+(((1000.00000000000)*((pz)*(pz))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
IKReal x406=(cj17)*(cj17);
IKReal x407=(sj18)*(sj18);
IKReal x408=((103041.000000000)*(x406)*(x407));
IKReal x409=(cj18)*(cj18);
IKReal x410=((103041.000000000)*(x409));
IKReal x411=((256800.000000000)*(cj18));
IKReal x412=((160000.000000000)+(x408)+(x410)+(x411));
IKReal x413=((IKabs(x412) != 0)?((IKReal)1/(x412)):(IKReal)1.0e30);
IKReal x414=((py)*(sj15));
IKReal x415=((cj15)*(px));
IKReal x416=((x414)+(x415));
IKReal x417=((0.100000000000000)+(((-1.00000000000000)*(x416))));
j16array[0]=IKatan2(((-1.00000000000000)*(x413)*(((((-321000.000000000)*(cj17)*(sj18)*(x417)))+(((1000000.00000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj18)))))))))), ((-1.00000000000000)*(x413)*(((((x417)*(((400000.000000000)+(((321000.000000000)*(cj18)))))))+(((321000.000000000)*(cj17)*(pz)*(sj18)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x38=((cj16)*(sj18));
IKReal x39=((cj17)*(cj18)*(sj16));
IKReal x40=((x39)+(x38));
IKReal x41=((-1.00000000000000)*(x40));
IKReal x42=((sj16)*(sj18));
IKReal x43=((cj16)*(cj17)*(cj18));
IKReal x44=((((-1.00000000000000)*(x43)))+(x42));
IKReal x45=((cj15)*(x41));
IKReal x46=((cj15)*(cj18)*(sj17));
IKReal x47=((sj15)*(x41));
IKReal x48=((x46)+(x47));
IKReal x49=((-1.00000000000000)*(cj18)*(sj15)*(sj17));
IKReal x50=((x49)+(x45));
IKReal x51=((cj15)*(sj16)*(sj17));
IKReal x52=((cj17)*(sj15));
IKReal x53=((x51)+(((-1.00000000000000)*(x52))));
IKReal x54=((sj15)*(sj16)*(sj17));
IKReal x55=((cj15)*(cj17));
IKReal x56=((x55)+(x54));
IKReal x57=((cj16)*(cj18));
IKReal x58=((cj17)*(x42));
IKReal x59=((x57)+(((-1.00000000000000)*(x58))));
IKReal x60=((cj18)*(sj16));
IKReal x61=((cj17)*(x38));
IKReal x62=((x60)+(x61));
IKReal x63=((-1.00000000000000)*(x62));
IKReal x64=((cj15)*(x59));
IKReal x65=((sj15)*(sj17)*(sj18));
IKReal x66=((x64)+(((-1.00000000000000)*(x65))));
IKReal x67=((cj15)*(sj17)*(sj18));
IKReal x68=((sj15)*(x59));
IKReal x69=((x67)+(x68));
new_r00=((((r20)*(x44)))+(((r10)*(x48)))+(((r00)*(x50))));
new_r01=((((r11)*(x48)))+(((r21)*(x44)))+(((r01)*(((((-1.00000000000000)*(cj18)*(sj15)*(sj17)))+(x45))))));
new_r02=((((r02)*(x50)))+(((r22)*(x44)))+(((r12)*(x48))));
new_r10=((((cj16)*(r20)*(sj17)))+(((r10)*(x56)))+(((r00)*(x53))));
new_r11=((((r11)*(x56)))+(((cj16)*(r21)*(sj17)))+(((r01)*(x53))));
new_r12=((((r02)*(x53)))+(((cj16)*(r22)*(sj17)))+(((r12)*(x56))));
new_r20=((((r10)*(x69)))+(((r20)*(x63)))+(((r00)*(x66))));
new_r21=((((r11)*(x69)))+(((r01)*(x66)))+(((r21)*(x63))));
new_r22=((((r22)*(x63)))+(((r02)*(x66)))+(((r12)*(x69))));
{
IKReal j20array[2], cj20array[2], sj20array[2];
bool j20valid[2]={false};
cj20array[0]=new_r22;
if( cj20array[0] >= -1.0001 && cj20array[0] <= 1.0001 )
{
    j20valid[0] = j20valid[1] = true;
    j20array[0] = IKacos(cj20array[0]);
    sj20array[0] = IKsin(j20array[0]);
    cj20array[1] = cj20array[0];
    j20array[1] = -j20array[0];
    sj20array[1] = -sj20array[0];
}
else if( isnan(cj20array[0]) )
{
    // probably any value will work
    j20valid[0] = true;
    cj20array[0] = 1; sj20array[0] = 0; j20array[0] = 0;
}
if( j20valid[0] && j20valid[1] && IKabs(cj20array[0]-cj20array[1]) < 0.0001 && IKabs(sj20array[0]-sj20array[1]) < 0.0001 )
{
    j20valid[1]=false;
}
for(int ij20 = 0; ij20 < 2; ++ij20)
{
if( !j20valid[ij20] )
{
    continue;
}
j20 = j20array[ij20]; cj20 = cj20array[ij20]; sj20 = sj20array[ij20];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r02)*(sj20)))+(((-1.00000000000000)*(new_r10)*(new_r12)*(sj20))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
IKReal x70=((-1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j20)), 6.28318530717959)));
evalcond[1]=x70;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x70;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
IKReal x71=IKatan2(new_r02, new_r12);
j19array[0]=((-1.00000000000000)*(x71));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.00000000000000)*(x71))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
if( j19valid[0] && j19valid[1] && IKabs(cj19array[0]-cj19array[1]) < 0.0001 && IKabs(sj19array[0]-sj19array[1]) < 0.0001 )
{
    j19valid[1]=false;
}
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j20, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j19array[2], cj19array[2], sj19array[2];
bool j19valid[2]={false};
IKReal x72=IKatan2(new_r02, new_r12);
j19array[0]=((-1.00000000000000)*(x72));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
j19array[1]=((3.14159265358979)+(((-1.00000000000000)*(x72))));
sj19array[1]=IKsin(j19array[1]);
cj19array[1]=IKcos(j19array[1]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
if( j19array[1] > IKPI )
{
    j19array[1]-=IK2PI;
}
else if( j19array[1] < -IKPI )
{    j19array[1]+=IK2PI;
}
j19valid[1] = true;
if( j19valid[0] && j19valid[1] && IKabs(cj19array[0]-cj19array[1]) < 0.0001 && IKabs(sj19array[0]-sj19array[1]) < 0.0001 )
{
    j19valid[1]=false;
}
for(int ij19 = 0; ij19 < 2; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x73=((new_r10)*(new_r12)*(sj20));
IKReal x74=((new_r00)*(new_r02)*(sj20));
IKReal x75=((x74)+(x73));
IKReal x76=((-1.00000000000000)*(x75));
IKReal x77=((IKabs(x76) != 0)?((IKReal)1/(x76)):(IKReal)1.0e30);
j19array[0]=IKatan2(((cj20)*(new_r12)*(new_r20)*(x77)), ((cj20)*(new_r02)*(new_r20)*(x77)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x78=((cj19)*(new_r12));
IKReal x79=((new_r02)*(sj19));
IKReal x80=((((-1.00000000000000)*(x79)))+(x78));
IKReal x81=((-1.00000000000000)+(new_r22));
IKReal x82=((cj19)*(new_r02));
IKReal x83=((new_r12)*(sj19));
IKReal x84=((x82)+(x83));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j20)), 6.28318530717959)));
evalcond[1]=x81;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x80;
evalcond[5]=x80;
evalcond[6]=x84;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x81;
evalcond[10]=x84;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x85=((cj19)*(new_r12));
IKReal x86=((new_r02)*(sj19));
IKReal x87=((x85)+(((-1.00000000000000)*(x86))));
IKReal x88=((cj19)*(new_r02));
IKReal x89=((new_r12)*(sj19));
IKReal x90=((x88)+(x89));
evalcond[0]=((-3.14159265358979)+(IKfmod(j20, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x87;
evalcond[5]=x87;
evalcond[6]=x90;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x90));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x91=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x91)), ((-1.00000000000000)*(new_r20)*(x91)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r00)*(sj19)))+(((cj19)*(new_r10)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((new_r21)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))), ((((cj19)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x92=(new_r12)*(new_r12);
IKReal x93=(new_r02)*(new_r02);
IKReal x94=((x93)+(x92));
IKReal x95=((IKabs(x94) != 0)?((IKReal)1/(x94)):(IKReal)1.0e30);
j19array[0]=IKatan2(((new_r12)*(sj20)*(x95)), ((new_r02)*(sj20)*(x95)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj20;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[11];
IKReal x96=((cj19)*(new_r12));
IKReal x97=((new_r02)*(sj19));
IKReal x98=((x96)+(((-1.00000000000000)*(x97))));
IKReal x99=((-1.00000000000000)+(new_r22));
IKReal x100=((cj19)*(new_r02));
IKReal x101=((new_r12)*(sj19));
IKReal x102=((x100)+(x101));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j20)), 6.28318530717959)));
evalcond[1]=x99;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x98;
evalcond[5]=x98;
evalcond[6]=x102;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x99;
evalcond[10]=x102;
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r01)))), ((((new_r10)*(sj19)))+(((cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x103=((cj19)*(new_r12));
IKReal x104=((new_r02)*(sj19));
IKReal x105=((((-1.00000000000000)*(x104)))+(x103));
IKReal x106=((cj19)*(new_r02));
IKReal x107=((new_r12)*(sj19));
IKReal x108=((x106)+(x107));
evalcond[0]=((-3.14159265358979)+(IKfmod(j20, 6.28318530717959)));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x105;
evalcond[5]=x105;
evalcond[6]=x108;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x108));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  && IKabs(evalcond[9]) < 0.0000100000000000  && IKabs(evalcond[10]) < 0.0000100000000000  )
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((cj19)*(new_r01)))+(((new_r11)*(sj19)))), ((((-1.00000000000000)*(new_r10)*(sj19)))+(((-1.00000000000000)*(cj19)*(new_r00)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x109=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x109)), ((-1.00000000000000)*(new_r20)*(x109)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((((-1.00000000000000)*(new_r00)*(sj19)))+(((cj19)*(new_r10)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
j21array[0]=IKatan2(((new_r21)*(((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30))), ((((cj19)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj19)))));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j21array[1], cj21array[1], sj21array[1];
bool j21valid[1]={false};
IKReal x110=((IKabs(sj20) != 0)?((IKReal)1/(sj20)):(IKReal)1.0e30);
j21array[0]=IKatan2(((new_r21)*(x110)), ((-1.00000000000000)*(new_r20)*(x110)));
sj21array[0]=IKsin(j21array[0]);
cj21array[0]=IKcos(j21array[0]);
if( j21array[0] > IKPI )
{
    j21array[0]-=IK2PI;
}
else if( j21array[0] < -IKPI )
{    j21array[0]+=IK2PI;
}
j21valid[0] = true;
for(int ij21 = 0; ij21 < 1; ++ij21)
{
if( !j21valid[ij21] )
{
    continue;
}
j21 = j21array[ij21]; cj21 = cj21array[ij21]; sj21 = sj21array[ij21];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x111=((new_r02)*(new_r11));
IKReal x112=((new_r01)*(new_r12));
IKReal x113=((((-1.00000000000000)*(x112)))+(x111));
IKReal x114=((IKabs(x113) != 0)?((IKReal)1/(x113)):(IKReal)1.0e30);
j19array[0]=IKatan2(((cj21)*(new_r12)*(x114)), ((cj21)*(new_r02)*(x114)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x115=((new_r02)*(new_r10));
IKReal x116=((new_r00)*(new_r12));
IKReal x117=((((-1.00000000000000)*(x116)))+(x115));
IKReal x118=((IKabs(x117) != 0)?((IKReal)1/(x117)):(IKReal)1.0e30);
j19array[0]=IKatan2(((new_r12)*(sj21)*(x118)), ((new_r02)*(sj21)*(x118)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j19array[1], cj19array[1], sj19array[1];
bool j19valid[1]={false};
IKReal x119=(new_r12)*(new_r12);
IKReal x120=(new_r02)*(new_r02);
IKReal x121=((x120)+(x119));
IKReal x122=((IKabs(x121) != 0)?((IKReal)1/(x121)):(IKReal)1.0e30);
j19array[0]=IKatan2(((new_r12)*(sj20)*(x122)), ((new_r02)*(sj20)*(x122)));
sj19array[0]=IKsin(j19array[0]);
cj19array[0]=IKcos(j19array[0]);
if( j19array[0] > IKPI )
{
    j19array[0]-=IK2PI;
}
else if( j19array[0] < -IKPI )
{    j19array[0]+=IK2PI;
}
j19valid[0] = true;
for(int ij19 = 0; ij19 < 1; ++ij19)
{
if( !j19valid[ij19] )
{
    continue;
}
j19 = j19array[ij19]; cj19 = cj19array[ij19]; sj19 = sj19array[ij19];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j15;
solution.basesol[1].foffset = j16;
solution.basesol[2].foffset = j17;
solution.basesol[3].foffset = j18;
solution.basesol[4].foffset = j19;
solution.basesol[5].foffset = j20;
solution.basesol[6].foffset = j21;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "c45a6ca7742b52feb0b51dbc6c01064f"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
